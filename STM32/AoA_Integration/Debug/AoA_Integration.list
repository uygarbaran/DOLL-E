
AoA_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800739c  0800739c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800739c  0800739c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a0  080073a0  000173a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080073a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000014  080073b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080073b8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d38  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022be  00000000  00000000  00031d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00034038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  00034f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001577e  00000000  00000000  00035d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113be  00000000  00000000  0004b47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6a4  00000000  00000000  0005c83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7ee0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000e7f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000014 	.word	0x20000014
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007228 	.word	0x08007228

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000018 	.word	0x20000018
 80000fc:	08007228 	.word	0x08007228

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f001 f99b 	bl	8001730 <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f001 f905 	bl	8001610 <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fd6c 	bl	8000eec <__aeabi_dsub>
 8000414:	f001 f8fc 	bl	8001610 <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_ddiv>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	4657      	mov	r7, sl
 800042c:	464e      	mov	r6, r9
 800042e:	4645      	mov	r5, r8
 8000430:	46de      	mov	lr, fp
 8000432:	b5e0      	push	{r5, r6, r7, lr}
 8000434:	4681      	mov	r9, r0
 8000436:	0005      	movs	r5, r0
 8000438:	030c      	lsls	r4, r1, #12
 800043a:	0048      	lsls	r0, r1, #1
 800043c:	4692      	mov	sl, r2
 800043e:	001f      	movs	r7, r3
 8000440:	b085      	sub	sp, #20
 8000442:	0b24      	lsrs	r4, r4, #12
 8000444:	0d40      	lsrs	r0, r0, #21
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	2800      	cmp	r0, #0
 800044a:	d100      	bne.n	800044e <__aeabi_ddiv+0x26>
 800044c:	e156      	b.n	80006fc <__aeabi_ddiv+0x2d4>
 800044e:	4bd4      	ldr	r3, [pc, #848]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000450:	4298      	cmp	r0, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x2e>
 8000454:	e172      	b.n	800073c <__aeabi_ddiv+0x314>
 8000456:	0f6b      	lsrs	r3, r5, #29
 8000458:	00e4      	lsls	r4, r4, #3
 800045a:	431c      	orrs	r4, r3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4323      	orrs	r3, r4
 8000462:	4698      	mov	r8, r3
 8000464:	4bcf      	ldr	r3, [pc, #828]	; (80007a4 <__aeabi_ddiv+0x37c>)
 8000466:	00ed      	lsls	r5, r5, #3
 8000468:	469b      	mov	fp, r3
 800046a:	2300      	movs	r3, #0
 800046c:	4699      	mov	r9, r3
 800046e:	4483      	add	fp, r0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	033c      	lsls	r4, r7, #12
 8000474:	007b      	lsls	r3, r7, #1
 8000476:	4650      	mov	r0, sl
 8000478:	0b24      	lsrs	r4, r4, #12
 800047a:	0d5b      	lsrs	r3, r3, #21
 800047c:	0fff      	lsrs	r7, r7, #31
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x5c>
 8000482:	e11f      	b.n	80006c4 <__aeabi_ddiv+0x29c>
 8000484:	4ac6      	ldr	r2, [pc, #792]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x64>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x32a>
 800048c:	49c5      	ldr	r1, [pc, #788]	; (80007a4 <__aeabi_ddiv+0x37c>)
 800048e:	0f42      	lsrs	r2, r0, #29
 8000490:	468c      	mov	ip, r1
 8000492:	00e4      	lsls	r4, r4, #3
 8000494:	4659      	mov	r1, fp
 8000496:	4314      	orrs	r4, r2
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	4463      	add	r3, ip
 800049c:	0412      	lsls	r2, r2, #16
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	4314      	orrs	r4, r2
 80004a2:	469b      	mov	fp, r3
 80004a4:	00c2      	lsls	r2, r0, #3
 80004a6:	2000      	movs	r0, #0
 80004a8:	0033      	movs	r3, r6
 80004aa:	407b      	eors	r3, r7
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d827      	bhi.n	8000504 <__aeabi_ddiv+0xdc>
 80004b4:	49bc      	ldr	r1, [pc, #752]	; (80007a8 <__aeabi_ddiv+0x380>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58cb      	ldr	r3, [r1, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	46b2      	mov	sl, r6
 80004be:	9b00      	ldr	r3, [sp, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d016      	beq.n	80004f2 <__aeabi_ddiv+0xca>
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xa2>
 80004c8:	e28e      	b.n	80009e8 <__aeabi_ddiv+0x5c0>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d000      	beq.n	80004d0 <__aeabi_ddiv+0xa8>
 80004ce:	e0d9      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2400      	movs	r4, #0
 80004d4:	2500      	movs	r5, #0
 80004d6:	4652      	mov	r2, sl
 80004d8:	051b      	lsls	r3, r3, #20
 80004da:	4323      	orrs	r3, r4
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b005      	add	sp, #20
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	4baa      	ldr	r3, [pc, #680]	; (80007a0 <__aeabi_ddiv+0x378>)
 80004f8:	e7ed      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80004fa:	46ba      	mov	sl, r7
 80004fc:	46a0      	mov	r8, r4
 80004fe:	0015      	movs	r5, r2
 8000500:	9000      	str	r0, [sp, #0]
 8000502:	e7dc      	b.n	80004be <__aeabi_ddiv+0x96>
 8000504:	4544      	cmp	r4, r8
 8000506:	d200      	bcs.n	800050a <__aeabi_ddiv+0xe2>
 8000508:	e1c7      	b.n	800089a <__aeabi_ddiv+0x472>
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe6>
 800050c:	e1c2      	b.n	8000894 <__aeabi_ddiv+0x46c>
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	469c      	mov	ip, r3
 8000514:	002e      	movs	r6, r5
 8000516:	4640      	mov	r0, r8
 8000518:	2500      	movs	r5, #0
 800051a:	44e3      	add	fp, ip
 800051c:	0223      	lsls	r3, r4, #8
 800051e:	0e14      	lsrs	r4, r2, #24
 8000520:	431c      	orrs	r4, r3
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4699      	mov	r9, r3
 8000526:	0423      	lsls	r3, r4, #16
 8000528:	0c1f      	lsrs	r7, r3, #16
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	4649      	mov	r1, r9
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9701      	str	r7, [sp, #4]
 8000532:	f7ff fe6b 	bl	800020c <__aeabi_uidivmod>
 8000536:	0002      	movs	r2, r0
 8000538:	437a      	muls	r2, r7
 800053a:	040b      	lsls	r3, r1, #16
 800053c:	0c31      	lsrs	r1, r6, #16
 800053e:	4680      	mov	r8, r0
 8000540:	4319      	orrs	r1, r3
 8000542:	428a      	cmp	r2, r1
 8000544:	d907      	bls.n	8000556 <__aeabi_ddiv+0x12e>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	1909      	adds	r1, r1, r4
 800054e:	44e0      	add	r8, ip
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x12e>
 8000554:	e207      	b.n	8000966 <__aeabi_ddiv+0x53e>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4649      	mov	r1, r9
 800055a:	f7ff fe57 	bl	800020c <__aeabi_uidivmod>
 800055e:	0409      	lsls	r1, r1, #16
 8000560:	468c      	mov	ip, r1
 8000562:	0431      	lsls	r1, r6, #16
 8000564:	4666      	mov	r6, ip
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	0c09      	lsrs	r1, r1, #16
 800056a:	4342      	muls	r2, r0
 800056c:	0003      	movs	r3, r0
 800056e:	4331      	orrs	r1, r6
 8000570:	428a      	cmp	r2, r1
 8000572:	d904      	bls.n	800057e <__aeabi_ddiv+0x156>
 8000574:	1909      	adds	r1, r1, r4
 8000576:	3b01      	subs	r3, #1
 8000578:	428c      	cmp	r4, r1
 800057a:	d800      	bhi.n	800057e <__aeabi_ddiv+0x156>
 800057c:	e1ed      	b.n	800095a <__aeabi_ddiv+0x532>
 800057e:	1a88      	subs	r0, r1, r2
 8000580:	4642      	mov	r2, r8
 8000582:	0412      	lsls	r2, r2, #16
 8000584:	431a      	orrs	r2, r3
 8000586:	4690      	mov	r8, r2
 8000588:	4641      	mov	r1, r8
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	040e      	lsls	r6, r1, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	001f      	movs	r7, r3
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	0c36      	lsrs	r6, r6, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c19      	lsrs	r1, r3, #16
 800059c:	000b      	movs	r3, r1
 800059e:	4373      	muls	r3, r6
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	437e      	muls	r6, r7
 80005a4:	9103      	str	r1, [sp, #12]
 80005a6:	4351      	muls	r1, r2
 80005a8:	437a      	muls	r2, r7
 80005aa:	0c1f      	lsrs	r7, r3, #16
 80005ac:	46bc      	mov	ip, r7
 80005ae:	1876      	adds	r6, r6, r1
 80005b0:	4466      	add	r6, ip
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	d903      	bls.n	80005be <__aeabi_ddiv+0x196>
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	468c      	mov	ip, r1
 80005bc:	4462      	add	r2, ip
 80005be:	0c31      	lsrs	r1, r6, #16
 80005c0:	188a      	adds	r2, r1, r2
 80005c2:	0431      	lsls	r1, r6, #16
 80005c4:	041e      	lsls	r6, r3, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	198e      	adds	r6, r1, r6
 80005ca:	4290      	cmp	r0, r2
 80005cc:	d302      	bcc.n	80005d4 <__aeabi_ddiv+0x1ac>
 80005ce:	d112      	bne.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	d210      	bcs.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d4:	4643      	mov	r3, r8
 80005d6:	1e59      	subs	r1, r3, #1
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	001f      	movs	r7, r3
 80005e0:	429d      	cmp	r5, r3
 80005e2:	419b      	sbcs	r3, r3
 80005e4:	425b      	negs	r3, r3
 80005e6:	191b      	adds	r3, r3, r4
 80005e8:	18c0      	adds	r0, r0, r3
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d200      	bcs.n	80005f0 <__aeabi_ddiv+0x1c8>
 80005ee:	e1a0      	b.n	8000932 <__aeabi_ddiv+0x50a>
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0x1cc>
 80005f2:	e19b      	b.n	800092c <__aeabi_ddiv+0x504>
 80005f4:	4688      	mov	r8, r1
 80005f6:	1bae      	subs	r6, r5, r6
 80005f8:	42b5      	cmp	r5, r6
 80005fa:	41ad      	sbcs	r5, r5
 80005fc:	1a80      	subs	r0, r0, r2
 80005fe:	426d      	negs	r5, r5
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1e0>
 8000606:	e1d5      	b.n	80009b4 <__aeabi_ddiv+0x58c>
 8000608:	4649      	mov	r1, r9
 800060a:	f7ff fdff 	bl	800020c <__aeabi_uidivmod>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	040b      	lsls	r3, r1, #16
 8000612:	4342      	muls	r2, r0
 8000614:	0c31      	lsrs	r1, r6, #16
 8000616:	0005      	movs	r5, r0
 8000618:	4319      	orrs	r1, r3
 800061a:	428a      	cmp	r2, r1
 800061c:	d900      	bls.n	8000620 <__aeabi_ddiv+0x1f8>
 800061e:	e16c      	b.n	80008fa <__aeabi_ddiv+0x4d2>
 8000620:	1a88      	subs	r0, r1, r2
 8000622:	4649      	mov	r1, r9
 8000624:	f7ff fdf2 	bl	800020c <__aeabi_uidivmod>
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	0436      	lsls	r6, r6, #16
 800062c:	4342      	muls	r2, r0
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	0c36      	lsrs	r6, r6, #16
 8000632:	0003      	movs	r3, r0
 8000634:	430e      	orrs	r6, r1
 8000636:	42b2      	cmp	r2, r6
 8000638:	d900      	bls.n	800063c <__aeabi_ddiv+0x214>
 800063a:	e153      	b.n	80008e4 <__aeabi_ddiv+0x4bc>
 800063c:	9803      	ldr	r0, [sp, #12]
 800063e:	1ab6      	subs	r6, r6, r2
 8000640:	0002      	movs	r2, r0
 8000642:	042d      	lsls	r5, r5, #16
 8000644:	431d      	orrs	r5, r3
 8000646:	9f02      	ldr	r7, [sp, #8]
 8000648:	042b      	lsls	r3, r5, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	435a      	muls	r2, r3
 800064e:	437b      	muls	r3, r7
 8000650:	469c      	mov	ip, r3
 8000652:	0c29      	lsrs	r1, r5, #16
 8000654:	4348      	muls	r0, r1
 8000656:	0c13      	lsrs	r3, r2, #16
 8000658:	4484      	add	ip, r0
 800065a:	4463      	add	r3, ip
 800065c:	4379      	muls	r1, r7
 800065e:	4298      	cmp	r0, r3
 8000660:	d903      	bls.n	800066a <__aeabi_ddiv+0x242>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0240      	lsls	r0, r0, #9
 8000666:	4684      	mov	ip, r0
 8000668:	4461      	add	r1, ip
 800066a:	0c18      	lsrs	r0, r3, #16
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	1841      	adds	r1, r0, r1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	428e      	cmp	r6, r1
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x254>
 800067a:	e0ff      	b.n	800087c <__aeabi_ddiv+0x454>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x258>
 800067e:	e0fa      	b.n	8000876 <__aeabi_ddiv+0x44e>
 8000680:	2301      	movs	r3, #1
 8000682:	431d      	orrs	r5, r3
 8000684:	4a49      	ldr	r2, [pc, #292]	; (80007ac <__aeabi_ddiv+0x384>)
 8000686:	445a      	add	r2, fp
 8000688:	2a00      	cmp	r2, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_ddiv+0x266>
 800068c:	e0aa      	b.n	80007e4 <__aeabi_ddiv+0x3bc>
 800068e:	076b      	lsls	r3, r5, #29
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0x26c>
 8000692:	e13d      	b.n	8000910 <__aeabi_ddiv+0x4e8>
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	4643      	mov	r3, r8
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	d506      	bpl.n	80006aa <__aeabi_ddiv+0x282>
 800069c:	4642      	mov	r2, r8
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <__aeabi_ddiv+0x388>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	4690      	mov	r8, r2
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	445a      	add	r2, fp
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <__aeabi_ddiv+0x38c>)
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_ddiv+0x28a>
 80006b0:	e71f      	b.n	80004f2 <__aeabi_ddiv+0xca>
 80006b2:	4643      	mov	r3, r8
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	431d      	orrs	r5, r3
 80006b8:	4643      	mov	r3, r8
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	025c      	lsls	r4, r3, #9
 80006be:	0b24      	lsrs	r4, r4, #12
 80006c0:	0d53      	lsrs	r3, r2, #21
 80006c2:	e708      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4322      	orrs	r2, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_ddiv+0x2a4>
 80006ca:	e07b      	b.n	80007c4 <__aeabi_ddiv+0x39c>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x2aa>
 80006d0:	e0fa      	b.n	80008c8 <__aeabi_ddiv+0x4a0>
 80006d2:	0020      	movs	r0, r4
 80006d4:	f001 f836 	bl	8001744 <__clzsi2>
 80006d8:	0002      	movs	r2, r0
 80006da:	3a0b      	subs	r2, #11
 80006dc:	231d      	movs	r3, #29
 80006de:	0001      	movs	r1, r0
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	4652      	mov	r2, sl
 80006e4:	3908      	subs	r1, #8
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	408c      	lsls	r4, r1
 80006ea:	4314      	orrs	r4, r2
 80006ec:	4652      	mov	r2, sl
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_ddiv+0x390>)
 80006f2:	4458      	add	r0, fp
 80006f4:	469b      	mov	fp, r3
 80006f6:	4483      	add	fp, r0
 80006f8:	2000      	movs	r0, #0
 80006fa:	e6d5      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80006fc:	464b      	mov	r3, r9
 80006fe:	4323      	orrs	r3, r4
 8000700:	4698      	mov	r8, r3
 8000702:	d044      	beq.n	800078e <__aeabi_ddiv+0x366>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_ddiv+0x2e2>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_ddiv+0x480>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 f81a 	bl	8001744 <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	0002      	movs	r2, r0
 8000714:	390b      	subs	r1, #11
 8000716:	231d      	movs	r3, #29
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	4649      	mov	r1, r9
 800071c:	0010      	movs	r0, r2
 800071e:	40d9      	lsrs	r1, r3
 8000720:	3808      	subs	r0, #8
 8000722:	4084      	lsls	r4, r0
 8000724:	000b      	movs	r3, r1
 8000726:	464d      	mov	r5, r9
 8000728:	4323      	orrs	r3, r4
 800072a:	4698      	mov	r8, r3
 800072c:	4085      	lsls	r5, r0
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <__aeabi_ddiv+0x394>)
 8000730:	1a83      	subs	r3, r0, r2
 8000732:	469b      	mov	fp, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4699      	mov	r9, r3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	e69a      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800073c:	464b      	mov	r3, r9
 800073e:	4323      	orrs	r3, r4
 8000740:	4698      	mov	r8, r3
 8000742:	d11d      	bne.n	8000780 <__aeabi_ddiv+0x358>
 8000744:	2308      	movs	r3, #8
 8000746:	4699      	mov	r9, r3
 8000748:	3b06      	subs	r3, #6
 800074a:	2500      	movs	r5, #0
 800074c:	4683      	mov	fp, r0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e68f      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000752:	4652      	mov	r2, sl
 8000754:	4322      	orrs	r2, r4
 8000756:	d109      	bne.n	800076c <__aeabi_ddiv+0x344>
 8000758:	2302      	movs	r3, #2
 800075a:	4649      	mov	r1, r9
 800075c:	4319      	orrs	r1, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000760:	4689      	mov	r9, r1
 8000762:	469c      	mov	ip, r3
 8000764:	2400      	movs	r4, #0
 8000766:	2002      	movs	r0, #2
 8000768:	44e3      	add	fp, ip
 800076a:	e69d      	b.n	80004a8 <__aeabi_ddiv+0x80>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000774:	4691      	mov	r9, r2
 8000776:	469c      	mov	ip, r3
 8000778:	4652      	mov	r2, sl
 800077a:	2003      	movs	r0, #3
 800077c:	44e3      	add	fp, ip
 800077e:	e693      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	46a0      	mov	r8, r4
 8000788:	4683      	mov	fp, r0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e671      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800078e:	2304      	movs	r3, #4
 8000790:	4699      	mov	r9, r3
 8000792:	2300      	movs	r3, #0
 8000794:	469b      	mov	fp, r3
 8000796:	3301      	adds	r3, #1
 8000798:	2500      	movs	r5, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	e669      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	fffffc01 	.word	0xfffffc01
 80007a8:	08007240 	.word	0x08007240
 80007ac:	000003ff 	.word	0x000003ff
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	000007fe 	.word	0x000007fe
 80007b8:	000003f3 	.word	0x000003f3
 80007bc:	fffffc0d 	.word	0xfffffc0d
 80007c0:	fffff801 	.word	0xfffff801
 80007c4:	4649      	mov	r1, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4689      	mov	r9, r1
 80007cc:	2400      	movs	r4, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	e66a      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	469a      	mov	sl, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4b8a      	ldr	r3, [pc, #552]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80007dc:	0324      	lsls	r4, r4, #12
 80007de:	e67a      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80007e0:	2501      	movs	r5, #1
 80007e2:	426d      	negs	r5, r5
 80007e4:	2301      	movs	r3, #1
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2b38      	cmp	r3, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_ddiv+0x3c6>
 80007ec:	e670      	b.n	80004d0 <__aeabi_ddiv+0xa8>
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x3cc>
 80007f2:	e0bf      	b.n	8000974 <__aeabi_ddiv+0x54c>
 80007f4:	211f      	movs	r1, #31
 80007f6:	4249      	negs	r1, r1
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	4641      	mov	r1, r8
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	2b20      	cmp	r3, #32
 8000802:	d004      	beq.n	800080e <__aeabi_ddiv+0x3e6>
 8000804:	4641      	mov	r1, r8
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <__aeabi_ddiv+0x5e0>)
 8000808:	445b      	add	r3, fp
 800080a:	4099      	lsls	r1, r3
 800080c:	430d      	orrs	r5, r1
 800080e:	1e6b      	subs	r3, r5, #1
 8000810:	419d      	sbcs	r5, r3
 8000812:	2307      	movs	r3, #7
 8000814:	432a      	orrs	r2, r5
 8000816:	001d      	movs	r5, r3
 8000818:	2400      	movs	r4, #0
 800081a:	4015      	ands	r5, r2
 800081c:	4213      	tst	r3, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_ddiv+0x3fa>
 8000820:	e0d4      	b.n	80009cc <__aeabi_ddiv+0x5a4>
 8000822:	210f      	movs	r1, #15
 8000824:	2300      	movs	r3, #0
 8000826:	4011      	ands	r1, r2
 8000828:	2904      	cmp	r1, #4
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0x406>
 800082c:	e0cb      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 800082e:	1d11      	adds	r1, r2, #4
 8000830:	4291      	cmp	r1, r2
 8000832:	4192      	sbcs	r2, r2
 8000834:	4252      	negs	r2, r2
 8000836:	189b      	adds	r3, r3, r2
 8000838:	000a      	movs	r2, r1
 800083a:	0219      	lsls	r1, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_ddiv+0x418>
 800083e:	e0c2      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 8000840:	2301      	movs	r3, #1
 8000842:	2400      	movs	r4, #0
 8000844:	2500      	movs	r5, #0
 8000846:	e646      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	4641      	mov	r1, r8
 800084c:	031b      	lsls	r3, r3, #12
 800084e:	4219      	tst	r1, r3
 8000850:	d008      	beq.n	8000864 <__aeabi_ddiv+0x43c>
 8000852:	421c      	tst	r4, r3
 8000854:	d106      	bne.n	8000864 <__aeabi_ddiv+0x43c>
 8000856:	431c      	orrs	r4, r3
 8000858:	0324      	lsls	r4, r4, #12
 800085a:	46ba      	mov	sl, r7
 800085c:	0015      	movs	r5, r2
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000860:	0b24      	lsrs	r4, r4, #12
 8000862:	e638      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	4643      	mov	r3, r8
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	431c      	orrs	r4, r3
 800086c:	0324      	lsls	r4, r4, #12
 800086e:	46b2      	mov	sl, r6
 8000870:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000872:	0b24      	lsrs	r4, r4, #12
 8000874:	e62f      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <__aeabi_ddiv+0x454>
 800087a:	e703      	b.n	8000684 <__aeabi_ddiv+0x25c>
 800087c:	19a6      	adds	r6, r4, r6
 800087e:	1e68      	subs	r0, r5, #1
 8000880:	42a6      	cmp	r6, r4
 8000882:	d200      	bcs.n	8000886 <__aeabi_ddiv+0x45e>
 8000884:	e08d      	b.n	80009a2 <__aeabi_ddiv+0x57a>
 8000886:	428e      	cmp	r6, r1
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x464>
 800088a:	e0a3      	b.n	80009d4 <__aeabi_ddiv+0x5ac>
 800088c:	d100      	bne.n	8000890 <__aeabi_ddiv+0x468>
 800088e:	e0b3      	b.n	80009f8 <__aeabi_ddiv+0x5d0>
 8000890:	0005      	movs	r5, r0
 8000892:	e6f5      	b.n	8000680 <__aeabi_ddiv+0x258>
 8000894:	42aa      	cmp	r2, r5
 8000896:	d900      	bls.n	800089a <__aeabi_ddiv+0x472>
 8000898:	e639      	b.n	800050e <__aeabi_ddiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	07de      	lsls	r6, r3, #31
 800089e:	0858      	lsrs	r0, r3, #1
 80008a0:	086b      	lsrs	r3, r5, #1
 80008a2:	431e      	orrs	r6, r3
 80008a4:	07ed      	lsls	r5, r5, #31
 80008a6:	e639      	b.n	800051c <__aeabi_ddiv+0xf4>
 80008a8:	4648      	mov	r0, r9
 80008aa:	f000 ff4b 	bl	8001744 <__clzsi2>
 80008ae:	0001      	movs	r1, r0
 80008b0:	0002      	movs	r2, r0
 80008b2:	3115      	adds	r1, #21
 80008b4:	3220      	adds	r2, #32
 80008b6:	291c      	cmp	r1, #28
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_ddiv+0x494>
 80008ba:	e72c      	b.n	8000716 <__aeabi_ddiv+0x2ee>
 80008bc:	464b      	mov	r3, r9
 80008be:	3808      	subs	r0, #8
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2500      	movs	r5, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	e732      	b.n	800072e <__aeabi_ddiv+0x306>
 80008c8:	f000 ff3c 	bl	8001744 <__clzsi2>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	3215      	adds	r2, #21
 80008d2:	3020      	adds	r0, #32
 80008d4:	2a1c      	cmp	r2, #28
 80008d6:	dc00      	bgt.n	80008da <__aeabi_ddiv+0x4b2>
 80008d8:	e700      	b.n	80006dc <__aeabi_ddiv+0x2b4>
 80008da:	4654      	mov	r4, sl
 80008dc:	3b08      	subs	r3, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	409c      	lsls	r4, r3
 80008e2:	e705      	b.n	80006f0 <__aeabi_ddiv+0x2c8>
 80008e4:	1936      	adds	r6, r6, r4
 80008e6:	3b01      	subs	r3, #1
 80008e8:	42b4      	cmp	r4, r6
 80008ea:	d900      	bls.n	80008ee <__aeabi_ddiv+0x4c6>
 80008ec:	e6a6      	b.n	800063c <__aeabi_ddiv+0x214>
 80008ee:	42b2      	cmp	r2, r6
 80008f0:	d800      	bhi.n	80008f4 <__aeabi_ddiv+0x4cc>
 80008f2:	e6a3      	b.n	800063c <__aeabi_ddiv+0x214>
 80008f4:	1e83      	subs	r3, r0, #2
 80008f6:	1936      	adds	r6, r6, r4
 80008f8:	e6a0      	b.n	800063c <__aeabi_ddiv+0x214>
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	3d01      	subs	r5, #1
 80008fe:	428c      	cmp	r4, r1
 8000900:	d900      	bls.n	8000904 <__aeabi_ddiv+0x4dc>
 8000902:	e68d      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000904:	428a      	cmp	r2, r1
 8000906:	d800      	bhi.n	800090a <__aeabi_ddiv+0x4e2>
 8000908:	e68a      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 800090a:	1e85      	subs	r5, r0, #2
 800090c:	1909      	adds	r1, r1, r4
 800090e:	e687      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000910:	230f      	movs	r3, #15
 8000912:	402b      	ands	r3, r5
 8000914:	2b04      	cmp	r3, #4
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x4f2>
 8000918:	e6bc      	b.n	8000694 <__aeabi_ddiv+0x26c>
 800091a:	2305      	movs	r3, #5
 800091c:	425b      	negs	r3, r3
 800091e:	42ab      	cmp	r3, r5
 8000920:	419b      	sbcs	r3, r3
 8000922:	3504      	adds	r5, #4
 8000924:	425b      	negs	r3, r3
 8000926:	08ed      	lsrs	r5, r5, #3
 8000928:	4498      	add	r8, r3
 800092a:	e6b4      	b.n	8000696 <__aeabi_ddiv+0x26e>
 800092c:	42af      	cmp	r7, r5
 800092e:	d900      	bls.n	8000932 <__aeabi_ddiv+0x50a>
 8000930:	e660      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000932:	4282      	cmp	r2, r0
 8000934:	d804      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 8000936:	d000      	beq.n	800093a <__aeabi_ddiv+0x512>
 8000938:	e65c      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 800093a:	42ae      	cmp	r6, r5
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 800093e:	e659      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000940:	2302      	movs	r3, #2
 8000942:	425b      	negs	r3, r3
 8000944:	469c      	mov	ip, r3
 8000946:	9b00      	ldr	r3, [sp, #0]
 8000948:	44e0      	add	r8, ip
 800094a:	469c      	mov	ip, r3
 800094c:	4465      	add	r5, ip
 800094e:	429d      	cmp	r5, r3
 8000950:	419b      	sbcs	r3, r3
 8000952:	425b      	negs	r3, r3
 8000954:	191b      	adds	r3, r3, r4
 8000956:	18c0      	adds	r0, r0, r3
 8000958:	e64d      	b.n	80005f6 <__aeabi_ddiv+0x1ce>
 800095a:	428a      	cmp	r2, r1
 800095c:	d800      	bhi.n	8000960 <__aeabi_ddiv+0x538>
 800095e:	e60e      	b.n	800057e <__aeabi_ddiv+0x156>
 8000960:	1e83      	subs	r3, r0, #2
 8000962:	1909      	adds	r1, r1, r4
 8000964:	e60b      	b.n	800057e <__aeabi_ddiv+0x156>
 8000966:	428a      	cmp	r2, r1
 8000968:	d800      	bhi.n	800096c <__aeabi_ddiv+0x544>
 800096a:	e5f4      	b.n	8000556 <__aeabi_ddiv+0x12e>
 800096c:	1e83      	subs	r3, r0, #2
 800096e:	4698      	mov	r8, r3
 8000970:	1909      	adds	r1, r1, r4
 8000972:	e5f0      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000974:	4925      	ldr	r1, [pc, #148]	; (8000a0c <__aeabi_ddiv+0x5e4>)
 8000976:	0028      	movs	r0, r5
 8000978:	4459      	add	r1, fp
 800097a:	408d      	lsls	r5, r1
 800097c:	4642      	mov	r2, r8
 800097e:	408a      	lsls	r2, r1
 8000980:	1e69      	subs	r1, r5, #1
 8000982:	418d      	sbcs	r5, r1
 8000984:	4641      	mov	r1, r8
 8000986:	40d8      	lsrs	r0, r3
 8000988:	40d9      	lsrs	r1, r3
 800098a:	4302      	orrs	r2, r0
 800098c:	432a      	orrs	r2, r5
 800098e:	000b      	movs	r3, r1
 8000990:	0751      	lsls	r1, r2, #29
 8000992:	d100      	bne.n	8000996 <__aeabi_ddiv+0x56e>
 8000994:	e751      	b.n	800083a <__aeabi_ddiv+0x412>
 8000996:	210f      	movs	r1, #15
 8000998:	4011      	ands	r1, r2
 800099a:	2904      	cmp	r1, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0x578>
 800099e:	e746      	b.n	800082e <__aeabi_ddiv+0x406>
 80009a0:	e74b      	b.n	800083a <__aeabi_ddiv+0x412>
 80009a2:	0005      	movs	r5, r0
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x582>
 80009a8:	e66a      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009aa:	9a00      	ldr	r2, [sp, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d000      	beq.n	80009b2 <__aeabi_ddiv+0x58a>
 80009b0:	e666      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009b2:	e667      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <__aeabi_ddiv+0x5e8>)
 80009b6:	445a      	add	r2, fp
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_ddiv+0x596>
 80009bc:	e710      	b.n	80007e0 <__aeabi_ddiv+0x3b8>
 80009be:	2301      	movs	r3, #1
 80009c0:	2500      	movs	r5, #0
 80009c2:	4498      	add	r8, r3
 80009c4:	e667      	b.n	8000696 <__aeabi_ddiv+0x26e>
 80009c6:	075d      	lsls	r5, r3, #29
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	0b1c      	lsrs	r4, r3, #12
 80009cc:	08d2      	lsrs	r2, r2, #3
 80009ce:	2300      	movs	r3, #0
 80009d0:	4315      	orrs	r5, r2
 80009d2:	e580      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009d4:	9800      	ldr	r0, [sp, #0]
 80009d6:	3d02      	subs	r5, #2
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	4282      	cmp	r2, r0
 80009dc:	41bf      	sbcs	r7, r7
 80009de:	427f      	negs	r7, r7
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	1936      	adds	r6, r6, r4
 80009e4:	9200      	str	r2, [sp, #0]
 80009e6:	e7dd      	b.n	80009a4 <__aeabi_ddiv+0x57c>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	4643      	mov	r3, r8
 80009ec:	0324      	lsls	r4, r4, #12
 80009ee:	431c      	orrs	r4, r3
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80009f4:	0b24      	lsrs	r4, r4, #12
 80009f6:	e56e      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3ea      	bcc.n	80009d4 <__aeabi_ddiv+0x5ac>
 80009fe:	0005      	movs	r5, r0
 8000a00:	e7d3      	b.n	80009aa <__aeabi_ddiv+0x582>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	0000043e 	.word	0x0000043e
 8000a0c:	0000041e 	.word	0x0000041e
 8000a10:	000003ff 	.word	0x000003ff

08000a14 <__aeabi_dmul>:
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	4657      	mov	r7, sl
 8000a18:	464e      	mov	r6, r9
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	46de      	mov	lr, fp
 8000a1e:	b5e0      	push	{r5, r6, r7, lr}
 8000a20:	4698      	mov	r8, r3
 8000a22:	030c      	lsls	r4, r1, #12
 8000a24:	004b      	lsls	r3, r1, #1
 8000a26:	0006      	movs	r6, r0
 8000a28:	4692      	mov	sl, r2
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	0b24      	lsrs	r4, r4, #12
 8000a2e:	0d5b      	lsrs	r3, r3, #21
 8000a30:	0fcf      	lsrs	r7, r1, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dmul+0x24>
 8000a36:	e15c      	b.n	8000cf2 <__aeabi_dmul+0x2de>
 8000a38:	4ad9      	ldr	r2, [pc, #868]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dmul+0x2c>
 8000a3e:	e175      	b.n	8000d2c <__aeabi_dmul+0x318>
 8000a40:	0f42      	lsrs	r2, r0, #29
 8000a42:	00e4      	lsls	r4, r4, #3
 8000a44:	4314      	orrs	r4, r2
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0412      	lsls	r2, r2, #16
 8000a4a:	4314      	orrs	r4, r2
 8000a4c:	4ad5      	ldr	r2, [pc, #852]	; (8000da4 <__aeabi_dmul+0x390>)
 8000a4e:	00c5      	lsls	r5, r0, #3
 8000a50:	4694      	mov	ip, r2
 8000a52:	4463      	add	r3, ip
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	4699      	mov	r9, r3
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	4642      	mov	r2, r8
 8000a60:	031e      	lsls	r6, r3, #12
 8000a62:	0fd2      	lsrs	r2, r2, #31
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4650      	mov	r0, sl
 8000a68:	4690      	mov	r8, r2
 8000a6a:	0b36      	lsrs	r6, r6, #12
 8000a6c:	0d5b      	lsrs	r3, r3, #21
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dmul+0x5e>
 8000a70:	e120      	b.n	8000cb4 <__aeabi_dmul+0x2a0>
 8000a72:	4acb      	ldr	r2, [pc, #812]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dmul+0x66>
 8000a78:	e162      	b.n	8000d40 <__aeabi_dmul+0x32c>
 8000a7a:	49ca      	ldr	r1, [pc, #808]	; (8000da4 <__aeabi_dmul+0x390>)
 8000a7c:	0f42      	lsrs	r2, r0, #29
 8000a7e:	468c      	mov	ip, r1
 8000a80:	9900      	ldr	r1, [sp, #0]
 8000a82:	4463      	add	r3, ip
 8000a84:	00f6      	lsls	r6, r6, #3
 8000a86:	468c      	mov	ip, r1
 8000a88:	4316      	orrs	r6, r2
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	449c      	add	ip, r3
 8000a8e:	0412      	lsls	r2, r2, #16
 8000a90:	4663      	mov	r3, ip
 8000a92:	4316      	orrs	r6, r2
 8000a94:	00c2      	lsls	r2, r0, #3
 8000a96:	2000      	movs	r0, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	9900      	ldr	r1, [sp, #0]
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	3101      	adds	r1, #1
 8000aa0:	468c      	mov	ip, r1
 8000aa2:	4649      	mov	r1, r9
 8000aa4:	407b      	eors	r3, r7
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	290f      	cmp	r1, #15
 8000aaa:	d826      	bhi.n	8000afa <__aeabi_dmul+0xe6>
 8000aac:	4bbe      	ldr	r3, [pc, #760]	; (8000da8 <__aeabi_dmul+0x394>)
 8000aae:	0089      	lsls	r1, r1, #2
 8000ab0:	5859      	ldr	r1, [r3, r1]
 8000ab2:	468f      	mov	pc, r1
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	0034      	movs	r4, r6
 8000aba:	0015      	movs	r5, r2
 8000abc:	4683      	mov	fp, r0
 8000abe:	465b      	mov	r3, fp
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d016      	beq.n	8000af2 <__aeabi_dmul+0xde>
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dmul+0xb6>
 8000ac8:	e203      	b.n	8000ed2 <__aeabi_dmul+0x4be>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dmul+0xbc>
 8000ace:	e0cd      	b.n	8000c6c <__aeabi_dmul+0x258>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	9b01      	ldr	r3, [sp, #4]
 8000ad8:	0512      	lsls	r2, r2, #20
 8000ada:	4322      	orrs	r2, r4
 8000adc:	07db      	lsls	r3, r3, #31
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	b007      	add	sp, #28
 8000ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae8:	46bb      	mov	fp, r7
 8000aea:	46b2      	mov	sl, r6
 8000aec:	46a9      	mov	r9, r5
 8000aee:	46a0      	mov	r8, r4
 8000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af2:	2400      	movs	r4, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	4aaa      	ldr	r2, [pc, #680]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000af8:	e7ed      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000afa:	0c28      	lsrs	r0, r5, #16
 8000afc:	042d      	lsls	r5, r5, #16
 8000afe:	0c2d      	lsrs	r5, r5, #16
 8000b00:	002b      	movs	r3, r5
 8000b02:	0c11      	lsrs	r1, r2, #16
 8000b04:	0412      	lsls	r2, r2, #16
 8000b06:	0c12      	lsrs	r2, r2, #16
 8000b08:	4353      	muls	r3, r2
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	002f      	movs	r7, r5
 8000b10:	4343      	muls	r3, r0
 8000b12:	4699      	mov	r9, r3
 8000b14:	434f      	muls	r7, r1
 8000b16:	444f      	add	r7, r9
 8000b18:	46bb      	mov	fp, r7
 8000b1a:	4647      	mov	r7, r8
 8000b1c:	000b      	movs	r3, r1
 8000b1e:	0c3f      	lsrs	r7, r7, #16
 8000b20:	46ba      	mov	sl, r7
 8000b22:	4343      	muls	r3, r0
 8000b24:	44da      	add	sl, fp
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	45d1      	cmp	r9, sl
 8000b2a:	d904      	bls.n	8000b36 <__aeabi_dmul+0x122>
 8000b2c:	2780      	movs	r7, #128	; 0x80
 8000b2e:	027f      	lsls	r7, r7, #9
 8000b30:	46b9      	mov	r9, r7
 8000b32:	444b      	add	r3, r9
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	4653      	mov	r3, sl
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	469b      	mov	fp, r3
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	041f      	lsls	r7, r3, #16
 8000b40:	4643      	mov	r3, r8
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	4698      	mov	r8, r3
 8000b48:	003b      	movs	r3, r7
 8000b4a:	4443      	add	r3, r8
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	0c33      	lsrs	r3, r6, #16
 8000b50:	0436      	lsls	r6, r6, #16
 8000b52:	0c36      	lsrs	r6, r6, #16
 8000b54:	4698      	mov	r8, r3
 8000b56:	0033      	movs	r3, r6
 8000b58:	4343      	muls	r3, r0
 8000b5a:	4699      	mov	r9, r3
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	4343      	muls	r3, r0
 8000b60:	002f      	movs	r7, r5
 8000b62:	469a      	mov	sl, r3
 8000b64:	4643      	mov	r3, r8
 8000b66:	4377      	muls	r7, r6
 8000b68:	435d      	muls	r5, r3
 8000b6a:	0c38      	lsrs	r0, r7, #16
 8000b6c:	444d      	add	r5, r9
 8000b6e:	1945      	adds	r5, r0, r5
 8000b70:	45a9      	cmp	r9, r5
 8000b72:	d903      	bls.n	8000b7c <__aeabi_dmul+0x168>
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	025b      	lsls	r3, r3, #9
 8000b78:	4699      	mov	r9, r3
 8000b7a:	44ca      	add	sl, r9
 8000b7c:	043f      	lsls	r7, r7, #16
 8000b7e:	0c28      	lsrs	r0, r5, #16
 8000b80:	0c3f      	lsrs	r7, r7, #16
 8000b82:	042d      	lsls	r5, r5, #16
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	0c27      	lsrs	r7, r4, #16
 8000b88:	0424      	lsls	r4, r4, #16
 8000b8a:	0c24      	lsrs	r4, r4, #16
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	0020      	movs	r0, r4
 8000b90:	4350      	muls	r0, r2
 8000b92:	437a      	muls	r2, r7
 8000b94:	4691      	mov	r9, r2
 8000b96:	003a      	movs	r2, r7
 8000b98:	4453      	add	r3, sl
 8000b9a:	9305      	str	r3, [sp, #20]
 8000b9c:	0c03      	lsrs	r3, r0, #16
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	434a      	muls	r2, r1
 8000ba2:	4361      	muls	r1, r4
 8000ba4:	4449      	add	r1, r9
 8000ba6:	4451      	add	r1, sl
 8000ba8:	44ab      	add	fp, r5
 8000baa:	4589      	cmp	r9, r1
 8000bac:	d903      	bls.n	8000bb6 <__aeabi_dmul+0x1a2>
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	444a      	add	r2, r9
 8000bb6:	0400      	lsls	r0, r0, #16
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	0c00      	lsrs	r0, r0, #16
 8000bbc:	0409      	lsls	r1, r1, #16
 8000bbe:	1809      	adds	r1, r1, r0
 8000bc0:	0020      	movs	r0, r4
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4370      	muls	r0, r6
 8000bc8:	435c      	muls	r4, r3
 8000bca:	437e      	muls	r6, r7
 8000bcc:	435f      	muls	r7, r3
 8000bce:	0c03      	lsrs	r3, r0, #16
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	19a4      	adds	r4, r4, r6
 8000bd4:	4444      	add	r4, r8
 8000bd6:	444a      	add	r2, r9
 8000bd8:	9703      	str	r7, [sp, #12]
 8000bda:	42a6      	cmp	r6, r4
 8000bdc:	d904      	bls.n	8000be8 <__aeabi_dmul+0x1d4>
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	025b      	lsls	r3, r3, #9
 8000be2:	4698      	mov	r8, r3
 8000be4:	4447      	add	r7, r8
 8000be6:	9703      	str	r7, [sp, #12]
 8000be8:	0423      	lsls	r3, r4, #16
 8000bea:	9e02      	ldr	r6, [sp, #8]
 8000bec:	469a      	mov	sl, r3
 8000bee:	9b05      	ldr	r3, [sp, #20]
 8000bf0:	445e      	add	r6, fp
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	42ae      	cmp	r6, r5
 8000bf6:	41ad      	sbcs	r5, r5
 8000bf8:	1876      	adds	r6, r6, r1
 8000bfa:	428e      	cmp	r6, r1
 8000bfc:	4189      	sbcs	r1, r1
 8000bfe:	0400      	lsls	r0, r0, #16
 8000c00:	0c00      	lsrs	r0, r0, #16
 8000c02:	4450      	add	r0, sl
 8000c04:	4440      	add	r0, r8
 8000c06:	426d      	negs	r5, r5
 8000c08:	1947      	adds	r7, r0, r5
 8000c0a:	46b8      	mov	r8, r7
 8000c0c:	4693      	mov	fp, r2
 8000c0e:	4249      	negs	r1, r1
 8000c10:	4689      	mov	r9, r1
 8000c12:	44c3      	add	fp, r8
 8000c14:	44d9      	add	r9, fp
 8000c16:	4298      	cmp	r0, r3
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	45a8      	cmp	r8, r5
 8000c1c:	41ad      	sbcs	r5, r5
 8000c1e:	4593      	cmp	fp, r2
 8000c20:	4192      	sbcs	r2, r2
 8000c22:	4589      	cmp	r9, r1
 8000c24:	4189      	sbcs	r1, r1
 8000c26:	426d      	negs	r5, r5
 8000c28:	4240      	negs	r0, r0
 8000c2a:	4328      	orrs	r0, r5
 8000c2c:	0c24      	lsrs	r4, r4, #16
 8000c2e:	4252      	negs	r2, r2
 8000c30:	4249      	negs	r1, r1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	1900      	adds	r0, r0, r4
 8000c38:	1880      	adds	r0, r0, r2
 8000c3a:	18c7      	adds	r7, r0, r3
 8000c3c:	464b      	mov	r3, r9
 8000c3e:	0ddc      	lsrs	r4, r3, #23
 8000c40:	9b04      	ldr	r3, [sp, #16]
 8000c42:	0275      	lsls	r5, r6, #9
 8000c44:	431d      	orrs	r5, r3
 8000c46:	1e6a      	subs	r2, r5, #1
 8000c48:	4195      	sbcs	r5, r2
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	0df6      	lsrs	r6, r6, #23
 8000c4e:	027f      	lsls	r7, r7, #9
 8000c50:	4335      	orrs	r5, r6
 8000c52:	025a      	lsls	r2, r3, #9
 8000c54:	433c      	orrs	r4, r7
 8000c56:	4315      	orrs	r5, r2
 8000c58:	01fb      	lsls	r3, r7, #7
 8000c5a:	d400      	bmi.n	8000c5e <__aeabi_dmul+0x24a>
 8000c5c:	e11c      	b.n	8000e98 <__aeabi_dmul+0x484>
 8000c5e:	2101      	movs	r1, #1
 8000c60:	086a      	lsrs	r2, r5, #1
 8000c62:	400d      	ands	r5, r1
 8000c64:	4315      	orrs	r5, r2
 8000c66:	07e2      	lsls	r2, r4, #31
 8000c68:	4315      	orrs	r5, r2
 8000c6a:	0864      	lsrs	r4, r4, #1
 8000c6c:	494f      	ldr	r1, [pc, #316]	; (8000dac <__aeabi_dmul+0x398>)
 8000c6e:	4461      	add	r1, ip
 8000c70:	2900      	cmp	r1, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_dmul+0x262>
 8000c74:	e0b0      	b.n	8000dd8 <__aeabi_dmul+0x3c4>
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d009      	beq.n	8000c8e <__aeabi_dmul+0x27a>
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	402a      	ands	r2, r5
 8000c7e:	2a04      	cmp	r2, #4
 8000c80:	d005      	beq.n	8000c8e <__aeabi_dmul+0x27a>
 8000c82:	1d2a      	adds	r2, r5, #4
 8000c84:	42aa      	cmp	r2, r5
 8000c86:	41ad      	sbcs	r5, r5
 8000c88:	426d      	negs	r5, r5
 8000c8a:	1964      	adds	r4, r4, r5
 8000c8c:	0015      	movs	r5, r2
 8000c8e:	01e3      	lsls	r3, r4, #7
 8000c90:	d504      	bpl.n	8000c9c <__aeabi_dmul+0x288>
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <__aeabi_dmul+0x39c>)
 8000c96:	00c9      	lsls	r1, r1, #3
 8000c98:	4014      	ands	r4, r2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <__aeabi_dmul+0x3a0>)
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dmul+0x290>
 8000ca2:	e726      	b.n	8000af2 <__aeabi_dmul+0xde>
 8000ca4:	0762      	lsls	r2, r4, #29
 8000ca6:	08ed      	lsrs	r5, r5, #3
 8000ca8:	0264      	lsls	r4, r4, #9
 8000caa:	0549      	lsls	r1, r1, #21
 8000cac:	4315      	orrs	r5, r2
 8000cae:	0b24      	lsrs	r4, r4, #12
 8000cb0:	0d4a      	lsrs	r2, r1, #21
 8000cb2:	e710      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000cb4:	4652      	mov	r2, sl
 8000cb6:	4332      	orrs	r2, r6
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dmul+0x2a8>
 8000cba:	e07f      	b.n	8000dbc <__aeabi_dmul+0x3a8>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dmul+0x2ae>
 8000cc0:	e0dc      	b.n	8000e7c <__aeabi_dmul+0x468>
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	f000 fd3e 	bl	8001744 <__clzsi2>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	3a0b      	subs	r2, #11
 8000ccc:	231d      	movs	r3, #29
 8000cce:	0001      	movs	r1, r0
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	3908      	subs	r1, #8
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	408e      	lsls	r6, r1
 8000cda:	4316      	orrs	r6, r2
 8000cdc:	4652      	mov	r2, sl
 8000cde:	408a      	lsls	r2, r1
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	4935      	ldr	r1, [pc, #212]	; (8000db8 <__aeabi_dmul+0x3a4>)
 8000ce4:	1a18      	subs	r0, r3, r0
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	468c      	mov	ip, r1
 8000cea:	4463      	add	r3, ip
 8000cec:	2000      	movs	r0, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	e6d3      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000cf2:	0025      	movs	r5, r4
 8000cf4:	4305      	orrs	r5, r0
 8000cf6:	d04a      	beq.n	8000d8e <__aeabi_dmul+0x37a>
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dmul+0x2ea>
 8000cfc:	e0b0      	b.n	8000e60 <__aeabi_dmul+0x44c>
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f000 fd20 	bl	8001744 <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	0002      	movs	r2, r0
 8000d08:	390b      	subs	r1, #11
 8000d0a:	231d      	movs	r3, #29
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	0031      	movs	r1, r6
 8000d12:	0035      	movs	r5, r6
 8000d14:	3808      	subs	r0, #8
 8000d16:	4084      	lsls	r4, r0
 8000d18:	40d9      	lsrs	r1, r3
 8000d1a:	4085      	lsls	r5, r0
 8000d1c:	430c      	orrs	r4, r1
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <__aeabi_dmul+0x3a4>)
 8000d20:	1a83      	subs	r3, r0, r2
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	4699      	mov	r9, r3
 8000d28:	469b      	mov	fp, r3
 8000d2a:	e697      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d2c:	0005      	movs	r5, r0
 8000d2e:	4325      	orrs	r5, r4
 8000d30:	d126      	bne.n	8000d80 <__aeabi_dmul+0x36c>
 8000d32:	2208      	movs	r2, #8
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2302      	movs	r3, #2
 8000d38:	2400      	movs	r4, #0
 8000d3a:	4691      	mov	r9, r2
 8000d3c:	469b      	mov	fp, r3
 8000d3e:	e68d      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d40:	4652      	mov	r2, sl
 8000d42:	9b00      	ldr	r3, [sp, #0]
 8000d44:	4332      	orrs	r2, r6
 8000d46:	d110      	bne.n	8000d6a <__aeabi_dmul+0x356>
 8000d48:	4915      	ldr	r1, [pc, #84]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	4463      	add	r3, ip
 8000d50:	4649      	mov	r1, r9
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2302      	movs	r3, #2
 8000d56:	4319      	orrs	r1, r3
 8000d58:	4689      	mov	r9, r1
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	e69d      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000d5e:	465b      	mov	r3, fp
 8000d60:	9701      	str	r7, [sp, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dmul+0x354>
 8000d66:	e6ad      	b.n	8000ac4 <__aeabi_dmul+0xb0>
 8000d68:	e6c3      	b.n	8000af2 <__aeabi_dmul+0xde>
 8000d6a:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	4694      	mov	ip, r2
 8000d70:	4463      	add	r3, ip
 8000d72:	464a      	mov	r2, r9
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2303      	movs	r3, #3
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	e68c      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000d80:	220c      	movs	r2, #12
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2303      	movs	r3, #3
 8000d86:	0005      	movs	r5, r0
 8000d88:	4691      	mov	r9, r2
 8000d8a:	469b      	mov	fp, r3
 8000d8c:	e666      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	4699      	mov	r9, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	2400      	movs	r4, #0
 8000d9a:	469b      	mov	fp, r3
 8000d9c:	e65e      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	fffffc01 	.word	0xfffffc01
 8000da8:	08007280 	.word	0x08007280
 8000dac:	000003ff 	.word	0x000003ff
 8000db0:	feffffff 	.word	0xfeffffff
 8000db4:	000007fe 	.word	0x000007fe
 8000db8:	fffffc0d 	.word	0xfffffc0d
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	4319      	orrs	r1, r3
 8000dc2:	4689      	mov	r9, r1
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e667      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	2500      	movs	r5, #0
 8000dd0:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	0324      	lsls	r4, r4, #12
 8000dd6:	e67e      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	1a40      	subs	r0, r0, r1
 8000ddc:	2838      	cmp	r0, #56	; 0x38
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_dmul+0x3ce>
 8000de0:	e676      	b.n	8000ad0 <__aeabi_dmul+0xbc>
 8000de2:	281f      	cmp	r0, #31
 8000de4:	dd5b      	ble.n	8000e9e <__aeabi_dmul+0x48a>
 8000de6:	221f      	movs	r2, #31
 8000de8:	0023      	movs	r3, r4
 8000dea:	4252      	negs	r2, r2
 8000dec:	1a51      	subs	r1, r2, r1
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	0019      	movs	r1, r3
 8000df2:	2820      	cmp	r0, #32
 8000df4:	d003      	beq.n	8000dfe <__aeabi_dmul+0x3ea>
 8000df6:	4a3b      	ldr	r2, [pc, #236]	; (8000ee4 <__aeabi_dmul+0x4d0>)
 8000df8:	4462      	add	r2, ip
 8000dfa:	4094      	lsls	r4, r2
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	1e6a      	subs	r2, r5, #1
 8000e00:	4195      	sbcs	r5, r2
 8000e02:	002a      	movs	r2, r5
 8000e04:	430a      	orrs	r2, r1
 8000e06:	2107      	movs	r1, #7
 8000e08:	000d      	movs	r5, r1
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	4015      	ands	r5, r2
 8000e0e:	4211      	tst	r1, r2
 8000e10:	d05b      	beq.n	8000eca <__aeabi_dmul+0x4b6>
 8000e12:	210f      	movs	r1, #15
 8000e14:	2400      	movs	r4, #0
 8000e16:	4011      	ands	r1, r2
 8000e18:	2904      	cmp	r1, #4
 8000e1a:	d053      	beq.n	8000ec4 <__aeabi_dmul+0x4b0>
 8000e1c:	1d11      	adds	r1, r2, #4
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	4192      	sbcs	r2, r2
 8000e22:	4252      	negs	r2, r2
 8000e24:	18a4      	adds	r4, r4, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	0223      	lsls	r3, r4, #8
 8000e2a:	d54b      	bpl.n	8000ec4 <__aeabi_dmul+0x4b0>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2400      	movs	r4, #0
 8000e30:	2500      	movs	r5, #0
 8000e32:	e650      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	031b      	lsls	r3, r3, #12
 8000e38:	421c      	tst	r4, r3
 8000e3a:	d009      	beq.n	8000e50 <__aeabi_dmul+0x43c>
 8000e3c:	421e      	tst	r6, r3
 8000e3e:	d107      	bne.n	8000e50 <__aeabi_dmul+0x43c>
 8000e40:	4333      	orrs	r3, r6
 8000e42:	031c      	lsls	r4, r3, #12
 8000e44:	4643      	mov	r3, r8
 8000e46:	0015      	movs	r5, r2
 8000e48:	0b24      	lsrs	r4, r4, #12
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	e642      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0312      	lsls	r2, r2, #12
 8000e54:	4314      	orrs	r4, r2
 8000e56:	0324      	lsls	r4, r4, #12
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000e5a:	0b24      	lsrs	r4, r4, #12
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	e63a      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e60:	f000 fc70 	bl	8001744 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	0002      	movs	r2, r0
 8000e68:	3115      	adds	r1, #21
 8000e6a:	3220      	adds	r2, #32
 8000e6c:	291c      	cmp	r1, #28
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dmul+0x45e>
 8000e70:	e74b      	b.n	8000d0a <__aeabi_dmul+0x2f6>
 8000e72:	0034      	movs	r4, r6
 8000e74:	3808      	subs	r0, #8
 8000e76:	2500      	movs	r5, #0
 8000e78:	4084      	lsls	r4, r0
 8000e7a:	e750      	b.n	8000d1e <__aeabi_dmul+0x30a>
 8000e7c:	f000 fc62 	bl	8001744 <__clzsi2>
 8000e80:	0003      	movs	r3, r0
 8000e82:	001a      	movs	r2, r3
 8000e84:	3215      	adds	r2, #21
 8000e86:	3020      	adds	r0, #32
 8000e88:	2a1c      	cmp	r2, #28
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_dmul+0x47a>
 8000e8c:	e71e      	b.n	8000ccc <__aeabi_dmul+0x2b8>
 8000e8e:	4656      	mov	r6, sl
 8000e90:	3b08      	subs	r3, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	409e      	lsls	r6, r3
 8000e96:	e723      	b.n	8000ce0 <__aeabi_dmul+0x2cc>
 8000e98:	9b00      	ldr	r3, [sp, #0]
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	e6e6      	b.n	8000c6c <__aeabi_dmul+0x258>
 8000e9e:	4912      	ldr	r1, [pc, #72]	; (8000ee8 <__aeabi_dmul+0x4d4>)
 8000ea0:	0022      	movs	r2, r4
 8000ea2:	4461      	add	r1, ip
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	408d      	lsls	r5, r1
 8000ea8:	408a      	lsls	r2, r1
 8000eaa:	40c6      	lsrs	r6, r0
 8000eac:	1e69      	subs	r1, r5, #1
 8000eae:	418d      	sbcs	r5, r1
 8000eb0:	4332      	orrs	r2, r6
 8000eb2:	432a      	orrs	r2, r5
 8000eb4:	40c4      	lsrs	r4, r0
 8000eb6:	0753      	lsls	r3, r2, #29
 8000eb8:	d0b6      	beq.n	8000e28 <__aeabi_dmul+0x414>
 8000eba:	210f      	movs	r1, #15
 8000ebc:	4011      	ands	r1, r2
 8000ebe:	2904      	cmp	r1, #4
 8000ec0:	d1ac      	bne.n	8000e1c <__aeabi_dmul+0x408>
 8000ec2:	e7b1      	b.n	8000e28 <__aeabi_dmul+0x414>
 8000ec4:	0765      	lsls	r5, r4, #29
 8000ec6:	0264      	lsls	r4, r4, #9
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	08d2      	lsrs	r2, r2, #3
 8000ecc:	4315      	orrs	r5, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	e601      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	0312      	lsls	r2, r2, #12
 8000ed6:	4314      	orrs	r4, r2
 8000ed8:	0324      	lsls	r4, r4, #12
 8000eda:	4a01      	ldr	r2, [pc, #4]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000edc:	0b24      	lsrs	r4, r4, #12
 8000ede:	e5fa      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	0000043e 	.word	0x0000043e
 8000ee8:	0000041e 	.word	0x0000041e

08000eec <__aeabi_dsub>:
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	4657      	mov	r7, sl
 8000ef0:	464e      	mov	r6, r9
 8000ef2:	4645      	mov	r5, r8
 8000ef4:	46de      	mov	lr, fp
 8000ef6:	b5e0      	push	{r5, r6, r7, lr}
 8000ef8:	001e      	movs	r6, r3
 8000efa:	0017      	movs	r7, r2
 8000efc:	004a      	lsls	r2, r1, #1
 8000efe:	030b      	lsls	r3, r1, #12
 8000f00:	0d52      	lsrs	r2, r2, #21
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	4690      	mov	r8, r2
 8000f06:	0f42      	lsrs	r2, r0, #29
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	0fcd      	lsrs	r5, r1, #31
 8000f0c:	4ccd      	ldr	r4, [pc, #820]	; (8001244 <__aeabi_dsub+0x358>)
 8000f0e:	0331      	lsls	r1, r6, #12
 8000f10:	00c3      	lsls	r3, r0, #3
 8000f12:	4694      	mov	ip, r2
 8000f14:	0070      	lsls	r0, r6, #1
 8000f16:	0f7a      	lsrs	r2, r7, #29
 8000f18:	0a49      	lsrs	r1, r1, #9
 8000f1a:	00ff      	lsls	r7, r7, #3
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	46b9      	mov	r9, r7
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0ff6      	lsrs	r6, r6, #31
 8000f24:	4311      	orrs	r1, r2
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dsub+0x40>
 8000f2a:	e0b1      	b.n	8001090 <__aeabi_dsub+0x1a4>
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4056      	eors	r6, r2
 8000f30:	46b3      	mov	fp, r6
 8000f32:	42b5      	cmp	r5, r6
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x4c>
 8000f36:	e088      	b.n	800104a <__aeabi_dsub+0x15e>
 8000f38:	4642      	mov	r2, r8
 8000f3a:	1a12      	subs	r2, r2, r0
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	dc00      	bgt.n	8000f42 <__aeabi_dsub+0x56>
 8000f40:	e0ae      	b.n	80010a0 <__aeabi_dsub+0x1b4>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dsub+0x5c>
 8000f46:	e0c1      	b.n	80010cc <__aeabi_dsub+0x1e0>
 8000f48:	48be      	ldr	r0, [pc, #760]	; (8001244 <__aeabi_dsub+0x358>)
 8000f4a:	4580      	cmp	r8, r0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x64>
 8000f4e:	e151      	b.n	80011f4 <__aeabi_dsub+0x308>
 8000f50:	2080      	movs	r0, #128	; 0x80
 8000f52:	0400      	lsls	r0, r0, #16
 8000f54:	4301      	orrs	r1, r0
 8000f56:	2a38      	cmp	r2, #56	; 0x38
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dsub+0x70>
 8000f5a:	e17b      	b.n	8001254 <__aeabi_dsub+0x368>
 8000f5c:	2a1f      	cmp	r2, #31
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dsub+0x76>
 8000f60:	e1ee      	b.n	8001340 <__aeabi_dsub+0x454>
 8000f62:	2020      	movs	r0, #32
 8000f64:	003e      	movs	r6, r7
 8000f66:	1a80      	subs	r0, r0, r2
 8000f68:	000c      	movs	r4, r1
 8000f6a:	40d6      	lsrs	r6, r2
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	4087      	lsls	r7, r0
 8000f70:	4662      	mov	r2, ip
 8000f72:	4084      	lsls	r4, r0
 8000f74:	1a52      	subs	r2, r2, r1
 8000f76:	1e78      	subs	r0, r7, #1
 8000f78:	4187      	sbcs	r7, r0
 8000f7a:	4694      	mov	ip, r2
 8000f7c:	4334      	orrs	r4, r6
 8000f7e:	4327      	orrs	r7, r4
 8000f80:	1bdc      	subs	r4, r3, r7
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	419b      	sbcs	r3, r3
 8000f86:	4662      	mov	r2, ip
 8000f88:	425b      	negs	r3, r3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	464b      	mov	r3, r9
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	d400      	bmi.n	8000f96 <__aeabi_dsub+0xaa>
 8000f94:	e118      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8000f96:	464b      	mov	r3, r9
 8000f98:	0258      	lsls	r0, r3, #9
 8000f9a:	0a43      	lsrs	r3, r0, #9
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0xba>
 8000fa4:	e137      	b.n	8001216 <__aeabi_dsub+0x32a>
 8000fa6:	4648      	mov	r0, r9
 8000fa8:	f000 fbcc 	bl	8001744 <__clzsi2>
 8000fac:	0001      	movs	r1, r0
 8000fae:	3908      	subs	r1, #8
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	4648      	mov	r0, r9
 8000fb6:	1a5b      	subs	r3, r3, r1
 8000fb8:	40da      	lsrs	r2, r3
 8000fba:	4088      	lsls	r0, r1
 8000fbc:	408c      	lsls	r4, r1
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	4310      	orrs	r0, r2
 8000fc2:	4588      	cmp	r8, r1
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dsub+0xdc>
 8000fc6:	e136      	b.n	8001236 <__aeabi_dsub+0x34a>
 8000fc8:	1ac9      	subs	r1, r1, r3
 8000fca:	1c4b      	adds	r3, r1, #1
 8000fcc:	2b1f      	cmp	r3, #31
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dsub+0xe6>
 8000fd0:	e0ea      	b.n	80011a8 <__aeabi_dsub+0x2bc>
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	0026      	movs	r6, r4
 8000fd6:	1ad2      	subs	r2, r2, r3
 8000fd8:	0001      	movs	r1, r0
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	40de      	lsrs	r6, r3
 8000fde:	40d8      	lsrs	r0, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	4681      	mov	r9, r0
 8000fea:	4698      	mov	r8, r3
 8000fec:	4331      	orrs	r1, r6
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	0763      	lsls	r3, r4, #29
 8000ff2:	d009      	beq.n	8001008 <__aeabi_dsub+0x11c>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <__aeabi_dsub+0x11c>
 8000ffc:	1d23      	adds	r3, r4, #4
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	41a4      	sbcs	r4, r4
 8001002:	4264      	negs	r4, r4
 8001004:	44a1      	add	r9, r4
 8001006:	001c      	movs	r4, r3
 8001008:	464b      	mov	r3, r9
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	d400      	bmi.n	8001010 <__aeabi_dsub+0x124>
 800100e:	e0de      	b.n	80011ce <__aeabi_dsub+0x2e2>
 8001010:	4641      	mov	r1, r8
 8001012:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <__aeabi_dsub+0x358>)
 8001014:	3101      	adds	r1, #1
 8001016:	4299      	cmp	r1, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x130>
 800101a:	e0e7      	b.n	80011ec <__aeabi_dsub+0x300>
 800101c:	464b      	mov	r3, r9
 800101e:	488a      	ldr	r0, [pc, #552]	; (8001248 <__aeabi_dsub+0x35c>)
 8001020:	08e4      	lsrs	r4, r4, #3
 8001022:	4003      	ands	r3, r0
 8001024:	0018      	movs	r0, r3
 8001026:	0549      	lsls	r1, r1, #21
 8001028:	075b      	lsls	r3, r3, #29
 800102a:	0240      	lsls	r0, r0, #9
 800102c:	4323      	orrs	r3, r4
 800102e:	0d4a      	lsrs	r2, r1, #21
 8001030:	0b04      	lsrs	r4, r0, #12
 8001032:	0512      	lsls	r2, r2, #20
 8001034:	07ed      	lsls	r5, r5, #31
 8001036:	4322      	orrs	r2, r4
 8001038:	432a      	orrs	r2, r5
 800103a:	0018      	movs	r0, r3
 800103c:	0011      	movs	r1, r2
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
 8001040:	46bb      	mov	fp, r7
 8001042:	46b2      	mov	sl, r6
 8001044:	46a9      	mov	r9, r5
 8001046:	46a0      	mov	r8, r4
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104a:	4642      	mov	r2, r8
 800104c:	1a12      	subs	r2, r2, r0
 800104e:	2a00      	cmp	r2, #0
 8001050:	dd52      	ble.n	80010f8 <__aeabi_dsub+0x20c>
 8001052:	2800      	cmp	r0, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dsub+0x16c>
 8001056:	e09c      	b.n	8001192 <__aeabi_dsub+0x2a6>
 8001058:	45a0      	cmp	r8, r4
 800105a:	d100      	bne.n	800105e <__aeabi_dsub+0x172>
 800105c:	e0ca      	b.n	80011f4 <__aeabi_dsub+0x308>
 800105e:	2080      	movs	r0, #128	; 0x80
 8001060:	0400      	lsls	r0, r0, #16
 8001062:	4301      	orrs	r1, r0
 8001064:	2a38      	cmp	r2, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_dsub+0x17e>
 8001068:	e149      	b.n	80012fe <__aeabi_dsub+0x412>
 800106a:	2a1f      	cmp	r2, #31
 800106c:	dc00      	bgt.n	8001070 <__aeabi_dsub+0x184>
 800106e:	e197      	b.n	80013a0 <__aeabi_dsub+0x4b4>
 8001070:	0010      	movs	r0, r2
 8001072:	000e      	movs	r6, r1
 8001074:	3820      	subs	r0, #32
 8001076:	40c6      	lsrs	r6, r0
 8001078:	2a20      	cmp	r2, #32
 800107a:	d004      	beq.n	8001086 <__aeabi_dsub+0x19a>
 800107c:	2040      	movs	r0, #64	; 0x40
 800107e:	1a82      	subs	r2, r0, r2
 8001080:	4091      	lsls	r1, r2
 8001082:	430f      	orrs	r7, r1
 8001084:	46b9      	mov	r9, r7
 8001086:	464c      	mov	r4, r9
 8001088:	1e62      	subs	r2, r4, #1
 800108a:	4194      	sbcs	r4, r2
 800108c:	4334      	orrs	r4, r6
 800108e:	e13a      	b.n	8001306 <__aeabi_dsub+0x41a>
 8001090:	000a      	movs	r2, r1
 8001092:	433a      	orrs	r2, r7
 8001094:	d028      	beq.n	80010e8 <__aeabi_dsub+0x1fc>
 8001096:	46b3      	mov	fp, r6
 8001098:	42b5      	cmp	r5, r6
 800109a:	d02b      	beq.n	80010f4 <__aeabi_dsub+0x208>
 800109c:	4a6b      	ldr	r2, [pc, #428]	; (800124c <__aeabi_dsub+0x360>)
 800109e:	4442      	add	r2, r8
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d05d      	beq.n	8001160 <__aeabi_dsub+0x274>
 80010a4:	4642      	mov	r2, r8
 80010a6:	4644      	mov	r4, r8
 80010a8:	1a82      	subs	r2, r0, r2
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_dsub+0x1c4>
 80010ae:	e0f5      	b.n	800129c <__aeabi_dsub+0x3b0>
 80010b0:	4665      	mov	r5, ip
 80010b2:	431d      	orrs	r5, r3
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x1cc>
 80010b6:	e19c      	b.n	80013f2 <__aeabi_dsub+0x506>
 80010b8:	1e55      	subs	r5, r2, #1
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x1d4>
 80010be:	e1fb      	b.n	80014b8 <__aeabi_dsub+0x5cc>
 80010c0:	4c60      	ldr	r4, [pc, #384]	; (8001244 <__aeabi_dsub+0x358>)
 80010c2:	42a2      	cmp	r2, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x1dc>
 80010c6:	e1bd      	b.n	8001444 <__aeabi_dsub+0x558>
 80010c8:	002a      	movs	r2, r5
 80010ca:	e0f0      	b.n	80012ae <__aeabi_dsub+0x3c2>
 80010cc:	0008      	movs	r0, r1
 80010ce:	4338      	orrs	r0, r7
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x1e8>
 80010d2:	e0c3      	b.n	800125c <__aeabi_dsub+0x370>
 80010d4:	1e50      	subs	r0, r2, #1
 80010d6:	2a01      	cmp	r2, #1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dsub+0x1f0>
 80010da:	e1a8      	b.n	800142e <__aeabi_dsub+0x542>
 80010dc:	4c59      	ldr	r4, [pc, #356]	; (8001244 <__aeabi_dsub+0x358>)
 80010de:	42a2      	cmp	r2, r4
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x1f8>
 80010e2:	e087      	b.n	80011f4 <__aeabi_dsub+0x308>
 80010e4:	0002      	movs	r2, r0
 80010e6:	e736      	b.n	8000f56 <__aeabi_dsub+0x6a>
 80010e8:	2201      	movs	r2, #1
 80010ea:	4056      	eors	r6, r2
 80010ec:	46b3      	mov	fp, r6
 80010ee:	42b5      	cmp	r5, r6
 80010f0:	d000      	beq.n	80010f4 <__aeabi_dsub+0x208>
 80010f2:	e721      	b.n	8000f38 <__aeabi_dsub+0x4c>
 80010f4:	4a55      	ldr	r2, [pc, #340]	; (800124c <__aeabi_dsub+0x360>)
 80010f6:	4442      	add	r2, r8
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_dsub+0x212>
 80010fc:	e0b5      	b.n	800126a <__aeabi_dsub+0x37e>
 80010fe:	4642      	mov	r2, r8
 8001100:	4644      	mov	r4, r8
 8001102:	1a82      	subs	r2, r0, r2
 8001104:	2c00      	cmp	r4, #0
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x21e>
 8001108:	e138      	b.n	800137c <__aeabi_dsub+0x490>
 800110a:	4e4e      	ldr	r6, [pc, #312]	; (8001244 <__aeabi_dsub+0x358>)
 800110c:	42b0      	cmp	r0, r6
 800110e:	d100      	bne.n	8001112 <__aeabi_dsub+0x226>
 8001110:	e1de      	b.n	80014d0 <__aeabi_dsub+0x5e4>
 8001112:	2680      	movs	r6, #128	; 0x80
 8001114:	4664      	mov	r4, ip
 8001116:	0436      	lsls	r6, r6, #16
 8001118:	4334      	orrs	r4, r6
 800111a:	46a4      	mov	ip, r4
 800111c:	2a38      	cmp	r2, #56	; 0x38
 800111e:	dd00      	ble.n	8001122 <__aeabi_dsub+0x236>
 8001120:	e196      	b.n	8001450 <__aeabi_dsub+0x564>
 8001122:	2a1f      	cmp	r2, #31
 8001124:	dd00      	ble.n	8001128 <__aeabi_dsub+0x23c>
 8001126:	e224      	b.n	8001572 <__aeabi_dsub+0x686>
 8001128:	2620      	movs	r6, #32
 800112a:	1ab4      	subs	r4, r6, r2
 800112c:	46a2      	mov	sl, r4
 800112e:	4664      	mov	r4, ip
 8001130:	4656      	mov	r6, sl
 8001132:	40b4      	lsls	r4, r6
 8001134:	46a1      	mov	r9, r4
 8001136:	001c      	movs	r4, r3
 8001138:	464e      	mov	r6, r9
 800113a:	40d4      	lsrs	r4, r2
 800113c:	4326      	orrs	r6, r4
 800113e:	0034      	movs	r4, r6
 8001140:	4656      	mov	r6, sl
 8001142:	40b3      	lsls	r3, r6
 8001144:	1e5e      	subs	r6, r3, #1
 8001146:	41b3      	sbcs	r3, r6
 8001148:	431c      	orrs	r4, r3
 800114a:	4663      	mov	r3, ip
 800114c:	40d3      	lsrs	r3, r2
 800114e:	18c9      	adds	r1, r1, r3
 8001150:	19e4      	adds	r4, r4, r7
 8001152:	42bc      	cmp	r4, r7
 8001154:	41bf      	sbcs	r7, r7
 8001156:	427f      	negs	r7, r7
 8001158:	46b9      	mov	r9, r7
 800115a:	4680      	mov	r8, r0
 800115c:	4489      	add	r9, r1
 800115e:	e0d8      	b.n	8001312 <__aeabi_dsub+0x426>
 8001160:	4640      	mov	r0, r8
 8001162:	4c3b      	ldr	r4, [pc, #236]	; (8001250 <__aeabi_dsub+0x364>)
 8001164:	3001      	adds	r0, #1
 8001166:	4220      	tst	r0, r4
 8001168:	d000      	beq.n	800116c <__aeabi_dsub+0x280>
 800116a:	e0b4      	b.n	80012d6 <__aeabi_dsub+0x3ea>
 800116c:	4640      	mov	r0, r8
 800116e:	2800      	cmp	r0, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_dsub+0x288>
 8001172:	e144      	b.n	80013fe <__aeabi_dsub+0x512>
 8001174:	4660      	mov	r0, ip
 8001176:	4318      	orrs	r0, r3
 8001178:	d100      	bne.n	800117c <__aeabi_dsub+0x290>
 800117a:	e190      	b.n	800149e <__aeabi_dsub+0x5b2>
 800117c:	0008      	movs	r0, r1
 800117e:	4338      	orrs	r0, r7
 8001180:	d000      	beq.n	8001184 <__aeabi_dsub+0x298>
 8001182:	e1aa      	b.n	80014da <__aeabi_dsub+0x5ee>
 8001184:	4661      	mov	r1, ip
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	0749      	lsls	r1, r1, #29
 800118a:	430b      	orrs	r3, r1
 800118c:	4661      	mov	r1, ip
 800118e:	08cc      	lsrs	r4, r1, #3
 8001190:	e027      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 8001192:	0008      	movs	r0, r1
 8001194:	4338      	orrs	r0, r7
 8001196:	d061      	beq.n	800125c <__aeabi_dsub+0x370>
 8001198:	1e50      	subs	r0, r2, #1
 800119a:	2a01      	cmp	r2, #1
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x2b4>
 800119e:	e139      	b.n	8001414 <__aeabi_dsub+0x528>
 80011a0:	42a2      	cmp	r2, r4
 80011a2:	d027      	beq.n	80011f4 <__aeabi_dsub+0x308>
 80011a4:	0002      	movs	r2, r0
 80011a6:	e75d      	b.n	8001064 <__aeabi_dsub+0x178>
 80011a8:	0002      	movs	r2, r0
 80011aa:	391f      	subs	r1, #31
 80011ac:	40ca      	lsrs	r2, r1
 80011ae:	0011      	movs	r1, r2
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d003      	beq.n	80011bc <__aeabi_dsub+0x2d0>
 80011b4:	2240      	movs	r2, #64	; 0x40
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4098      	lsls	r0, r3
 80011ba:	4304      	orrs	r4, r0
 80011bc:	1e63      	subs	r3, r4, #1
 80011be:	419c      	sbcs	r4, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	4699      	mov	r9, r3
 80011c4:	4698      	mov	r8, r3
 80011c6:	430c      	orrs	r4, r1
 80011c8:	0763      	lsls	r3, r4, #29
 80011ca:	d000      	beq.n	80011ce <__aeabi_dsub+0x2e2>
 80011cc:	e712      	b.n	8000ff4 <__aeabi_dsub+0x108>
 80011ce:	464b      	mov	r3, r9
 80011d0:	464a      	mov	r2, r9
 80011d2:	08e4      	lsrs	r4, r4, #3
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	4323      	orrs	r3, r4
 80011d8:	08d4      	lsrs	r4, r2, #3
 80011da:	4642      	mov	r2, r8
 80011dc:	4919      	ldr	r1, [pc, #100]	; (8001244 <__aeabi_dsub+0x358>)
 80011de:	428a      	cmp	r2, r1
 80011e0:	d00e      	beq.n	8001200 <__aeabi_dsub+0x314>
 80011e2:	0324      	lsls	r4, r4, #12
 80011e4:	0552      	lsls	r2, r2, #21
 80011e6:	0b24      	lsrs	r4, r4, #12
 80011e8:	0d52      	lsrs	r2, r2, #21
 80011ea:	e722      	b.n	8001032 <__aeabi_dsub+0x146>
 80011ec:	000a      	movs	r2, r1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2300      	movs	r3, #0
 80011f2:	e71e      	b.n	8001032 <__aeabi_dsub+0x146>
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	4662      	mov	r2, ip
 80011f8:	0752      	lsls	r2, r2, #29
 80011fa:	4313      	orrs	r3, r2
 80011fc:	4662      	mov	r2, ip
 80011fe:	08d4      	lsrs	r4, r2, #3
 8001200:	001a      	movs	r2, r3
 8001202:	4322      	orrs	r2, r4
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x31c>
 8001206:	e1fc      	b.n	8001602 <__aeabi_dsub+0x716>
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0312      	lsls	r2, r2, #12
 800120c:	4314      	orrs	r4, r2
 800120e:	0324      	lsls	r4, r4, #12
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <__aeabi_dsub+0x358>)
 8001212:	0b24      	lsrs	r4, r4, #12
 8001214:	e70d      	b.n	8001032 <__aeabi_dsub+0x146>
 8001216:	0020      	movs	r0, r4
 8001218:	f000 fa94 	bl	8001744 <__clzsi2>
 800121c:	0001      	movs	r1, r0
 800121e:	3118      	adds	r1, #24
 8001220:	291f      	cmp	r1, #31
 8001222:	dc00      	bgt.n	8001226 <__aeabi_dsub+0x33a>
 8001224:	e6c4      	b.n	8000fb0 <__aeabi_dsub+0xc4>
 8001226:	3808      	subs	r0, #8
 8001228:	4084      	lsls	r4, r0
 800122a:	4643      	mov	r3, r8
 800122c:	0020      	movs	r0, r4
 800122e:	2400      	movs	r4, #0
 8001230:	4588      	cmp	r8, r1
 8001232:	dc00      	bgt.n	8001236 <__aeabi_dsub+0x34a>
 8001234:	e6c8      	b.n	8000fc8 <__aeabi_dsub+0xdc>
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__aeabi_dsub+0x35c>)
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	4010      	ands	r0, r2
 800123c:	4698      	mov	r8, r3
 800123e:	4681      	mov	r9, r0
 8001240:	e6d6      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	000007ff 	.word	0x000007ff
 8001248:	ff7fffff 	.word	0xff7fffff
 800124c:	fffff801 	.word	0xfffff801
 8001250:	000007fe 	.word	0x000007fe
 8001254:	430f      	orrs	r7, r1
 8001256:	1e7a      	subs	r2, r7, #1
 8001258:	4197      	sbcs	r7, r2
 800125a:	e691      	b.n	8000f80 <__aeabi_dsub+0x94>
 800125c:	4661      	mov	r1, ip
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	0749      	lsls	r1, r1, #29
 8001262:	430b      	orrs	r3, r1
 8001264:	4661      	mov	r1, ip
 8001266:	08cc      	lsrs	r4, r1, #3
 8001268:	e7b8      	b.n	80011dc <__aeabi_dsub+0x2f0>
 800126a:	4640      	mov	r0, r8
 800126c:	4cd3      	ldr	r4, [pc, #844]	; (80015bc <__aeabi_dsub+0x6d0>)
 800126e:	3001      	adds	r0, #1
 8001270:	4220      	tst	r0, r4
 8001272:	d000      	beq.n	8001276 <__aeabi_dsub+0x38a>
 8001274:	e0a2      	b.n	80013bc <__aeabi_dsub+0x4d0>
 8001276:	4640      	mov	r0, r8
 8001278:	2800      	cmp	r0, #0
 800127a:	d000      	beq.n	800127e <__aeabi_dsub+0x392>
 800127c:	e101      	b.n	8001482 <__aeabi_dsub+0x596>
 800127e:	4660      	mov	r0, ip
 8001280:	4318      	orrs	r0, r3
 8001282:	d100      	bne.n	8001286 <__aeabi_dsub+0x39a>
 8001284:	e15e      	b.n	8001544 <__aeabi_dsub+0x658>
 8001286:	0008      	movs	r0, r1
 8001288:	4338      	orrs	r0, r7
 800128a:	d000      	beq.n	800128e <__aeabi_dsub+0x3a2>
 800128c:	e15f      	b.n	800154e <__aeabi_dsub+0x662>
 800128e:	4661      	mov	r1, ip
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	0749      	lsls	r1, r1, #29
 8001294:	430b      	orrs	r3, r1
 8001296:	4661      	mov	r1, ip
 8001298:	08cc      	lsrs	r4, r1, #3
 800129a:	e7a2      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 800129c:	4dc8      	ldr	r5, [pc, #800]	; (80015c0 <__aeabi_dsub+0x6d4>)
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x3b8>
 80012a2:	e0cf      	b.n	8001444 <__aeabi_dsub+0x558>
 80012a4:	2580      	movs	r5, #128	; 0x80
 80012a6:	4664      	mov	r4, ip
 80012a8:	042d      	lsls	r5, r5, #16
 80012aa:	432c      	orrs	r4, r5
 80012ac:	46a4      	mov	ip, r4
 80012ae:	2a38      	cmp	r2, #56	; 0x38
 80012b0:	dc56      	bgt.n	8001360 <__aeabi_dsub+0x474>
 80012b2:	2a1f      	cmp	r2, #31
 80012b4:	dd00      	ble.n	80012b8 <__aeabi_dsub+0x3cc>
 80012b6:	e0d1      	b.n	800145c <__aeabi_dsub+0x570>
 80012b8:	2520      	movs	r5, #32
 80012ba:	001e      	movs	r6, r3
 80012bc:	1aad      	subs	r5, r5, r2
 80012be:	4664      	mov	r4, ip
 80012c0:	40ab      	lsls	r3, r5
 80012c2:	40ac      	lsls	r4, r5
 80012c4:	40d6      	lsrs	r6, r2
 80012c6:	1e5d      	subs	r5, r3, #1
 80012c8:	41ab      	sbcs	r3, r5
 80012ca:	4334      	orrs	r4, r6
 80012cc:	4323      	orrs	r3, r4
 80012ce:	4664      	mov	r4, ip
 80012d0:	40d4      	lsrs	r4, r2
 80012d2:	1b09      	subs	r1, r1, r4
 80012d4:	e049      	b.n	800136a <__aeabi_dsub+0x47e>
 80012d6:	4660      	mov	r0, ip
 80012d8:	1bdc      	subs	r4, r3, r7
 80012da:	1a46      	subs	r6, r0, r1
 80012dc:	42a3      	cmp	r3, r4
 80012de:	4180      	sbcs	r0, r0
 80012e0:	4240      	negs	r0, r0
 80012e2:	4681      	mov	r9, r0
 80012e4:	0030      	movs	r0, r6
 80012e6:	464e      	mov	r6, r9
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	4681      	mov	r9, r0
 80012ec:	0200      	lsls	r0, r0, #8
 80012ee:	d476      	bmi.n	80013de <__aeabi_dsub+0x4f2>
 80012f0:	464b      	mov	r3, r9
 80012f2:	4323      	orrs	r3, r4
 80012f4:	d000      	beq.n	80012f8 <__aeabi_dsub+0x40c>
 80012f6:	e652      	b.n	8000f9e <__aeabi_dsub+0xb2>
 80012f8:	2400      	movs	r4, #0
 80012fa:	2500      	movs	r5, #0
 80012fc:	e771      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 80012fe:	4339      	orrs	r1, r7
 8001300:	000c      	movs	r4, r1
 8001302:	1e62      	subs	r2, r4, #1
 8001304:	4194      	sbcs	r4, r2
 8001306:	18e4      	adds	r4, r4, r3
 8001308:	429c      	cmp	r4, r3
 800130a:	419b      	sbcs	r3, r3
 800130c:	425b      	negs	r3, r3
 800130e:	4463      	add	r3, ip
 8001310:	4699      	mov	r9, r3
 8001312:	464b      	mov	r3, r9
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	d400      	bmi.n	800131a <__aeabi_dsub+0x42e>
 8001318:	e756      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 800131a:	2301      	movs	r3, #1
 800131c:	469c      	mov	ip, r3
 800131e:	4ba8      	ldr	r3, [pc, #672]	; (80015c0 <__aeabi_dsub+0x6d4>)
 8001320:	44e0      	add	r8, ip
 8001322:	4598      	cmp	r8, r3
 8001324:	d038      	beq.n	8001398 <__aeabi_dsub+0x4ac>
 8001326:	464b      	mov	r3, r9
 8001328:	48a6      	ldr	r0, [pc, #664]	; (80015c4 <__aeabi_dsub+0x6d8>)
 800132a:	2201      	movs	r2, #1
 800132c:	4003      	ands	r3, r0
 800132e:	0018      	movs	r0, r3
 8001330:	0863      	lsrs	r3, r4, #1
 8001332:	4014      	ands	r4, r2
 8001334:	431c      	orrs	r4, r3
 8001336:	07c3      	lsls	r3, r0, #31
 8001338:	431c      	orrs	r4, r3
 800133a:	0843      	lsrs	r3, r0, #1
 800133c:	4699      	mov	r9, r3
 800133e:	e657      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001340:	0010      	movs	r0, r2
 8001342:	000e      	movs	r6, r1
 8001344:	3820      	subs	r0, #32
 8001346:	40c6      	lsrs	r6, r0
 8001348:	2a20      	cmp	r2, #32
 800134a:	d004      	beq.n	8001356 <__aeabi_dsub+0x46a>
 800134c:	2040      	movs	r0, #64	; 0x40
 800134e:	1a82      	subs	r2, r0, r2
 8001350:	4091      	lsls	r1, r2
 8001352:	430f      	orrs	r7, r1
 8001354:	46b9      	mov	r9, r7
 8001356:	464f      	mov	r7, r9
 8001358:	1e7a      	subs	r2, r7, #1
 800135a:	4197      	sbcs	r7, r2
 800135c:	4337      	orrs	r7, r6
 800135e:	e60f      	b.n	8000f80 <__aeabi_dsub+0x94>
 8001360:	4662      	mov	r2, ip
 8001362:	431a      	orrs	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	4193      	sbcs	r3, r2
 800136a:	1afc      	subs	r4, r7, r3
 800136c:	42a7      	cmp	r7, r4
 800136e:	41bf      	sbcs	r7, r7
 8001370:	427f      	negs	r7, r7
 8001372:	1bcb      	subs	r3, r1, r7
 8001374:	4699      	mov	r9, r3
 8001376:	465d      	mov	r5, fp
 8001378:	4680      	mov	r8, r0
 800137a:	e608      	b.n	8000f8e <__aeabi_dsub+0xa2>
 800137c:	4666      	mov	r6, ip
 800137e:	431e      	orrs	r6, r3
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x498>
 8001382:	e0be      	b.n	8001502 <__aeabi_dsub+0x616>
 8001384:	1e56      	subs	r6, r2, #1
 8001386:	2a01      	cmp	r2, #1
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x4a0>
 800138a:	e109      	b.n	80015a0 <__aeabi_dsub+0x6b4>
 800138c:	4c8c      	ldr	r4, [pc, #560]	; (80015c0 <__aeabi_dsub+0x6d4>)
 800138e:	42a2      	cmp	r2, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x4a8>
 8001392:	e119      	b.n	80015c8 <__aeabi_dsub+0x6dc>
 8001394:	0032      	movs	r2, r6
 8001396:	e6c1      	b.n	800111c <__aeabi_dsub+0x230>
 8001398:	4642      	mov	r2, r8
 800139a:	2400      	movs	r4, #0
 800139c:	2300      	movs	r3, #0
 800139e:	e648      	b.n	8001032 <__aeabi_dsub+0x146>
 80013a0:	2020      	movs	r0, #32
 80013a2:	000c      	movs	r4, r1
 80013a4:	1a80      	subs	r0, r0, r2
 80013a6:	003e      	movs	r6, r7
 80013a8:	4087      	lsls	r7, r0
 80013aa:	4084      	lsls	r4, r0
 80013ac:	40d6      	lsrs	r6, r2
 80013ae:	1e78      	subs	r0, r7, #1
 80013b0:	4187      	sbcs	r7, r0
 80013b2:	40d1      	lsrs	r1, r2
 80013b4:	4334      	orrs	r4, r6
 80013b6:	433c      	orrs	r4, r7
 80013b8:	448c      	add	ip, r1
 80013ba:	e7a4      	b.n	8001306 <__aeabi_dsub+0x41a>
 80013bc:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <__aeabi_dsub+0x6d4>)
 80013be:	4290      	cmp	r0, r2
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x4d8>
 80013c2:	e0e9      	b.n	8001598 <__aeabi_dsub+0x6ac>
 80013c4:	19df      	adds	r7, r3, r7
 80013c6:	429f      	cmp	r7, r3
 80013c8:	419b      	sbcs	r3, r3
 80013ca:	4461      	add	r1, ip
 80013cc:	425b      	negs	r3, r3
 80013ce:	18c9      	adds	r1, r1, r3
 80013d0:	07cc      	lsls	r4, r1, #31
 80013d2:	087f      	lsrs	r7, r7, #1
 80013d4:	084b      	lsrs	r3, r1, #1
 80013d6:	4699      	mov	r9, r3
 80013d8:	4680      	mov	r8, r0
 80013da:	433c      	orrs	r4, r7
 80013dc:	e6f4      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 80013de:	1afc      	subs	r4, r7, r3
 80013e0:	42a7      	cmp	r7, r4
 80013e2:	41bf      	sbcs	r7, r7
 80013e4:	4663      	mov	r3, ip
 80013e6:	427f      	negs	r7, r7
 80013e8:	1ac9      	subs	r1, r1, r3
 80013ea:	1bcb      	subs	r3, r1, r7
 80013ec:	4699      	mov	r9, r3
 80013ee:	465d      	mov	r5, fp
 80013f0:	e5d5      	b.n	8000f9e <__aeabi_dsub+0xb2>
 80013f2:	08ff      	lsrs	r7, r7, #3
 80013f4:	074b      	lsls	r3, r1, #29
 80013f6:	465d      	mov	r5, fp
 80013f8:	433b      	orrs	r3, r7
 80013fa:	08cc      	lsrs	r4, r1, #3
 80013fc:	e6ee      	b.n	80011dc <__aeabi_dsub+0x2f0>
 80013fe:	4662      	mov	r2, ip
 8001400:	431a      	orrs	r2, r3
 8001402:	d000      	beq.n	8001406 <__aeabi_dsub+0x51a>
 8001404:	e082      	b.n	800150c <__aeabi_dsub+0x620>
 8001406:	000b      	movs	r3, r1
 8001408:	433b      	orrs	r3, r7
 800140a:	d11b      	bne.n	8001444 <__aeabi_dsub+0x558>
 800140c:	2480      	movs	r4, #128	; 0x80
 800140e:	2500      	movs	r5, #0
 8001410:	0324      	lsls	r4, r4, #12
 8001412:	e6f9      	b.n	8001208 <__aeabi_dsub+0x31c>
 8001414:	19dc      	adds	r4, r3, r7
 8001416:	429c      	cmp	r4, r3
 8001418:	419b      	sbcs	r3, r3
 800141a:	4461      	add	r1, ip
 800141c:	4689      	mov	r9, r1
 800141e:	425b      	negs	r3, r3
 8001420:	4499      	add	r9, r3
 8001422:	464b      	mov	r3, r9
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	d444      	bmi.n	80014b2 <__aeabi_dsub+0x5c6>
 8001428:	2301      	movs	r3, #1
 800142a:	4698      	mov	r8, r3
 800142c:	e6cc      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 800142e:	1bdc      	subs	r4, r3, r7
 8001430:	4662      	mov	r2, ip
 8001432:	42a3      	cmp	r3, r4
 8001434:	419b      	sbcs	r3, r3
 8001436:	1a51      	subs	r1, r2, r1
 8001438:	425b      	negs	r3, r3
 800143a:	1acb      	subs	r3, r1, r3
 800143c:	4699      	mov	r9, r3
 800143e:	2301      	movs	r3, #1
 8001440:	4698      	mov	r8, r3
 8001442:	e5a4      	b.n	8000f8e <__aeabi_dsub+0xa2>
 8001444:	08ff      	lsrs	r7, r7, #3
 8001446:	074b      	lsls	r3, r1, #29
 8001448:	465d      	mov	r5, fp
 800144a:	433b      	orrs	r3, r7
 800144c:	08cc      	lsrs	r4, r1, #3
 800144e:	e6d7      	b.n	8001200 <__aeabi_dsub+0x314>
 8001450:	4662      	mov	r2, ip
 8001452:	431a      	orrs	r2, r3
 8001454:	0014      	movs	r4, r2
 8001456:	1e63      	subs	r3, r4, #1
 8001458:	419c      	sbcs	r4, r3
 800145a:	e679      	b.n	8001150 <__aeabi_dsub+0x264>
 800145c:	0015      	movs	r5, r2
 800145e:	4664      	mov	r4, ip
 8001460:	3d20      	subs	r5, #32
 8001462:	40ec      	lsrs	r4, r5
 8001464:	46a0      	mov	r8, r4
 8001466:	2a20      	cmp	r2, #32
 8001468:	d005      	beq.n	8001476 <__aeabi_dsub+0x58a>
 800146a:	2540      	movs	r5, #64	; 0x40
 800146c:	4664      	mov	r4, ip
 800146e:	1aaa      	subs	r2, r5, r2
 8001470:	4094      	lsls	r4, r2
 8001472:	4323      	orrs	r3, r4
 8001474:	469a      	mov	sl, r3
 8001476:	4654      	mov	r4, sl
 8001478:	1e63      	subs	r3, r4, #1
 800147a:	419c      	sbcs	r4, r3
 800147c:	4643      	mov	r3, r8
 800147e:	4323      	orrs	r3, r4
 8001480:	e773      	b.n	800136a <__aeabi_dsub+0x47e>
 8001482:	4662      	mov	r2, ip
 8001484:	431a      	orrs	r2, r3
 8001486:	d023      	beq.n	80014d0 <__aeabi_dsub+0x5e4>
 8001488:	000a      	movs	r2, r1
 800148a:	433a      	orrs	r2, r7
 800148c:	d000      	beq.n	8001490 <__aeabi_dsub+0x5a4>
 800148e:	e0a0      	b.n	80015d2 <__aeabi_dsub+0x6e6>
 8001490:	4662      	mov	r2, ip
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	0752      	lsls	r2, r2, #29
 8001496:	4313      	orrs	r3, r2
 8001498:	4662      	mov	r2, ip
 800149a:	08d4      	lsrs	r4, r2, #3
 800149c:	e6b0      	b.n	8001200 <__aeabi_dsub+0x314>
 800149e:	000b      	movs	r3, r1
 80014a0:	433b      	orrs	r3, r7
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dsub+0x5ba>
 80014a4:	e728      	b.n	80012f8 <__aeabi_dsub+0x40c>
 80014a6:	08ff      	lsrs	r7, r7, #3
 80014a8:	074b      	lsls	r3, r1, #29
 80014aa:	465d      	mov	r5, fp
 80014ac:	433b      	orrs	r3, r7
 80014ae:	08cc      	lsrs	r4, r1, #3
 80014b0:	e697      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 80014b2:	2302      	movs	r3, #2
 80014b4:	4698      	mov	r8, r3
 80014b6:	e736      	b.n	8001326 <__aeabi_dsub+0x43a>
 80014b8:	1afc      	subs	r4, r7, r3
 80014ba:	42a7      	cmp	r7, r4
 80014bc:	41bf      	sbcs	r7, r7
 80014be:	4663      	mov	r3, ip
 80014c0:	427f      	negs	r7, r7
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	1bcb      	subs	r3, r1, r7
 80014c6:	4699      	mov	r9, r3
 80014c8:	2301      	movs	r3, #1
 80014ca:	465d      	mov	r5, fp
 80014cc:	4698      	mov	r8, r3
 80014ce:	e55e      	b.n	8000f8e <__aeabi_dsub+0xa2>
 80014d0:	074b      	lsls	r3, r1, #29
 80014d2:	08ff      	lsrs	r7, r7, #3
 80014d4:	433b      	orrs	r3, r7
 80014d6:	08cc      	lsrs	r4, r1, #3
 80014d8:	e692      	b.n	8001200 <__aeabi_dsub+0x314>
 80014da:	1bdc      	subs	r4, r3, r7
 80014dc:	4660      	mov	r0, ip
 80014de:	42a3      	cmp	r3, r4
 80014e0:	41b6      	sbcs	r6, r6
 80014e2:	1a40      	subs	r0, r0, r1
 80014e4:	4276      	negs	r6, r6
 80014e6:	1b80      	subs	r0, r0, r6
 80014e8:	4681      	mov	r9, r0
 80014ea:	0200      	lsls	r0, r0, #8
 80014ec:	d560      	bpl.n	80015b0 <__aeabi_dsub+0x6c4>
 80014ee:	1afc      	subs	r4, r7, r3
 80014f0:	42a7      	cmp	r7, r4
 80014f2:	41bf      	sbcs	r7, r7
 80014f4:	4663      	mov	r3, ip
 80014f6:	427f      	negs	r7, r7
 80014f8:	1ac9      	subs	r1, r1, r3
 80014fa:	1bcb      	subs	r3, r1, r7
 80014fc:	4699      	mov	r9, r3
 80014fe:	465d      	mov	r5, fp
 8001500:	e576      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001502:	08ff      	lsrs	r7, r7, #3
 8001504:	074b      	lsls	r3, r1, #29
 8001506:	433b      	orrs	r3, r7
 8001508:	08cc      	lsrs	r4, r1, #3
 800150a:	e667      	b.n	80011dc <__aeabi_dsub+0x2f0>
 800150c:	000a      	movs	r2, r1
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	433a      	orrs	r2, r7
 8001512:	d100      	bne.n	8001516 <__aeabi_dsub+0x62a>
 8001514:	e66f      	b.n	80011f6 <__aeabi_dsub+0x30a>
 8001516:	4662      	mov	r2, ip
 8001518:	0752      	lsls	r2, r2, #29
 800151a:	4313      	orrs	r3, r2
 800151c:	4662      	mov	r2, ip
 800151e:	08d4      	lsrs	r4, r2, #3
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0312      	lsls	r2, r2, #12
 8001524:	4214      	tst	r4, r2
 8001526:	d007      	beq.n	8001538 <__aeabi_dsub+0x64c>
 8001528:	08c8      	lsrs	r0, r1, #3
 800152a:	4210      	tst	r0, r2
 800152c:	d104      	bne.n	8001538 <__aeabi_dsub+0x64c>
 800152e:	465d      	mov	r5, fp
 8001530:	0004      	movs	r4, r0
 8001532:	08fb      	lsrs	r3, r7, #3
 8001534:	0749      	lsls	r1, r1, #29
 8001536:	430b      	orrs	r3, r1
 8001538:	0f5a      	lsrs	r2, r3, #29
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	0752      	lsls	r2, r2, #29
 8001540:	4313      	orrs	r3, r2
 8001542:	e65d      	b.n	8001200 <__aeabi_dsub+0x314>
 8001544:	074b      	lsls	r3, r1, #29
 8001546:	08ff      	lsrs	r7, r7, #3
 8001548:	433b      	orrs	r3, r7
 800154a:	08cc      	lsrs	r4, r1, #3
 800154c:	e649      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 800154e:	19dc      	adds	r4, r3, r7
 8001550:	429c      	cmp	r4, r3
 8001552:	419b      	sbcs	r3, r3
 8001554:	4461      	add	r1, ip
 8001556:	4689      	mov	r9, r1
 8001558:	425b      	negs	r3, r3
 800155a:	4499      	add	r9, r3
 800155c:	464b      	mov	r3, r9
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	d400      	bmi.n	8001564 <__aeabi_dsub+0x678>
 8001562:	e631      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8001564:	464a      	mov	r2, r9
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <__aeabi_dsub+0x6d8>)
 8001568:	401a      	ands	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	4691      	mov	r9, r2
 800156e:	4698      	mov	r8, r3
 8001570:	e62a      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8001572:	0016      	movs	r6, r2
 8001574:	4664      	mov	r4, ip
 8001576:	3e20      	subs	r6, #32
 8001578:	40f4      	lsrs	r4, r6
 800157a:	46a0      	mov	r8, r4
 800157c:	2a20      	cmp	r2, #32
 800157e:	d005      	beq.n	800158c <__aeabi_dsub+0x6a0>
 8001580:	2640      	movs	r6, #64	; 0x40
 8001582:	4664      	mov	r4, ip
 8001584:	1ab2      	subs	r2, r6, r2
 8001586:	4094      	lsls	r4, r2
 8001588:	4323      	orrs	r3, r4
 800158a:	469a      	mov	sl, r3
 800158c:	4654      	mov	r4, sl
 800158e:	1e63      	subs	r3, r4, #1
 8001590:	419c      	sbcs	r4, r3
 8001592:	4643      	mov	r3, r8
 8001594:	431c      	orrs	r4, r3
 8001596:	e5db      	b.n	8001150 <__aeabi_dsub+0x264>
 8001598:	0002      	movs	r2, r0
 800159a:	2400      	movs	r4, #0
 800159c:	2300      	movs	r3, #0
 800159e:	e548      	b.n	8001032 <__aeabi_dsub+0x146>
 80015a0:	19dc      	adds	r4, r3, r7
 80015a2:	42bc      	cmp	r4, r7
 80015a4:	41bf      	sbcs	r7, r7
 80015a6:	4461      	add	r1, ip
 80015a8:	4689      	mov	r9, r1
 80015aa:	427f      	negs	r7, r7
 80015ac:	44b9      	add	r9, r7
 80015ae:	e738      	b.n	8001422 <__aeabi_dsub+0x536>
 80015b0:	464b      	mov	r3, r9
 80015b2:	4323      	orrs	r3, r4
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x6cc>
 80015b6:	e69f      	b.n	80012f8 <__aeabi_dsub+0x40c>
 80015b8:	e606      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	000007fe 	.word	0x000007fe
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	ff7fffff 	.word	0xff7fffff
 80015c8:	08ff      	lsrs	r7, r7, #3
 80015ca:	074b      	lsls	r3, r1, #29
 80015cc:	433b      	orrs	r3, r7
 80015ce:	08cc      	lsrs	r4, r1, #3
 80015d0:	e616      	b.n	8001200 <__aeabi_dsub+0x314>
 80015d2:	4662      	mov	r2, ip
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0752      	lsls	r2, r2, #29
 80015d8:	4313      	orrs	r3, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	08d4      	lsrs	r4, r2, #3
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	4214      	tst	r4, r2
 80015e4:	d007      	beq.n	80015f6 <__aeabi_dsub+0x70a>
 80015e6:	08c8      	lsrs	r0, r1, #3
 80015e8:	4210      	tst	r0, r2
 80015ea:	d104      	bne.n	80015f6 <__aeabi_dsub+0x70a>
 80015ec:	465d      	mov	r5, fp
 80015ee:	0004      	movs	r4, r0
 80015f0:	08fb      	lsrs	r3, r7, #3
 80015f2:	0749      	lsls	r1, r1, #29
 80015f4:	430b      	orrs	r3, r1
 80015f6:	0f5a      	lsrs	r2, r3, #29
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	0752      	lsls	r2, r2, #29
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	4313      	orrs	r3, r2
 8001600:	e5fe      	b.n	8001200 <__aeabi_dsub+0x314>
 8001602:	2300      	movs	r3, #0
 8001604:	4a01      	ldr	r2, [pc, #4]	; (800160c <__aeabi_dsub+0x720>)
 8001606:	001c      	movs	r4, r3
 8001608:	e513      	b.n	8001032 <__aeabi_dsub+0x146>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_d2iz>:
 8001610:	000a      	movs	r2, r1
 8001612:	b530      	push	{r4, r5, lr}
 8001614:	4c13      	ldr	r4, [pc, #76]	; (8001664 <__aeabi_d2iz+0x54>)
 8001616:	0053      	lsls	r3, r2, #1
 8001618:	0309      	lsls	r1, r1, #12
 800161a:	0005      	movs	r5, r0
 800161c:	0b09      	lsrs	r1, r1, #12
 800161e:	2000      	movs	r0, #0
 8001620:	0d5b      	lsrs	r3, r3, #21
 8001622:	0fd2      	lsrs	r2, r2, #31
 8001624:	42a3      	cmp	r3, r4
 8001626:	dd04      	ble.n	8001632 <__aeabi_d2iz+0x22>
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <__aeabi_d2iz+0x58>)
 800162a:	4283      	cmp	r3, r0
 800162c:	dd02      	ble.n	8001634 <__aeabi_d2iz+0x24>
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <__aeabi_d2iz+0x5c>)
 8001630:	18d0      	adds	r0, r2, r3
 8001632:	bd30      	pop	{r4, r5, pc}
 8001634:	2080      	movs	r0, #128	; 0x80
 8001636:	0340      	lsls	r0, r0, #13
 8001638:	4301      	orrs	r1, r0
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <__aeabi_d2iz+0x60>)
 800163c:	1ac0      	subs	r0, r0, r3
 800163e:	281f      	cmp	r0, #31
 8001640:	dd08      	ble.n	8001654 <__aeabi_d2iz+0x44>
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <__aeabi_d2iz+0x64>)
 8001644:	1ac3      	subs	r3, r0, r3
 8001646:	40d9      	lsrs	r1, r3
 8001648:	000b      	movs	r3, r1
 800164a:	4258      	negs	r0, r3
 800164c:	2a00      	cmp	r2, #0
 800164e:	d1f0      	bne.n	8001632 <__aeabi_d2iz+0x22>
 8001650:	0018      	movs	r0, r3
 8001652:	e7ee      	b.n	8001632 <__aeabi_d2iz+0x22>
 8001654:	4c08      	ldr	r4, [pc, #32]	; (8001678 <__aeabi_d2iz+0x68>)
 8001656:	40c5      	lsrs	r5, r0
 8001658:	46a4      	mov	ip, r4
 800165a:	4463      	add	r3, ip
 800165c:	4099      	lsls	r1, r3
 800165e:	000b      	movs	r3, r1
 8001660:	432b      	orrs	r3, r5
 8001662:	e7f2      	b.n	800164a <__aeabi_d2iz+0x3a>
 8001664:	000003fe 	.word	0x000003fe
 8001668:	0000041d 	.word	0x0000041d
 800166c:	7fffffff 	.word	0x7fffffff
 8001670:	00000433 	.word	0x00000433
 8001674:	00000413 	.word	0x00000413
 8001678:	fffffbed 	.word	0xfffffbed

0800167c <__aeabi_ui2d>:
 800167c:	b510      	push	{r4, lr}
 800167e:	1e04      	subs	r4, r0, #0
 8001680:	d010      	beq.n	80016a4 <__aeabi_ui2d+0x28>
 8001682:	f000 f85f 	bl	8001744 <__clzsi2>
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <__aeabi_ui2d+0x48>)
 8001688:	1a1b      	subs	r3, r3, r0
 800168a:	280a      	cmp	r0, #10
 800168c:	dc11      	bgt.n	80016b2 <__aeabi_ui2d+0x36>
 800168e:	220b      	movs	r2, #11
 8001690:	0021      	movs	r1, r4
 8001692:	1a12      	subs	r2, r2, r0
 8001694:	40d1      	lsrs	r1, r2
 8001696:	3015      	adds	r0, #21
 8001698:	030a      	lsls	r2, r1, #12
 800169a:	055b      	lsls	r3, r3, #21
 800169c:	4084      	lsls	r4, r0
 800169e:	0b12      	lsrs	r2, r2, #12
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	e001      	b.n	80016a8 <__aeabi_ui2d+0x2c>
 80016a4:	2300      	movs	r3, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	4313      	orrs	r3, r2
 80016ac:	0020      	movs	r0, r4
 80016ae:	0019      	movs	r1, r3
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	0022      	movs	r2, r4
 80016b4:	380b      	subs	r0, #11
 80016b6:	4082      	lsls	r2, r0
 80016b8:	055b      	lsls	r3, r3, #21
 80016ba:	0312      	lsls	r2, r2, #12
 80016bc:	2400      	movs	r4, #0
 80016be:	0b12      	lsrs	r2, r2, #12
 80016c0:	0d5b      	lsrs	r3, r3, #21
 80016c2:	e7f1      	b.n	80016a8 <__aeabi_ui2d+0x2c>
 80016c4:	0000041e 	.word	0x0000041e

080016c8 <__aeabi_cdrcmple>:
 80016c8:	4684      	mov	ip, r0
 80016ca:	0010      	movs	r0, r2
 80016cc:	4662      	mov	r2, ip
 80016ce:	468c      	mov	ip, r1
 80016d0:	0019      	movs	r1, r3
 80016d2:	4663      	mov	r3, ip
 80016d4:	e000      	b.n	80016d8 <__aeabi_cdcmpeq>
 80016d6:	46c0      	nop			; (mov r8, r8)

080016d8 <__aeabi_cdcmpeq>:
 80016d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016da:	f000 f8f9 	bl	80018d0 <__ledf2>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d401      	bmi.n	80016e6 <__aeabi_cdcmpeq+0xe>
 80016e2:	2100      	movs	r1, #0
 80016e4:	42c8      	cmn	r0, r1
 80016e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016e8 <__aeabi_dcmpeq>:
 80016e8:	b510      	push	{r4, lr}
 80016ea:	f000 f849 	bl	8001780 <__eqdf2>
 80016ee:	4240      	negs	r0, r0
 80016f0:	3001      	adds	r0, #1
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <__aeabi_dcmplt>:
 80016f4:	b510      	push	{r4, lr}
 80016f6:	f000 f8eb 	bl	80018d0 <__ledf2>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	db01      	blt.n	8001702 <__aeabi_dcmplt+0xe>
 80016fe:	2000      	movs	r0, #0
 8001700:	bd10      	pop	{r4, pc}
 8001702:	2001      	movs	r0, #1
 8001704:	bd10      	pop	{r4, pc}
 8001706:	46c0      	nop			; (mov r8, r8)

08001708 <__aeabi_dcmple>:
 8001708:	b510      	push	{r4, lr}
 800170a:	f000 f8e1 	bl	80018d0 <__ledf2>
 800170e:	2800      	cmp	r0, #0
 8001710:	dd01      	ble.n	8001716 <__aeabi_dcmple+0xe>
 8001712:	2000      	movs	r0, #0
 8001714:	bd10      	pop	{r4, pc}
 8001716:	2001      	movs	r0, #1
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			; (mov r8, r8)

0800171c <__aeabi_dcmpgt>:
 800171c:	b510      	push	{r4, lr}
 800171e:	f000 f871 	bl	8001804 <__gedf2>
 8001722:	2800      	cmp	r0, #0
 8001724:	dc01      	bgt.n	800172a <__aeabi_dcmpgt+0xe>
 8001726:	2000      	movs	r0, #0
 8001728:	bd10      	pop	{r4, pc}
 800172a:	2001      	movs	r0, #1
 800172c:	bd10      	pop	{r4, pc}
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <__aeabi_dcmpge>:
 8001730:	b510      	push	{r4, lr}
 8001732:	f000 f867 	bl	8001804 <__gedf2>
 8001736:	2800      	cmp	r0, #0
 8001738:	da01      	bge.n	800173e <__aeabi_dcmpge+0xe>
 800173a:	2000      	movs	r0, #0
 800173c:	bd10      	pop	{r4, pc}
 800173e:	2001      	movs	r0, #1
 8001740:	bd10      	pop	{r4, pc}
 8001742:	46c0      	nop			; (mov r8, r8)

08001744 <__clzsi2>:
 8001744:	211c      	movs	r1, #28
 8001746:	2301      	movs	r3, #1
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	4298      	cmp	r0, r3
 800174c:	d301      	bcc.n	8001752 <__clzsi2+0xe>
 800174e:	0c00      	lsrs	r0, r0, #16
 8001750:	3910      	subs	r1, #16
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	4298      	cmp	r0, r3
 8001756:	d301      	bcc.n	800175c <__clzsi2+0x18>
 8001758:	0a00      	lsrs	r0, r0, #8
 800175a:	3908      	subs	r1, #8
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	4298      	cmp	r0, r3
 8001760:	d301      	bcc.n	8001766 <__clzsi2+0x22>
 8001762:	0900      	lsrs	r0, r0, #4
 8001764:	3904      	subs	r1, #4
 8001766:	a202      	add	r2, pc, #8	; (adr r2, 8001770 <__clzsi2+0x2c>)
 8001768:	5c10      	ldrb	r0, [r2, r0]
 800176a:	1840      	adds	r0, r0, r1
 800176c:	4770      	bx	lr
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	02020304 	.word	0x02020304
 8001774:	01010101 	.word	0x01010101
	...

08001780 <__eqdf2>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	464e      	mov	r6, r9
 8001784:	4645      	mov	r5, r8
 8001786:	46de      	mov	lr, fp
 8001788:	4657      	mov	r7, sl
 800178a:	4690      	mov	r8, r2
 800178c:	b5e0      	push	{r5, r6, r7, lr}
 800178e:	0017      	movs	r7, r2
 8001790:	031a      	lsls	r2, r3, #12
 8001792:	0b12      	lsrs	r2, r2, #12
 8001794:	0005      	movs	r5, r0
 8001796:	4684      	mov	ip, r0
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <__eqdf2+0x80>)
 800179a:	030e      	lsls	r6, r1, #12
 800179c:	004c      	lsls	r4, r1, #1
 800179e:	4691      	mov	r9, r2
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	0fdb      	lsrs	r3, r3, #31
 80017a4:	469b      	mov	fp, r3
 80017a6:	0b36      	lsrs	r6, r6, #12
 80017a8:	0d64      	lsrs	r4, r4, #21
 80017aa:	0fc9      	lsrs	r1, r1, #31
 80017ac:	0d52      	lsrs	r2, r2, #21
 80017ae:	4284      	cmp	r4, r0
 80017b0:	d019      	beq.n	80017e6 <__eqdf2+0x66>
 80017b2:	4282      	cmp	r2, r0
 80017b4:	d010      	beq.n	80017d8 <__eqdf2+0x58>
 80017b6:	2001      	movs	r0, #1
 80017b8:	4294      	cmp	r4, r2
 80017ba:	d10e      	bne.n	80017da <__eqdf2+0x5a>
 80017bc:	454e      	cmp	r6, r9
 80017be:	d10c      	bne.n	80017da <__eqdf2+0x5a>
 80017c0:	2001      	movs	r0, #1
 80017c2:	45c4      	cmp	ip, r8
 80017c4:	d109      	bne.n	80017da <__eqdf2+0x5a>
 80017c6:	4559      	cmp	r1, fp
 80017c8:	d017      	beq.n	80017fa <__eqdf2+0x7a>
 80017ca:	2c00      	cmp	r4, #0
 80017cc:	d105      	bne.n	80017da <__eqdf2+0x5a>
 80017ce:	0030      	movs	r0, r6
 80017d0:	4328      	orrs	r0, r5
 80017d2:	1e43      	subs	r3, r0, #1
 80017d4:	4198      	sbcs	r0, r3
 80017d6:	e000      	b.n	80017da <__eqdf2+0x5a>
 80017d8:	2001      	movs	r0, #1
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	0033      	movs	r3, r6
 80017e8:	2001      	movs	r0, #1
 80017ea:	432b      	orrs	r3, r5
 80017ec:	d1f5      	bne.n	80017da <__eqdf2+0x5a>
 80017ee:	42a2      	cmp	r2, r4
 80017f0:	d1f3      	bne.n	80017da <__eqdf2+0x5a>
 80017f2:	464b      	mov	r3, r9
 80017f4:	433b      	orrs	r3, r7
 80017f6:	d1f0      	bne.n	80017da <__eqdf2+0x5a>
 80017f8:	e7e2      	b.n	80017c0 <__eqdf2+0x40>
 80017fa:	2000      	movs	r0, #0
 80017fc:	e7ed      	b.n	80017da <__eqdf2+0x5a>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff

08001804 <__gedf2>:
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	4647      	mov	r7, r8
 8001808:	46ce      	mov	lr, r9
 800180a:	0004      	movs	r4, r0
 800180c:	0018      	movs	r0, r3
 800180e:	0016      	movs	r6, r2
 8001810:	031b      	lsls	r3, r3, #12
 8001812:	0b1b      	lsrs	r3, r3, #12
 8001814:	4d2d      	ldr	r5, [pc, #180]	; (80018cc <__gedf2+0xc8>)
 8001816:	004a      	lsls	r2, r1, #1
 8001818:	4699      	mov	r9, r3
 800181a:	b580      	push	{r7, lr}
 800181c:	0043      	lsls	r3, r0, #1
 800181e:	030f      	lsls	r7, r1, #12
 8001820:	46a4      	mov	ip, r4
 8001822:	46b0      	mov	r8, r6
 8001824:	0b3f      	lsrs	r7, r7, #12
 8001826:	0d52      	lsrs	r2, r2, #21
 8001828:	0fc9      	lsrs	r1, r1, #31
 800182a:	0d5b      	lsrs	r3, r3, #21
 800182c:	0fc0      	lsrs	r0, r0, #31
 800182e:	42aa      	cmp	r2, r5
 8001830:	d021      	beq.n	8001876 <__gedf2+0x72>
 8001832:	42ab      	cmp	r3, r5
 8001834:	d013      	beq.n	800185e <__gedf2+0x5a>
 8001836:	2a00      	cmp	r2, #0
 8001838:	d122      	bne.n	8001880 <__gedf2+0x7c>
 800183a:	433c      	orrs	r4, r7
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <__gedf2+0x42>
 8001840:	464d      	mov	r5, r9
 8001842:	432e      	orrs	r6, r5
 8001844:	d022      	beq.n	800188c <__gedf2+0x88>
 8001846:	2c00      	cmp	r4, #0
 8001848:	d010      	beq.n	800186c <__gedf2+0x68>
 800184a:	4281      	cmp	r1, r0
 800184c:	d022      	beq.n	8001894 <__gedf2+0x90>
 800184e:	2002      	movs	r0, #2
 8001850:	3901      	subs	r1, #1
 8001852:	4008      	ands	r0, r1
 8001854:	3801      	subs	r0, #1
 8001856:	bcc0      	pop	{r6, r7}
 8001858:	46b9      	mov	r9, r7
 800185a:	46b0      	mov	r8, r6
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	464d      	mov	r5, r9
 8001860:	432e      	orrs	r6, r5
 8001862:	d129      	bne.n	80018b8 <__gedf2+0xb4>
 8001864:	2a00      	cmp	r2, #0
 8001866:	d1f0      	bne.n	800184a <__gedf2+0x46>
 8001868:	433c      	orrs	r4, r7
 800186a:	d1ee      	bne.n	800184a <__gedf2+0x46>
 800186c:	2800      	cmp	r0, #0
 800186e:	d1f2      	bne.n	8001856 <__gedf2+0x52>
 8001870:	2001      	movs	r0, #1
 8001872:	4240      	negs	r0, r0
 8001874:	e7ef      	b.n	8001856 <__gedf2+0x52>
 8001876:	003d      	movs	r5, r7
 8001878:	4325      	orrs	r5, r4
 800187a:	d11d      	bne.n	80018b8 <__gedf2+0xb4>
 800187c:	4293      	cmp	r3, r2
 800187e:	d0ee      	beq.n	800185e <__gedf2+0x5a>
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e2      	bne.n	800184a <__gedf2+0x46>
 8001884:	464c      	mov	r4, r9
 8001886:	4326      	orrs	r6, r4
 8001888:	d1df      	bne.n	800184a <__gedf2+0x46>
 800188a:	e7e0      	b.n	800184e <__gedf2+0x4a>
 800188c:	2000      	movs	r0, #0
 800188e:	2c00      	cmp	r4, #0
 8001890:	d0e1      	beq.n	8001856 <__gedf2+0x52>
 8001892:	e7dc      	b.n	800184e <__gedf2+0x4a>
 8001894:	429a      	cmp	r2, r3
 8001896:	dc0a      	bgt.n	80018ae <__gedf2+0xaa>
 8001898:	dbe8      	blt.n	800186c <__gedf2+0x68>
 800189a:	454f      	cmp	r7, r9
 800189c:	d8d7      	bhi.n	800184e <__gedf2+0x4a>
 800189e:	d00e      	beq.n	80018be <__gedf2+0xba>
 80018a0:	2000      	movs	r0, #0
 80018a2:	454f      	cmp	r7, r9
 80018a4:	d2d7      	bcs.n	8001856 <__gedf2+0x52>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	d0e2      	beq.n	8001870 <__gedf2+0x6c>
 80018aa:	0008      	movs	r0, r1
 80018ac:	e7d3      	b.n	8001856 <__gedf2+0x52>
 80018ae:	4243      	negs	r3, r0
 80018b0:	4158      	adcs	r0, r3
 80018b2:	0040      	lsls	r0, r0, #1
 80018b4:	3801      	subs	r0, #1
 80018b6:	e7ce      	b.n	8001856 <__gedf2+0x52>
 80018b8:	2002      	movs	r0, #2
 80018ba:	4240      	negs	r0, r0
 80018bc:	e7cb      	b.n	8001856 <__gedf2+0x52>
 80018be:	45c4      	cmp	ip, r8
 80018c0:	d8c5      	bhi.n	800184e <__gedf2+0x4a>
 80018c2:	2000      	movs	r0, #0
 80018c4:	45c4      	cmp	ip, r8
 80018c6:	d2c6      	bcs.n	8001856 <__gedf2+0x52>
 80018c8:	e7ed      	b.n	80018a6 <__gedf2+0xa2>
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	000007ff 	.word	0x000007ff

080018d0 <__ledf2>:
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	4647      	mov	r7, r8
 80018d4:	46ce      	mov	lr, r9
 80018d6:	0004      	movs	r4, r0
 80018d8:	0018      	movs	r0, r3
 80018da:	0016      	movs	r6, r2
 80018dc:	031b      	lsls	r3, r3, #12
 80018de:	0b1b      	lsrs	r3, r3, #12
 80018e0:	4d2c      	ldr	r5, [pc, #176]	; (8001994 <__ledf2+0xc4>)
 80018e2:	004a      	lsls	r2, r1, #1
 80018e4:	4699      	mov	r9, r3
 80018e6:	b580      	push	{r7, lr}
 80018e8:	0043      	lsls	r3, r0, #1
 80018ea:	030f      	lsls	r7, r1, #12
 80018ec:	46a4      	mov	ip, r4
 80018ee:	46b0      	mov	r8, r6
 80018f0:	0b3f      	lsrs	r7, r7, #12
 80018f2:	0d52      	lsrs	r2, r2, #21
 80018f4:	0fc9      	lsrs	r1, r1, #31
 80018f6:	0d5b      	lsrs	r3, r3, #21
 80018f8:	0fc0      	lsrs	r0, r0, #31
 80018fa:	42aa      	cmp	r2, r5
 80018fc:	d00d      	beq.n	800191a <__ledf2+0x4a>
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d010      	beq.n	8001924 <__ledf2+0x54>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d127      	bne.n	8001956 <__ledf2+0x86>
 8001906:	433c      	orrs	r4, r7
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <__ledf2+0x60>
 800190c:	464d      	mov	r5, r9
 800190e:	432e      	orrs	r6, r5
 8001910:	d10e      	bne.n	8001930 <__ledf2+0x60>
 8001912:	2000      	movs	r0, #0
 8001914:	2c00      	cmp	r4, #0
 8001916:	d015      	beq.n	8001944 <__ledf2+0x74>
 8001918:	e00e      	b.n	8001938 <__ledf2+0x68>
 800191a:	003d      	movs	r5, r7
 800191c:	4325      	orrs	r5, r4
 800191e:	d110      	bne.n	8001942 <__ledf2+0x72>
 8001920:	4293      	cmp	r3, r2
 8001922:	d118      	bne.n	8001956 <__ledf2+0x86>
 8001924:	464d      	mov	r5, r9
 8001926:	432e      	orrs	r6, r5
 8001928:	d10b      	bne.n	8001942 <__ledf2+0x72>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d102      	bne.n	8001934 <__ledf2+0x64>
 800192e:	433c      	orrs	r4, r7
 8001930:	2c00      	cmp	r4, #0
 8001932:	d00b      	beq.n	800194c <__ledf2+0x7c>
 8001934:	4281      	cmp	r1, r0
 8001936:	d014      	beq.n	8001962 <__ledf2+0x92>
 8001938:	2002      	movs	r0, #2
 800193a:	3901      	subs	r1, #1
 800193c:	4008      	ands	r0, r1
 800193e:	3801      	subs	r0, #1
 8001940:	e000      	b.n	8001944 <__ledf2+0x74>
 8001942:	2002      	movs	r0, #2
 8001944:	bcc0      	pop	{r6, r7}
 8001946:	46b9      	mov	r9, r7
 8001948:	46b0      	mov	r8, r6
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194c:	2800      	cmp	r0, #0
 800194e:	d1f9      	bne.n	8001944 <__ledf2+0x74>
 8001950:	2001      	movs	r0, #1
 8001952:	4240      	negs	r0, r0
 8001954:	e7f6      	b.n	8001944 <__ledf2+0x74>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ec      	bne.n	8001934 <__ledf2+0x64>
 800195a:	464c      	mov	r4, r9
 800195c:	4326      	orrs	r6, r4
 800195e:	d1e9      	bne.n	8001934 <__ledf2+0x64>
 8001960:	e7ea      	b.n	8001938 <__ledf2+0x68>
 8001962:	429a      	cmp	r2, r3
 8001964:	dd04      	ble.n	8001970 <__ledf2+0xa0>
 8001966:	4243      	negs	r3, r0
 8001968:	4158      	adcs	r0, r3
 800196a:	0040      	lsls	r0, r0, #1
 800196c:	3801      	subs	r0, #1
 800196e:	e7e9      	b.n	8001944 <__ledf2+0x74>
 8001970:	429a      	cmp	r2, r3
 8001972:	dbeb      	blt.n	800194c <__ledf2+0x7c>
 8001974:	454f      	cmp	r7, r9
 8001976:	d8df      	bhi.n	8001938 <__ledf2+0x68>
 8001978:	d006      	beq.n	8001988 <__ledf2+0xb8>
 800197a:	2000      	movs	r0, #0
 800197c:	454f      	cmp	r7, r9
 800197e:	d2e1      	bcs.n	8001944 <__ledf2+0x74>
 8001980:	2900      	cmp	r1, #0
 8001982:	d0e5      	beq.n	8001950 <__ledf2+0x80>
 8001984:	0008      	movs	r0, r1
 8001986:	e7dd      	b.n	8001944 <__ledf2+0x74>
 8001988:	45c4      	cmp	ip, r8
 800198a:	d8d5      	bhi.n	8001938 <__ledf2+0x68>
 800198c:	2000      	movs	r0, #0
 800198e:	45c4      	cmp	ip, r8
 8001990:	d2d8      	bcs.n	8001944 <__ledf2+0x74>
 8001992:	e7f5      	b.n	8001980 <__ledf2+0xb0>
 8001994:	000007ff 	.word	0x000007ff

08001998 <delay_in_us>:
/*********************************************************************************
								Macro Functions End
**********************************************************************************/

void delay_in_us(uint16_t time)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <delay_in_us+0x30>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <delay_in_us+0x30>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b4:	1dbb      	adds	r3, r7, #6
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3f8      	bcc.n	80019ae <delay_in_us+0x16>
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	20000030 	.word	0x20000030

080019cc <HAL_TIM_IC_CaptureCallback>:

uint32_t intCounter = 0, intCounter2 = 0;

// Timer Interrupt Callback for HC-SR04
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // CHECK WHETHER THE PWM STUFF GETS IN HERE
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	// We land here from the sleep mode. Resume the tick interrupt.
//	HAL_ResumeTick();
	intCounter2++;
 80019d4:	4bd8      	ldr	r3, [pc, #864]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4bd7      	ldr	r3, [pc, #860]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80019dc:	601a      	str	r2, [r3, #0]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4ad6      	ldr	r2, [pc, #856]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x370>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d000      	beq.n	80019ea <HAL_TIM_IC_CaptureCallback+0x1e>
 80019e8:	e08a      	b.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7f1b      	ldrb	r3, [r3, #28]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d000      	beq.n	80019f4 <HAL_TIM_IC_CaptureCallback+0x28>
 80019f2:	e085      	b.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
	{
		intCounter++;
 80019f4:	4bd2      	ldr	r3, [pc, #840]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x374>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	4bd1      	ldr	r3, [pc, #836]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x374>)
 80019fc:	601a      	str	r2, [r3, #0]
		if (Is_First_Captured_1 == 0)
 80019fe:	4bd1      	ldr	r3, [pc, #836]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11b      	bne.n	8001a3e <HAL_TIM_IC_CaptureCallback+0x72>
		{
			/* Take the time stamp of when the rising edge occurs */
			IC_VAL1_HCSR1 = HAL_TIM_ReadCapturedValue(htim, HCSR1_TIMER_CHANNEL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f003 fd20 	bl	8005450 <HAL_TIM_ReadCapturedValue>
 8001a10:	0002      	movs	r2, r0
 8001a12:	4bcd      	ldr	r3, [pc, #820]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a14:	601a      	str	r2, [r3, #0]
			Is_First_Captured_1 = 1; /* set the first captured as true */
 8001a16:	4bcb      	ldr	r3, [pc, #812]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			/* Now change the polarity to falling edge to be able to catch it when it happens */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR1_TIMER_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	210a      	movs	r1, #10
 8001a28:	438a      	bics	r2, r1
 8001a2a:	621a      	str	r2, [r3, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2102      	movs	r1, #2
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]
 8001a3c:	e060      	b.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
		}
		else if (Is_First_Captured_1 == 1)
 8001a3e:	4bc1      	ldr	r3, [pc, #772]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d15c      	bne.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
		{
			/* Take the time stamp of when the falling edge occurs */
			IC_VAL2_HCSR1 = HAL_TIM_ReadCapturedValue(htim, HCSR1_TIMER_CHANNEL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f003 fd00 	bl	8005450 <HAL_TIM_ReadCapturedValue>
 8001a50:	0002      	movs	r2, r0
 8001a52:	4bbe      	ldr	r3, [pc, #760]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a54:	601a      	str	r2, [r3, #0]
			/* __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter, kept here just in case */
			if (IC_VAL2_HCSR1 > IC_VAL1_HCSR1)
 8001a56:	4bbd      	ldr	r3, [pc, #756]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4bbb      	ldr	r3, [pc, #748]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d907      	bls.n	8001a72 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Difference_1 = IC_VAL2_HCSR1 - IC_VAL1_HCSR1;
 8001a62:	4bba      	ldr	r3, [pc, #744]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4bb8      	ldr	r3, [pc, #736]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	4bb8      	ldr	r3, [pc, #736]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e00e      	b.n	8001a90 <HAL_TIM_IC_CaptureCallback+0xc4>
			}
			else if (IC_VAL1_HCSR1 > IC_VAL2_HCSR1)
 8001a72:	4bb5      	ldr	r3, [pc, #724]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4bb5      	ldr	r3, [pc, #724]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d908      	bls.n	8001a90 <HAL_TIM_IC_CaptureCallback+0xc4>
			{
				Difference_1 = (0xffff - IC_VAL1_HCSR1) + IC_VAL2_HCSR1;
 8001a7e:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4bb1      	ldr	r3, [pc, #708]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4ab2      	ldr	r2, [pc, #712]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001a8a:	189a      	adds	r2, r3, r2
 8001a8c:	4bb0      	ldr	r3, [pc, #704]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001a8e:	601a      	str	r2, [r3, #0]
			}
			HCSR_Distance_1 = Difference_1 * .034/2;
 8001a90:	4baf      	ldr	r3, [pc, #700]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff fdf1 	bl	800167c <__aeabi_ui2d>
 8001a9a:	4aaf      	ldr	r2, [pc, #700]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001a9c:	4baf      	ldr	r3, [pc, #700]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x390>)
 8001a9e:	f7fe ffb9 	bl	8000a14 <__aeabi_dmul>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	000b      	movs	r3, r1
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	05db      	lsls	r3, r3, #23
 8001ab0:	f7fe fcba 	bl	8000428 <__aeabi_ddiv>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	0010      	movs	r0, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	f7fe fc96 	bl	80003ec <__aeabi_d2uiz>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4ba6      	ldr	r3, [pc, #664]	; (8001d60 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001ac6:	801a      	strh	r2, [r3, #0]
			Is_First_Captured_1 = 0; /* set it back to false */
 8001ac8:	4b9e      	ldr	r3, [pc, #632]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
			Distance1_flag = 1; /* Set the distance flag to 1 to indicate that the distance is calculated.*/
 8001ace:	4ba5      	ldr	r3, [pc, #660]	; (8001d64 <HAL_TIM_IC_CaptureCallback+0x398>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
			/* set polarity to rising edge */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR1_TIMER_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	210a      	movs	r1, #10
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	621a      	str	r2, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a12      	ldr	r2, [r2, #32]
 8001aee:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt after the distance calculation is done (or the noise can still pull the line up and down and cause interrupts) */
			__HAL_TIM_DISABLE_IT(&htim1, HCSR1_TIM_IT_CC);
 8001af0:	4b9d      	ldr	r3, [pc, #628]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	438a      	bics	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
//		HCSR_INPUT_HANDLE(htim, HCSR1_TIMER_ADDRESS, HCSR1_TIMER_CHANNEL, HCSR1_TIM_IT_CC,
//					      Is_First_Captured_1, IC_VAL1_HCSR1, IC_VAL2_HCSR1, Difference_1,
//					      HCSR_Distance_1, Distance1_flag);
//	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Timer 14 channel 1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7f1b      	ldrb	r3, [r3, #28]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d000      	beq.n	8001b0a <HAL_TIM_IC_CaptureCallback+0x13e>
 8001b08:	e086      	b.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
	{
		HCSR_INPUT_HANDLE(htim, HCSR2_TIMER_ADDRESS, HCSR2_TIMER_CHANNEL, HCSR2_TIM_IT_CC,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a97      	ldr	r2, [pc, #604]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d000      	beq.n	8001b16 <HAL_TIM_IC_CaptureCallback+0x14a>
 8001b14:	e080      	b.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
 8001b16:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d11b      	bne.n	8001b56 <HAL_TIM_IC_CaptureCallback+0x18a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f003 fc94 	bl	8005450 <HAL_TIM_ReadCapturedValue>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b90      	ldr	r3, [pc, #576]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	210a      	movs	r1, #10
 8001b40:	438a      	bics	r2, r1
 8001b42:	621a      	str	r2, [r3, #32]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2102      	movs	r1, #2
 8001b50:	430a      	orrs	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	e060      	b.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
 8001b56:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d15c      	bne.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2100      	movs	r1, #0
 8001b62:	0018      	movs	r0, r3
 8001b64:	f003 fc74 	bl	8005450 <HAL_TIM_ReadCapturedValue>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d907      	bls.n	8001b8a <HAL_TIM_IC_CaptureCallback+0x1be>
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e00e      	b.n	8001ba8 <HAL_TIM_IC_CaptureCallback+0x1dc>
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d908      	bls.n	8001ba8 <HAL_TIM_IC_CaptureCallback+0x1dc>
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001ba2:	189a      	adds	r2, r3, r2
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff fd65 	bl	800167c <__aeabi_ui2d>
 8001bb2:	4a69      	ldr	r2, [pc, #420]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001bb4:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x390>)
 8001bb6:	f7fe ff2d 	bl	8000a14 <__aeabi_dmul>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	000b      	movs	r3, r1
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	05db      	lsls	r3, r3, #23
 8001bc8:	f7fe fc2e 	bl	8000428 <__aeabi_ddiv>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	000b      	movs	r3, r1
 8001bd0:	0010      	movs	r0, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	f7fe fc0a 	bl	80003ec <__aeabi_d2uiz>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	210a      	movs	r1, #10
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	621a      	str	r2, [r3, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a12      	ldr	r2, [r2, #32]
 8001c06:	621a      	str	r2, [r3, #32]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2102      	movs	r1, #2
 8001c14:	438a      	bics	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
//////		HCSR_INPUT_HANDLE(htim, HCSR4_TIMER_ADDRESS, HCSR4_TIMER_CHANNEL, HCSR4_TIM_IT_CC,
//////						  Is_First_Captured_4, IC_VAL1_HCSR4, IC_VAL2_HCSR4, Difference_4,
//////						  HCSR_Distance_4, Distance4_flag);
//////	}
////
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Timer 17 channel 1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7f1b      	ldrb	r3, [r3, #28]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d000      	beq.n	8001c22 <HAL_TIM_IC_CaptureCallback+0x256>
 8001c20:	e086      	b.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
	{
		HCSR_INPUT_HANDLE(htim, HCSR5_TIMER_ADDRESS, HCSR5_TIMER_CHANNEL, HCSR5_TIM_IT_CC,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d000      	beq.n	8001c2e <HAL_TIM_IC_CaptureCallback+0x262>
 8001c2c:	e080      	b.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11b      	bne.n	8001c6e <HAL_TIM_IC_CaptureCallback+0x2a2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f003 fc08 	bl	8005450 <HAL_TIM_ReadCapturedValue>
 8001c40:	0002      	movs	r2, r0
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	210a      	movs	r1, #10
 8001c58:	438a      	bics	r2, r1
 8001c5a:	621a      	str	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2102      	movs	r1, #2
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	621a      	str	r2, [r3, #32]
						  Is_First_Captured_5, IC_VAL1_HCSR5, IC_VAL2_HCSR5, Difference_5,
						  HCSR_Distance_5, Distance5_flag);
	}
}
 8001c6c:	e060      	b.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
		HCSR_INPUT_HANDLE(htim, HCSR5_TIMER_ADDRESS, HCSR5_TIMER_CHANNEL, HCSR5_TIM_IT_CC,
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d15c      	bne.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f003 fbe8 	bl	8005450 <HAL_TIM_ReadCapturedValue>
 8001c80:	0002      	movs	r2, r0
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d907      	bls.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0x2d6>
 8001c92:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e00e      	b.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d908      	bls.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001cba:	189a      	adds	r2, r3, r2
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fcd9 	bl	800167c <__aeabi_ui2d>
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x390>)
 8001cce:	f7fe fea1 	bl	8000a14 <__aeabi_dmul>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	f7fe fba2 	bl	8000428 <__aeabi_ddiv>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	000b      	movs	r3, r1
 8001ce8:	0010      	movs	r0, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	f7fe fb7e 	bl	80003ec <__aeabi_d2uiz>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	210a      	movs	r1, #10
 8001d10:	438a      	bics	r2, r1
 8001d12:	621a      	str	r2, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a12      	ldr	r2, [r2, #32]
 8001d1e:	621a      	str	r2, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200003c4 	.word	0x200003c4
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	200003c0 	.word	0x200003c0
 8001d44:	200003b4 	.word	0x200003b4
 8001d48:	20000390 	.word	0x20000390
 8001d4c:	20000394 	.word	0x20000394
 8001d50:	200003a8 	.word	0x200003a8
 8001d54:	0000ffff 	.word	0x0000ffff
 8001d58:	b020c49c 	.word	0xb020c49c
 8001d5c:	3fa16872 	.word	0x3fa16872
 8001d60:	20000002 	.word	0x20000002
 8001d64:	200003b7 	.word	0x200003b7
 8001d68:	20000030 	.word	0x20000030
 8001d6c:	40002000 	.word	0x40002000
 8001d70:	200003b5 	.word	0x200003b5
 8001d74:	20000398 	.word	0x20000398
 8001d78:	2000039c 	.word	0x2000039c
 8001d7c:	200003ac 	.word	0x200003ac
 8001d80:	20000004 	.word	0x20000004
 8001d84:	200003b8 	.word	0x200003b8
 8001d88:	40014800 	.word	0x40014800
 8001d8c:	200003b6 	.word	0x200003b6
 8001d90:	200003a0 	.word	0x200003a0
 8001d94:	200003a4 	.word	0x200003a4
 8001d98:	200003b0 	.word	0x200003b0
 8001d9c:	20000006 	.word	0x20000006
 8001da0:	200003b9 	.word	0x200003b9

08001da4 <HCSR04_Read>:

// Pulls the trigger pin high for 10us to start the calculation
void HCSR04_Read (void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	Distance1_flag = 0;
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HCSR04_Read+0x48>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	0099      	lsls	r1, r3, #2
 8001db2:	23a0      	movs	r3, #160	; 0xa0
 8001db4:	05db      	lsls	r3, r3, #23
 8001db6:	2201      	movs	r2, #1
 8001db8:	0018      	movs	r0, r3
 8001dba:	f001 fe1f 	bl	80039fc <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f7ff fdea 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	23a0      	movs	r3, #160	; 0xa0
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	2200      	movs	r2, #0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f001 fe14 	bl	80039fc <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HCSR04_Read+0x4c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HCSR04_Read+0x4c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2102      	movs	r1, #2
 8001de0:	430a      	orrs	r2, r1
 8001de2:	60da      	str	r2, [r3, #12]
//	__HAL_TIM_ENABLE_IT(&HCSR2_timer_handler, HCSR2_TIM_IT_CC);
////	__HAL_TIM_ENABLE_IT(&HCSR3_timer_handler, HCSR3_TIM_IT_CC);
////	__HAL_TIM_ENABLE_IT(&HCSR4_timer_handler, HCSR4_TIM_IT_CC);
//	__HAL_TIM_ENABLE_IT(&HCSR5_timer_handler, HCSR5_TIM_IT_CC);

}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	200003b7 	.word	0x200003b7
 8001df0:	20000030 	.word	0x20000030

08001df4 <HCSR2_Read>:
//	__HAL_TIM_ENABLE_IT(&HCSR1_timer_handler, HCSR1_TIM_IT_CC);
//}
//
// Pulls the trigger pin high for 10us to start the calculation
void HCSR2_Read (void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	Distance2_flag = 0;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HCSR2_Read+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HCSR2_Read+0x44>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0018      	movs	r0, r3
 8001e06:	f001 fdf9 	bl	80039fc <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f7ff fdc4 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HCSR2_Read+0x44>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0018      	movs	r0, r3
 8001e18:	f001 fdf0 	bl	80039fc <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
	__HAL_TIM_ENABLE_IT(&HCSR2_timer_handler, HCSR2_TIM_IT_CC);
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HCSR2_Read+0x48>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HCSR2_Read+0x48>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2102      	movs	r1, #2
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	200003b8 	.word	0x200003b8
 8001e38:	50000800 	.word	0x50000800
 8001e3c:	200000c8 	.word	0x200000c8

08001e40 <HCSR5_Read>:
//
//// Pulls the trigger pin high for 10us to start the calculation
void HCSR5_Read (void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	Distance5_flag = 0;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HCSR5_Read+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG5_PORT, TRIG5_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HCSR5_Read+0x44>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	0018      	movs	r0, r3
 8001e52:	f001 fdd3 	bl	80039fc <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001e56:	200a      	movs	r0, #10
 8001e58:	f7ff fd9e 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG5_PORT, TRIG5_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HCSR5_Read+0x44>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2101      	movs	r1, #1
 8001e62:	0018      	movs	r0, r3
 8001e64:	f001 fdca 	bl	80039fc <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
	__HAL_TIM_ENABLE_IT(&HCSR5_timer_handler, HCSR5_TIM_IT_CC);
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HCSR5_Read+0x48>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HCSR5_Read+0x48>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2102      	movs	r1, #2
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	200003b9 	.word	0x200003b9
 8001e84:	50000400 	.word	0x50000400
 8001e88:	20000160 	.word	0x20000160

08001e8c <HAL_UART_TxCpltCallback>:
						Interrupt Callbacks (ISR) Begin
**********************************************************************************/

// UART transmit callback: gets called as soon as STM32 transmits through UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
   // do nothing here
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_PeriodElapsedCallback>:
//	USART_State = HAL_UART_Receive_IT(&huart1, rx, AOA_USART_NUM_BYTES);
}

// Distance sensor reading every 0.5 seconds
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
//	else
//	{
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
//	}
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <speed>:
		set_r = 0;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, set_r);
}

void speed(int32_t l, int32_t r) // range from -250 to 250
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
	if (l < -250 || l > 250 || r < -250 || r > 250)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	33fa      	adds	r3, #250	; 0xfa
 8001eba:	db08      	blt.n	8001ece <speed+0x22>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2bfa      	cmp	r3, #250	; 0xfa
 8001ec0:	dc05      	bgt.n	8001ece <speed+0x22>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	33fa      	adds	r3, #250	; 0xfa
 8001ec6:	db02      	blt.n	8001ece <speed+0x22>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2bfa      	cmp	r3, #250	; 0xfa
 8001ecc:	dd03      	ble.n	8001ed6 <speed+0x2a>
	{
		l = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
		r = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
	}

	uint32_t set_l = (l) + 750;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <speed+0x74>)
 8001eda:	4694      	mov	ip, r2
 8001edc:	4463      	add	r3, ip
 8001ede:	60fb      	str	r3, [r7, #12]
	if (l == 0)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <speed+0x3e>
		set_l = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]

	uint32_t set_r = (r) + 750;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <speed+0x74>)
 8001eee:	4694      	mov	ip, r2
 8001ef0:	4463      	add	r3, ip
 8001ef2:	60bb      	str	r3, [r7, #8]
	if (r == 0)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <speed+0x52>
		set_r = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <speed+0x78>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, set_l);
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <speed+0x78>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, set_r);
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <speed+0x78>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b004      	add	sp, #16
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	000002ee 	.word	0x000002ee
 8001f24:	2000007c 	.word	0x2000007c

08001f28 <goStraight>:
	speed(speed_val, -(speed_val - FRICTION_OFFSET));
}

// Input: Left wheel absolute speed
void goStraight(int32_t speed_val)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	// Less than FRICTION_OFFSET is there because the friction on the left wheel is more.
	if (speed_val <= FRICTION_OFFSET || speed_val > 250)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	dd02      	ble.n	8001f3c <goStraight+0x14>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2bfa      	cmp	r3, #250	; 0xfa
 8001f3a:	dd04      	ble.n	8001f46 <goStraight+0x1e>
	{
		speed(0, 0);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f7ff ffb4 	bl	8001eac <speed>
		return;
 8001f44:	e012      	b.n	8001f6c <goStraight+0x44>
	}

	turningLeft = 0;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <goStraight+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <goStraight+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <goStraight+0x54>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
	movingStraight = 1;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <goStraight+0x58>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
	speed(speed_val, speed_val - FRICTION_OFFSET);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	1f1a      	subs	r2, r3, #4
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0011      	movs	r1, r2
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7ff ffa0 	bl	8001eac <speed>
}
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	2000038c 	.word	0x2000038c
 8001f78:	2000038d 	.word	0x2000038d
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	2000038e 	.word	0x2000038e

08001f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f8a:	f001 f817 	bl	8002fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8e:	f000 f91f 	bl	80021d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f92:	f000 fc1b 	bl	80027cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001f96:	f000 fbf3 	bl	8002780 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001f9a:	f000 fba3 	bl	80026e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001f9e:	f000 fb53 	bl	8002648 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001fa2:	f000 f95d 	bl	8002260 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001fa6:	f000 f9bf 	bl	8002328 <MX_TIM3_Init>
  MX_TIM14_Init();
 8001faa:	f000 fa47 	bl	800243c <MX_TIM14_Init>
  MX_TIM17_Init();
 8001fae:	f000 fafb 	bl	80025a8 <MX_TIM17_Init>
  MX_TIM15_Init();
 8001fb2:	f000 fa8f 	bl	80024d4 <MX_TIM15_Init>
//#endif
//#if HCSR2_EN
//  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3); // Start the input capture for TIM1 Channel 3 interrupt for HC-SR04
//#endif

  HAL_TIM_IC_Start_IT(&HCSR1_timer_handler, HCSR1_TIMER_CHANNEL);
 8001fb6:	4b76      	ldr	r3, [pc, #472]	; (8002190 <main+0x20c>)
 8001fb8:	2100      	movs	r1, #0
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f002 fd6a 	bl	8004a94 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&HCSR2_timer_handler, HCSR2_TIMER_CHANNEL);
 8001fc0:	4b74      	ldr	r3, [pc, #464]	; (8002194 <main+0x210>)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f002 fd65 	bl	8004a94 <HAL_TIM_IC_Start_IT>
////  HAL_TIM_IC_Start_IT(&HCSR3_timer_handler, HCSR3_TIMER_CHANNEL);
////  HAL_TIM_IC_Start_IT(&HCSR4_timer_handler, HCSR4_TIMER_CHANNEL);
  HAL_TIM_IC_Start_IT(&HCSR5_timer_handler, HCSR5_TIMER_CHANNEL);
 8001fca:	4b73      	ldr	r3, [pc, #460]	; (8002198 <main+0x214>)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f002 fd60 	bl	8004a94 <HAL_TIM_IC_Start_IT>


  // ********** PWM Start for Controlling the Motors **********
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start the PWM for left motor
 8001fd4:	4b71      	ldr	r3, [pc, #452]	; (800219c <main+0x218>)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f002 fc1f 	bl	800481c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Start the PWM for right motor
 8001fde:	4b6f      	ldr	r3, [pc, #444]	; (800219c <main+0x218>)
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f002 fc1a 	bl	800481c <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

  // Snapshots for the volatile variables
//  uint16_t dist1 = 0, dist2 = 0, dist3 = 0, dist4 = 0, dist5 = 0;
//  int16_t angle_snapshot = 179, temp_angle_snapshot = 179;
  speed(0, 0);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2000      	movs	r0, #0
 8001fec:	f7ff ff5e 	bl	8001eac <speed>
//  HAL_Delay(5000);
  uint32_t HCSR_block_timeout = 75; // MAKE LARGER IF NEEDED
 8001ff0:	234b      	movs	r3, #75	; 0x4b
 8001ff2:	607b      	str	r3, [r7, #4]
  uint8_t hcsr_pick = 0;
 8001ff4:	1cfb      	adds	r3, r7, #3
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
//	  millis = HAL_GetTick();
//	  while (Distance5_flag == 0 && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
////	  while (Distance5_flag == 0) {}
//	  time = HAL_GetTick() - millis;

	  HCSR04_Read();
 8001ffa:	f7ff fed3 	bl	8001da4 <HCSR04_Read>
	  millis = HAL_GetTick();
 8001ffe:	f001 f859 	bl	80030b4 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <main+0x21c>)
 8002006:	601a      	str	r2, [r3, #0]
	  while ((Distance1_flag == 0) && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <main+0x220>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d108      	bne.n	8002024 <main+0xa0>
 8002012:	f001 f84f 	bl	80030b4 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <main+0x21c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	d2f2      	bcs.n	800200a <main+0x86>

	  stop = ISSTOP(HCSR_Distance_1, HCSR_Distance_2, HCSR_Distance_5);
 8002024:	4b60      	ldr	r3, [pc, #384]	; (80021a8 <main+0x224>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	2b45      	cmp	r3, #69	; 0x45
 800202a:	d907      	bls.n	800203c <main+0xb8>
 800202c:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <main+0x228>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2b45      	cmp	r3, #69	; 0x45
 8002032:	d903      	bls.n	800203c <main+0xb8>
 8002034:	4b5e      	ldr	r3, [pc, #376]	; (80021b0 <main+0x22c>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	2b45      	cmp	r3, #69	; 0x45
 800203a:	d801      	bhi.n	8002040 <main+0xbc>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <main+0xbe>
 8002040:	2300      	movs	r3, #0
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <main+0x230>)
 8002046:	701a      	strb	r2, [r3, #0]
	  if (stop)
 8002048:	4b5a      	ldr	r3, [pc, #360]	; (80021b4 <main+0x230>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d014      	beq.n	800207a <main+0xf6>
	  {
		  if (!stopped)
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <main+0x234>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d113      	bne.n	8002080 <main+0xfc>
		  {
			  speed(0, 0);
 8002058:	2100      	movs	r1, #0
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff ff26 	bl	8001eac <speed>
			  turningLeft = 0;
 8002060:	4b56      	ldr	r3, [pc, #344]	; (80021bc <main+0x238>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
			  turningRight = 0;
 8002066:	4b56      	ldr	r3, [pc, #344]	; (80021c0 <main+0x23c>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
			  stopped = 1;
 800206c:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <main+0x234>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
			  movingStraight = 0;
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <main+0x240>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e002      	b.n	8002080 <main+0xfc>
		  }
	  }
	  else
		  goStraight(200);
 800207a:	20c8      	movs	r0, #200	; 0xc8
 800207c:	f7ff ff54 	bl	8001f28 <goStraight>

	  HCSR2_Read();
 8002080:	f7ff feb8 	bl	8001df4 <HCSR2_Read>
  	  millis = HAL_GetTick();
 8002084:	f001 f816 	bl	80030b4 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <main+0x21c>)
 800208c:	601a      	str	r2, [r3, #0]
	  while ((Distance2_flag == 0) && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	4b4d      	ldr	r3, [pc, #308]	; (80021c8 <main+0x244>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d108      	bne.n	80020aa <main+0x126>
 8002098:	f001 f80c 	bl	80030b4 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	4b40      	ldr	r3, [pc, #256]	; (80021a0 <main+0x21c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d2f2      	bcs.n	8002090 <main+0x10c>

	  stop = ISSTOP(HCSR_Distance_1, HCSR_Distance_2, HCSR_Distance_5);
 80020aa:	4b3f      	ldr	r3, [pc, #252]	; (80021a8 <main+0x224>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	2b45      	cmp	r3, #69	; 0x45
 80020b0:	d907      	bls.n	80020c2 <main+0x13e>
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <main+0x228>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b45      	cmp	r3, #69	; 0x45
 80020b8:	d903      	bls.n	80020c2 <main+0x13e>
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <main+0x22c>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	2b45      	cmp	r3, #69	; 0x45
 80020c0:	d801      	bhi.n	80020c6 <main+0x142>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <main+0x144>
 80020c6:	2300      	movs	r3, #0
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <main+0x230>)
 80020cc:	701a      	strb	r2, [r3, #0]
	  if (stop)
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <main+0x230>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d014      	beq.n	8002100 <main+0x17c>
	  {
		  if (!stopped)
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <main+0x234>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d113      	bne.n	8002106 <main+0x182>
		  {
			  speed(0, 0);
 80020de:	2100      	movs	r1, #0
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fee3 	bl	8001eac <speed>
			  turningLeft = 0;
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <main+0x238>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
			  turningRight = 0;
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <main+0x23c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			  stopped = 1;
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <main+0x234>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
			  movingStraight = 0;
 80020f8:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <main+0x240>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e002      	b.n	8002106 <main+0x182>
		  }
	  }
	  else
		  goStraight(200);
 8002100:	20c8      	movs	r0, #200	; 0xc8
 8002102:	f7ff ff11 	bl	8001f28 <goStraight>

	  HCSR5_Read();
 8002106:	f7ff fe9b 	bl	8001e40 <HCSR5_Read>
	  millis = HAL_GetTick();
 800210a:	f000 ffd3 	bl	80030b4 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <main+0x21c>)
 8002112:	601a      	str	r2, [r3, #0]
	  while ((Distance5_flag == 0) && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <main+0x248>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <main+0x1ac>
 800211e:	f000 ffc9 	bl	80030b4 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <main+0x21c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d2f2      	bcs.n	8002116 <main+0x192>

	  stop = ISSTOP(HCSR_Distance_1, HCSR_Distance_2, HCSR_Distance_5);
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <main+0x224>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	2b45      	cmp	r3, #69	; 0x45
 8002136:	d907      	bls.n	8002148 <main+0x1c4>
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <main+0x228>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	2b45      	cmp	r3, #69	; 0x45
 800213e:	d903      	bls.n	8002148 <main+0x1c4>
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <main+0x22c>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	2b45      	cmp	r3, #69	; 0x45
 8002146:	d801      	bhi.n	800214c <main+0x1c8>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <main+0x1ca>
 800214c:	2300      	movs	r3, #0
 800214e:	b2da      	uxtb	r2, r3
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <main+0x230>)
 8002152:	701a      	strb	r2, [r3, #0]
	  if (stop)
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <main+0x230>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <main+0x204>
	  {
		  if (!stopped)
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <main+0x234>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d000      	beq.n	8002166 <main+0x1e2>
 8002164:	e749      	b.n	8001ffa <main+0x76>
		  {
			  speed(0, 0);
 8002166:	2100      	movs	r1, #0
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff fe9f 	bl	8001eac <speed>
			  turningLeft = 0;
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <main+0x238>)
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
			  turningRight = 0;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <main+0x23c>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
			  stopped = 1;
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <main+0x234>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
			  movingStraight = 0;
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <main+0x240>)
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e738      	b.n	8001ffa <main+0x76>
		  }
	  }
	  else
		  goStraight(200);
 8002188:	20c8      	movs	r0, #200	; 0xc8
 800218a:	f7ff fecd 	bl	8001f28 <goStraight>
	  HCSR04_Read();
 800218e:	e734      	b.n	8001ffa <main+0x76>
 8002190:	20000030 	.word	0x20000030
 8002194:	200000c8 	.word	0x200000c8
 8002198:	20000160 	.word	0x20000160
 800219c:	2000007c 	.word	0x2000007c
 80021a0:	200003bc 	.word	0x200003bc
 80021a4:	200003b7 	.word	0x200003b7
 80021a8:	20000002 	.word	0x20000002
 80021ac:	20000004 	.word	0x20000004
 80021b0:	20000006 	.word	0x20000006
 80021b4:	20000001 	.word	0x20000001
 80021b8:	20000000 	.word	0x20000000
 80021bc:	2000038c 	.word	0x2000038c
 80021c0:	2000038d 	.word	0x2000038d
 80021c4:	2000038e 	.word	0x2000038e
 80021c8:	200003b8 	.word	0x200003b8
 80021cc:	200003b9 	.word	0x200003b9

080021d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b093      	sub	sp, #76	; 0x4c
 80021d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d6:	2414      	movs	r4, #20
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	0018      	movs	r0, r3
 80021dc:	2334      	movs	r3, #52	; 0x34
 80021de:	001a      	movs	r2, r3
 80021e0:	2100      	movs	r1, #0
 80021e2:	f005 f819 	bl	8007218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	0018      	movs	r0, r3
 80021ea:	2310      	movs	r3, #16
 80021ec:	001a      	movs	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f005 f812 	bl	8007218 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	0018      	movs	r0, r3
 80021fa:	f001 fc1d 	bl	8003a38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	2202      	movs	r2, #2
 8002202:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	0052      	lsls	r2, r2, #1
 800220a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800220c:	193b      	adds	r3, r7, r4
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002212:	193b      	adds	r3, r7, r4
 8002214:	2240      	movs	r2, #64	; 0x40
 8002216:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002218:	193b      	adds	r3, r7, r4
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221e:	193b      	adds	r3, r7, r4
 8002220:	0018      	movs	r0, r3
 8002222:	f001 fc55 	bl	8003ad0 <HAL_RCC_OscConfig>
 8002226:	1e03      	subs	r3, r0, #0
 8002228:	d001      	beq.n	800222e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800222a:	f000 fb77 	bl	800291c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2100      	movs	r1, #0
 800224a:	0018      	movs	r0, r3
 800224c:	f001 ff50 	bl	80040f0 <HAL_RCC_ClockConfig>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002254:	f000 fb62 	bl	800291c <Error_Handler>
  }
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b013      	add	sp, #76	; 0x4c
 800225e:	bd90      	pop	{r4, r7, pc}

08002260 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002266:	2314      	movs	r3, #20
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	0018      	movs	r0, r3
 800226c:	230c      	movs	r3, #12
 800226e:	001a      	movs	r2, r3
 8002270:	2100      	movs	r1, #0
 8002272:	f004 ffd1 	bl	8007218 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	0018      	movs	r0, r3
 800227a:	2310      	movs	r3, #16
 800227c:	001a      	movs	r2, r3
 800227e:	2100      	movs	r1, #0
 8002280:	f004 ffca 	bl	8007218 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <MX_TIM1_Init+0xbc>)
 8002286:	4a26      	ldr	r2, [pc, #152]	; (8002320 <MX_TIM1_Init+0xc0>)
 8002288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <MX_TIM1_Init+0xbc>)
 800228c:	220f      	movs	r2, #15
 800228e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002290:	4b22      	ldr	r3, [pc, #136]	; (800231c <MX_TIM1_Init+0xbc>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <MX_TIM1_Init+0xbc>)
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <MX_TIM1_Init+0xc4>)
 800229a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_TIM1_Init+0xbc>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <MX_TIM1_Init+0xbc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_TIM1_Init+0xbc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_TIM1_Init+0xbc>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f002 fb97 	bl	80049e4 <HAL_TIM_IC_Init>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80022ba:	f000 fb2f 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2114      	movs	r1, #20
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022c6:	187b      	adds	r3, r7, r1
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022d2:	187a      	adds	r2, r7, r1
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_TIM1_Init+0xbc>)
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f003 fe1f 	bl	8005f1c <HAL_TIMEx_MasterConfigSynchronization>
 80022de:	1e03      	subs	r3, r0, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80022e2:	f000 fb1b 	bl	800291c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2201      	movs	r2, #1
 80022f0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022fe:	1d39      	adds	r1, r7, #4
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_TIM1_Init+0xbc>)
 8002302:	2200      	movs	r2, #0
 8002304:	0018      	movs	r0, r3
 8002306:	f002 fe29 	bl	8004f5c <HAL_TIM_IC_ConfigChannel>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800230e:	f000 fb05 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b008      	add	sp, #32
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20000030 	.word	0x20000030
 8002320:	40012c00 	.word	0x40012c00
 8002324:	0000ffff 	.word	0x0000ffff

08002328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	2328      	movs	r3, #40	; 0x28
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	0018      	movs	r0, r3
 8002334:	2310      	movs	r3, #16
 8002336:	001a      	movs	r2, r3
 8002338:	2100      	movs	r1, #0
 800233a:	f004 ff6d 	bl	8007218 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233e:	231c      	movs	r3, #28
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	0018      	movs	r0, r3
 8002344:	230c      	movs	r3, #12
 8002346:	001a      	movs	r2, r3
 8002348:	2100      	movs	r1, #0
 800234a:	f004 ff65 	bl	8007218 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234e:	003b      	movs	r3, r7
 8002350:	0018      	movs	r0, r3
 8002352:	231c      	movs	r3, #28
 8002354:	001a      	movs	r2, r3
 8002356:	2100      	movs	r1, #0
 8002358:	f004 ff5e 	bl	8007218 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <MX_TIM3_Init+0x108>)
 800235e:	4a35      	ldr	r2, [pc, #212]	; (8002434 <MX_TIM3_Init+0x10c>)
 8002360:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <MX_TIM3_Init+0x108>)
 8002364:	2220      	movs	r2, #32
 8002366:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <MX_TIM3_Init+0x108>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <MX_TIM3_Init+0x108>)
 8002370:	4a31      	ldr	r2, [pc, #196]	; (8002438 <MX_TIM3_Init+0x110>)
 8002372:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <MX_TIM3_Init+0x108>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <MX_TIM3_Init+0x108>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <MX_TIM3_Init+0x108>)
 8002382:	0018      	movs	r0, r3
 8002384:	f002 f992 	bl	80046ac <HAL_TIM_Base_Init>
 8002388:	1e03      	subs	r3, r0, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800238c:	f000 fac6 	bl	800291c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002390:	2128      	movs	r1, #40	; 0x28
 8002392:	187b      	adds	r3, r7, r1
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	0152      	lsls	r2, r2, #5
 8002398:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800239a:	187a      	adds	r2, r7, r1
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <MX_TIM3_Init+0x108>)
 800239e:	0011      	movs	r1, r2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f002 ff7f 	bl	80052a4 <HAL_TIM_ConfigClockSource>
 80023a6:	1e03      	subs	r3, r0, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80023aa:	f000 fab7 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ae:	4b20      	ldr	r3, [pc, #128]	; (8002430 <MX_TIM3_Init+0x108>)
 80023b0:	0018      	movs	r0, r3
 80023b2:	f002 f9d3 	bl	800475c <HAL_TIM_PWM_Init>
 80023b6:	1e03      	subs	r3, r0, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80023ba:	f000 faaf 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023be:	211c      	movs	r1, #28
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023cc:	187a      	adds	r2, r7, r1
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MX_TIM3_Init+0x108>)
 80023d0:	0011      	movs	r1, r2
 80023d2:	0018      	movs	r0, r3
 80023d4:	f003 fda2 	bl	8005f1c <HAL_TIMEx_MasterConfigSynchronization>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80023dc:	f000 fa9e 	bl	800291c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e0:	003b      	movs	r3, r7
 80023e2:	2260      	movs	r2, #96	; 0x60
 80023e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80023e6:	003b      	movs	r3, r7
 80023e8:	2200      	movs	r2, #0
 80023ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ec:	003b      	movs	r3, r7
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f2:	003b      	movs	r3, r7
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f8:	0039      	movs	r1, r7
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <MX_TIM3_Init+0x108>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	0018      	movs	r0, r3
 8002400:	f002 fe50 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
 8002404:	1e03      	subs	r3, r0, #0
 8002406:	d001      	beq.n	800240c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002408:	f000 fa88 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240c:	0039      	movs	r1, r7
 800240e:	4b08      	ldr	r3, [pc, #32]	; (8002430 <MX_TIM3_Init+0x108>)
 8002410:	2204      	movs	r2, #4
 8002412:	0018      	movs	r0, r3
 8002414:	f002 fe46 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
 8002418:	1e03      	subs	r3, r0, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800241c:	f000 fa7e 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <MX_TIM3_Init+0x108>)
 8002422:	0018      	movs	r0, r3
 8002424:	f000 fbda 	bl	8002bdc <HAL_TIM_MspPostInit>

}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	b00e      	add	sp, #56	; 0x38
 800242e:	bd80      	pop	{r7, pc}
 8002430:	2000007c 	.word	0x2000007c
 8002434:	40000400 	.word	0x40000400
 8002438:	0000270f 	.word	0x0000270f

0800243c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002442:	003b      	movs	r3, r7
 8002444:	0018      	movs	r0, r3
 8002446:	2310      	movs	r3, #16
 8002448:	001a      	movs	r2, r3
 800244a:	2100      	movs	r1, #0
 800244c:	f004 fee4 	bl	8007218 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <MX_TIM14_Init+0x8c>)
 8002452:	4a1e      	ldr	r2, [pc, #120]	; (80024cc <MX_TIM14_Init+0x90>)
 8002454:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <MX_TIM14_Init+0x8c>)
 8002458:	220f      	movs	r2, #15
 800245a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_TIM14_Init+0x8c>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <MX_TIM14_Init+0x8c>)
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <MX_TIM14_Init+0x94>)
 8002466:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <MX_TIM14_Init+0x8c>)
 800246a:	2200      	movs	r2, #0
 800246c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <MX_TIM14_Init+0x8c>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_TIM14_Init+0x8c>)
 8002476:	0018      	movs	r0, r3
 8002478:	f002 f918 	bl	80046ac <HAL_TIM_Base_Init>
 800247c:	1e03      	subs	r3, r0, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002480:	f000 fa4c 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <MX_TIM14_Init+0x8c>)
 8002486:	0018      	movs	r0, r3
 8002488:	f002 faac 	bl	80049e4 <HAL_TIM_IC_Init>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002490:	f000 fa44 	bl	800291c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002494:	003b      	movs	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800249a:	003b      	movs	r3, r7
 800249c:	2201      	movs	r2, #1
 800249e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024a0:	003b      	movs	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80024a6:	003b      	movs	r3, r7
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024ac:	0039      	movs	r1, r7
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_TIM14_Init+0x8c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	0018      	movs	r0, r3
 80024b4:	f002 fd52 	bl	8004f5c <HAL_TIM_IC_ConfigChannel>
 80024b8:	1e03      	subs	r3, r0, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80024bc:	f000 fa2e 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200000c8 	.word	0x200000c8
 80024cc:	40002000 	.word	0x40002000
 80024d0:	0000ffff 	.word	0x0000ffff

080024d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024da:	2314      	movs	r3, #20
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	0018      	movs	r0, r3
 80024e0:	230c      	movs	r3, #12
 80024e2:	001a      	movs	r2, r3
 80024e4:	2100      	movs	r1, #0
 80024e6:	f004 fe97 	bl	8007218 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024ea:	1d3b      	adds	r3, r7, #4
 80024ec:	0018      	movs	r0, r3
 80024ee:	2310      	movs	r3, #16
 80024f0:	001a      	movs	r2, r3
 80024f2:	2100      	movs	r1, #0
 80024f4:	f004 fe90 	bl	8007218 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024f8:	4b28      	ldr	r3, [pc, #160]	; (800259c <MX_TIM15_Init+0xc8>)
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <MX_TIM15_Init+0xcc>)
 80024fc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <MX_TIM15_Init+0xc8>)
 8002500:	220f      	movs	r2, #15
 8002502:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <MX_TIM15_Init+0xc8>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <MX_TIM15_Init+0xc8>)
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <MX_TIM15_Init+0xd0>)
 800250e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <MX_TIM15_Init+0xc8>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <MX_TIM15_Init+0xc8>)
 8002518:	2200      	movs	r2, #0
 800251a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <MX_TIM15_Init+0xc8>)
 800251e:	2200      	movs	r2, #0
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <MX_TIM15_Init+0xc8>)
 8002524:	0018      	movs	r0, r3
 8002526:	f002 fa5d 	bl	80049e4 <HAL_TIM_IC_Init>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800252e:	f000 f9f5 	bl	800291c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	2114      	movs	r1, #20
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002540:	187a      	adds	r2, r7, r1
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_TIM15_Init+0xc8>)
 8002544:	0011      	movs	r1, r2
 8002546:	0018      	movs	r0, r3
 8002548:	f003 fce8 	bl	8005f1c <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	1e03      	subs	r3, r0, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM15_Init+0x80>
  {
    Error_Handler();
 8002550:	f000 f9e4 	bl	800291c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002554:	1d3b      	adds	r3, r7, #4
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	2201      	movs	r2, #1
 800255e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2200      	movs	r2, #0
 800256a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800256c:	1d39      	adds	r1, r7, #4
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <MX_TIM15_Init+0xc8>)
 8002570:	2200      	movs	r2, #0
 8002572:	0018      	movs	r0, r3
 8002574:	f002 fcf2 	bl	8004f5c <HAL_TIM_IC_ConfigChannel>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 800257c:	f000 f9ce 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002580:	1d39      	adds	r1, r7, #4
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_TIM15_Init+0xc8>)
 8002584:	2204      	movs	r2, #4
 8002586:	0018      	movs	r0, r3
 8002588:	f002 fce8 	bl	8004f5c <HAL_TIM_IC_ConfigChannel>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002590:	f000 f9c4 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b008      	add	sp, #32
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000114 	.word	0x20000114
 80025a0:	40014000 	.word	0x40014000
 80025a4:	0000ffff 	.word	0x0000ffff

080025a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80025ae:	003b      	movs	r3, r7
 80025b0:	0018      	movs	r0, r3
 80025b2:	2310      	movs	r3, #16
 80025b4:	001a      	movs	r2, r3
 80025b6:	2100      	movs	r1, #0
 80025b8:	f004 fe2e 	bl	8007218 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <MX_TIM17_Init+0x94>)
 80025be:	4a20      	ldr	r2, [pc, #128]	; (8002640 <MX_TIM17_Init+0x98>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16-1;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <MX_TIM17_Init+0x94>)
 80025c4:	220f      	movs	r2, #15
 80025c6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <MX_TIM17_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <MX_TIM17_Init+0x94>)
 80025d0:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <MX_TIM17_Init+0x9c>)
 80025d2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <MX_TIM17_Init+0x94>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <MX_TIM17_Init+0x94>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <MX_TIM17_Init+0x94>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_TIM17_Init+0x94>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f002 f85f 	bl	80046ac <HAL_TIM_Base_Init>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 80025f2:	f000 f993 	bl	800291c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_TIM17_Init+0x94>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f002 f9f3 	bl	80049e4 <HAL_TIM_IC_Init>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002602:	f000 f98b 	bl	800291c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002606:	003b      	movs	r3, r7
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800260c:	003b      	movs	r3, r7
 800260e:	2201      	movs	r2, #1
 8002610:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002612:	003b      	movs	r3, r7
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002618:	003b      	movs	r3, r7
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800261e:	0039      	movs	r1, r7
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_TIM17_Init+0x94>)
 8002622:	2200      	movs	r2, #0
 8002624:	0018      	movs	r0, r3
 8002626:	f002 fc99 	bl	8004f5c <HAL_TIM_IC_ConfigChannel>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM17_Init+0x8a>
  {
    Error_Handler();
 800262e:	f000 f975 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	20000160 	.word	0x20000160
 8002640:	40014800 	.word	0x40014800
 8002644:	0000ffff 	.word	0x0000ffff

08002648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <MX_USART1_UART_Init+0x94>)
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <MX_USART1_UART_Init+0x98>)
 8002650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002654:	22e1      	movs	r2, #225	; 0xe1
 8002656:	0252      	lsls	r2, r2, #9
 8002658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_USART1_UART_Init+0x94>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <MX_USART1_UART_Init+0x94>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <MX_USART1_UART_Init+0x94>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_USART1_UART_Init+0x94>)
 800268c:	2200      	movs	r2, #0
 800268e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <MX_USART1_UART_Init+0x94>)
 8002692:	0018      	movs	r0, r3
 8002694:	f003 fcc2 	bl	800601c <HAL_UART_Init>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800269c:	f000 f93e 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_USART1_UART_Init+0x94>)
 80026a2:	2100      	movs	r1, #0
 80026a4:	0018      	movs	r0, r3
 80026a6:	f004 fcb3 	bl	8007010 <HAL_UARTEx_SetTxFifoThreshold>
 80026aa:	1e03      	subs	r3, r0, #0
 80026ac:	d001      	beq.n	80026b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80026ae:	f000 f935 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <MX_USART1_UART_Init+0x94>)
 80026b4:	2100      	movs	r1, #0
 80026b6:	0018      	movs	r0, r3
 80026b8:	f004 fcea 	bl	8007090 <HAL_UARTEx_SetRxFifoThreshold>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80026c0:	f000 f92c 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <MX_USART1_UART_Init+0x94>)
 80026c6:	0018      	movs	r0, r3
 80026c8:	f004 fc68 	bl	8006f9c <HAL_UARTEx_DisableFifoMode>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d001      	beq.n	80026d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80026d0:	f000 f924 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	200001ac 	.word	0x200001ac
 80026e0:	40013800 	.word	0x40013800

080026e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026e8:	4b23      	ldr	r3, [pc, #140]	; (8002778 <MX_USART2_UART_Init+0x94>)
 80026ea:	4a24      	ldr	r2, [pc, #144]	; (800277c <MX_USART2_UART_Init+0x98>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <MX_USART2_UART_Init+0x94>)
 80026f0:	22e1      	movs	r2, #225	; 0xe1
 80026f2:	0252      	lsls	r2, r2, #9
 80026f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <MX_USART2_UART_Init+0x94>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <MX_USART2_UART_Init+0x94>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <MX_USART2_UART_Init+0x94>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271a:	4b17      	ldr	r3, [pc, #92]	; (8002778 <MX_USART2_UART_Init+0x94>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002728:	2200      	movs	r2, #0
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_USART2_UART_Init+0x94>)
 800272e:	0018      	movs	r0, r3
 8002730:	f003 fc74 	bl	800601c <HAL_UART_Init>
 8002734:	1e03      	subs	r3, r0, #0
 8002736:	d001      	beq.n	800273c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002738:	f000 f8f0 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_USART2_UART_Init+0x94>)
 800273e:	2100      	movs	r1, #0
 8002740:	0018      	movs	r0, r3
 8002742:	f004 fc65 	bl	8007010 <HAL_UARTEx_SetTxFifoThreshold>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800274a:	f000 f8e7 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002750:	2100      	movs	r1, #0
 8002752:	0018      	movs	r0, r3
 8002754:	f004 fc9c 	bl	8007090 <HAL_UARTEx_SetRxFifoThreshold>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d001      	beq.n	8002760 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800275c:	f000 f8de 	bl	800291c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <MX_USART2_UART_Init+0x94>)
 8002762:	0018      	movs	r0, r3
 8002764:	f004 fc1a 	bl	8006f9c <HAL_UARTEx_DisableFifoMode>
 8002768:	1e03      	subs	r3, r0, #0
 800276a:	d001      	beq.n	8002770 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800276c:	f000 f8d6 	bl	800291c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000240 	.word	0x20000240
 800277c:	40004400 	.word	0x40004400

08002780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_DMA_Init+0x48>)
 8002788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278a:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_DMA_Init+0x48>)
 800278c:	2101      	movs	r1, #1
 800278e:	430a      	orrs	r2, r1
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <MX_DMA_Init+0x48>)
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002796:	2201      	movs	r2, #1
 8002798:	4013      	ands	r3, r2
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	2009      	movs	r0, #9
 80027a4:	f000 fd3c 	bl	8003220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80027a8:	2009      	movs	r0, #9
 80027aa:	f000 fd4e 	bl	800324a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	200a      	movs	r0, #10
 80027b4:	f000 fd34 	bl	8003220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80027b8:	200a      	movs	r0, #10
 80027ba:	f000 fd46 	bl	800324a <HAL_NVIC_EnableIRQ>

}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	40021000 	.word	0x40021000

080027cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
 80027d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d2:	2414      	movs	r4, #20
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	0018      	movs	r0, r3
 80027d8:	2314      	movs	r3, #20
 80027da:	001a      	movs	r2, r3
 80027dc:	2100      	movs	r1, #0
 80027de:	f004 fd1b 	bl	8007218 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <MX_GPIO_Init+0x144>)
 80027e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e6:	4b4a      	ldr	r3, [pc, #296]	; (8002910 <MX_GPIO_Init+0x144>)
 80027e8:	2104      	movs	r1, #4
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <MX_GPIO_Init+0x144>)
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	2204      	movs	r2, #4
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027fa:	4b45      	ldr	r3, [pc, #276]	; (8002910 <MX_GPIO_Init+0x144>)
 80027fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fe:	4b44      	ldr	r3, [pc, #272]	; (8002910 <MX_GPIO_Init+0x144>)
 8002800:	2120      	movs	r1, #32
 8002802:	430a      	orrs	r2, r1
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
 8002806:	4b42      	ldr	r3, [pc, #264]	; (8002910 <MX_GPIO_Init+0x144>)
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	2220      	movs	r2, #32
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <MX_GPIO_Init+0x144>)
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <MX_GPIO_Init+0x144>)
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
 800281e:	4b3c      	ldr	r3, [pc, #240]	; (8002910 <MX_GPIO_Init+0x144>)
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	2201      	movs	r2, #1
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <MX_GPIO_Init+0x144>)
 800282c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <MX_GPIO_Init+0x144>)
 8002830:	2102      	movs	r1, #2
 8002832:	430a      	orrs	r2, r1
 8002834:	635a      	str	r2, [r3, #52]	; 0x34
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <MX_GPIO_Init+0x144>)
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	2202      	movs	r2, #2
 800283c:	4013      	ands	r3, r2
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 8002842:	2388      	movs	r3, #136	; 0x88
 8002844:	0099      	lsls	r1, r3, #2
 8002846:	23a0      	movs	r3, #160	; 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	2200      	movs	r2, #0
 800284c:	0018      	movs	r0, r3
 800284e:	f001 f8d5 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, GPIO_PIN_RESET);
 8002852:	4b30      	ldr	r3, [pc, #192]	; (8002914 <MX_GPIO_Init+0x148>)
 8002854:	2200      	movs	r2, #0
 8002856:	2101      	movs	r1, #1
 8002858:	0018      	movs	r0, r3
 800285a:	f001 f8cf 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_RESET);
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <MX_GPIO_Init+0x14c>)
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0018      	movs	r0, r3
 8002866:	f001 f8c9 	bl	80039fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800286a:	193b      	adds	r3, r7, r4
 800286c:	2220      	movs	r2, #32
 800286e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	193b      	adds	r3, r7, r4
 8002872:	2201      	movs	r2, #1
 8002874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287c:	193b      	adds	r3, r7, r4
 800287e:	2202      	movs	r2, #2
 8002880:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002882:	193a      	adds	r2, r7, r4
 8002884:	23a0      	movs	r3, #160	; 0xa0
 8002886:	05db      	lsls	r3, r3, #23
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f000 ff52 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG3_Pin */
  GPIO_InitStruct.Pin = TRIG3_Pin;
 8002890:	193b      	adds	r3, r7, r4
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002896:	193b      	adds	r3, r7, r4
 8002898:	2201      	movs	r2, #1
 800289a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	2200      	movs	r2, #0
 80028a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG3_GPIO_Port, &GPIO_InitStruct);
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <MX_GPIO_Init+0x148>)
 80028ac:	0019      	movs	r1, r3
 80028ae:	0010      	movs	r0, r2
 80028b0:	f000 ff40 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG1_Pin */
  GPIO_InitStruct.Pin = TRIG1_Pin;
 80028b4:	0021      	movs	r1, r4
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028be:	000c      	movs	r4, r1
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	2201      	movs	r2, #1
 80028c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	193b      	adds	r3, r7, r4
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028cc:	193b      	adds	r3, r7, r4
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG1_GPIO_Port, &GPIO_InitStruct);
 80028d2:	193a      	adds	r2, r7, r4
 80028d4:	23a0      	movs	r3, #160	; 0xa0
 80028d6:	05db      	lsls	r3, r3, #23
 80028d8:	0011      	movs	r1, r2
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 ff2a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG2_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin;
 80028e0:	0021      	movs	r1, r4
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2201      	movs	r2, #1
 80028ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG2_GPIO_Port, &GPIO_InitStruct);
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	4a06      	ldr	r2, [pc, #24]	; (8002918 <MX_GPIO_Init+0x14c>)
 80028fe:	0019      	movs	r1, r3
 8002900:	0010      	movs	r0, r2
 8002902:	f000 ff17 	bl	8003734 <HAL_GPIO_Init>

}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b00b      	add	sp, #44	; 0x2c
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	40021000 	.word	0x40021000
 8002914:	50000400 	.word	0x50000400
 8002918:	50000800 	.word	0x50000800

0800291c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002920:	b672      	cpsid	i
}
 8002922:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002924:	e7fe      	b.n	8002924 <Error_Handler+0x8>
	...

08002928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_MspInit+0x44>)
 8002930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_MspInit+0x44>)
 8002934:	2101      	movs	r1, #1
 8002936:	430a      	orrs	r2, r1
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_MspInit+0x44>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2201      	movs	r2, #1
 8002940:	4013      	ands	r3, r2
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_MspInit+0x44>)
 8002948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_MspInit+0x44>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0549      	lsls	r1, r1, #21
 8002950:	430a      	orrs	r2, r1
 8002952:	63da      	str	r2, [r3, #60]	; 0x3c
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_MspInit+0x44>)
 8002956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	055b      	lsls	r3, r3, #21
 800295c:	4013      	ands	r3, r2
 800295e:	603b      	str	r3, [r7, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	40021000 	.word	0x40021000

08002970 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b08d      	sub	sp, #52	; 0x34
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	241c      	movs	r4, #28
 800297a:	193b      	adds	r3, r7, r4
 800297c:	0018      	movs	r0, r3
 800297e:	2314      	movs	r3, #20
 8002980:	001a      	movs	r2, r3
 8002982:	2100      	movs	r1, #0
 8002984:	f004 fc48 	bl	8007218 <memset>
  if(htim_ic->Instance==TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <HAL_TIM_IC_MspInit+0x10c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d13a      	bne.n	8002a08 <HAL_TIM_IC_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	4b3a      	ldr	r3, [pc, #232]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0109      	lsls	r1, r1, #4
 800299c:	430a      	orrs	r2, r1
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
 80029a0:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 80029a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2201      	movs	r2, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_HCSR1_ECHO_Pin;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0052      	lsls	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	0021      	movs	r1, r4
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2202      	movs	r2, #2
 80029d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2202      	movs	r2, #2
 80029e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_CH1_HCSR1_ECHO_GPIO_Port, &GPIO_InitStruct);
 80029e8:	187a      	adds	r2, r7, r1
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	0011      	movs	r1, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 fe9f 	bl	8003734 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	200e      	movs	r0, #14
 80029fc:	f000 fc10 	bl	8003220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a00:	200e      	movs	r0, #14
 8002a02:	f000 fc22 	bl	800324a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002a06:	e034      	b.n	8002a72 <HAL_TIM_IC_MspInit+0x102>
  else if(htim_ic->Instance==TIM15)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	; (8002a84 <HAL_TIM_IC_MspInit+0x114>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d12f      	bne.n	8002a72 <HAL_TIM_IC_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	025b      	lsls	r3, r3, #9
 8002a28:	4013      	ands	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002a34:	2104      	movs	r1, #4
 8002a36:	430a      	orrs	r2, r1
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <HAL_TIM_IC_MspInit+0x110>)
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002a46:	211c      	movs	r1, #28
 8002a48:	187b      	adds	r3, r7, r1
 8002a4a:	2206      	movs	r2, #6
 8002a4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	187b      	adds	r3, r7, r1
 8002a50:	2202      	movs	r2, #2
 8002a52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2202      	movs	r2, #2
 8002a64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <HAL_TIM_IC_MspInit+0x118>)
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	0010      	movs	r0, r2
 8002a6e:	f000 fe61 	bl	8003734 <HAL_GPIO_Init>
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b00d      	add	sp, #52	; 0x34
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40012c00 	.word	0x40012c00
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40014000 	.word	0x40014000
 8002a88:	50000800 	.word	0x50000800

08002a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	231c      	movs	r3, #28
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	0018      	movs	r0, r3
 8002a9a:	2314      	movs	r3, #20
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	f004 fbba 	bl	8007218 <memset>
  if(htim_base->Instance==TIM3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a47      	ldr	r2, [pc, #284]	; (8002bc8 <HAL_TIM_Base_MspInit+0x13c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d10c      	bne.n	8002ac8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002ab0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ab2:	4b46      	ldr	r3, [pc, #280]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002ac6:	e07b      	b.n	8002bc0 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM14)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a40      	ldr	r2, [pc, #256]	; (8002bd0 <HAL_TIM_Base_MspInit+0x144>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d138      	bne.n	8002b44 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0209      	lsls	r1, r1, #8
 8002adc:	430a      	orrs	r2, r1
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002af4:	2102      	movs	r1, #2
 8002af6:	430a      	orrs	r2, r1
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
 8002afa:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM14_CH1_ECHO_Pin;
 8002b06:	211c      	movs	r1, #28
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2202      	movs	r2, #2
 8002b12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_TIM_Base_MspInit+0x148>)
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	f000 fe01 	bl	8003734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	2013      	movs	r0, #19
 8002b38:	f000 fb72 	bl	8003220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002b3c:	2013      	movs	r0, #19
 8002b3e:	f000 fb84 	bl	800324a <HAL_NVIC_EnableIRQ>
}
 8002b42:	e03d      	b.n	8002bc0 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM17)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a23      	ldr	r2, [pc, #140]	; (8002bd8 <HAL_TIM_Base_MspInit+0x14c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d138      	bne.n	8002bc0 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	02c9      	lsls	r1, r1, #11
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	02db      	lsls	r3, r3, #11
 8002b64:	4013      	ands	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002b70:	2102      	movs	r1, #2
 8002b72:	430a      	orrs	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_TIM_Base_MspInit+0x140>)
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_ECHO_Pin;
 8002b82:	211c      	movs	r1, #28
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	0092      	lsls	r2, r2, #2
 8002b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	187b      	adds	r3, r7, r1
 8002b8e:	2202      	movs	r2, #2
 8002b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <HAL_TIM_Base_MspInit+0x148>)
 8002ba8:	0019      	movs	r1, r3
 8002baa:	0010      	movs	r0, r2
 8002bac:	f000 fdc2 	bl	8003734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2016      	movs	r0, #22
 8002bb6:	f000 fb33 	bl	8003220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002bba:	2016      	movs	r0, #22
 8002bbc:	f000 fb45 	bl	800324a <HAL_NVIC_EnableIRQ>
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b00c      	add	sp, #48	; 0x30
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40002000 	.word	0x40002000
 8002bd4:	50000400 	.word	0x50000400
 8002bd8:	40014800 	.word	0x40014800

08002bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	240c      	movs	r4, #12
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	0018      	movs	r0, r3
 8002bea:	2314      	movs	r3, #20
 8002bec:	001a      	movs	r2, r3
 8002bee:	2100      	movs	r1, #0
 8002bf0:	f004 fb12 	bl	8007218 <memset>
  if(htim->Instance==TIM3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_TIM_MspPostInit+0x70>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d121      	bne.n	8002c42 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_TIM_MspPostInit+0x74>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <HAL_TIM_MspPostInit+0x74>)
 8002c04:	2102      	movs	r1, #2
 8002c06:	430a      	orrs	r2, r1
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0a:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <HAL_TIM_MspPostInit+0x74>)
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Left_Motor_PWM_Pin|TIM3_CH2_Right_Motor_PWM_Pin;
 8002c16:	0021      	movs	r1, r4
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2230      	movs	r2, #48	; 0x30
 8002c1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	2202      	movs	r2, #2
 8002c22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2201      	movs	r2, #1
 8002c34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <HAL_TIM_MspPostInit+0x78>)
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	0010      	movs	r0, r2
 8002c3e:	f000 fd79 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b009      	add	sp, #36	; 0x24
 8002c48:	bd90      	pop	{r4, r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40021000 	.word	0x40021000
 8002c54:	50000400 	.word	0x50000400

08002c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b093      	sub	sp, #76	; 0x4c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	2334      	movs	r3, #52	; 0x34
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	0018      	movs	r0, r3
 8002c66:	2314      	movs	r3, #20
 8002c68:	001a      	movs	r2, r3
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f004 fad4 	bl	8007218 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c70:	2418      	movs	r4, #24
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	0018      	movs	r0, r3
 8002c76:	231c      	movs	r3, #28
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f004 facc 	bl	8007218 <memset>
  if(huart->Instance==USART1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a77      	ldr	r2, [pc, #476]	; (8002e64 <HAL_UART_MspInit+0x20c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d170      	bne.n	8002d6c <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f001 fbd3 	bl	8004444 <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ca2:	f7ff fe3b 	bl	800291c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca6:	4b70      	ldr	r3, [pc, #448]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002caa:	4b6f      	ldr	r3, [pc, #444]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	01c9      	lsls	r1, r1, #7
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	01db      	lsls	r3, r3, #7
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc2:	4b69      	ldr	r3, [pc, #420]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc6:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002cc8:	2104      	movs	r1, #4
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cce:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cda:	2134      	movs	r1, #52	; 0x34
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2230      	movs	r2, #48	; 0x30
 8002ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	4a5b      	ldr	r2, [pc, #364]	; (8002e6c <HAL_UART_MspInit+0x214>)
 8002cfe:	0019      	movs	r1, r3
 8002d00:	0010      	movs	r0, r2
 8002d02:	f000 fd17 	bl	8003734 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002d06:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d08:	4a5a      	ldr	r2, [pc, #360]	; (8002e74 <HAL_UART_MspInit+0x21c>)
 8002d0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002d0c:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d0e:	2232      	movs	r2, #50	; 0x32
 8002d10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d12:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d18:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d1e:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d24:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d2a:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d30:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d36:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 faa0 	bl	8003284 <HAL_DMA_Init>
 8002d44:	1e03      	subs	r3, r0, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002d48:	f7ff fde8 	bl	800291c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	4a47      	ldr	r2, [pc, #284]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d52:	505a      	str	r2, [r3, r1]
 8002d54:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <HAL_UART_MspInit+0x218>)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	201b      	movs	r0, #27
 8002d60:	f000 fa5e 	bl	8003220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d64:	201b      	movs	r0, #27
 8002d66:	f000 fa70 	bl	800324a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d6a:	e076      	b.n	8002e5a <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a41      	ldr	r2, [pc, #260]	; (8002e78 <HAL_UART_MspInit+0x220>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d171      	bne.n	8002e5a <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d76:	2118      	movs	r1, #24
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	0018      	movs	r0, r3
 8002d88:	f001 fb5c 	bl	8004444 <HAL_RCCEx_PeriphCLKConfig>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002d90:	f7ff fdc4 	bl	800291c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d98:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002d9a:	2180      	movs	r1, #128	; 0x80
 8002d9c:	0289      	lsls	r1, r1, #10
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002db6:	2101      	movs	r1, #1
 8002db8:	430a      	orrs	r2, r1
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_UART_MspInit+0x210>)
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dc8:	2134      	movs	r1, #52	; 0x34
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	220c      	movs	r2, #12
 8002dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	2201      	movs	r2, #1
 8002dda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2201      	movs	r2, #1
 8002de6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	187a      	adds	r2, r7, r1
 8002dea:	23a0      	movs	r3, #160	; 0xa0
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 fc9f 	bl	8003734 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <HAL_UART_MspInit+0x228>)
 8002dfa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002dfe:	2234      	movs	r2, #52	; 0x34
 8002e00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e0e:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 fa28 	bl	8003284 <HAL_DMA_Init>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8002e38:	f7ff fd70 	bl	800291c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e42:	505a      	str	r2, [r3, r1]
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_UART_MspInit+0x224>)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	201c      	movs	r0, #28
 8002e50:	f000 f9e6 	bl	8003220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e54:	201c      	movs	r0, #28
 8002e56:	f000 f9f8 	bl	800324a <HAL_NVIC_EnableIRQ>
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b013      	add	sp, #76	; 0x4c
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	40013800 	.word	0x40013800
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	50000800 	.word	0x50000800
 8002e70:	200002d4 	.word	0x200002d4
 8002e74:	4002001c 	.word	0x4002001c
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	20000330 	.word	0x20000330
 8002e80:	40020008 	.word	0x40020008

08002e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <NMI_Handler+0x4>

08002e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8e:	e7fe      	b.n	8002e8e <HardFault_Handler+0x4>

08002e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea8:	f000 f8f2 	bl	8003090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <DMA1_Channel1_IRQHandler+0x14>)
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fb38 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	20000330 	.word	0x20000330

08002ecc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 fb2c 	bl	8003530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	200002d4 	.word	0x200002d4

08002ee4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <TIM1_CC_IRQHandler+0x14>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f001 ff04 	bl	8004cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	20000030 	.word	0x20000030

08002efc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <TIM14_IRQHandler+0x14>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f001 fef8 	bl	8004cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	200000c8 	.word	0x200000c8

08002f14 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <TIM17_IRQHandler+0x14>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f001 feec 	bl	8004cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	20000160 	.word	0x20000160

08002f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <USART1_IRQHandler+0x14>)
 8002f32:	0018      	movs	r0, r3
 8002f34:	f003 f8c8 	bl	80060c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	200001ac 	.word	0x200001ac

08002f44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <USART2_IRQHandler+0x14>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f003 f8bc 	bl	80060c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000240 	.word	0x20000240

08002f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f68:	480d      	ldr	r0, [pc, #52]	; (8002fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f6c:	f7ff fff6 	bl	8002f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f70:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f72:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f74:	4a0d      	ldr	r2, [pc, #52]	; (8002fac <LoopForever+0xe>)
  movs r3, #0
 8002f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f78:	e002      	b.n	8002f80 <LoopCopyDataInit>

08002f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f7e:	3304      	adds	r3, #4

08002f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f84:	d3f9      	bcc.n	8002f7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f88:	4c0a      	ldr	r4, [pc, #40]	; (8002fb4 <LoopForever+0x16>)
  movs r3, #0
 8002f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f8c:	e001      	b.n	8002f92 <LoopFillZerobss>

08002f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f90:	3204      	adds	r2, #4

08002f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f94:	d3fb      	bcc.n	8002f8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f96:	f004 f91b 	bl	80071d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f9a:	f7fe fff3 	bl	8001f84 <main>

08002f9e <LoopForever>:

LoopForever:
  b LoopForever
 8002f9e:	e7fe      	b.n	8002f9e <LoopForever>
  ldr   r0, =_estack
 8002fa0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fa8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002fac:	080073a4 	.word	0x080073a4
  ldr r2, =_sbss
 8002fb0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002fb4:	200003cc 	.word	0x200003cc

08002fb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fb8:	e7fe      	b.n	8002fb8 <ADC1_IRQHandler>
	...

08002fbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_Init+0x3c>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_Init+0x3c>)
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	0049      	lsls	r1, r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f000 f810 	bl	8002ffc <HAL_InitTick>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	701a      	strb	r2, [r3, #0]
 8002fe6:	e001      	b.n	8002fec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fe8:	f7ff fc9e 	bl	8002928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fec:	1dfb      	adds	r3, r7, #7
 8002fee:	781b      	ldrb	r3, [r3, #0]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40022000 	.word	0x40022000

08002ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003004:	230f      	movs	r3, #15
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_InitTick+0x88>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02b      	beq.n	800306c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_InitTick+0x8c>)
 8003016:	681c      	ldr	r4, [r3, #0]
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <HAL_InitTick+0x88>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	0019      	movs	r1, r3
 800301e:	23fa      	movs	r3, #250	; 0xfa
 8003020:	0098      	lsls	r0, r3, #2
 8003022:	f7fd f86d 	bl	8000100 <__udivsi3>
 8003026:	0003      	movs	r3, r0
 8003028:	0019      	movs	r1, r3
 800302a:	0020      	movs	r0, r4
 800302c:	f7fd f868 	bl	8000100 <__udivsi3>
 8003030:	0003      	movs	r3, r0
 8003032:	0018      	movs	r0, r3
 8003034:	f000 f919 	bl	800326a <HAL_SYSTICK_Config>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d112      	bne.n	8003062 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d80a      	bhi.n	8003058 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	2301      	movs	r3, #1
 8003046:	425b      	negs	r3, r3
 8003048:	2200      	movs	r2, #0
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f8e8 	bl	8003220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_InitTick+0x90>)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e00d      	b.n	8003074 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003058:	230f      	movs	r3, #15
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e008      	b.n	8003074 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003062:	230f      	movs	r3, #15
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e003      	b.n	8003074 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800306c:	230f      	movs	r3, #15
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003074:	230f      	movs	r3, #15
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	781b      	ldrb	r3, [r3, #0]
}
 800307a:	0018      	movs	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	b005      	add	sp, #20
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	20000010 	.word	0x20000010
 8003088:	20000008 	.word	0x20000008
 800308c:	2000000c 	.word	0x2000000c

08003090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_IncTick+0x1c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	001a      	movs	r2, r3
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_IncTick+0x20>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	18d2      	adds	r2, r2, r3
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_IncTick+0x20>)
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	20000010 	.word	0x20000010
 80030b0:	200003c8 	.word	0x200003c8

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b02      	ldr	r3, [pc, #8]	; (80030c4 <HAL_GetTick+0x10>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	200003c8 	.word	0x200003c8

080030c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	0002      	movs	r2, r0
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	1dfb      	adds	r3, r7, #7
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b7f      	cmp	r3, #127	; 0x7f
 80030da:	d809      	bhi.n	80030f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	001a      	movs	r2, r3
 80030e2:	231f      	movs	r3, #31
 80030e4:	401a      	ands	r2, r3
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <__NVIC_EnableIRQ+0x30>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	4091      	lsls	r1, r2
 80030ec:	000a      	movs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	e000e100 	.word	0xe000e100

080030fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	0002      	movs	r2, r0
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b7f      	cmp	r3, #127	; 0x7f
 8003110:	d828      	bhi.n	8003164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003112:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <__NVIC_SetPriority+0xd4>)
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b25b      	sxtb	r3, r3
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	33c0      	adds	r3, #192	; 0xc0
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	589b      	ldr	r3, [r3, r2]
 8003122:	1dfa      	adds	r2, r7, #7
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	0011      	movs	r1, r2
 8003128:	2203      	movs	r2, #3
 800312a:	400a      	ands	r2, r1
 800312c:	00d2      	lsls	r2, r2, #3
 800312e:	21ff      	movs	r1, #255	; 0xff
 8003130:	4091      	lsls	r1, r2
 8003132:	000a      	movs	r2, r1
 8003134:	43d2      	mvns	r2, r2
 8003136:	401a      	ands	r2, r3
 8003138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	401a      	ands	r2, r3
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	0018      	movs	r0, r3
 8003148:	2303      	movs	r3, #3
 800314a:	4003      	ands	r3, r0
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003150:	481f      	ldr	r0, [pc, #124]	; (80031d0 <__NVIC_SetPriority+0xd4>)
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	b25b      	sxtb	r3, r3
 8003158:	089b      	lsrs	r3, r3, #2
 800315a:	430a      	orrs	r2, r1
 800315c:	33c0      	adds	r3, #192	; 0xc0
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003162:	e031      	b.n	80031c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003164:	4a1b      	ldr	r2, [pc, #108]	; (80031d4 <__NVIC_SetPriority+0xd8>)
 8003166:	1dfb      	adds	r3, r7, #7
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	0019      	movs	r1, r3
 800316c:	230f      	movs	r3, #15
 800316e:	400b      	ands	r3, r1
 8003170:	3b08      	subs	r3, #8
 8003172:	089b      	lsrs	r3, r3, #2
 8003174:	3306      	adds	r3, #6
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	18d3      	adds	r3, r2, r3
 800317a:	3304      	adds	r3, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1dfa      	adds	r2, r7, #7
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	0011      	movs	r1, r2
 8003184:	2203      	movs	r2, #3
 8003186:	400a      	ands	r2, r1
 8003188:	00d2      	lsls	r2, r2, #3
 800318a:	21ff      	movs	r1, #255	; 0xff
 800318c:	4091      	lsls	r1, r2
 800318e:	000a      	movs	r2, r1
 8003190:	43d2      	mvns	r2, r2
 8003192:	401a      	ands	r2, r3
 8003194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	401a      	ands	r2, r3
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	0018      	movs	r0, r3
 80031a4:	2303      	movs	r3, #3
 80031a6:	4003      	ands	r3, r0
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031ac:	4809      	ldr	r0, [pc, #36]	; (80031d4 <__NVIC_SetPriority+0xd8>)
 80031ae:	1dfb      	adds	r3, r7, #7
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	001c      	movs	r4, r3
 80031b4:	230f      	movs	r3, #15
 80031b6:	4023      	ands	r3, r4
 80031b8:	3b08      	subs	r3, #8
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	430a      	orrs	r2, r1
 80031be:	3306      	adds	r3, #6
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	18c3      	adds	r3, r0, r3
 80031c4:	3304      	adds	r3, #4
 80031c6:	601a      	str	r2, [r3, #0]
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b003      	add	sp, #12
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1e5a      	subs	r2, r3, #1
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	045b      	lsls	r3, r3, #17
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d301      	bcc.n	80031f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ec:	2301      	movs	r3, #1
 80031ee:	e010      	b.n	8003212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <SysTick_Config+0x44>)
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	3a01      	subs	r2, #1
 80031f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f8:	2301      	movs	r3, #1
 80031fa:	425b      	negs	r3, r3
 80031fc:	2103      	movs	r1, #3
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff ff7c 	bl	80030fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <SysTick_Config+0x44>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320a:	4b04      	ldr	r3, [pc, #16]	; (800321c <SysTick_Config+0x44>)
 800320c:	2207      	movs	r2, #7
 800320e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003210:	2300      	movs	r3, #0
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	e000e010 	.word	0xe000e010

08003220 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	210f      	movs	r1, #15
 800322c:	187b      	adds	r3, r7, r1
 800322e:	1c02      	adds	r2, r0, #0
 8003230:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	187b      	adds	r3, r7, r1
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	b25b      	sxtb	r3, r3
 800323a:	0011      	movs	r1, r2
 800323c:	0018      	movs	r0, r3
 800323e:	f7ff ff5d 	bl	80030fc <__NVIC_SetPriority>
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	0002      	movs	r2, r0
 8003252:	1dfb      	adds	r3, r7, #7
 8003254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003256:	1dfb      	adds	r3, r7, #7
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b25b      	sxtb	r3, r3
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff ff33 	bl	80030c8 <__NVIC_EnableIRQ>
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b002      	add	sp, #8
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff ffaf 	bl	80031d8 <SysTick_Config>
 800327a:	0003      	movs	r3, r0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e077      	b.n	8003386 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <HAL_DMA_Init+0x10c>)
 800329c:	4694      	mov	ip, r2
 800329e:	4463      	add	r3, ip
 80032a0:	2114      	movs	r1, #20
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7fc ff2c 	bl	8000100 <__udivsi3>
 80032a8:	0003      	movs	r3, r0
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2225      	movs	r2, #37	; 0x25
 80032b4:	2102      	movs	r1, #2
 80032b6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4934      	ldr	r1, [pc, #208]	; (8003394 <HAL_DMA_Init+0x110>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 f9c7 	bl	8003694 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	01db      	lsls	r3, r3, #7
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	213f      	movs	r1, #63	; 0x3f
 8003322:	400a      	ands	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800332e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d011      	beq.n	800335c <HAL_DMA_Init+0xd8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b04      	cmp	r3, #4
 800333e:	d80d      	bhi.n	800335c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f9d2 	bl	80036ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e008      	b.n	800336e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2225      	movs	r2, #37	; 0x25
 8003378:	2101      	movs	r1, #1
 800337a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	2100      	movs	r1, #0
 8003382:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	bffdfff8 	.word	0xbffdfff8
 8003394:	ffff800f 	.word	0xffff800f

08003398 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e050      	b.n	800344c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2225      	movs	r2, #37	; 0x25
 80033ae:	5c9b      	ldrb	r3, [r3, r2]
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d008      	beq.n	80033c8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2204      	movs	r2, #4
 80033ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e041      	b.n	800344c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	210e      	movs	r1, #14
 80033d4:	438a      	bics	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	491c      	ldr	r1, [pc, #112]	; (8003454 <HAL_DMA_Abort+0xbc>)
 80033e4:	400a      	ands	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	438a      	bics	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <HAL_DMA_Abort+0xc0>)
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	221c      	movs	r2, #28
 8003402:	4013      	ands	r3, r2
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <HAL_DMA_Abort+0xc0>)
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003416:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342a:	490a      	ldr	r1, [pc, #40]	; (8003454 <HAL_DMA_Abort+0xbc>)
 800342c:	400a      	ands	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003438:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2225      	movs	r2, #37	; 0x25
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2224      	movs	r2, #36	; 0x24
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	b002      	add	sp, #8
 8003452:	bd80      	pop	{r7, pc}
 8003454:	fffffeff 	.word	0xfffffeff
 8003458:	40020000 	.word	0x40020000

0800345c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	210f      	movs	r1, #15
 8003466:	187b      	adds	r3, r7, r1
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2225      	movs	r2, #37	; 0x25
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d006      	beq.n	8003486 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2204      	movs	r2, #4
 800347c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800347e:	187b      	adds	r3, r7, r1
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
 8003484:	e049      	b.n	800351a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	210e      	movs	r1, #14
 8003492:	438a      	bics	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	438a      	bics	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	491d      	ldr	r1, [pc, #116]	; (8003528 <HAL_DMA_Abort_IT+0xcc>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_DMA_Abort_IT+0xd0>)
 80034b8:	6859      	ldr	r1, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	221c      	movs	r2, #28
 80034c0:	4013      	ands	r3, r2
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_DMA_Abort_IT+0xd0>)
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e8:	490f      	ldr	r1, [pc, #60]	; (8003528 <HAL_DMA_Abort_IT+0xcc>)
 80034ea:	400a      	ands	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2225      	movs	r2, #37	; 0x25
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	0010      	movs	r0, r2
 8003518:	4798      	blx	r3
    }
  }
  return status;
 800351a:	230f      	movs	r3, #15
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	781b      	ldrb	r3, [r3, #0]
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	fffffeff 	.word	0xfffffeff
 800352c:	40020000 	.word	0x40020000

08003530 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003538:	4b55      	ldr	r3, [pc, #340]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	221c      	movs	r2, #28
 800354c:	4013      	ands	r3, r2
 800354e:	2204      	movs	r2, #4
 8003550:	409a      	lsls	r2, r3
 8003552:	0013      	movs	r3, r2
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4013      	ands	r3, r2
 8003558:	d027      	beq.n	80035aa <HAL_DMA_IRQHandler+0x7a>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2204      	movs	r2, #4
 800355e:	4013      	ands	r3, r2
 8003560:	d023      	beq.n	80035aa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2220      	movs	r2, #32
 800356a:	4013      	ands	r3, r2
 800356c:	d107      	bne.n	800357e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2104      	movs	r1, #4
 800357a:	438a      	bics	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 8003580:	6859      	ldr	r1, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	221c      	movs	r2, #28
 8003588:	4013      	ands	r3, r2
 800358a:	2204      	movs	r2, #4
 800358c:	409a      	lsls	r2, r3
 800358e:	4b40      	ldr	r3, [pc, #256]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 8003590:	430a      	orrs	r2, r1
 8003592:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2b00      	cmp	r3, #0
 800359a:	d100      	bne.n	800359e <HAL_DMA_IRQHandler+0x6e>
 800359c:	e073      	b.n	8003686 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	0010      	movs	r0, r2
 80035a6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80035a8:	e06d      	b.n	8003686 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	221c      	movs	r2, #28
 80035b0:	4013      	ands	r3, r2
 80035b2:	2202      	movs	r2, #2
 80035b4:	409a      	lsls	r2, r3
 80035b6:	0013      	movs	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	d02e      	beq.n	800361c <HAL_DMA_IRQHandler+0xec>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2202      	movs	r2, #2
 80035c2:	4013      	ands	r3, r2
 80035c4:	d02a      	beq.n	800361c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2220      	movs	r2, #32
 80035ce:	4013      	ands	r3, r2
 80035d0:	d10b      	bne.n	80035ea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	210a      	movs	r1, #10
 80035de:	438a      	bics	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2225      	movs	r2, #37	; 0x25
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	221c      	movs	r2, #28
 80035f4:	4013      	ands	r3, r2
 80035f6:	2202      	movs	r2, #2
 80035f8:	409a      	lsls	r2, r3
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 80035fc:	430a      	orrs	r2, r1
 80035fe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03a      	beq.n	8003686 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	0010      	movs	r0, r2
 8003618:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800361a:	e034      	b.n	8003686 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	221c      	movs	r2, #28
 8003622:	4013      	ands	r3, r2
 8003624:	2208      	movs	r2, #8
 8003626:	409a      	lsls	r2, r3
 8003628:	0013      	movs	r3, r2
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	d02b      	beq.n	8003688 <HAL_DMA_IRQHandler+0x158>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2208      	movs	r2, #8
 8003634:	4013      	ands	r3, r2
 8003636:	d027      	beq.n	8003688 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	210e      	movs	r1, #14
 8003644:	438a      	bics	r2, r1
 8003646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	221c      	movs	r2, #28
 8003652:	4013      	ands	r3, r2
 8003654:	2201      	movs	r2, #1
 8003656:	409a      	lsls	r2, r3
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <HAL_DMA_IRQHandler+0x160>)
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2225      	movs	r2, #37	; 0x25
 8003668:	2101      	movs	r1, #1
 800366a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	0010      	movs	r0, r2
 8003684:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46c0      	nop			; (mov r8, r8)
}
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40020000 	.word	0x40020000

08003694 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	089b      	lsrs	r3, r3, #2
 80036a2:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80036a4:	4694      	mov	ip, r2
 80036a6:	4463      	add	r3, ip
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	001a      	movs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	001a      	movs	r2, r3
 80036b6:	23ff      	movs	r3, #255	; 0xff
 80036b8:	4013      	ands	r3, r2
 80036ba:	3b08      	subs	r3, #8
 80036bc:	2114      	movs	r1, #20
 80036be:	0018      	movs	r0, r3
 80036c0:	f7fc fd1e 	bl	8000100 <__udivsi3>
 80036c4:	0003      	movs	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80036cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	221f      	movs	r2, #31
 80036d2:	4013      	ands	r3, r2
 80036d4:	2201      	movs	r2, #1
 80036d6:	409a      	lsls	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	10008200 	.word	0x10008200
 80036e8:	40020880 	.word	0x40020880

080036ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	223f      	movs	r2, #63	; 0x3f
 80036fa:	4013      	ands	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003702:	4694      	mov	ip, r2
 8003704:	4463      	add	r3, ip
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	001a      	movs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003712:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3b01      	subs	r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	4013      	ands	r3, r2
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b004      	add	sp, #16
 800372a:	bd80      	pop	{r7, pc}
 800372c:	1000823f 	.word	0x1000823f
 8003730:	40020940 	.word	0x40020940

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003742:	e147      	b.n	80039d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4091      	lsls	r1, r2
 800374e:	000a      	movs	r2, r1
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d100      	bne.n	800375c <HAL_GPIO_Init+0x28>
 800375a:	e138      	b.n	80039ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2203      	movs	r2, #3
 8003762:	4013      	ands	r3, r2
 8003764:	2b01      	cmp	r3, #1
 8003766:	d005      	beq.n	8003774 <HAL_GPIO_Init+0x40>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	4013      	ands	r3, r2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d130      	bne.n	80037d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	409a      	lsls	r2, r3
 8003782:	0013      	movs	r3, r2
 8003784:	43da      	mvns	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	0013      	movs	r3, r2
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037aa:	2201      	movs	r2, #1
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	409a      	lsls	r2, r3
 80037b0:	0013      	movs	r3, r2
 80037b2:	43da      	mvns	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	2201      	movs	r2, #1
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
 80037c8:	0013      	movs	r3, r2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2203      	movs	r2, #3
 80037dc:	4013      	ands	r3, r2
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d017      	beq.n	8003812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	409a      	lsls	r2, r3
 80037f0:	0013      	movs	r3, r2
 80037f2:	43da      	mvns	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	409a      	lsls	r2, r3
 8003804:	0013      	movs	r3, r2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2203      	movs	r2, #3
 8003818:	4013      	ands	r3, r2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d123      	bne.n	8003866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	08da      	lsrs	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	58d3      	ldr	r3, [r2, r3]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2207      	movs	r2, #7
 8003830:	4013      	ands	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	409a      	lsls	r2, r3
 8003838:	0013      	movs	r3, r2
 800383a:	43da      	mvns	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2107      	movs	r1, #7
 800384a:	400b      	ands	r3, r1
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	409a      	lsls	r2, r3
 8003850:	0013      	movs	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	6939      	ldr	r1, [r7, #16]
 8003864:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	409a      	lsls	r2, r3
 8003874:	0013      	movs	r3, r2
 8003876:	43da      	mvns	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2203      	movs	r2, #3
 8003884:	401a      	ands	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	0013      	movs	r3, r2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	23c0      	movs	r3, #192	; 0xc0
 80038a0:	029b      	lsls	r3, r3, #10
 80038a2:	4013      	ands	r3, r2
 80038a4:	d100      	bne.n	80038a8 <HAL_GPIO_Init+0x174>
 80038a6:	e092      	b.n	80039ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80038a8:	4a50      	ldr	r2, [pc, #320]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3318      	adds	r3, #24
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	589b      	ldr	r3, [r3, r2]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2203      	movs	r2, #3
 80038ba:	4013      	ands	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	220f      	movs	r2, #15
 80038c0:	409a      	lsls	r2, r3
 80038c2:	0013      	movs	r3, r2
 80038c4:	43da      	mvns	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	23a0      	movs	r3, #160	; 0xa0
 80038d0:	05db      	lsls	r3, r3, #23
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x1ca>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a45      	ldr	r2, [pc, #276]	; (80039f0 <HAL_GPIO_Init+0x2bc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x1c6>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a44      	ldr	r2, [pc, #272]	; (80039f4 <HAL_GPIO_Init+0x2c0>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x1c2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a43      	ldr	r2, [pc, #268]	; (80039f8 <HAL_GPIO_Init+0x2c4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x1be>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x1cc>
 80038f2:	2305      	movs	r3, #5
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x1cc>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x1cc>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x1cc>
 80038fe:	2300      	movs	r3, #0
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	2103      	movs	r1, #3
 8003904:	400a      	ands	r2, r1
 8003906:	00d2      	lsls	r2, r2, #3
 8003908:	4093      	lsls	r3, r2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003910:	4936      	ldr	r1, [pc, #216]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3318      	adds	r3, #24
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	43da      	mvns	r2, r3
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	035b      	lsls	r3, r3, #13
 8003936:	4013      	ands	r3, r2
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003948:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	43da      	mvns	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	039b      	lsls	r3, r3, #14
 8003960:	4013      	ands	r3, r2
 8003962:	d003      	beq.n	800396c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003972:	4a1e      	ldr	r2, [pc, #120]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 8003974:	2384      	movs	r3, #132	; 0x84
 8003976:	58d3      	ldr	r3, [r2, r3]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43da      	mvns	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	029b      	lsls	r3, r3, #10
 800398c:	4013      	ands	r3, r2
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003998:	4914      	ldr	r1, [pc, #80]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 800399a:	2284      	movs	r2, #132	; 0x84
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80039a0:	4a12      	ldr	r2, [pc, #72]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 80039a2:	2380      	movs	r3, #128	; 0x80
 80039a4:	58d3      	ldr	r3, [r2, r3]
 80039a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4013      	ands	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	025b      	lsls	r3, r3, #9
 80039ba:	4013      	ands	r3, r2
 80039bc:	d003      	beq.n	80039c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039c6:	4909      	ldr	r1, [pc, #36]	; (80039ec <HAL_GPIO_Init+0x2b8>)
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	3301      	adds	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	40da      	lsrs	r2, r3
 80039dc:	1e13      	subs	r3, r2, #0
 80039de:	d000      	beq.n	80039e2 <HAL_GPIO_Init+0x2ae>
 80039e0:	e6b0      	b.n	8003744 <HAL_GPIO_Init+0x10>
  }
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b006      	add	sp, #24
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40021800 	.word	0x40021800
 80039f0:	50000400 	.word	0x50000400
 80039f4:	50000800 	.word	0x50000800
 80039f8:	50000c00 	.word	0x50000c00

080039fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	0008      	movs	r0, r1
 8003a06:	0011      	movs	r1, r2
 8003a08:	1cbb      	adds	r3, r7, #2
 8003a0a:	1c02      	adds	r2, r0, #0
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	1c7b      	adds	r3, r7, #1
 8003a10:	1c0a      	adds	r2, r1, #0
 8003a12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a14:	1c7b      	adds	r3, r7, #1
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a1c:	1cbb      	adds	r3, r7, #2
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a26:	1cbb      	adds	r3, r7, #2
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d11f      	bne.n	8003a9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	0013      	movs	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	189b      	adds	r3, r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4912      	ldr	r1, [pc, #72]	; (8003ab4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	f7fc fb48 	bl	8000100 <__udivsi3>
 8003a70:	0003      	movs	r3, r0
 8003a72:	3301      	adds	r3, #1
 8003a74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a76:	e008      	b.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	e001      	b.n	8003a8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e009      	b.n	8003a9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	401a      	ands	r2, r3
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d0ed      	beq.n	8003a78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	40007000 	.word	0x40007000
 8003aac:	fffff9ff 	.word	0xfffff9ff
 8003ab0:	20000008 	.word	0x20000008
 8003ab4:	000f4240 	.word	0x000f4240

08003ab8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <LL_RCC_GetAPB1Prescaler+0x14>)
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	23e0      	movs	r3, #224	; 0xe0
 8003ac2:	01db      	lsls	r3, r3, #7
 8003ac4:	4013      	ands	r3, r2
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e2f3      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d100      	bne.n	8003aee <HAL_RCC_OscConfig+0x1e>
 8003aec:	e07c      	b.n	8003be8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aee:	4bc3      	ldr	r3, [pc, #780]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	2238      	movs	r2, #56	; 0x38
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003af8:	4bc0      	ldr	r3, [pc, #768]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2203      	movs	r2, #3
 8003afe:	4013      	ands	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d102      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3e>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4bb9      	ldr	r3, [pc, #740]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	029b      	lsls	r3, r3, #10
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d062      	beq.n	8003be6 <HAL_RCC_OscConfig+0x116>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d15e      	bne.n	8003be6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e2ce      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	025b      	lsls	r3, r3, #9
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_OscConfig+0x78>
 8003b38:	4bb0      	ldr	r3, [pc, #704]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4baf      	ldr	r3, [pc, #700]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	0249      	lsls	r1, r1, #9
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e020      	b.n	8003b8a <HAL_RCC_OscConfig+0xba>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	23a0      	movs	r3, #160	; 0xa0
 8003b4e:	02db      	lsls	r3, r3, #11
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d10e      	bne.n	8003b72 <HAL_RCC_OscConfig+0xa2>
 8003b54:	4ba9      	ldr	r3, [pc, #676]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4ba8      	ldr	r3, [pc, #672]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	02c9      	lsls	r1, r1, #11
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	4ba6      	ldr	r3, [pc, #664]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4ba5      	ldr	r3, [pc, #660]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	0249      	lsls	r1, r1, #9
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e00b      	b.n	8003b8a <HAL_RCC_OscConfig+0xba>
 8003b72:	4ba2      	ldr	r3, [pc, #648]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4ba1      	ldr	r3, [pc, #644]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b78:	49a1      	ldr	r1, [pc, #644]	; (8003e00 <HAL_RCC_OscConfig+0x330>)
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	4b9f      	ldr	r3, [pc, #636]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b9e      	ldr	r3, [pc, #632]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b84:	499f      	ldr	r1, [pc, #636]	; (8003e04 <HAL_RCC_OscConfig+0x334>)
 8003b86:	400a      	ands	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b92:	f7ff fa8f 	bl	80030b4 <HAL_GetTick>
 8003b96:	0003      	movs	r3, r0
 8003b98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7ff fa8a 	bl	80030b4 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	; 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e28d      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	4b93      	ldr	r3, [pc, #588]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	029b      	lsls	r3, r3, #10
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xcc>
 8003bba:	e015      	b.n	8003be8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7ff fa7a 	bl	80030b4 <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc6:	f7ff fa75 	bl	80030b4 <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b64      	cmp	r3, #100	; 0x64
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e278      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd8:	4b88      	ldr	r3, [pc, #544]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	4013      	ands	r3, r2
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0xf6>
 8003be4:	e000      	b.n	8003be8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d100      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x124>
 8003bf2:	e099      	b.n	8003d28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf4:	4b81      	ldr	r3, [pc, #516]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2238      	movs	r2, #56	; 0x38
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bfe:	4b7f      	ldr	r3, [pc, #508]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2203      	movs	r2, #3
 8003c04:	4013      	ands	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d102      	bne.n	8003c14 <HAL_RCC_OscConfig+0x144>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d002      	beq.n	8003c1a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d135      	bne.n	8003c86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c1a:	4b78      	ldr	r3, [pc, #480]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4013      	ands	r3, r2
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x162>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e24b      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c32:	4b72      	ldr	r3, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4a74      	ldr	r2, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0x338>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	021a      	lsls	r2, r3, #8
 8003c42:	4b6e      	ldr	r3, [pc, #440]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c4e:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x33c>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c62:	4b66      	ldr	r3, [pc, #408]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	0adb      	lsrs	r3, r3, #11
 8003c68:	2207      	movs	r2, #7
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	4a68      	ldr	r2, [pc, #416]	; (8003e10 <HAL_RCC_OscConfig+0x340>)
 8003c6e:	40da      	lsrs	r2, r3
 8003c70:	4b68      	ldr	r3, [pc, #416]	; (8003e14 <HAL_RCC_OscConfig+0x344>)
 8003c72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c74:	4b68      	ldr	r3, [pc, #416]	; (8003e18 <HAL_RCC_OscConfig+0x348>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff f9bf 	bl	8002ffc <HAL_InitTick>
 8003c7e:	1e03      	subs	r3, r0, #0
 8003c80:	d051      	beq.n	8003d26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e221      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d030      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5e      	ldr	r2, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x33c>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	0019      	movs	r1, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	4b57      	ldr	r3, [pc, #348]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ca2:	4b56      	ldr	r3, [pc, #344]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0049      	lsls	r1, r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fa00 	bl	80030b4 <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7ff f9fb 	bl	80030b4 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1fe      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ccc:	4b4b      	ldr	r3, [pc, #300]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <HAL_RCC_OscConfig+0x338>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	021a      	lsls	r2, r3, #8
 8003ce8:	4b44      	ldr	r3, [pc, #272]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	e01b      	b.n	8003d28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	4949      	ldr	r1, [pc, #292]	; (8003e1c <HAL_RCC_OscConfig+0x34c>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7ff f9da 	bl	80030b4 <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7ff f9d5 	bl	80030b4 <HAL_GetTick>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1d8      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d18:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4013      	ands	r3, r2
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x236>
 8003d24:	e000      	b.n	8003d28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d047      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d32:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2238      	movs	r2, #56	; 0x38
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b18      	cmp	r3, #24
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d42:	2202      	movs	r2, #2
 8003d44:	4013      	ands	r3, r2
 8003d46:	d03c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d138      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e1ba      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d60:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d62:	2101      	movs	r1, #1
 8003d64:	430a      	orrs	r2, r1
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7ff f9a4 	bl	80030b4 <HAL_GetTick>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d72:	f7ff f99f 	bl	80030b4 <HAL_GetTick>
 8003d76:	0002      	movs	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a2      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	2202      	movs	r2, #2
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d0f1      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2a2>
 8003d8e:	e018      	b.n	8003dc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d96:	2101      	movs	r1, #1
 8003d98:	438a      	bics	r2, r1
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7ff f98a 	bl	80030b4 <HAL_GetTick>
 8003da0:	0003      	movs	r3, r0
 8003da2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da6:	f7ff f985 	bl	80030b4 <HAL_GetTick>
 8003daa:	0002      	movs	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e188      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d1f1      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d100      	bne.n	8003dce <HAL_RCC_OscConfig+0x2fe>
 8003dcc:	e0c6      	b.n	8003f5c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dce:	231f      	movs	r3, #31
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2238      	movs	r2, #56	; 0x38
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d11e      	bne.n	8003e20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003de2:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	2202      	movs	r2, #2
 8003de8:	4013      	ands	r3, r2
 8003dea:	d100      	bne.n	8003dee <HAL_RCC_OscConfig+0x31e>
 8003dec:	e0b6      	b.n	8003f5c <HAL_RCC_OscConfig+0x48c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d000      	beq.n	8003df8 <HAL_RCC_OscConfig+0x328>
 8003df6:	e0b1      	b.n	8003f5c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e166      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	fffeffff 	.word	0xfffeffff
 8003e04:	fffbffff 	.word	0xfffbffff
 8003e08:	ffff80ff 	.word	0xffff80ff
 8003e0c:	ffffc7ff 	.word	0xffffc7ff
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	20000008 	.word	0x20000008
 8003e18:	2000000c 	.word	0x2000000c
 8003e1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e20:	4bac      	ldr	r3, [pc, #688]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	055b      	lsls	r3, r3, #21
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x360>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x362>
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d011      	beq.n	8003e5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4ba7      	ldr	r3, [pc, #668]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3a:	4ba6      	ldr	r3, [pc, #664]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	0549      	lsls	r1, r1, #21
 8003e40:	430a      	orrs	r2, r1
 8003e42:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e44:	4ba3      	ldr	r3, [pc, #652]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	055b      	lsls	r3, r3, #21
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e52:	231f      	movs	r3, #31
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2201      	movs	r2, #1
 8003e58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5a:	4b9f      	ldr	r3, [pc, #636]	; (80040d8 <HAL_RCC_OscConfig+0x608>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4013      	ands	r3, r2
 8003e64:	d11a      	bne.n	8003e9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e66:	4b9c      	ldr	r3, [pc, #624]	; (80040d8 <HAL_RCC_OscConfig+0x608>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b9b      	ldr	r3, [pc, #620]	; (80040d8 <HAL_RCC_OscConfig+0x608>)
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	0049      	lsls	r1, r1, #1
 8003e70:	430a      	orrs	r2, r1
 8003e72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e74:	f7ff f91e 	bl	80030b4 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7ff f919 	bl	80030b4 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e11c      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e90:	4b91      	ldr	r3, [pc, #580]	; (80040d8 <HAL_RCC_OscConfig+0x608>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x3e2>
 8003ea4:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea8:	4b8a      	ldr	r3, [pc, #552]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003eaa:	2101      	movs	r1, #1
 8003eac:	430a      	orrs	r2, r1
 8003eae:	65da      	str	r2, [r3, #92]	; 0x5c
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x41c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x404>
 8003eba:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ebe:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec6:	4b83      	ldr	r3, [pc, #524]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eca:	4b82      	ldr	r3, [pc, #520]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ecc:	2101      	movs	r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0x41c>
 8003ed4:	4b7f      	ldr	r3, [pc, #508]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003eda:	2101      	movs	r1, #1
 8003edc:	438a      	bics	r2, r1
 8003ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ee0:	4b7c      	ldr	r3, [pc, #496]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee4:	4b7b      	ldr	r3, [pc, #492]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	438a      	bics	r2, r1
 8003eea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d014      	beq.n	8003f1e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7ff f8de 	bl	80030b4 <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efc:	e009      	b.n	8003f12 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7ff f8d9 	bl	80030b4 <HAL_GetTick>
 8003f02:	0002      	movs	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	4a74      	ldr	r2, [pc, #464]	; (80040dc <HAL_RCC_OscConfig+0x60c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0db      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f12:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	2202      	movs	r2, #2
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x42e>
 8003f1c:	e013      	b.n	8003f46 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7ff f8c9 	bl	80030b4 <HAL_GetTick>
 8003f22:	0003      	movs	r3, r0
 8003f24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f26:	e009      	b.n	8003f3c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7ff f8c4 	bl	80030b4 <HAL_GetTick>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	4a6a      	ldr	r2, [pc, #424]	; (80040dc <HAL_RCC_OscConfig+0x60c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0c6      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f3c:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f46:	231f      	movs	r3, #31
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b60      	ldr	r3, [pc, #384]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f54:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f56:	4962      	ldr	r1, [pc, #392]	; (80040e0 <HAL_RCC_OscConfig+0x610>)
 8003f58:	400a      	ands	r2, r1
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d100      	bne.n	8003f66 <HAL_RCC_OscConfig+0x496>
 8003f64:	e0b0      	b.n	80040c8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f66:	4b5b      	ldr	r3, [pc, #364]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2238      	movs	r2, #56	; 0x38
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d100      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4a4>
 8003f72:	e078      	b.n	8004066 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d153      	bne.n	8004024 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b55      	ldr	r3, [pc, #340]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003f82:	4958      	ldr	r1, [pc, #352]	; (80040e4 <HAL_RCC_OscConfig+0x614>)
 8003f84:	400a      	ands	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7ff f894 	bl	80030b4 <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f92:	f7ff f88f 	bl	80030b4 <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e092      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa4:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	049b      	lsls	r3, r3, #18
 8003fac:	4013      	ands	r3, r2
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb0:	4b48      	ldr	r3, [pc, #288]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <HAL_RCC_OscConfig+0x618>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	0019      	movs	r1, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1a      	ldr	r2, [r3, #32]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b3c      	ldr	r3, [pc, #240]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	0449      	lsls	r1, r1, #17
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003fec:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8003ff2:	2180      	movs	r1, #128	; 0x80
 8003ff4:	0549      	lsls	r1, r1, #21
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7ff f85b 	bl	80030b4 <HAL_GetTick>
 8003ffe:	0003      	movs	r3, r0
 8004000:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004004:	f7ff f856 	bl	80030b4 <HAL_GetTick>
 8004008:	0002      	movs	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e059      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	049b      	lsls	r3, r3, #18
 800401e:	4013      	ands	r3, r2
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x534>
 8004022:	e051      	b.n	80040c8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b2b      	ldr	r3, [pc, #172]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 800402a:	492e      	ldr	r1, [pc, #184]	; (80040e4 <HAL_RCC_OscConfig+0x614>)
 800402c:	400a      	ands	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7ff f840 	bl	80030b4 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7ff f83b 	bl	80030b4 <HAL_GetTick>
 800403e:	0002      	movs	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e03e      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	; 0x80
 8004052:	049b      	lsls	r3, r3, #18
 8004054:	4013      	ands	r3, r2
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 800405e:	4923      	ldr	r1, [pc, #140]	; (80040ec <HAL_RCC_OscConfig+0x61c>)
 8004060:	400a      	ands	r2, r1
 8004062:	60da      	str	r2, [r3, #12]
 8004064:	e030      	b.n	80040c8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e02b      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCC_OscConfig+0x604>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2203      	movs	r2, #3
 800407c:	401a      	ands	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	429a      	cmp	r2, r3
 8004084:	d11e      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2270      	movs	r2, #112	; 0x70
 800408a:	401a      	ands	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d117      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	23fe      	movs	r3, #254	; 0xfe
 8004098:	01db      	lsls	r3, r3, #7
 800409a:	401a      	ands	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d10e      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	23f8      	movs	r3, #248	; 0xf8
 80040aa:	039b      	lsls	r3, r3, #14
 80040ac:	401a      	ands	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	0f5b      	lsrs	r3, r3, #29
 80040ba:	075a      	lsls	r2, r3, #29
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b008      	add	sp, #32
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40007000 	.word	0x40007000
 80040dc:	00001388 	.word	0x00001388
 80040e0:	efffffff 	.word	0xefffffff
 80040e4:	feffffff 	.word	0xfeffffff
 80040e8:	1fc1808c 	.word	0x1fc1808c
 80040ec:	effefffc 	.word	0xeffefffc

080040f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0e9      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2207      	movs	r2, #7
 800410a:	4013      	ands	r3, r2
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d91e      	bls.n	8004150 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b73      	ldr	r3, [pc, #460]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2207      	movs	r2, #7
 8004118:	4393      	bics	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	4b70      	ldr	r3, [pc, #448]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004124:	f7fe ffc6 	bl	80030b4 <HAL_GetTick>
 8004128:	0003      	movs	r3, r0
 800412a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800412c:	e009      	b.n	8004142 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412e:	f7fe ffc1 	bl	80030b4 <HAL_GetTick>
 8004132:	0002      	movs	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	4a6a      	ldr	r2, [pc, #424]	; (80042e4 <HAL_RCC_ClockConfig+0x1f4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0ca      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004142:	4b67      	ldr	r3, [pc, #412]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2207      	movs	r2, #7
 8004148:	4013      	ands	r3, r2
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d1ee      	bne.n	800412e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2202      	movs	r2, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d015      	beq.n	8004186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2204      	movs	r2, #4
 8004160:	4013      	ands	r3, r2
 8004162:	d006      	beq.n	8004172 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004164:	4b60      	ldr	r3, [pc, #384]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b5f      	ldr	r3, [pc, #380]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 800416a:	21e0      	movs	r1, #224	; 0xe0
 800416c:	01c9      	lsls	r1, r1, #7
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004172:	4b5d      	ldr	r3, [pc, #372]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4a5d      	ldr	r2, [pc, #372]	; (80042ec <HAL_RCC_ClockConfig+0x1fc>)
 8004178:	4013      	ands	r3, r2
 800417a:	0019      	movs	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2201      	movs	r2, #1
 800418c:	4013      	ands	r3, r2
 800418e:	d057      	beq.n	8004240 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	029b      	lsls	r3, r3, #10
 80041a0:	4013      	ands	r3, r2
 80041a2:	d12b      	bne.n	80041fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e097      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b0:	4b4d      	ldr	r3, [pc, #308]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	049b      	lsls	r3, r3, #18
 80041b8:	4013      	ands	r3, r2
 80041ba:	d11f      	bne.n	80041fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e08b      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c8:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4013      	ands	r3, r2
 80041d2:	d113      	bne.n	80041fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e07f      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d106      	bne.n	80041ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041e0:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	2202      	movs	r2, #2
 80041e6:	4013      	ands	r3, r2
 80041e8:	d108      	bne.n	80041fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e074      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ee:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80041f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f2:	2202      	movs	r2, #2
 80041f4:	4013      	ands	r3, r2
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e06d      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2207      	movs	r2, #7
 8004202:	4393      	bics	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004210:	f7fe ff50 	bl	80030b4 <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	e009      	b.n	800422e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421a:	f7fe ff4b 	bl	80030b4 <HAL_GetTick>
 800421e:	0002      	movs	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <HAL_RCC_ClockConfig+0x1f4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e054      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2e      	ldr	r3, [pc, #184]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2238      	movs	r2, #56	; 0x38
 8004234:	401a      	ands	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	429a      	cmp	r2, r3
 800423e:	d1ec      	bne.n	800421a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2207      	movs	r2, #7
 8004246:	4013      	ands	r3, r2
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d21e      	bcs.n	800428c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2207      	movs	r2, #7
 8004254:	4393      	bics	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004260:	f7fe ff28 	bl	80030b4 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004268:	e009      	b.n	800427e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426a:	f7fe ff23 	bl	80030b4 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <HAL_RCC_ClockConfig+0x1f4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e02c      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2207      	movs	r2, #7
 8004284:	4013      	ands	r3, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d1ee      	bne.n	800426a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <HAL_RCC_ClockConfig+0x200>)
 800429c:	4013      	ands	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	4b10      	ldr	r3, [pc, #64]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042aa:	f000 f829 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042ae:	0001      	movs	r1, r0
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <HAL_RCC_ClockConfig+0x1f8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	220f      	movs	r2, #15
 80042b8:	401a      	ands	r2, r3
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_RCC_ClockConfig+0x204>)
 80042bc:	0092      	lsls	r2, r2, #2
 80042be:	58d3      	ldr	r3, [r2, r3]
 80042c0:	221f      	movs	r2, #31
 80042c2:	4013      	ands	r3, r2
 80042c4:	000a      	movs	r2, r1
 80042c6:	40da      	lsrs	r2, r3
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x208>)
 80042ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x20c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f7fe fe93 	bl	8002ffc <HAL_InitTick>
 80042d6:	0003      	movs	r3, r0
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40022000 	.word	0x40022000
 80042e4:	00001388 	.word	0x00001388
 80042e8:	40021000 	.word	0x40021000
 80042ec:	fffff0ff 	.word	0xfffff0ff
 80042f0:	ffff8fff 	.word	0xffff8fff
 80042f4:	080072c0 	.word	0x080072c0
 80042f8:	20000008 	.word	0x20000008
 80042fc:	2000000c 	.word	0x2000000c

08004300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004306:	4b3c      	ldr	r3, [pc, #240]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2238      	movs	r2, #56	; 0x38
 800430c:	4013      	ands	r3, r2
 800430e:	d10f      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004310:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0adb      	lsrs	r3, r3, #11
 8004316:	2207      	movs	r2, #7
 8004318:	4013      	ands	r3, r2
 800431a:	2201      	movs	r2, #1
 800431c:	409a      	lsls	r2, r3
 800431e:	0013      	movs	r3, r2
 8004320:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004322:	6839      	ldr	r1, [r7, #0]
 8004324:	4835      	ldr	r0, [pc, #212]	; (80043fc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004326:	f7fb feeb 	bl	8000100 <__udivsi3>
 800432a:	0003      	movs	r3, r0
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	e05d      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004330:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2238      	movs	r2, #56	; 0x38
 8004336:	4013      	ands	r3, r2
 8004338:	2b08      	cmp	r3, #8
 800433a:	d102      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <HAL_RCC_GetSysClockFreq+0x100>)
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	e054      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2238      	movs	r2, #56	; 0x38
 8004348:	4013      	ands	r3, r2
 800434a:	2b10      	cmp	r3, #16
 800434c:	d138      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	2203      	movs	r2, #3
 8004354:	4013      	ands	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	2207      	movs	r2, #7
 8004360:	4013      	ands	r3, r2
 8004362:	3301      	adds	r3, #1
 8004364:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d10d      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	4824      	ldr	r0, [pc, #144]	; (8004400 <HAL_RCC_GetSysClockFreq+0x100>)
 8004370:	f7fb fec6 	bl	8000100 <__udivsi3>
 8004374:	0003      	movs	r3, r0
 8004376:	0019      	movs	r1, r3
 8004378:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	227f      	movs	r2, #127	; 0x7f
 8004380:	4013      	ands	r3, r2
 8004382:	434b      	muls	r3, r1
 8004384:	617b      	str	r3, [r7, #20]
        break;
 8004386:	e00d      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	481c      	ldr	r0, [pc, #112]	; (80043fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800438c:	f7fb feb8 	bl	8000100 <__udivsi3>
 8004390:	0003      	movs	r3, r0
 8004392:	0019      	movs	r1, r3
 8004394:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	227f      	movs	r2, #127	; 0x7f
 800439c:	4013      	ands	r3, r2
 800439e:	434b      	muls	r3, r1
 80043a0:	617b      	str	r3, [r7, #20]
        break;
 80043a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80043a4:	4b14      	ldr	r3, [pc, #80]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	0f5b      	lsrs	r3, r3, #29
 80043aa:	2207      	movs	r2, #7
 80043ac:	4013      	ands	r3, r2
 80043ae:	3301      	adds	r3, #1
 80043b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	6978      	ldr	r0, [r7, #20]
 80043b6:	f7fb fea3 	bl	8000100 <__udivsi3>
 80043ba:	0003      	movs	r3, r0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	e015      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2238      	movs	r2, #56	; 0x38
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d103      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2238      	movs	r2, #56	; 0x38
 80043da:	4013      	ands	r3, r2
 80043dc:	2b18      	cmp	r3, #24
 80043de:	d103      	bne.n	80043e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80043e0:	23fa      	movs	r3, #250	; 0xfa
 80043e2:	01db      	lsls	r3, r3, #7
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	e001      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043ec:	693b      	ldr	r3, [r7, #16]
}
 80043ee:	0018      	movs	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b006      	add	sp, #24
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	46c0      	nop			; (mov r8, r8)
 80043f8:	40021000 	.word	0x40021000
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	007a1200 	.word	0x007a1200

08004404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <HAL_RCC_GetHCLKFreq+0x10>)
 800440a:	681b      	ldr	r3, [r3, #0]
}
 800440c:	0018      	movs	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20000008 	.word	0x20000008

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b5b0      	push	{r4, r5, r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800441c:	f7ff fff2 	bl	8004404 <HAL_RCC_GetHCLKFreq>
 8004420:	0004      	movs	r4, r0
 8004422:	f7ff fb49 	bl	8003ab8 <LL_RCC_GetAPB1Prescaler>
 8004426:	0003      	movs	r3, r0
 8004428:	0b1a      	lsrs	r2, r3, #12
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800442c:	0092      	lsls	r2, r2, #2
 800442e:	58d3      	ldr	r3, [r2, r3]
 8004430:	221f      	movs	r2, #31
 8004432:	4013      	ands	r3, r2
 8004434:	40dc      	lsrs	r4, r3
 8004436:	0023      	movs	r3, r4
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	bdb0      	pop	{r4, r5, r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	08007300 	.word	0x08007300

08004444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800444c:	2313      	movs	r3, #19
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004454:	2312      	movs	r3, #18
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	029b      	lsls	r3, r3, #10
 8004464:	4013      	ands	r3, r2
 8004466:	d100      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004468:	e0a3      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446a:	2011      	movs	r0, #17
 800446c:	183b      	adds	r3, r7, r0
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b86      	ldr	r3, [pc, #536]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	055b      	lsls	r3, r3, #21
 800447a:	4013      	ands	r3, r2
 800447c:	d110      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	4b83      	ldr	r3, [pc, #524]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004482:	4b82      	ldr	r3, [pc, #520]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004484:	2180      	movs	r1, #128	; 0x80
 8004486:	0549      	lsls	r1, r1, #21
 8004488:	430a      	orrs	r2, r1
 800448a:	63da      	str	r2, [r3, #60]	; 0x3c
 800448c:	4b7f      	ldr	r3, [pc, #508]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800448e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	055b      	lsls	r3, r3, #21
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	183b      	adds	r3, r7, r0
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a0:	4b7b      	ldr	r3, [pc, #492]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b7a      	ldr	r3, [pc, #488]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80044a6:	2180      	movs	r1, #128	; 0x80
 80044a8:	0049      	lsls	r1, r1, #1
 80044aa:	430a      	orrs	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ae:	f7fe fe01 	bl	80030b4 <HAL_GetTick>
 80044b2:	0003      	movs	r3, r0
 80044b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044b6:	e00b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fe fdfc 	bl	80030b4 <HAL_GetTick>
 80044bc:	0002      	movs	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d904      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80044c6:	2313      	movs	r3, #19
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	2203      	movs	r2, #3
 80044cc:	701a      	strb	r2, [r3, #0]
        break;
 80044ce:	e005      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044d0:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	4013      	ands	r3, r2
 80044da:	d0ed      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80044dc:	2313      	movs	r3, #19
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d154      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e6:	4b69      	ldr	r3, [pc, #420]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044ea:	23c0      	movs	r3, #192	; 0xc0
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4013      	ands	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d019      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d014      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004502:	4b62      	ldr	r3, [pc, #392]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	4a63      	ldr	r2, [pc, #396]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004508:	4013      	ands	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800450c:	4b5f      	ldr	r3, [pc, #380]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800450e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004510:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	0249      	lsls	r1, r1, #9
 8004516:	430a      	orrs	r2, r1
 8004518:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800451a:	4b5c      	ldr	r3, [pc, #368]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800451c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800451e:	4b5b      	ldr	r3, [pc, #364]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004520:	495d      	ldr	r1, [pc, #372]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004522:	400a      	ands	r2, r1
 8004524:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004526:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2201      	movs	r2, #1
 8004530:	4013      	ands	r3, r2
 8004532:	d016      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fdbe 	bl	80030b4 <HAL_GetTick>
 8004538:	0003      	movs	r3, r0
 800453a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800453c:	e00c      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe fdb9 	bl	80030b4 <HAL_GetTick>
 8004542:	0002      	movs	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	4a54      	ldr	r2, [pc, #336]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d904      	bls.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800454e:	2313      	movs	r3, #19
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2203      	movs	r2, #3
 8004554:	701a      	strb	r2, [r3, #0]
            break;
 8004556:	e004      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	2202      	movs	r2, #2
 800455e:	4013      	ands	r3, r2
 8004560:	d0ed      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004562:	2313      	movs	r3, #19
 8004564:	18fb      	adds	r3, r7, r3
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10a      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456c:	4b47      	ldr	r3, [pc, #284]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	4a48      	ldr	r2, [pc, #288]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004572:	4013      	ands	r3, r2
 8004574:	0019      	movs	r1, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	4b44      	ldr	r3, [pc, #272]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800457c:	430a      	orrs	r2, r1
 800457e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004580:	e00c      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004582:	2312      	movs	r3, #18
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2213      	movs	r2, #19
 8004588:	18ba      	adds	r2, r7, r2
 800458a:	7812      	ldrb	r2, [r2, #0]
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	e005      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	2312      	movs	r3, #18
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	2213      	movs	r2, #19
 8004596:	18ba      	adds	r2, r7, r2
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800459c:	2311      	movs	r3, #17
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b39      	ldr	r3, [pc, #228]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045aa:	4b38      	ldr	r3, [pc, #224]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ac:	493c      	ldr	r1, [pc, #240]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	d009      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	2203      	movs	r2, #3
 80045c2:	4393      	bics	r3, r2
 80045c4:	0019      	movs	r1, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4b30      	ldr	r3, [pc, #192]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045cc:	430a      	orrs	r2, r1
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045da:	4b2c      	ldr	r3, [pc, #176]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	220c      	movs	r2, #12
 80045e0:	4393      	bics	r3, r2
 80045e2:	0019      	movs	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045ea:	430a      	orrs	r2, r1
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2220      	movs	r2, #32
 80045f4:	4013      	ands	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045f8:	4b24      	ldr	r3, [pc, #144]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	4013      	ands	r3, r2
 8004600:	0019      	movs	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	4b21      	ldr	r3, [pc, #132]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004608:	430a      	orrs	r2, r1
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	01db      	lsls	r3, r3, #7
 8004614:	4013      	ands	r3, r2
 8004616:	d015      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	0899      	lsrs	r1, r3, #2
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	4b19      	ldr	r3, [pc, #100]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004626:	430a      	orrs	r2, r1
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	05db      	lsls	r3, r3, #23
 8004632:	429a      	cmp	r2, r3
 8004634:	d106      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0249      	lsls	r1, r1, #9
 8004640:	430a      	orrs	r2, r1
 8004642:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4013      	ands	r3, r2
 800464e:	d016      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004656:	4013      	ands	r3, r2
 8004658:	0019      	movs	r1, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004660:	430a      	orrs	r2, r1
 8004662:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691a      	ldr	r2, [r3, #16]
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	429a      	cmp	r2, r3
 800466e:	d106      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	0249      	lsls	r1, r1, #9
 800467a:	430a      	orrs	r2, r1
 800467c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800467e:	2312      	movs	r3, #18
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	781b      	ldrb	r3, [r3, #0]
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b006      	add	sp, #24
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	40007000 	.word	0x40007000
 8004694:	fffffcff 	.word	0xfffffcff
 8004698:	fffeffff 	.word	0xfffeffff
 800469c:	00001388 	.word	0x00001388
 80046a0:	efffffff 	.word	0xefffffff
 80046a4:	ffffcfff 	.word	0xffffcfff
 80046a8:	ffff3fff 	.word	0xffff3fff

080046ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e04a      	b.n	8004754 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	223d      	movs	r2, #61	; 0x3d
 80046c2:	5c9b      	ldrb	r3, [r3, r2]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	223c      	movs	r2, #60	; 0x3c
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fe f9d9 	bl	8002a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	223d      	movs	r2, #61	; 0x3d
 80046de:	2102      	movs	r1, #2
 80046e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	0019      	movs	r1, r3
 80046ec:	0010      	movs	r0, r2
 80046ee:	f000 fefb 	bl	80054e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2248      	movs	r2, #72	; 0x48
 80046f6:	2101      	movs	r1, #1
 80046f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	223e      	movs	r2, #62	; 0x3e
 80046fe:	2101      	movs	r1, #1
 8004700:	5499      	strb	r1, [r3, r2]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	223f      	movs	r2, #63	; 0x3f
 8004706:	2101      	movs	r1, #1
 8004708:	5499      	strb	r1, [r3, r2]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2240      	movs	r2, #64	; 0x40
 800470e:	2101      	movs	r1, #1
 8004710:	5499      	strb	r1, [r3, r2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2241      	movs	r2, #65	; 0x41
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2242      	movs	r2, #66	; 0x42
 800471e:	2101      	movs	r1, #1
 8004720:	5499      	strb	r1, [r3, r2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2243      	movs	r2, #67	; 0x43
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2244      	movs	r2, #68	; 0x44
 800472e:	2101      	movs	r1, #1
 8004730:	5499      	strb	r1, [r3, r2]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2245      	movs	r2, #69	; 0x45
 8004736:	2101      	movs	r1, #1
 8004738:	5499      	strb	r1, [r3, r2]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2246      	movs	r2, #70	; 0x46
 800473e:	2101      	movs	r1, #1
 8004740:	5499      	strb	r1, [r3, r2]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2247      	movs	r2, #71	; 0x47
 8004746:	2101      	movs	r1, #1
 8004748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	223d      	movs	r2, #61	; 0x3d
 800474e:	2101      	movs	r1, #1
 8004750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	0018      	movs	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e04a      	b.n	8004804 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	223d      	movs	r2, #61	; 0x3d
 8004772:	5c9b      	ldrb	r3, [r3, r2]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d107      	bne.n	800478a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	223c      	movs	r2, #60	; 0x3c
 800477e:	2100      	movs	r1, #0
 8004780:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f841 	bl	800480c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	223d      	movs	r2, #61	; 0x3d
 800478e:	2102      	movs	r1, #2
 8004790:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	0019      	movs	r1, r3
 800479c:	0010      	movs	r0, r2
 800479e:	f000 fea3 	bl	80054e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2248      	movs	r2, #72	; 0x48
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	223e      	movs	r2, #62	; 0x3e
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	223f      	movs	r2, #63	; 0x3f
 80047b6:	2101      	movs	r1, #1
 80047b8:	5499      	strb	r1, [r3, r2]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2241      	movs	r2, #65	; 0x41
 80047c6:	2101      	movs	r1, #1
 80047c8:	5499      	strb	r1, [r3, r2]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2242      	movs	r2, #66	; 0x42
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2243      	movs	r2, #67	; 0x43
 80047d6:	2101      	movs	r1, #1
 80047d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2244      	movs	r2, #68	; 0x44
 80047de:	2101      	movs	r1, #1
 80047e0:	5499      	strb	r1, [r3, r2]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2245      	movs	r2, #69	; 0x45
 80047e6:	2101      	movs	r1, #1
 80047e8:	5499      	strb	r1, [r3, r2]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2246      	movs	r2, #70	; 0x46
 80047ee:	2101      	movs	r1, #1
 80047f0:	5499      	strb	r1, [r3, r2]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2247      	movs	r2, #71	; 0x47
 80047f6:	2101      	movs	r1, #1
 80047f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	223d      	movs	r2, #61	; 0x3d
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b002      	add	sp, #8
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b002      	add	sp, #8
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d108      	bne.n	800483e <HAL_TIM_PWM_Start+0x22>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	223e      	movs	r2, #62	; 0x3e
 8004830:	5c9b      	ldrb	r3, [r3, r2]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	1e5a      	subs	r2, r3, #1
 8004838:	4193      	sbcs	r3, r2
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e037      	b.n	80048ae <HAL_TIM_PWM_Start+0x92>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b04      	cmp	r3, #4
 8004842:	d108      	bne.n	8004856 <HAL_TIM_PWM_Start+0x3a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223f      	movs	r2, #63	; 0x3f
 8004848:	5c9b      	ldrb	r3, [r3, r2]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	1e5a      	subs	r2, r3, #1
 8004850:	4193      	sbcs	r3, r2
 8004852:	b2db      	uxtb	r3, r3
 8004854:	e02b      	b.n	80048ae <HAL_TIM_PWM_Start+0x92>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d108      	bne.n	800486e <HAL_TIM_PWM_Start+0x52>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2240      	movs	r2, #64	; 0x40
 8004860:	5c9b      	ldrb	r3, [r3, r2]
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	1e5a      	subs	r2, r3, #1
 8004868:	4193      	sbcs	r3, r2
 800486a:	b2db      	uxtb	r3, r3
 800486c:	e01f      	b.n	80048ae <HAL_TIM_PWM_Start+0x92>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d108      	bne.n	8004886 <HAL_TIM_PWM_Start+0x6a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2241      	movs	r2, #65	; 0x41
 8004878:	5c9b      	ldrb	r3, [r3, r2]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	1e5a      	subs	r2, r3, #1
 8004880:	4193      	sbcs	r3, r2
 8004882:	b2db      	uxtb	r3, r3
 8004884:	e013      	b.n	80048ae <HAL_TIM_PWM_Start+0x92>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b10      	cmp	r3, #16
 800488a:	d108      	bne.n	800489e <HAL_TIM_PWM_Start+0x82>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2242      	movs	r2, #66	; 0x42
 8004890:	5c9b      	ldrb	r3, [r3, r2]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	1e5a      	subs	r2, r3, #1
 8004898:	4193      	sbcs	r3, r2
 800489a:	b2db      	uxtb	r3, r3
 800489c:	e007      	b.n	80048ae <HAL_TIM_PWM_Start+0x92>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2243      	movs	r2, #67	; 0x43
 80048a2:	5c9b      	ldrb	r3, [r3, r2]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	1e5a      	subs	r2, r3, #1
 80048aa:	4193      	sbcs	r3, r2
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e085      	b.n	80049c2 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0xaa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	223e      	movs	r2, #62	; 0x3e
 80048c0:	2102      	movs	r1, #2
 80048c2:	5499      	strb	r1, [r3, r2]
 80048c4:	e023      	b.n	800490e <HAL_TIM_PWM_Start+0xf2>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xba>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	223f      	movs	r2, #63	; 0x3f
 80048d0:	2102      	movs	r1, #2
 80048d2:	5499      	strb	r1, [r3, r2]
 80048d4:	e01b      	b.n	800490e <HAL_TIM_PWM_Start+0xf2>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_PWM_Start+0xca>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2240      	movs	r2, #64	; 0x40
 80048e0:	2102      	movs	r1, #2
 80048e2:	5499      	strb	r1, [r3, r2]
 80048e4:	e013      	b.n	800490e <HAL_TIM_PWM_Start+0xf2>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0xda>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2241      	movs	r2, #65	; 0x41
 80048f0:	2102      	movs	r1, #2
 80048f2:	5499      	strb	r1, [r3, r2]
 80048f4:	e00b      	b.n	800490e <HAL_TIM_PWM_Start+0xf2>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xea>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2242      	movs	r2, #66	; 0x42
 8004900:	2102      	movs	r1, #2
 8004902:	5499      	strb	r1, [r3, r2]
 8004904:	e003      	b.n	800490e <HAL_TIM_PWM_Start+0xf2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2243      	movs	r2, #67	; 0x43
 800490a:	2102      	movs	r1, #2
 800490c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	0018      	movs	r0, r3
 8004918:	f001 fadc 	bl	8005ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <HAL_TIM_PWM_Start+0x1b0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_TIM_PWM_Start+0x128>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a29      	ldr	r2, [pc, #164]	; (80049d0 <HAL_TIM_PWM_Start+0x1b4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_TIM_PWM_Start+0x128>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <HAL_TIM_PWM_Start+0x1b8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_TIM_PWM_Start+0x128>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <HAL_TIM_PWM_Start+0x1bc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <HAL_TIM_PWM_Start+0x12c>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_TIM_PWM_Start+0x12e>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2180      	movs	r1, #128	; 0x80
 800495a:	0209      	lsls	r1, r1, #8
 800495c:	430a      	orrs	r2, r1
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <HAL_TIM_PWM_Start+0x1b0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_TIM_PWM_Start+0x162>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_TIM_PWM_Start+0x1c0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIM_PWM_Start+0x162>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a15      	ldr	r2, [pc, #84]	; (80049d0 <HAL_TIM_PWM_Start+0x1b4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d116      	bne.n	80049ac <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_PWM_Start+0x1c4>)
 8004986:	4013      	ands	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b06      	cmp	r3, #6
 800498e:	d016      	beq.n	80049be <HAL_TIM_PWM_Start+0x1a2>
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	025b      	lsls	r3, r3, #9
 8004996:	429a      	cmp	r2, r3
 8004998:	d011      	beq.n	80049be <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	e008      	b.n	80049be <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	430a      	orrs	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e000      	b.n	80049c0 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049be:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b004      	add	sp, #16
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	40012c00 	.word	0x40012c00
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800
 80049dc:	40000400 	.word	0x40000400
 80049e0:	00010007 	.word	0x00010007

080049e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e04a      	b.n	8004a8c <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	223d      	movs	r2, #61	; 0x3d
 80049fa:	5c9b      	ldrb	r3, [r3, r2]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223c      	movs	r2, #60	; 0x3c
 8004a06:	2100      	movs	r1, #0
 8004a08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7fd ffaf 	bl	8002970 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	223d      	movs	r2, #61	; 0x3d
 8004a16:	2102      	movs	r1, #2
 8004a18:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3304      	adds	r3, #4
 8004a22:	0019      	movs	r1, r3
 8004a24:	0010      	movs	r0, r2
 8004a26:	f000 fd5f 	bl	80054e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2248      	movs	r2, #72	; 0x48
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	223e      	movs	r2, #62	; 0x3e
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223f      	movs	r2, #63	; 0x3f
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2240      	movs	r2, #64	; 0x40
 8004a46:	2101      	movs	r1, #1
 8004a48:	5499      	strb	r1, [r3, r2]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2241      	movs	r2, #65	; 0x41
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2242      	movs	r2, #66	; 0x42
 8004a56:	2101      	movs	r1, #1
 8004a58:	5499      	strb	r1, [r3, r2]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2243      	movs	r2, #67	; 0x43
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2244      	movs	r2, #68	; 0x44
 8004a66:	2101      	movs	r1, #1
 8004a68:	5499      	strb	r1, [r3, r2]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2245      	movs	r2, #69	; 0x45
 8004a6e:	2101      	movs	r1, #1
 8004a70:	5499      	strb	r1, [r3, r2]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2246      	movs	r2, #70	; 0x46
 8004a76:	2101      	movs	r1, #1
 8004a78:	5499      	strb	r1, [r3, r2]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2247      	movs	r2, #71	; 0x47
 8004a7e:	2101      	movs	r1, #1
 8004a80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	223d      	movs	r2, #61	; 0x3d
 8004a86:	2101      	movs	r1, #1
 8004a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_IC_Start_IT+0x22>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	223e      	movs	r2, #62	; 0x3e
 8004ab0:	5c9b      	ldrb	r3, [r3, r2]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e023      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x6a>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d104      	bne.n	8004ac6 <HAL_TIM_IC_Start_IT+0x32>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	223f      	movs	r2, #63	; 0x3f
 8004ac0:	5c9b      	ldrb	r3, [r3, r2]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e01b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x6a>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x42>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	5c9b      	ldrb	r3, [r3, r2]
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x6a>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b0c      	cmp	r3, #12
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0x52>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2241      	movs	r2, #65	; 0x41
 8004ae0:	5c9b      	ldrb	r3, [r3, r2]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x6a>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x62>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2242      	movs	r2, #66	; 0x42
 8004af0:	5c9b      	ldrb	r3, [r3, r2]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e003      	b.n	8004afe <HAL_TIM_IC_Start_IT+0x6a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2243      	movs	r2, #67	; 0x43
 8004afa:	5c9b      	ldrb	r3, [r3, r2]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	220e      	movs	r2, #14
 8004b00:	18ba      	adds	r2, r7, r2
 8004b02:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_TIM_IC_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2244      	movs	r2, #68	; 0x44
 8004b0e:	5c9b      	ldrb	r3, [r3, r2]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e013      	b.n	8004b3c <HAL_TIM_IC_Start_IT+0xa8>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d104      	bne.n	8004b24 <HAL_TIM_IC_Start_IT+0x90>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2245      	movs	r2, #69	; 0x45
 8004b1e:	5c9b      	ldrb	r3, [r3, r2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e00b      	b.n	8004b3c <HAL_TIM_IC_Start_IT+0xa8>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d104      	bne.n	8004b34 <HAL_TIM_IC_Start_IT+0xa0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2246      	movs	r2, #70	; 0x46
 8004b2e:	5c9b      	ldrb	r3, [r3, r2]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e003      	b.n	8004b3c <HAL_TIM_IC_Start_IT+0xa8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2247      	movs	r2, #71	; 0x47
 8004b38:	5c9b      	ldrb	r3, [r3, r2]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	210d      	movs	r1, #13
 8004b3e:	187a      	adds	r2, r7, r1
 8004b40:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b42:	230e      	movs	r3, #14
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d103      	bne.n	8004b54 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b4c:	187b      	adds	r3, r7, r1
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0c2      	b.n	8004cde <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_TIM_IC_Start_IT+0xd4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	223e      	movs	r2, #62	; 0x3e
 8004b62:	2102      	movs	r1, #2
 8004b64:	5499      	strb	r1, [r3, r2]
 8004b66:	e023      	b.n	8004bb0 <HAL_TIM_IC_Start_IT+0x11c>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d104      	bne.n	8004b78 <HAL_TIM_IC_Start_IT+0xe4>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223f      	movs	r2, #63	; 0x3f
 8004b72:	2102      	movs	r1, #2
 8004b74:	5499      	strb	r1, [r3, r2]
 8004b76:	e01b      	b.n	8004bb0 <HAL_TIM_IC_Start_IT+0x11c>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d104      	bne.n	8004b88 <HAL_TIM_IC_Start_IT+0xf4>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2240      	movs	r2, #64	; 0x40
 8004b82:	2102      	movs	r1, #2
 8004b84:	5499      	strb	r1, [r3, r2]
 8004b86:	e013      	b.n	8004bb0 <HAL_TIM_IC_Start_IT+0x11c>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d104      	bne.n	8004b98 <HAL_TIM_IC_Start_IT+0x104>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2241      	movs	r2, #65	; 0x41
 8004b92:	2102      	movs	r1, #2
 8004b94:	5499      	strb	r1, [r3, r2]
 8004b96:	e00b      	b.n	8004bb0 <HAL_TIM_IC_Start_IT+0x11c>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d104      	bne.n	8004ba8 <HAL_TIM_IC_Start_IT+0x114>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2242      	movs	r2, #66	; 0x42
 8004ba2:	2102      	movs	r1, #2
 8004ba4:	5499      	strb	r1, [r3, r2]
 8004ba6:	e003      	b.n	8004bb0 <HAL_TIM_IC_Start_IT+0x11c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2243      	movs	r2, #67	; 0x43
 8004bac:	2102      	movs	r1, #2
 8004bae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <HAL_TIM_IC_Start_IT+0x12c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2244      	movs	r2, #68	; 0x44
 8004bba:	2102      	movs	r1, #2
 8004bbc:	5499      	strb	r1, [r3, r2]
 8004bbe:	e013      	b.n	8004be8 <HAL_TIM_IC_Start_IT+0x154>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d104      	bne.n	8004bd0 <HAL_TIM_IC_Start_IT+0x13c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2245      	movs	r2, #69	; 0x45
 8004bca:	2102      	movs	r1, #2
 8004bcc:	5499      	strb	r1, [r3, r2]
 8004bce:	e00b      	b.n	8004be8 <HAL_TIM_IC_Start_IT+0x154>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d104      	bne.n	8004be0 <HAL_TIM_IC_Start_IT+0x14c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2246      	movs	r2, #70	; 0x46
 8004bda:	2102      	movs	r1, #2
 8004bdc:	5499      	strb	r1, [r3, r2]
 8004bde:	e003      	b.n	8004be8 <HAL_TIM_IC_Start_IT+0x154>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2247      	movs	r2, #71	; 0x47
 8004be4:	2102      	movs	r1, #2
 8004be6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d02a      	beq.n	8004c44 <HAL_TIM_IC_Start_IT+0x1b0>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d830      	bhi.n	8004c56 <HAL_TIM_IC_Start_IT+0x1c2>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d01b      	beq.n	8004c32 <HAL_TIM_IC_Start_IT+0x19e>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d82a      	bhi.n	8004c56 <HAL_TIM_IC_Start_IT+0x1c2>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IC_Start_IT+0x17a>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_IC_Start_IT+0x18c>
 8004c0c:	e023      	b.n	8004c56 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2102      	movs	r1, #2
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	60da      	str	r2, [r3, #12]
      break;
 8004c1e:	e01f      	b.n	8004c60 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2104      	movs	r1, #4
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	60da      	str	r2, [r3, #12]
      break;
 8004c30:	e016      	b.n	8004c60 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2108      	movs	r1, #8
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	60da      	str	r2, [r3, #12]
      break;
 8004c42:	e00d      	b.n	8004c60 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2110      	movs	r1, #16
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]
      break;
 8004c54:	e004      	b.n	8004c60 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8004c56:	230f      	movs	r3, #15
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
      break;
 8004c5e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d136      	bne.n	8004cd8 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	2201      	movs	r2, #1
 8004c72:	0018      	movs	r0, r3
 8004c74:	f001 f92e 	bl	8005ed4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_TIM_IC_Start_IT+0x254>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_IC_Start_IT+0x202>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_TIM_IC_Start_IT+0x258>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_IC_Start_IT+0x202>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_TIM_IC_Start_IT+0x25c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d116      	bne.n	8004cc4 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <HAL_TIM_IC_Start_IT+0x260>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d016      	beq.n	8004cd6 <HAL_TIM_IC_Start_IT+0x242>
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	025b      	lsls	r3, r3, #9
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d011      	beq.n	8004cd6 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc2:	e008      	b.n	8004cd6 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2101      	movs	r1, #1
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
}
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	40012c00 	.word	0x40012c00
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	00010007 	.word	0x00010007

08004cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2202      	movs	r2, #2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d124      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2202      	movs	r2, #2
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d11d      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2203      	movs	r2, #3
 8004d22:	4252      	negs	r2, r2
 8004d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2203      	movs	r2, #3
 8004d34:	4013      	ands	r3, r2
 8004d36:	d004      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f7fc fe46 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004d40:	e007      	b.n	8004d52 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f000 fbb7 	bl	80054b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 fbbb 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d125      	bne.n	8004db2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d11e      	bne.n	8004db2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2205      	movs	r2, #5
 8004d7a:	4252      	negs	r2, r2
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	23c0      	movs	r3, #192	; 0xc0
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	0018      	movs	r0, r3
 8004d96:	f7fc fe19 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004d9a:	e007      	b.n	8004dac <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 fb8a 	bl	80054b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0018      	movs	r0, r3
 8004da8:	f000 fb8e 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2208      	movs	r2, #8
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d124      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d11d      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2209      	movs	r2, #9
 8004dd4:	4252      	negs	r2, r2
 8004dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2203      	movs	r2, #3
 8004de6:	4013      	ands	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7fc fded 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004df2:	e007      	b.n	8004e04 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 fb5e 	bl	80054b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f000 fb62 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	2210      	movs	r2, #16
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b10      	cmp	r3, #16
 8004e16:	d125      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2210      	movs	r2, #16
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d11e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2211      	movs	r2, #17
 8004e2c:	4252      	negs	r2, r2
 8004e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2208      	movs	r2, #8
 8004e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	23c0      	movs	r3, #192	; 0xc0
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4013      	ands	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	0018      	movs	r0, r3
 8004e48:	f7fc fdc0 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e007      	b.n	8004e5e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 fb31 	bl	80054b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f000 fb35 	bl	80054c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d10f      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2202      	movs	r2, #2
 8004e86:	4252      	negs	r2, r2
 8004e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7fd f805 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	2280      	movs	r2, #128	; 0x80
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2280      	movs	r2, #128	; 0x80
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b80      	cmp	r3, #128	; 0x80
 8004eac:	d108      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2281      	movs	r2, #129	; 0x81
 8004eb4:	4252      	negs	r2, r2
 8004eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f001 f89e 	bl	8005ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	401a      	ands	r2, r3
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d10e      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2280      	movs	r2, #128	; 0x80
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d107      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <HAL_TIM_IRQHandler+0x260>)
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0018      	movs	r0, r3
 8004eee:	f001 f88d 	bl	800600c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	2240      	movs	r2, #64	; 0x40
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d10f      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d108      	bne.n	8004f20 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2241      	movs	r2, #65	; 0x41
 8004f14:	4252      	negs	r2, r2
 8004f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 fadc 	bl	80054d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2220      	movs	r2, #32
 8004f28:	4013      	ands	r3, r2
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d10f      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d108      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2221      	movs	r2, #33	; 0x21
 8004f42:	4252      	negs	r2, r2
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f001 f84f 	bl	8005fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	fffffeff 	.word	0xfffffeff

08004f5c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2317      	movs	r3, #23
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	223c      	movs	r2, #60	; 0x3c
 8004f74:	5c9b      	ldrb	r3, [r3, r2]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_IC_ConfigChannel+0x22>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e08c      	b.n	8005098 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	223c      	movs	r2, #60	; 0x3c
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d11b      	bne.n	8004fc4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	6819      	ldr	r1, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f000 fdde 	bl	8005b5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	210c      	movs	r1, #12
 8004fac:	438a      	bics	r2, r1
 8004fae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	619a      	str	r2, [r3, #24]
 8004fc2:	e062      	b.n	800508a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d11c      	bne.n	8005004 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f000 fe45 	bl	8005c68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	492d      	ldr	r1, [pc, #180]	; (80050a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004fea:	400a      	ands	r2, r1
 8004fec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6999      	ldr	r1, [r3, #24]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	021a      	lsls	r2, r3, #8
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	619a      	str	r2, [r3, #24]
 8005002:	e042      	b.n	800508a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b08      	cmp	r3, #8
 8005008:	d11b      	bne.n	8005042 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f000 fe99 	bl	8005d50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	210c      	movs	r1, #12
 800502a:	438a      	bics	r2, r1
 800502c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
 8005040:	e023      	b.n	800508a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b0c      	cmp	r3, #12
 8005046:	d11c      	bne.n	8005082 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6819      	ldr	r1, [r3, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f000 feba 	bl	8005dd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	490e      	ldr	r1, [pc, #56]	; (80050a0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005068:	400a      	ands	r2, r1
 800506a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69d9      	ldr	r1, [r3, #28]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021a      	lsls	r2, r3, #8
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	61da      	str	r2, [r3, #28]
 8005080:	e003      	b.n	800508a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005082:	2317      	movs	r3, #23
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	223c      	movs	r2, #60	; 0x3c
 800508e:	2100      	movs	r1, #0
 8005090:	5499      	strb	r1, [r3, r2]

  return status;
 8005092:	2317      	movs	r3, #23
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	781b      	ldrb	r3, [r3, #0]
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b006      	add	sp, #24
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	fffff3ff 	.word	0xfffff3ff

080050a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2317      	movs	r3, #23
 80050b2:	18fb      	adds	r3, r7, r3
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	223c      	movs	r2, #60	; 0x3c
 80050bc:	5c9b      	ldrb	r3, [r3, r2]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e0e5      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	223c      	movs	r2, #60	; 0x3c
 80050ca:	2101      	movs	r1, #1
 80050cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b14      	cmp	r3, #20
 80050d2:	d900      	bls.n	80050d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80050d4:	e0d1      	b.n	800527a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	009a      	lsls	r2, r3, #2
 80050da:	4b70      	ldr	r3, [pc, #448]	; (800529c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80050dc:	18d3      	adds	r3, r2, r3
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	0011      	movs	r1, r2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 fa72 	bl	80055d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2108      	movs	r1, #8
 80050fc:	430a      	orrs	r2, r1
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2104      	movs	r1, #4
 800510c:	438a      	bics	r2, r1
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
      break;
 8005122:	e0af      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	0011      	movs	r1, r2
 800512c:	0018      	movs	r0, r3
 800512e:	f000 fadb 	bl	80056e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2180      	movs	r1, #128	; 0x80
 800513e:	0109      	lsls	r1, r1, #4
 8005140:	430a      	orrs	r2, r1
 8005142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699a      	ldr	r2, [r3, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4954      	ldr	r1, [pc, #336]	; (80052a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005150:	400a      	ands	r2, r1
 8005152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	619a      	str	r2, [r3, #24]
      break;
 8005168:	e08c      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	0011      	movs	r1, r2
 8005172:	0018      	movs	r0, r3
 8005174:	f000 fb3c 	bl	80057f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2108      	movs	r1, #8
 8005184:	430a      	orrs	r2, r1
 8005186:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2104      	movs	r1, #4
 8005194:	438a      	bics	r2, r1
 8005196:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69d9      	ldr	r1, [r3, #28]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	61da      	str	r2, [r3, #28]
      break;
 80051aa:	e06b      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	0011      	movs	r1, r2
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 fba3 	bl	8005900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69da      	ldr	r2, [r3, #28]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2180      	movs	r1, #128	; 0x80
 80051c6:	0109      	lsls	r1, r1, #4
 80051c8:	430a      	orrs	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4932      	ldr	r1, [pc, #200]	; (80052a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80051d8:	400a      	ands	r2, r1
 80051da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69d9      	ldr	r1, [r3, #28]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	61da      	str	r2, [r3, #28]
      break;
 80051f0:	e048      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	0011      	movs	r1, r2
 80051fa:	0018      	movs	r0, r3
 80051fc:	f000 fbea 	bl	80059d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2108      	movs	r1, #8
 800520c:	430a      	orrs	r2, r1
 800520e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2104      	movs	r1, #4
 800521c:	438a      	bics	r2, r1
 800521e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005232:	e027      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fc29 	bl	8005a94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2180      	movs	r1, #128	; 0x80
 800524e:	0109      	lsls	r1, r1, #4
 8005250:	430a      	orrs	r2, r1
 8005252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4910      	ldr	r1, [pc, #64]	; (80052a0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005260:	400a      	ands	r2, r1
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	021a      	lsls	r2, r3, #8
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005278:	e004      	b.n	8005284 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800527a:	2317      	movs	r3, #23
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
      break;
 8005282:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	223c      	movs	r2, #60	; 0x3c
 8005288:	2100      	movs	r1, #0
 800528a:	5499      	strb	r1, [r3, r2]

  return status;
 800528c:	2317      	movs	r3, #23
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	781b      	ldrb	r3, [r3, #0]
}
 8005292:	0018      	movs	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	b006      	add	sp, #24
 8005298:	bd80      	pop	{r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	08007320 	.word	0x08007320
 80052a0:	fffffbff 	.word	0xfffffbff

080052a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	230f      	movs	r3, #15
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	223c      	movs	r2, #60	; 0x3c
 80052ba:	5c9b      	ldrb	r3, [r3, r2]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_ConfigClockSource+0x20>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0bc      	b.n	800543e <HAL_TIM_ConfigClockSource+0x19a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	223c      	movs	r2, #60	; 0x3c
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	223d      	movs	r2, #61	; 0x3d
 80052d0:	2102      	movs	r1, #2
 80052d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a5a      	ldr	r2, [pc, #360]	; (8005448 <HAL_TIM_ConfigClockSource+0x1a4>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	4a59      	ldr	r2, [pc, #356]	; (800544c <HAL_TIM_ConfigClockSource+0x1a8>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2280      	movs	r2, #128	; 0x80
 80052fa:	0192      	lsls	r2, r2, #6
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d040      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xde>
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	0192      	lsls	r2, r2, #6
 8005304:	4293      	cmp	r3, r2
 8005306:	d900      	bls.n	800530a <HAL_TIM_ConfigClockSource+0x66>
 8005308:	e088      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 800530a:	2280      	movs	r2, #128	; 0x80
 800530c:	0152      	lsls	r2, r2, #5
 800530e:	4293      	cmp	r3, r2
 8005310:	d100      	bne.n	8005314 <HAL_TIM_ConfigClockSource+0x70>
 8005312:	e088      	b.n	8005426 <HAL_TIM_ConfigClockSource+0x182>
 8005314:	2280      	movs	r2, #128	; 0x80
 8005316:	0152      	lsls	r2, r2, #5
 8005318:	4293      	cmp	r3, r2
 800531a:	d900      	bls.n	800531e <HAL_TIM_ConfigClockSource+0x7a>
 800531c:	e07e      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 800531e:	2b70      	cmp	r3, #112	; 0x70
 8005320:	d018      	beq.n	8005354 <HAL_TIM_ConfigClockSource+0xb0>
 8005322:	d900      	bls.n	8005326 <HAL_TIM_ConfigClockSource+0x82>
 8005324:	e07a      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 8005326:	2b60      	cmp	r3, #96	; 0x60
 8005328:	d04f      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x126>
 800532a:	d900      	bls.n	800532e <HAL_TIM_ConfigClockSource+0x8a>
 800532c:	e076      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 800532e:	2b50      	cmp	r3, #80	; 0x50
 8005330:	d03b      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x106>
 8005332:	d900      	bls.n	8005336 <HAL_TIM_ConfigClockSource+0x92>
 8005334:	e072      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d057      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x146>
 800533a:	d900      	bls.n	800533e <HAL_TIM_ConfigClockSource+0x9a>
 800533c:	e06e      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d063      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x166>
 8005342:	d86b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d060      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x166>
 8005348:	d868      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x178>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d05d      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x166>
 800534e:	2b10      	cmp	r3, #16
 8005350:	d05b      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x166>
 8005352:	e063      	b.n	800541c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6899      	ldr	r1, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f000 fd96 	bl	8005e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2277      	movs	r2, #119	; 0x77
 8005374:	4313      	orrs	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	609a      	str	r2, [r3, #8]
      break;
 8005380:	e052      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f000 fd7f 	bl	8005e94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	01c9      	lsls	r1, r1, #7
 80053a4:	430a      	orrs	r2, r1
 80053a6:	609a      	str	r2, [r3, #8]
      break;
 80053a8:	e03e      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	001a      	movs	r2, r3
 80053b8:	f000 fc28 	bl	8005c0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2150      	movs	r1, #80	; 0x50
 80053c2:	0018      	movs	r0, r3
 80053c4:	f000 fd4a 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 80053c8:	e02e      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	001a      	movs	r2, r3
 80053d8:	f000 fc88 	bl	8005cec <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2160      	movs	r1, #96	; 0x60
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 fd3a 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 80053e8:	e01e      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	001a      	movs	r2, r3
 80053f8:	f000 fc08 	bl	8005c0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2140      	movs	r1, #64	; 0x40
 8005402:	0018      	movs	r0, r3
 8005404:	f000 fd2a 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 8005408:	e00e      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	0019      	movs	r1, r3
 8005414:	0010      	movs	r0, r2
 8005416:	f000 fd21 	bl	8005e5c <TIM_ITRx_SetConfig>
      break;
 800541a:	e005      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800541c:	230f      	movs	r3, #15
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2201      	movs	r2, #1
 8005422:	701a      	strb	r2, [r3, #0]
      break;
 8005424:	e000      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005426:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	223d      	movs	r2, #61	; 0x3d
 800542c:	2101      	movs	r1, #1
 800542e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	223c      	movs	r2, #60	; 0x3c
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

  return status;
 8005438:	230f      	movs	r3, #15
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	781b      	ldrb	r3, [r3, #0]
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b004      	add	sp, #16
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	ffceff88 	.word	0xffceff88
 800544c:	ffff00ff 	.word	0xffff00ff

08005450 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b0c      	cmp	r3, #12
 8005462:	d01e      	beq.n	80054a2 <HAL_TIM_ReadCapturedValue+0x52>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b0c      	cmp	r3, #12
 8005468:	d820      	bhi.n	80054ac <HAL_TIM_ReadCapturedValue+0x5c>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b08      	cmp	r3, #8
 800546e:	d013      	beq.n	8005498 <HAL_TIM_ReadCapturedValue+0x48>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2b08      	cmp	r3, #8
 8005474:	d81a      	bhi.n	80054ac <HAL_TIM_ReadCapturedValue+0x5c>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_TIM_ReadCapturedValue+0x34>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b04      	cmp	r3, #4
 8005480:	d005      	beq.n	800548e <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005482:	e013      	b.n	80054ac <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	60fb      	str	r3, [r7, #12]
      break;
 800548c:	e00f      	b.n	80054ae <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	60fb      	str	r3, [r7, #12]
      break;
 8005496:	e00a      	b.n	80054ae <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	60fb      	str	r3, [r7, #12]
      break;
 80054a0:	e005      	b.n	80054ae <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	60fb      	str	r3, [r7, #12]
      break;
 80054aa:	e000      	b.n	80054ae <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80054ac:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b004      	add	sp, #16
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c0:	46c0      	nop			; (mov r8, r8)
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b002      	add	sp, #8
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e0:	46c0      	nop			; (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2f      	ldr	r2, [pc, #188]	; (80055b8 <TIM_Base_SetConfig+0xd0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x20>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a2e      	ldr	r2, [pc, #184]	; (80055bc <TIM_Base_SetConfig+0xd4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2270      	movs	r2, #112	; 0x70
 800550c:	4393      	bics	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a26      	ldr	r2, [pc, #152]	; (80055b8 <TIM_Base_SetConfig+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d013      	beq.n	800554a <TIM_Base_SetConfig+0x62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a25      	ldr	r2, [pc, #148]	; (80055bc <TIM_Base_SetConfig+0xd4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_Base_SetConfig+0x62>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a24      	ldr	r2, [pc, #144]	; (80055c0 <TIM_Base_SetConfig+0xd8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_Base_SetConfig+0x62>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <TIM_Base_SetConfig+0xdc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_Base_SetConfig+0x62>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a22      	ldr	r2, [pc, #136]	; (80055c8 <TIM_Base_SetConfig+0xe0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_Base_SetConfig+0x62>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a21      	ldr	r2, [pc, #132]	; (80055cc <TIM_Base_SetConfig+0xe4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d108      	bne.n	800555c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <TIM_Base_SetConfig+0xe8>)
 800554e:	4013      	ands	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	4393      	bics	r3, r2
 8005562:	001a      	movs	r2, r3
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <TIM_Base_SetConfig+0xd0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00b      	beq.n	80055a2 <TIM_Base_SetConfig+0xba>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <TIM_Base_SetConfig+0xdc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <TIM_Base_SetConfig+0xba>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <TIM_Base_SetConfig+0xe0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d003      	beq.n	80055a2 <TIM_Base_SetConfig+0xba>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <TIM_Base_SetConfig+0xe4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d103      	bne.n	80055aa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	615a      	str	r2, [r3, #20]
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b004      	add	sp, #16
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40002000 	.word	0x40002000
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	fffffcff 	.word	0xfffffcff

080055d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4393      	bics	r3, r2
 80055e6:	001a      	movs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4a32      	ldr	r2, [pc, #200]	; (80056cc <TIM_OC1_SetConfig+0xf8>)
 8005602:	4013      	ands	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2203      	movs	r2, #3
 800560a:	4393      	bics	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2202      	movs	r2, #2
 800561c:	4393      	bics	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a28      	ldr	r2, [pc, #160]	; (80056d0 <TIM_OC1_SetConfig+0xfc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00b      	beq.n	800564a <TIM_OC1_SetConfig+0x76>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <TIM_OC1_SetConfig+0x100>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d007      	beq.n	800564a <TIM_OC1_SetConfig+0x76>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a26      	ldr	r2, [pc, #152]	; (80056d8 <TIM_OC1_SetConfig+0x104>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC1_SetConfig+0x76>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a25      	ldr	r2, [pc, #148]	; (80056dc <TIM_OC1_SetConfig+0x108>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10c      	bne.n	8005664 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2208      	movs	r2, #8
 800564e:	4393      	bics	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	2204      	movs	r2, #4
 8005660:	4393      	bics	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <TIM_OC1_SetConfig+0xfc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_OC1_SetConfig+0xb0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <TIM_OC1_SetConfig+0x100>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_OC1_SetConfig+0xb0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <TIM_OC1_SetConfig+0x104>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC1_SetConfig+0xb0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <TIM_OC1_SetConfig+0x108>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d111      	bne.n	80056a8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <TIM_OC1_SetConfig+0x10c>)
 8005688:	4013      	ands	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4a15      	ldr	r2, [pc, #84]	; (80056e4 <TIM_OC1_SetConfig+0x110>)
 8005690:	4013      	ands	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	46c0      	nop			; (mov r8, r8)
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b006      	add	sp, #24
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	fffeff8f 	.word	0xfffeff8f
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	fffffeff 	.word	0xfffffeff
 80056e4:	fffffdff 	.word	0xfffffdff

080056e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	2210      	movs	r2, #16
 80056f8:	4393      	bics	r3, r2
 80056fa:	001a      	movs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <TIM_OC2_SetConfig+0xe8>)
 8005716:	4013      	ands	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <TIM_OC2_SetConfig+0xec>)
 800571e:	4013      	ands	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2220      	movs	r2, #32
 8005732:	4393      	bics	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <TIM_OC2_SetConfig+0xf0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d10d      	bne.n	8005766 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	4393      	bics	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	4393      	bics	r3, r2
 8005764:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <TIM_OC2_SetConfig+0xf0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00b      	beq.n	8005786 <TIM_OC2_SetConfig+0x9e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1a      	ldr	r2, [pc, #104]	; (80057dc <TIM_OC2_SetConfig+0xf4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d007      	beq.n	8005786 <TIM_OC2_SetConfig+0x9e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a19      	ldr	r2, [pc, #100]	; (80057e0 <TIM_OC2_SetConfig+0xf8>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC2_SetConfig+0x9e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <TIM_OC2_SetConfig+0xfc>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d113      	bne.n	80057ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <TIM_OC2_SetConfig+0x100>)
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4a16      	ldr	r2, [pc, #88]	; (80057ec <TIM_OC2_SetConfig+0x104>)
 8005792:	4013      	ands	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	621a      	str	r2, [r3, #32]
}
 80057c8:	46c0      	nop			; (mov r8, r8)
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b006      	add	sp, #24
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	feff8fff 	.word	0xfeff8fff
 80057d4:	fffffcff 	.word	0xfffffcff
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40014000 	.word	0x40014000
 80057e0:	40014400 	.word	0x40014400
 80057e4:	40014800 	.word	0x40014800
 80057e8:	fffffbff 	.word	0xfffffbff
 80057ec:	fffff7ff 	.word	0xfffff7ff

080057f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <TIM_OC3_SetConfig+0xe4>)
 8005800:	401a      	ands	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <TIM_OC3_SetConfig+0xe8>)
 800581c:	4013      	ands	r3, r2
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2203      	movs	r2, #3
 8005824:	4393      	bics	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4a29      	ldr	r2, [pc, #164]	; (80058dc <TIM_OC3_SetConfig+0xec>)
 8005836:	4013      	ands	r3, r2
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a25      	ldr	r2, [pc, #148]	; (80058e0 <TIM_OC3_SetConfig+0xf0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10d      	bne.n	800586a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4a24      	ldr	r2, [pc, #144]	; (80058e4 <TIM_OC3_SetConfig+0xf4>)
 8005852:	4013      	ands	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <TIM_OC3_SetConfig+0xf8>)
 8005866:	4013      	ands	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1c      	ldr	r2, [pc, #112]	; (80058e0 <TIM_OC3_SetConfig+0xf0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00b      	beq.n	800588a <TIM_OC3_SetConfig+0x9a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a1d      	ldr	r2, [pc, #116]	; (80058ec <TIM_OC3_SetConfig+0xfc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_OC3_SetConfig+0x9a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a1c      	ldr	r2, [pc, #112]	; (80058f0 <TIM_OC3_SetConfig+0x100>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC3_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1b      	ldr	r2, [pc, #108]	; (80058f4 <TIM_OC3_SetConfig+0x104>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d113      	bne.n	80058b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <TIM_OC3_SetConfig+0x108>)
 800588e:	4013      	ands	r3, r2
 8005890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <TIM_OC3_SetConfig+0x10c>)
 8005896:	4013      	ands	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b006      	add	sp, #24
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	fffffeff 	.word	0xfffffeff
 80058d8:	fffeff8f 	.word	0xfffeff8f
 80058dc:	fffffdff 	.word	0xfffffdff
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	fffff7ff 	.word	0xfffff7ff
 80058e8:	fffffbff 	.word	0xfffffbff
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800
 80058f8:	ffffefff 	.word	0xffffefff
 80058fc:	ffffdfff 	.word	0xffffdfff

08005900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	4a28      	ldr	r2, [pc, #160]	; (80059b0 <TIM_OC4_SetConfig+0xb0>)
 8005910:	401a      	ands	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <TIM_OC4_SetConfig+0xb4>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <TIM_OC4_SetConfig+0xb8>)
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <TIM_OC4_SetConfig+0xbc>)
 8005948:	4013      	ands	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	031b      	lsls	r3, r3, #12
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a19      	ldr	r2, [pc, #100]	; (80059c0 <TIM_OC4_SetConfig+0xc0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00b      	beq.n	8005978 <TIM_OC4_SetConfig+0x78>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a18      	ldr	r2, [pc, #96]	; (80059c4 <TIM_OC4_SetConfig+0xc4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d007      	beq.n	8005978 <TIM_OC4_SetConfig+0x78>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <TIM_OC4_SetConfig+0xc8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d003      	beq.n	8005978 <TIM_OC4_SetConfig+0x78>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a16      	ldr	r2, [pc, #88]	; (80059cc <TIM_OC4_SetConfig+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d109      	bne.n	800598c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <TIM_OC4_SetConfig+0xd0>)
 800597c:	4013      	ands	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	019b      	lsls	r3, r3, #6
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b006      	add	sp, #24
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	ffffefff 	.word	0xffffefff
 80059b4:	feff8fff 	.word	0xfeff8fff
 80059b8:	fffffcff 	.word	0xfffffcff
 80059bc:	ffffdfff 	.word	0xffffdfff
 80059c0:	40012c00 	.word	0x40012c00
 80059c4:	40014000 	.word	0x40014000
 80059c8:	40014400 	.word	0x40014400
 80059cc:	40014800 	.word	0x40014800
 80059d0:	ffffbfff 	.word	0xffffbfff

080059d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <TIM_OC5_SetConfig+0xa4>)
 80059e4:	401a      	ands	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <TIM_OC5_SetConfig+0xa8>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <TIM_OC5_SetConfig+0xac>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <TIM_OC5_SetConfig+0xb0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <TIM_OC5_SetConfig+0x6e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <TIM_OC5_SetConfig+0xb4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_OC5_SetConfig+0x6e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <TIM_OC5_SetConfig+0xb8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC5_SetConfig+0x6e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <TIM_OC5_SetConfig+0xbc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d109      	bne.n	8005a56 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4a0c      	ldr	r2, [pc, #48]	; (8005a78 <TIM_OC5_SetConfig+0xa4>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	621a      	str	r2, [r3, #32]
}
 8005a70:	46c0      	nop			; (mov r8, r8)
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b006      	add	sp, #24
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	fffeffff 	.word	0xfffeffff
 8005a7c:	fffeff8f 	.word	0xfffeff8f
 8005a80:	fffdffff 	.word	0xfffdffff
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800

08005a94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <TIM_OC6_SetConfig+0xa8>)
 8005aa4:	401a      	ands	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a20      	ldr	r2, [pc, #128]	; (8005b40 <TIM_OC6_SetConfig+0xac>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <TIM_OC6_SetConfig+0xb0>)
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	051b      	lsls	r3, r3, #20
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	; (8005b48 <TIM_OC6_SetConfig+0xb4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_OC6_SetConfig+0x70>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a17      	ldr	r2, [pc, #92]	; (8005b4c <TIM_OC6_SetConfig+0xb8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_OC6_SetConfig+0x70>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a16      	ldr	r2, [pc, #88]	; (8005b50 <TIM_OC6_SetConfig+0xbc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_OC6_SetConfig+0x70>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <TIM_OC6_SetConfig+0xc0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d109      	bne.n	8005b18 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4a14      	ldr	r2, [pc, #80]	; (8005b58 <TIM_OC6_SetConfig+0xc4>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b006      	add	sp, #24
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	ffefffff 	.word	0xffefffff
 8005b40:	feff8fff 	.word	0xfeff8fff
 8005b44:	ffdfffff 	.word	0xffdfffff
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	fffbffff 	.word	0xfffbffff

08005b5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	4393      	bics	r3, r2
 8005b72:	001a      	movs	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <TIM_TI1_SetConfig+0xa4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_TI1_SetConfig+0x40>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <TIM_TI1_SetConfig+0xa8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_TI1_SetConfig+0x40>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <TIM_TI1_SetConfig+0xac>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d101      	bne.n	8005ba0 <TIM_TI1_SetConfig+0x44>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <TIM_TI1_SetConfig+0x46>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	4393      	bics	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	e003      	b.n	8005bc0 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	22f0      	movs	r2, #240	; 0xf0
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	22ff      	movs	r2, #255	; 0xff
 8005bce:	4013      	ands	r3, r2
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	220a      	movs	r2, #10
 8005bda:	4393      	bics	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	220a      	movs	r2, #10
 8005be2:	4013      	ands	r3, r2
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	b006      	add	sp, #24
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40000400 	.word	0x40000400
 8005c08:	40014000 	.word	0x40014000

08005c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	2201      	movs	r2, #1
 8005c24:	4393      	bics	r3, r2
 8005c26:	001a      	movs	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	22f0      	movs	r2, #240	; 0xf0
 8005c36:	4393      	bics	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	220a      	movs	r2, #10
 8005c48:	4393      	bics	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	621a      	str	r2, [r3, #32]
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b006      	add	sp, #24
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	4393      	bics	r3, r2
 8005c7e:	001a      	movs	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <TIM_TI2_SetConfig+0x7c>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	4a10      	ldr	r2, [pc, #64]	; (8005ce8 <TIM_TI2_SetConfig+0x80>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	22a0      	movs	r2, #160	; 0xa0
 8005cbc:	4393      	bics	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	22a0      	movs	r2, #160	; 0xa0
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	621a      	str	r2, [r3, #32]
}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b006      	add	sp, #24
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	fffffcff 	.word	0xfffffcff
 8005ce8:	ffff0fff 	.word	0xffff0fff

08005cec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	4393      	bics	r3, r2
 8005d00:	001a      	movs	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <TIM_TI2_ConfigInputStage+0x60>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	031b      	lsls	r3, r3, #12
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	22a0      	movs	r2, #160	; 0xa0
 8005d28:	4393      	bics	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b006      	add	sp, #24
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	ffff0fff 	.word	0xffff0fff

08005d50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4a19      	ldr	r2, [pc, #100]	; (8005dc8 <TIM_TI3_SetConfig+0x78>)
 8005d64:	401a      	ands	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	22f0      	movs	r2, #240	; 0xf0
 8005d8a:	4393      	bics	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	22ff      	movs	r2, #255	; 0xff
 8005d94:	4013      	ands	r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4a0b      	ldr	r2, [pc, #44]	; (8005dcc <TIM_TI3_SetConfig+0x7c>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	021a      	lsls	r2, r3, #8
 8005da8:	23a0      	movs	r3, #160	; 0xa0
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	4013      	ands	r3, r2
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b006      	add	sp, #24
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	fffffeff 	.word	0xfffffeff
 8005dcc:	fffff5ff 	.word	0xfffff5ff

08005dd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <TIM_TI4_SetConfig+0x7c>)
 8005de4:	401a      	ands	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <TIM_TI4_SetConfig+0x80>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	021b      	lsls	r3, r3, #8
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <TIM_TI4_SetConfig+0x84>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	031b      	lsls	r3, r3, #12
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4a0d      	ldr	r2, [pc, #52]	; (8005e58 <TIM_TI4_SetConfig+0x88>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	031a      	lsls	r2, r3, #12
 8005e2a:	23a0      	movs	r3, #160	; 0xa0
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	4013      	ands	r3, r2
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b006      	add	sp, #24
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	ffffefff 	.word	0xffffefff
 8005e50:	fffffcff 	.word	0xfffffcff
 8005e54:	ffff0fff 	.word	0xffff0fff
 8005e58:	ffff5fff 	.word	0xffff5fff

08005e5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <TIM_ITRx_SetConfig+0x34>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	2207      	movs	r2, #7
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	609a      	str	r2, [r3, #8]
}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	ffcfff8f 	.word	0xffcfff8f

08005e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <TIM_ETR_SetConfig+0x3c>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	021a      	lsls	r2, r3, #8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b006      	add	sp, #24
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	ffff00ff 	.word	0xffff00ff

08005ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	221f      	movs	r2, #31
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	409a      	lsls	r2, r3
 8005eea:	0013      	movs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	43d2      	mvns	r2, r2
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1a      	ldr	r2, [r3, #32]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	211f      	movs	r1, #31
 8005f04:	400b      	ands	r3, r1
 8005f06:	6879      	ldr	r1, [r7, #4]
 8005f08:	4099      	lsls	r1, r3
 8005f0a:	000b      	movs	r3, r1
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b006      	add	sp, #24
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	223c      	movs	r2, #60	; 0x3c
 8005f2a:	5c9b      	ldrb	r3, [r3, r2]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e04f      	b.n	8005fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	223c      	movs	r2, #60	; 0x3c
 8005f38:	2101      	movs	r1, #1
 8005f3a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	223d      	movs	r2, #61	; 0x3d
 8005f40:	2102      	movs	r1, #2
 8005f42:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2270      	movs	r2, #112	; 0x70
 8005f74:	4393      	bics	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d10c      	bne.n	8005fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2280      	movs	r2, #128	; 0x80
 8005fac:	4393      	bics	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	223d      	movs	r2, #61	; 0x3d
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223c      	movs	r2, #60	; 0x3c
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b004      	add	sp, #16
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	ff0fffff 	.word	0xff0fffff
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40014000 	.word	0x40014000

08005fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff4:	46c0      	nop			; (mov r8, r8)
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	b002      	add	sp, #8
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006004:	46c0      	nop			; (mov r8, r8)
 8006006:	46bd      	mov	sp, r7
 8006008:	b002      	add	sp, #8
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006014:	46c0      	nop			; (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e046      	b.n	80060bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2288      	movs	r2, #136	; 0x88
 8006032:	589b      	ldr	r3, [r3, r2]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2284      	movs	r2, #132	; 0x84
 800603c:	2100      	movs	r1, #0
 800603e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	0018      	movs	r0, r3
 8006044:	f7fc fe08 	bl	8002c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2288      	movs	r2, #136	; 0x88
 800604c:	2124      	movs	r1, #36	; 0x24
 800604e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2101      	movs	r1, #1
 800605c:	438a      	bics	r2, r1
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0018      	movs	r0, r3
 8006064:	f000 fb6a 	bl	800673c <UART_SetConfig>
 8006068:	0003      	movs	r3, r0
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e024      	b.n	80060bc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	0018      	movs	r0, r3
 800607e:	f000 fd01 	bl	8006a84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	490d      	ldr	r1, [pc, #52]	; (80060c4 <HAL_UART_Init+0xa8>)
 800608e:	400a      	ands	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	212a      	movs	r1, #42	; 0x2a
 800609e:	438a      	bics	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2101      	movs	r1, #1
 80060ae:	430a      	orrs	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f000 fd99 	bl	8006bec <UART_CheckIdleState>
 80060ba:	0003      	movs	r3, r0
}
 80060bc:	0018      	movs	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	b002      	add	sp, #8
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	ffffb7ff 	.word	0xffffb7ff

080060c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b0aa      	sub	sp, #168	; 0xa8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	22a4      	movs	r2, #164	; 0xa4
 80060d8:	18b9      	adds	r1, r7, r2
 80060da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	20a0      	movs	r0, #160	; 0xa0
 80060e4:	1839      	adds	r1, r7, r0
 80060e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	249c      	movs	r4, #156	; 0x9c
 80060f0:	1939      	adds	r1, r7, r4
 80060f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060f4:	0011      	movs	r1, r2
 80060f6:	18bb      	adds	r3, r7, r2
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4aa2      	ldr	r2, [pc, #648]	; (8006384 <HAL_UART_IRQHandler+0x2bc>)
 80060fc:	4013      	ands	r3, r2
 80060fe:	2298      	movs	r2, #152	; 0x98
 8006100:	18bd      	adds	r5, r7, r2
 8006102:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006104:	18bb      	adds	r3, r7, r2
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11a      	bne.n	8006142 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800610c:	187b      	adds	r3, r7, r1
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2220      	movs	r2, #32
 8006112:	4013      	ands	r3, r2
 8006114:	d015      	beq.n	8006142 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006116:	183b      	adds	r3, r7, r0
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2220      	movs	r2, #32
 800611c:	4013      	ands	r3, r2
 800611e:	d105      	bne.n	800612c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006120:	193b      	adds	r3, r7, r4
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	055b      	lsls	r3, r3, #21
 8006128:	4013      	ands	r3, r2
 800612a:	d00a      	beq.n	8006142 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006130:	2b00      	cmp	r3, #0
 8006132:	d100      	bne.n	8006136 <HAL_UART_IRQHandler+0x6e>
 8006134:	e2dc      	b.n	80066f0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	0010      	movs	r0, r2
 800613e:	4798      	blx	r3
      }
      return;
 8006140:	e2d6      	b.n	80066f0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006142:	2398      	movs	r3, #152	; 0x98
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d100      	bne.n	800614e <HAL_UART_IRQHandler+0x86>
 800614c:	e122      	b.n	8006394 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800614e:	239c      	movs	r3, #156	; 0x9c
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a8c      	ldr	r2, [pc, #560]	; (8006388 <HAL_UART_IRQHandler+0x2c0>)
 8006156:	4013      	ands	r3, r2
 8006158:	d106      	bne.n	8006168 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800615a:	23a0      	movs	r3, #160	; 0xa0
 800615c:	18fb      	adds	r3, r7, r3
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a8a      	ldr	r2, [pc, #552]	; (800638c <HAL_UART_IRQHandler+0x2c4>)
 8006162:	4013      	ands	r3, r2
 8006164:	d100      	bne.n	8006168 <HAL_UART_IRQHandler+0xa0>
 8006166:	e115      	b.n	8006394 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006168:	23a4      	movs	r3, #164	; 0xa4
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2201      	movs	r2, #1
 8006170:	4013      	ands	r3, r2
 8006172:	d012      	beq.n	800619a <HAL_UART_IRQHandler+0xd2>
 8006174:	23a0      	movs	r3, #160	; 0xa0
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4013      	ands	r3, r2
 8006180:	d00b      	beq.n	800619a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2201      	movs	r2, #1
 8006188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2290      	movs	r2, #144	; 0x90
 800618e:	589b      	ldr	r3, [r3, r2]
 8006190:	2201      	movs	r2, #1
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2190      	movs	r1, #144	; 0x90
 8006198:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800619a:	23a4      	movs	r3, #164	; 0xa4
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2202      	movs	r2, #2
 80061a2:	4013      	ands	r3, r2
 80061a4:	d011      	beq.n	80061ca <HAL_UART_IRQHandler+0x102>
 80061a6:	239c      	movs	r3, #156	; 0x9c
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2201      	movs	r2, #1
 80061ae:	4013      	ands	r3, r2
 80061b0:	d00b      	beq.n	80061ca <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2202      	movs	r2, #2
 80061b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2290      	movs	r2, #144	; 0x90
 80061be:	589b      	ldr	r3, [r3, r2]
 80061c0:	2204      	movs	r2, #4
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2190      	movs	r1, #144	; 0x90
 80061c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ca:	23a4      	movs	r3, #164	; 0xa4
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2204      	movs	r2, #4
 80061d2:	4013      	ands	r3, r2
 80061d4:	d011      	beq.n	80061fa <HAL_UART_IRQHandler+0x132>
 80061d6:	239c      	movs	r3, #156	; 0x9c
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2201      	movs	r2, #1
 80061de:	4013      	ands	r3, r2
 80061e0:	d00b      	beq.n	80061fa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2204      	movs	r2, #4
 80061e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2290      	movs	r2, #144	; 0x90
 80061ee:	589b      	ldr	r3, [r3, r2]
 80061f0:	2202      	movs	r2, #2
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2190      	movs	r1, #144	; 0x90
 80061f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061fa:	23a4      	movs	r3, #164	; 0xa4
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2208      	movs	r2, #8
 8006202:	4013      	ands	r3, r2
 8006204:	d017      	beq.n	8006236 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006206:	23a0      	movs	r3, #160	; 0xa0
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2220      	movs	r2, #32
 800620e:	4013      	ands	r3, r2
 8006210:	d105      	bne.n	800621e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006212:	239c      	movs	r3, #156	; 0x9c
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5b      	ldr	r2, [pc, #364]	; (8006388 <HAL_UART_IRQHandler+0x2c0>)
 800621a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800621c:	d00b      	beq.n	8006236 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2208      	movs	r2, #8
 8006224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2290      	movs	r2, #144	; 0x90
 800622a:	589b      	ldr	r3, [r3, r2]
 800622c:	2208      	movs	r2, #8
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2190      	movs	r1, #144	; 0x90
 8006234:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006236:	23a4      	movs	r3, #164	; 0xa4
 8006238:	18fb      	adds	r3, r7, r3
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	4013      	ands	r3, r2
 8006242:	d013      	beq.n	800626c <HAL_UART_IRQHandler+0x1a4>
 8006244:	23a0      	movs	r3, #160	; 0xa0
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	04db      	lsls	r3, r3, #19
 800624e:	4013      	ands	r3, r2
 8006250:	d00c      	beq.n	800626c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2280      	movs	r2, #128	; 0x80
 8006258:	0112      	lsls	r2, r2, #4
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2290      	movs	r2, #144	; 0x90
 8006260:	589b      	ldr	r3, [r3, r2]
 8006262:	2220      	movs	r2, #32
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2190      	movs	r1, #144	; 0x90
 800626a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2290      	movs	r2, #144	; 0x90
 8006270:	589b      	ldr	r3, [r3, r2]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d100      	bne.n	8006278 <HAL_UART_IRQHandler+0x1b0>
 8006276:	e23d      	b.n	80066f4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006278:	23a4      	movs	r3, #164	; 0xa4
 800627a:	18fb      	adds	r3, r7, r3
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2220      	movs	r2, #32
 8006280:	4013      	ands	r3, r2
 8006282:	d015      	beq.n	80062b0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006284:	23a0      	movs	r3, #160	; 0xa0
 8006286:	18fb      	adds	r3, r7, r3
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2220      	movs	r2, #32
 800628c:	4013      	ands	r3, r2
 800628e:	d106      	bne.n	800629e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006290:	239c      	movs	r3, #156	; 0x9c
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	2380      	movs	r3, #128	; 0x80
 8006298:	055b      	lsls	r3, r3, #21
 800629a:	4013      	ands	r3, r2
 800629c:	d008      	beq.n	80062b0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	0010      	movs	r0, r2
 80062ae:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2290      	movs	r2, #144	; 0x90
 80062b4:	589b      	ldr	r3, [r3, r2]
 80062b6:	2194      	movs	r1, #148	; 0x94
 80062b8:	187a      	adds	r2, r7, r1
 80062ba:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	2240      	movs	r2, #64	; 0x40
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d004      	beq.n	80062d4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ca:	187b      	adds	r3, r7, r1
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2228      	movs	r2, #40	; 0x28
 80062d0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d2:	d04c      	beq.n	800636e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f000 fd9e 	bl	8006e18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2240      	movs	r2, #64	; 0x40
 80062e4:	4013      	ands	r3, r2
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d13c      	bne.n	8006364 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80062f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f2:	2090      	movs	r0, #144	; 0x90
 80062f4:	183a      	adds	r2, r7, r0
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	2301      	movs	r3, #1
 80062fa:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2140      	movs	r1, #64	; 0x40
 8006310:	438a      	bics	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	183b      	adds	r3, r7, r0
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800631c:	f383 8810 	msr	PRIMASK, r3
}
 8006320:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2280      	movs	r2, #128	; 0x80
 8006326:	589b      	ldr	r3, [r3, r2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d016      	beq.n	800635a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2280      	movs	r2, #128	; 0x80
 8006330:	589b      	ldr	r3, [r3, r2]
 8006332:	4a17      	ldr	r2, [pc, #92]	; (8006390 <HAL_UART_IRQHandler+0x2c8>)
 8006334:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2280      	movs	r2, #128	; 0x80
 800633a:	589b      	ldr	r3, [r3, r2]
 800633c:	0018      	movs	r0, r3
 800633e:	f7fd f88d 	bl	800345c <HAL_DMA_Abort_IT>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d01c      	beq.n	8006380 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	589b      	ldr	r3, [r3, r2]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	2180      	movs	r1, #128	; 0x80
 8006352:	5852      	ldr	r2, [r2, r1]
 8006354:	0010      	movs	r0, r2
 8006356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	e012      	b.n	8006380 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 f9d9 	bl	8006714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006362:	e00d      	b.n	8006380 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	0018      	movs	r0, r3
 8006368:	f000 f9d4 	bl	8006714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636c:	e008      	b.n	8006380 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	0018      	movs	r0, r3
 8006372:	f000 f9cf 	bl	8006714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2290      	movs	r2, #144	; 0x90
 800637a:	2100      	movs	r1, #0
 800637c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800637e:	e1b9      	b.n	80066f4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006380:	46c0      	nop			; (mov r8, r8)
    return;
 8006382:	e1b7      	b.n	80066f4 <HAL_UART_IRQHandler+0x62c>
 8006384:	0000080f 	.word	0x0000080f
 8006388:	10000001 	.word	0x10000001
 800638c:	04000120 	.word	0x04000120
 8006390:	08006ee5 	.word	0x08006ee5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d000      	beq.n	800639e <HAL_UART_IRQHandler+0x2d6>
 800639c:	e13e      	b.n	800661c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800639e:	23a4      	movs	r3, #164	; 0xa4
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2210      	movs	r2, #16
 80063a6:	4013      	ands	r3, r2
 80063a8:	d100      	bne.n	80063ac <HAL_UART_IRQHandler+0x2e4>
 80063aa:	e137      	b.n	800661c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ac:	23a0      	movs	r3, #160	; 0xa0
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2210      	movs	r2, #16
 80063b4:	4013      	ands	r3, r2
 80063b6:	d100      	bne.n	80063ba <HAL_UART_IRQHandler+0x2f2>
 80063b8:	e130      	b.n	800661c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2210      	movs	r2, #16
 80063c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d000      	beq.n	80063d2 <HAL_UART_IRQHandler+0x30a>
 80063d0:	e0a4      	b.n	800651c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2280      	movs	r2, #128	; 0x80
 80063d6:	589b      	ldr	r3, [r3, r2]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	217e      	movs	r1, #126	; 0x7e
 80063de:	187b      	adds	r3, r7, r1
 80063e0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d100      	bne.n	80063ec <HAL_UART_IRQHandler+0x324>
 80063ea:	e185      	b.n	80066f8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	225c      	movs	r2, #92	; 0x5c
 80063f0:	5a9b      	ldrh	r3, [r3, r2]
 80063f2:	187a      	adds	r2, r7, r1
 80063f4:	8812      	ldrh	r2, [r2, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d300      	bcc.n	80063fc <HAL_UART_IRQHandler+0x334>
 80063fa:	e17d      	b.n	80066f8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	187a      	adds	r2, r7, r1
 8006400:	215e      	movs	r1, #94	; 0x5e
 8006402:	8812      	ldrh	r2, [r2, #0]
 8006404:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2280      	movs	r2, #128	; 0x80
 800640a:	589b      	ldr	r3, [r3, r2]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2220      	movs	r2, #32
 8006412:	4013      	ands	r3, r2
 8006414:	d170      	bne.n	80064f8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006416:	f3ef 8310 	mrs	r3, PRIMASK
 800641a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800641c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800641e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006420:	2301      	movs	r3, #1
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006426:	f383 8810 	msr	PRIMASK, r3
}
 800642a:	46c0      	nop			; (mov r8, r8)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	49b4      	ldr	r1, [pc, #720]	; (8006708 <HAL_UART_IRQHandler+0x640>)
 8006438:	400a      	ands	r2, r1
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	f383 8810 	msr	PRIMASK, r3
}
 8006446:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006448:	f3ef 8310 	mrs	r3, PRIMASK
 800644c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006450:	677b      	str	r3, [r7, #116]	; 0x74
 8006452:	2301      	movs	r3, #1
 8006454:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006458:	f383 8810 	msr	PRIMASK, r3
}
 800645c:	46c0      	nop			; (mov r8, r8)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2101      	movs	r1, #1
 800646a:	438a      	bics	r2, r1
 800646c:	609a      	str	r2, [r3, #8]
 800646e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006474:	f383 8810 	msr	PRIMASK, r3
}
 8006478:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647a:	f3ef 8310 	mrs	r3, PRIMASK
 800647e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006480:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006482:	673b      	str	r3, [r7, #112]	; 0x70
 8006484:	2301      	movs	r3, #1
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	f383 8810 	msr	PRIMASK, r3
}
 800648e:	46c0      	nop			; (mov r8, r8)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2140      	movs	r1, #64	; 0x40
 800649c:	438a      	bics	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
 80064a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a6:	f383 8810 	msr	PRIMASK, r3
}
 80064aa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	228c      	movs	r2, #140	; 0x8c
 80064b0:	2120      	movs	r1, #32
 80064b2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ba:	f3ef 8310 	mrs	r3, PRIMASK
 80064be:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80064c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c4:	2301      	movs	r3, #1
 80064c6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064ca:	f383 8810 	msr	PRIMASK, r3
}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2110      	movs	r1, #16
 80064dc:	438a      	bics	r2, r1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064e6:	f383 8810 	msr	PRIMASK, r3
}
 80064ea:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	589b      	ldr	r3, [r3, r2]
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7fc ff50 	bl	8003398 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	225c      	movs	r2, #92	; 0x5c
 8006502:	5a9a      	ldrh	r2, [r3, r2]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	215e      	movs	r1, #94	; 0x5e
 8006508:	5a5b      	ldrh	r3, [r3, r1]
 800650a:	b29b      	uxth	r3, r3
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	b29a      	uxth	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0011      	movs	r1, r2
 8006514:	0018      	movs	r0, r3
 8006516:	f000 f905 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800651a:	e0ed      	b.n	80066f8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	225c      	movs	r2, #92	; 0x5c
 8006520:	5a99      	ldrh	r1, [r3, r2]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	225e      	movs	r2, #94	; 0x5e
 8006526:	5a9b      	ldrh	r3, [r3, r2]
 8006528:	b29a      	uxth	r2, r3
 800652a:	208e      	movs	r0, #142	; 0x8e
 800652c:	183b      	adds	r3, r7, r0
 800652e:	1a8a      	subs	r2, r1, r2
 8006530:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	225e      	movs	r2, #94	; 0x5e
 8006536:	5a9b      	ldrh	r3, [r3, r2]
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d100      	bne.n	8006540 <HAL_UART_IRQHandler+0x478>
 800653e:	e0dd      	b.n	80066fc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006540:	183b      	adds	r3, r7, r0
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d100      	bne.n	800654a <HAL_UART_IRQHandler+0x482>
 8006548:	e0d8      	b.n	80066fc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006550:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006552:	2488      	movs	r4, #136	; 0x88
 8006554:	193a      	adds	r2, r7, r4
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	2301      	movs	r3, #1
 800655a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f383 8810 	msr	PRIMASK, r3
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4967      	ldr	r1, [pc, #412]	; (800670c <HAL_UART_IRQHandler+0x644>)
 8006570:	400a      	ands	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	193b      	adds	r3, r7, r4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f383 8810 	msr	PRIMASK, r3
}
 8006580:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006582:	f3ef 8310 	mrs	r3, PRIMASK
 8006586:	61bb      	str	r3, [r7, #24]
  return(result);
 8006588:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800658a:	2484      	movs	r4, #132	; 0x84
 800658c:	193a      	adds	r2, r7, r4
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	2301      	movs	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f383 8810 	msr	PRIMASK, r3
}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	495a      	ldr	r1, [pc, #360]	; (8006710 <HAL_UART_IRQHandler+0x648>)
 80065a8:	400a      	ands	r2, r1
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	193b      	adds	r3, r7, r4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f383 8810 	msr	PRIMASK, r3
}
 80065b8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	228c      	movs	r2, #140	; 0x8c
 80065be:	2120      	movs	r1, #32
 80065c0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ce:	f3ef 8310 	mrs	r3, PRIMASK
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d6:	2480      	movs	r4, #128	; 0x80
 80065d8:	193a      	adds	r2, r7, r4
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	2301      	movs	r3, #1
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	f383 8810 	msr	PRIMASK, r3
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2110      	movs	r1, #16
 80065f4:	438a      	bics	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	193b      	adds	r3, r7, r4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	f383 8810 	msr	PRIMASK, r3
}
 8006604:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800660c:	183b      	adds	r3, r7, r0
 800660e:	881a      	ldrh	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	0011      	movs	r1, r2
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f885 	bl	8006724 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800661a:	e06f      	b.n	80066fc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800661c:	23a4      	movs	r3, #164	; 0xa4
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	035b      	lsls	r3, r3, #13
 8006626:	4013      	ands	r3, r2
 8006628:	d010      	beq.n	800664c <HAL_UART_IRQHandler+0x584>
 800662a:	239c      	movs	r3, #156	; 0x9c
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	2380      	movs	r3, #128	; 0x80
 8006632:	03db      	lsls	r3, r3, #15
 8006634:	4013      	ands	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	0352      	lsls	r2, r2, #13
 8006640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0018      	movs	r0, r3
 8006646:	f000 fc90 	bl	8006f6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800664a:	e05a      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800664c:	23a4      	movs	r3, #164	; 0xa4
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2280      	movs	r2, #128	; 0x80
 8006654:	4013      	ands	r3, r2
 8006656:	d016      	beq.n	8006686 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006658:	23a0      	movs	r3, #160	; 0xa0
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2280      	movs	r2, #128	; 0x80
 8006660:	4013      	ands	r3, r2
 8006662:	d106      	bne.n	8006672 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006664:	239c      	movs	r3, #156	; 0x9c
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	2380      	movs	r3, #128	; 0x80
 800666c:	041b      	lsls	r3, r3, #16
 800666e:	4013      	ands	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006676:	2b00      	cmp	r3, #0
 8006678:	d042      	beq.n	8006700 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	0010      	movs	r0, r2
 8006682:	4798      	blx	r3
    }
    return;
 8006684:	e03c      	b.n	8006700 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006686:	23a4      	movs	r3, #164	; 0xa4
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2240      	movs	r2, #64	; 0x40
 800668e:	4013      	ands	r3, r2
 8006690:	d00a      	beq.n	80066a8 <HAL_UART_IRQHandler+0x5e0>
 8006692:	23a0      	movs	r3, #160	; 0xa0
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2240      	movs	r2, #64	; 0x40
 800669a:	4013      	ands	r3, r2
 800669c:	d004      	beq.n	80066a8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f000 fc36 	bl	8006f12 <UART_EndTransmit_IT>
    return;
 80066a6:	e02c      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80066a8:	23a4      	movs	r3, #164	; 0xa4
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	4013      	ands	r3, r2
 80066b4:	d00b      	beq.n	80066ce <HAL_UART_IRQHandler+0x606>
 80066b6:	23a0      	movs	r3, #160	; 0xa0
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	05db      	lsls	r3, r3, #23
 80066c0:	4013      	ands	r3, r2
 80066c2:	d004      	beq.n	80066ce <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	0018      	movs	r0, r3
 80066c8:	f000 fc5f 	bl	8006f8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066cc:	e019      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80066ce:	23a4      	movs	r3, #164	; 0xa4
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	045b      	lsls	r3, r3, #17
 80066d8:	4013      	ands	r3, r2
 80066da:	d012      	beq.n	8006702 <HAL_UART_IRQHandler+0x63a>
 80066dc:	23a0      	movs	r3, #160	; 0xa0
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da0d      	bge.n	8006702 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 fc46 	bl	8006f7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ee:	e008      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
      return;
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	e006      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
    return;
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	e004      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
      return;
 80066f8:	46c0      	nop			; (mov r8, r8)
 80066fa:	e002      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
      return;
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	e000      	b.n	8006702 <HAL_UART_IRQHandler+0x63a>
    return;
 8006700:	46c0      	nop			; (mov r8, r8)
  }
}
 8006702:	46bd      	mov	sp, r7
 8006704:	b02a      	add	sp, #168	; 0xa8
 8006706:	bdb0      	pop	{r4, r5, r7, pc}
 8006708:	fffffeff 	.word	0xfffffeff
 800670c:	fffffedf 	.word	0xfffffedf
 8006710:	effffffe 	.word	0xeffffffe

08006714 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	000a      	movs	r2, r1
 800672e:	1cbb      	adds	r3, r7, #2
 8006730:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006732:	46c0      	nop			; (mov r8, r8)
 8006734:	46bd      	mov	sp, r7
 8006736:	b002      	add	sp, #8
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006744:	231a      	movs	r3, #26
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689a      	ldr	r2, [r3, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	4313      	orrs	r3, r2
 8006762:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4abc      	ldr	r2, [pc, #752]	; (8006a5c <UART_SetConfig+0x320>)
 800676c:	4013      	ands	r3, r2
 800676e:	0019      	movs	r1, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	430a      	orrs	r2, r1
 8006778:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4ab7      	ldr	r2, [pc, #732]	; (8006a60 <UART_SetConfig+0x324>)
 8006782:	4013      	ands	r3, r2
 8006784:	0019      	movs	r1, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	4313      	orrs	r3, r2
 80067a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4aae      	ldr	r2, [pc, #696]	; (8006a64 <UART_SetConfig+0x328>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	0019      	movs	r1, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69fa      	ldr	r2, [r7, #28]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067be:	220f      	movs	r2, #15
 80067c0:	4393      	bics	r3, r2
 80067c2:	0019      	movs	r1, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4aa4      	ldr	r2, [pc, #656]	; (8006a68 <UART_SetConfig+0x32c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d127      	bne.n	800682a <UART_SetConfig+0xee>
 80067da:	4ba4      	ldr	r3, [pc, #656]	; (8006a6c <UART_SetConfig+0x330>)
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	2203      	movs	r2, #3
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d017      	beq.n	8006816 <UART_SetConfig+0xda>
 80067e6:	d81b      	bhi.n	8006820 <UART_SetConfig+0xe4>
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d00a      	beq.n	8006802 <UART_SetConfig+0xc6>
 80067ec:	d818      	bhi.n	8006820 <UART_SetConfig+0xe4>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <UART_SetConfig+0xbc>
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d00a      	beq.n	800680c <UART_SetConfig+0xd0>
 80067f6:	e013      	b.n	8006820 <UART_SetConfig+0xe4>
 80067f8:	231b      	movs	r3, #27
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	e058      	b.n	80068b4 <UART_SetConfig+0x178>
 8006802:	231b      	movs	r3, #27
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	2202      	movs	r2, #2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	e053      	b.n	80068b4 <UART_SetConfig+0x178>
 800680c:	231b      	movs	r3, #27
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	2204      	movs	r2, #4
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	e04e      	b.n	80068b4 <UART_SetConfig+0x178>
 8006816:	231b      	movs	r3, #27
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	2208      	movs	r2, #8
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	e049      	b.n	80068b4 <UART_SetConfig+0x178>
 8006820:	231b      	movs	r3, #27
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2210      	movs	r2, #16
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	e044      	b.n	80068b4 <UART_SetConfig+0x178>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a90      	ldr	r2, [pc, #576]	; (8006a70 <UART_SetConfig+0x334>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d127      	bne.n	8006884 <UART_SetConfig+0x148>
 8006834:	4b8d      	ldr	r3, [pc, #564]	; (8006a6c <UART_SetConfig+0x330>)
 8006836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006838:	220c      	movs	r2, #12
 800683a:	4013      	ands	r3, r2
 800683c:	2b0c      	cmp	r3, #12
 800683e:	d017      	beq.n	8006870 <UART_SetConfig+0x134>
 8006840:	d81b      	bhi.n	800687a <UART_SetConfig+0x13e>
 8006842:	2b08      	cmp	r3, #8
 8006844:	d00a      	beq.n	800685c <UART_SetConfig+0x120>
 8006846:	d818      	bhi.n	800687a <UART_SetConfig+0x13e>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <UART_SetConfig+0x116>
 800684c:	2b04      	cmp	r3, #4
 800684e:	d00a      	beq.n	8006866 <UART_SetConfig+0x12a>
 8006850:	e013      	b.n	800687a <UART_SetConfig+0x13e>
 8006852:	231b      	movs	r3, #27
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	e02b      	b.n	80068b4 <UART_SetConfig+0x178>
 800685c:	231b      	movs	r3, #27
 800685e:	18fb      	adds	r3, r7, r3
 8006860:	2202      	movs	r2, #2
 8006862:	701a      	strb	r2, [r3, #0]
 8006864:	e026      	b.n	80068b4 <UART_SetConfig+0x178>
 8006866:	231b      	movs	r3, #27
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	2204      	movs	r2, #4
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	e021      	b.n	80068b4 <UART_SetConfig+0x178>
 8006870:	231b      	movs	r3, #27
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	2208      	movs	r2, #8
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	e01c      	b.n	80068b4 <UART_SetConfig+0x178>
 800687a:	231b      	movs	r3, #27
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	2210      	movs	r2, #16
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e017      	b.n	80068b4 <UART_SetConfig+0x178>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7a      	ldr	r2, [pc, #488]	; (8006a74 <UART_SetConfig+0x338>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d104      	bne.n	8006898 <UART_SetConfig+0x15c>
 800688e:	231b      	movs	r3, #27
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	2200      	movs	r2, #0
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	e00d      	b.n	80068b4 <UART_SetConfig+0x178>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a76      	ldr	r2, [pc, #472]	; (8006a78 <UART_SetConfig+0x33c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d104      	bne.n	80068ac <UART_SetConfig+0x170>
 80068a2:	231b      	movs	r3, #27
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e003      	b.n	80068b4 <UART_SetConfig+0x178>
 80068ac:	231b      	movs	r3, #27
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2210      	movs	r2, #16
 80068b2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	2380      	movs	r3, #128	; 0x80
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	429a      	cmp	r2, r3
 80068be:	d000      	beq.n	80068c2 <UART_SetConfig+0x186>
 80068c0:	e065      	b.n	800698e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80068c2:	231b      	movs	r3, #27
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d015      	beq.n	80068f8 <UART_SetConfig+0x1bc>
 80068cc:	dc18      	bgt.n	8006900 <UART_SetConfig+0x1c4>
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d00d      	beq.n	80068ee <UART_SetConfig+0x1b2>
 80068d2:	dc15      	bgt.n	8006900 <UART_SetConfig+0x1c4>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <UART_SetConfig+0x1a2>
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d005      	beq.n	80068e8 <UART_SetConfig+0x1ac>
 80068dc:	e010      	b.n	8006900 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068de:	f7fd fd9b 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80068e2:	0003      	movs	r3, r0
 80068e4:	617b      	str	r3, [r7, #20]
        break;
 80068e6:	e012      	b.n	800690e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e8:	4b64      	ldr	r3, [pc, #400]	; (8006a7c <UART_SetConfig+0x340>)
 80068ea:	617b      	str	r3, [r7, #20]
        break;
 80068ec:	e00f      	b.n	800690e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ee:	f7fd fd07 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80068f2:	0003      	movs	r3, r0
 80068f4:	617b      	str	r3, [r7, #20]
        break;
 80068f6:	e00a      	b.n	800690e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	617b      	str	r3, [r7, #20]
        break;
 80068fe:	e006      	b.n	800690e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006904:	231a      	movs	r3, #26
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
        break;
 800690c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d100      	bne.n	8006916 <UART_SetConfig+0x1da>
 8006914:	e08d      	b.n	8006a32 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800691a:	4b59      	ldr	r3, [pc, #356]	; (8006a80 <UART_SetConfig+0x344>)
 800691c:	0052      	lsls	r2, r2, #1
 800691e:	5ad3      	ldrh	r3, [r2, r3]
 8006920:	0019      	movs	r1, r3
 8006922:	6978      	ldr	r0, [r7, #20]
 8006924:	f7f9 fbec 	bl	8000100 <__udivsi3>
 8006928:	0003      	movs	r3, r0
 800692a:	005a      	lsls	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	18d2      	adds	r2, r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	0019      	movs	r1, r3
 800693a:	0010      	movs	r0, r2
 800693c:	f7f9 fbe0 	bl	8000100 <__udivsi3>
 8006940:	0003      	movs	r3, r0
 8006942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b0f      	cmp	r3, #15
 8006948:	d91c      	bls.n	8006984 <UART_SetConfig+0x248>
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	025b      	lsls	r3, r3, #9
 8006950:	429a      	cmp	r2, r3
 8006952:	d217      	bcs.n	8006984 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	b29a      	uxth	r2, r3
 8006958:	200e      	movs	r0, #14
 800695a:	183b      	adds	r3, r7, r0
 800695c:	210f      	movs	r1, #15
 800695e:	438a      	bics	r2, r1
 8006960:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	2207      	movs	r2, #7
 800696a:	4013      	ands	r3, r2
 800696c:	b299      	uxth	r1, r3
 800696e:	183b      	adds	r3, r7, r0
 8006970:	183a      	adds	r2, r7, r0
 8006972:	8812      	ldrh	r2, [r2, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	183a      	adds	r2, r7, r0
 800697e:	8812      	ldrh	r2, [r2, #0]
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	e056      	b.n	8006a32 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006984:	231a      	movs	r3, #26
 8006986:	18fb      	adds	r3, r7, r3
 8006988:	2201      	movs	r2, #1
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	e051      	b.n	8006a32 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800698e:	231b      	movs	r3, #27
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d015      	beq.n	80069c4 <UART_SetConfig+0x288>
 8006998:	dc18      	bgt.n	80069cc <UART_SetConfig+0x290>
 800699a:	2b04      	cmp	r3, #4
 800699c:	d00d      	beq.n	80069ba <UART_SetConfig+0x27e>
 800699e:	dc15      	bgt.n	80069cc <UART_SetConfig+0x290>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <UART_SetConfig+0x26e>
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d005      	beq.n	80069b4 <UART_SetConfig+0x278>
 80069a8:	e010      	b.n	80069cc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069aa:	f7fd fd35 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80069ae:	0003      	movs	r3, r0
 80069b0:	617b      	str	r3, [r7, #20]
        break;
 80069b2:	e012      	b.n	80069da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b4:	4b31      	ldr	r3, [pc, #196]	; (8006a7c <UART_SetConfig+0x340>)
 80069b6:	617b      	str	r3, [r7, #20]
        break;
 80069b8:	e00f      	b.n	80069da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ba:	f7fd fca1 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80069be:	0003      	movs	r3, r0
 80069c0:	617b      	str	r3, [r7, #20]
        break;
 80069c2:	e00a      	b.n	80069da <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069c4:	2380      	movs	r3, #128	; 0x80
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	617b      	str	r3, [r7, #20]
        break;
 80069ca:	e006      	b.n	80069da <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80069d0:	231a      	movs	r3, #26
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	2201      	movs	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
        break;
 80069d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d028      	beq.n	8006a32 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069e4:	4b26      	ldr	r3, [pc, #152]	; (8006a80 <UART_SetConfig+0x344>)
 80069e6:	0052      	lsls	r2, r2, #1
 80069e8:	5ad3      	ldrh	r3, [r2, r3]
 80069ea:	0019      	movs	r1, r3
 80069ec:	6978      	ldr	r0, [r7, #20]
 80069ee:	f7f9 fb87 	bl	8000100 <__udivsi3>
 80069f2:	0003      	movs	r3, r0
 80069f4:	001a      	movs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	18d2      	adds	r2, r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	0019      	movs	r1, r3
 8006a04:	0010      	movs	r0, r2
 8006a06:	f7f9 fb7b 	bl	8000100 <__udivsi3>
 8006a0a:	0003      	movs	r3, r0
 8006a0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d90a      	bls.n	8006a2a <UART_SetConfig+0x2ee>
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	2380      	movs	r3, #128	; 0x80
 8006a18:	025b      	lsls	r3, r3, #9
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d205      	bcs.n	8006a2a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	e003      	b.n	8006a32 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006a2a:	231a      	movs	r3, #26
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	2201      	movs	r2, #1
 8006a30:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	226a      	movs	r2, #106	; 0x6a
 8006a36:	2101      	movs	r1, #1
 8006a38:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2268      	movs	r2, #104	; 0x68
 8006a3e:	2101      	movs	r1, #1
 8006a40:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a4e:	231a      	movs	r3, #26
 8006a50:	18fb      	adds	r3, r7, r3
 8006a52:	781b      	ldrb	r3, [r3, #0]
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b008      	add	sp, #32
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	cfff69f3 	.word	0xcfff69f3
 8006a60:	ffffcfff 	.word	0xffffcfff
 8006a64:	11fff4ff 	.word	0x11fff4ff
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40004400 	.word	0x40004400
 8006a74:	40004800 	.word	0x40004800
 8006a78:	40004c00 	.word	0x40004c00
 8006a7c:	00f42400 	.word	0x00f42400
 8006a80:	08007374 	.word	0x08007374

08006a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	2201      	movs	r2, #1
 8006a92:	4013      	ands	r3, r2
 8006a94:	d00b      	beq.n	8006aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	4a4a      	ldr	r2, [pc, #296]	; (8006bc8 <UART_AdvFeatureConfig+0x144>)
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	0019      	movs	r1, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4a43      	ldr	r2, [pc, #268]	; (8006bcc <UART_AdvFeatureConfig+0x148>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	0019      	movs	r1, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	d00b      	beq.n	8006af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a3b      	ldr	r2, [pc, #236]	; (8006bd0 <UART_AdvFeatureConfig+0x14c>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	0019      	movs	r1, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af6:	2208      	movs	r2, #8
 8006af8:	4013      	ands	r3, r2
 8006afa:	d00b      	beq.n	8006b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4a34      	ldr	r2, [pc, #208]	; (8006bd4 <UART_AdvFeatureConfig+0x150>)
 8006b04:	4013      	ands	r3, r2
 8006b06:	0019      	movs	r1, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	2210      	movs	r2, #16
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d00b      	beq.n	8006b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	4a2c      	ldr	r2, [pc, #176]	; (8006bd8 <UART_AdvFeatureConfig+0x154>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	0019      	movs	r1, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	d00b      	beq.n	8006b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	4a25      	ldr	r2, [pc, #148]	; (8006bdc <UART_AdvFeatureConfig+0x158>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	0019      	movs	r1, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	2240      	movs	r2, #64	; 0x40
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d01d      	beq.n	8006b9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	; (8006be0 <UART_AdvFeatureConfig+0x15c>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	0019      	movs	r1, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b7e:	2380      	movs	r3, #128	; 0x80
 8006b80:	035b      	lsls	r3, r3, #13
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d10b      	bne.n	8006b9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4a15      	ldr	r2, [pc, #84]	; (8006be4 <UART_AdvFeatureConfig+0x160>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	0019      	movs	r1, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	2280      	movs	r2, #128	; 0x80
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	4a0e      	ldr	r2, [pc, #56]	; (8006be8 <UART_AdvFeatureConfig+0x164>)
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	0019      	movs	r1, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }
}
 8006bc0:	46c0      	nop			; (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b002      	add	sp, #8
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	fffdffff 	.word	0xfffdffff
 8006bcc:	fffeffff 	.word	0xfffeffff
 8006bd0:	fffbffff 	.word	0xfffbffff
 8006bd4:	ffff7fff 	.word	0xffff7fff
 8006bd8:	ffffefff 	.word	0xffffefff
 8006bdc:	ffffdfff 	.word	0xffffdfff
 8006be0:	ffefffff 	.word	0xffefffff
 8006be4:	ff9fffff 	.word	0xff9fffff
 8006be8:	fff7ffff 	.word	0xfff7ffff

08006bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2290      	movs	r2, #144	; 0x90
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bfc:	f7fc fa5a 	bl	80030b4 <HAL_GetTick>
 8006c00:	0003      	movs	r3, r0
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d10c      	bne.n	8006c2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	0391      	lsls	r1, r2, #14
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <UART_CheckIdleState+0x98>)
 8006c1c:	9200      	str	r2, [sp, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f000 f832 	bl	8006c88 <UART_WaitOnFlagUntilTimeout>
 8006c24:	1e03      	subs	r3, r0, #0
 8006c26:	d001      	beq.n	8006c2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e026      	b.n	8006c7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2204      	movs	r2, #4
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d10c      	bne.n	8006c54 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2280      	movs	r2, #128	; 0x80
 8006c3e:	03d1      	lsls	r1, r2, #15
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <UART_CheckIdleState+0x98>)
 8006c44:	9200      	str	r2, [sp, #0]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f000 f81e 	bl	8006c88 <UART_WaitOnFlagUntilTimeout>
 8006c4c:	1e03      	subs	r3, r0, #0
 8006c4e:	d001      	beq.n	8006c54 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e012      	b.n	8006c7a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2288      	movs	r2, #136	; 0x88
 8006c58:	2120      	movs	r1, #32
 8006c5a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	228c      	movs	r2, #140	; 0x8c
 8006c60:	2120      	movs	r1, #32
 8006c62:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2284      	movs	r2, #132	; 0x84
 8006c74:	2100      	movs	r1, #0
 8006c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	b004      	add	sp, #16
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	01ffffff 	.word	0x01ffffff

08006c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b094      	sub	sp, #80	; 0x50
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	1dfb      	adds	r3, r7, #7
 8006c96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c98:	e0a7      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	d100      	bne.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006ca0:	e0a3      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ca2:	f7fc fa07 	bl	80030b4 <HAL_GetTick>
 8006ca6:	0002      	movs	r2, r0
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d302      	bcc.n	8006cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d13f      	bne.n	8006d38 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc8:	f383 8810 	msr	PRIMASK, r3
}
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	494e      	ldr	r1, [pc, #312]	; (8006e14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cda:	400a      	ands	r2, r1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f383 8810 	msr	PRIMASK, r3
}
 8006ce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cea:	f3ef 8310 	mrs	r3, PRIMASK
 8006cee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	438a      	bics	r2, r1
 8006d0e:	609a      	str	r2, [r3, #8]
 8006d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d16:	f383 8810 	msr	PRIMASK, r3
}
 8006d1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2288      	movs	r2, #136	; 0x88
 8006d20:	2120      	movs	r1, #32
 8006d22:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	228c      	movs	r2, #140	; 0x8c
 8006d28:	2120      	movs	r1, #32
 8006d2a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2284      	movs	r2, #132	; 0x84
 8006d30:	2100      	movs	r1, #0
 8006d32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e069      	b.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	4013      	ands	r3, r2
 8006d42:	d052      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69da      	ldr	r2, [r3, #28]
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	401a      	ands	r2, r3
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d148      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2280      	movs	r2, #128	; 0x80
 8006d5e:	0112      	lsls	r2, r2, #4
 8006d60:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	613b      	str	r3, [r7, #16]
  return(result);
 8006d68:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4924      	ldr	r1, [pc, #144]	; (8006e14 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006d84:	400a      	ands	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d94:	f3ef 8310 	mrs	r3, PRIMASK
 8006d98:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d9e:	2301      	movs	r3, #1
 8006da0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f383 8810 	msr	PRIMASK, r3
}
 8006da8:	46c0      	nop			; (mov r8, r8)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2101      	movs	r1, #1
 8006db6:	438a      	bics	r2, r1
 8006db8:	609a      	str	r2, [r3, #8]
 8006dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	f383 8810 	msr	PRIMASK, r3
}
 8006dc4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2288      	movs	r2, #136	; 0x88
 8006dca:	2120      	movs	r1, #32
 8006dcc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	228c      	movs	r2, #140	; 0x8c
 8006dd2:	2120      	movs	r1, #32
 8006dd4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2290      	movs	r2, #144	; 0x90
 8006dda:	2120      	movs	r1, #32
 8006ddc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2284      	movs	r2, #132	; 0x84
 8006de2:	2100      	movs	r1, #0
 8006de4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e010      	b.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	425a      	negs	r2, r3
 8006dfa:	4153      	adcs	r3, r2
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	001a      	movs	r2, r3
 8006e00:	1dfb      	adds	r3, r7, #7
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d100      	bne.n	8006e0a <UART_WaitOnFlagUntilTimeout+0x182>
 8006e08:	e747      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	b014      	add	sp, #80	; 0x50
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	fffffe5f 	.word	0xfffffe5f

08006e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	; 0x38
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e20:	f3ef 8310 	mrs	r3, PRIMASK
 8006e24:	617b      	str	r3, [r7, #20]
  return(result);
 8006e26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f383 8810 	msr	PRIMASK, r3
}
 8006e34:	46c0      	nop			; (mov r8, r8)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4926      	ldr	r1, [pc, #152]	; (8006edc <UART_EndRxTransfer+0xc4>)
 8006e42:	400a      	ands	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f383 8810 	msr	PRIMASK, r3
}
 8006e50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e52:	f3ef 8310 	mrs	r3, PRIMASK
 8006e56:	623b      	str	r3, [r7, #32]
  return(result);
 8006e58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	f383 8810 	msr	PRIMASK, r3
}
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	491b      	ldr	r1, [pc, #108]	; (8006ee0 <UART_EndRxTransfer+0xc8>)
 8006e74:	400a      	ands	r2, r1
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	f383 8810 	msr	PRIMASK, r3
}
 8006e82:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d118      	bne.n	8006ebe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e90:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e96:	2301      	movs	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2110      	movs	r1, #16
 8006eae:	438a      	bics	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f383 8810 	msr	PRIMASK, r3
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	228c      	movs	r2, #140	; 0x8c
 8006ec2:	2120      	movs	r1, #32
 8006ec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	b00e      	add	sp, #56	; 0x38
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	fffffedf 	.word	0xfffffedf
 8006ee0:	effffffe 	.word	0xeffffffe

08006ee4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	225e      	movs	r2, #94	; 0x5e
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2256      	movs	r2, #86	; 0x56
 8006efe:	2100      	movs	r1, #0
 8006f00:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	0018      	movs	r0, r3
 8006f06:	f7ff fc05 	bl	8006714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	b004      	add	sp, #16
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f20:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	2301      	movs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f383 8810 	msr	PRIMASK, r3
}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2140      	movs	r1, #64	; 0x40
 8006f3c:	438a      	bics	r2, r1
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f383 8810 	msr	PRIMASK, r3
}
 8006f4a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2288      	movs	r2, #136	; 0x88
 8006f50:	2120      	movs	r1, #32
 8006f52:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f7fa ff95 	bl	8001e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	46bd      	mov	sp, r7
 8006f66:	b006      	add	sp, #24
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b002      	add	sp, #8
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b082      	sub	sp, #8
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b002      	add	sp, #8
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2284      	movs	r2, #132	; 0x84
 8006fa8:	5c9b      	ldrb	r3, [r3, r2]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e027      	b.n	8007002 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2284      	movs	r2, #132	; 0x84
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2288      	movs	r2, #136	; 0x88
 8006fbe:	2124      	movs	r1, #36	; 0x24
 8006fc0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	438a      	bics	r2, r1
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4a0b      	ldr	r2, [pc, #44]	; (800700c <HAL_UARTEx_DisableFifoMode+0x70>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2288      	movs	r2, #136	; 0x88
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2284      	movs	r2, #132	; 0x84
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	0018      	movs	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	b004      	add	sp, #16
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	dfffffff 	.word	0xdfffffff

08007010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2284      	movs	r2, #132	; 0x84
 800701e:	5c9b      	ldrb	r3, [r3, r2]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007024:	2302      	movs	r3, #2
 8007026:	e02e      	b.n	8007086 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2284      	movs	r2, #132	; 0x84
 800702c:	2101      	movs	r1, #1
 800702e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2288      	movs	r2, #136	; 0x88
 8007034:	2124      	movs	r1, #36	; 0x24
 8007036:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2101      	movs	r1, #1
 800704c:	438a      	bics	r2, r1
 800704e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	08d9      	lsrs	r1, r3, #3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	0018      	movs	r0, r3
 8007068:	f000 f854 	bl	8007114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2288      	movs	r2, #136	; 0x88
 8007078:	2120      	movs	r1, #32
 800707a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2284      	movs	r2, #132	; 0x84
 8007080:	2100      	movs	r1, #0
 8007082:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	0018      	movs	r0, r3
 8007088:	46bd      	mov	sp, r7
 800708a:	b004      	add	sp, #16
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2284      	movs	r2, #132	; 0x84
 800709e:	5c9b      	ldrb	r3, [r3, r2]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e02f      	b.n	8007108 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2284      	movs	r2, #132	; 0x84
 80070ac:	2101      	movs	r1, #1
 80070ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2288      	movs	r2, #136	; 0x88
 80070b4:	2124      	movs	r1, #36	; 0x24
 80070b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2101      	movs	r1, #1
 80070cc:	438a      	bics	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4a0e      	ldr	r2, [pc, #56]	; (8007110 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80070d8:	4013      	ands	r3, r2
 80070da:	0019      	movs	r1, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 f813 	bl	8007114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2288      	movs	r2, #136	; 0x88
 80070fa:	2120      	movs	r1, #32
 80070fc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2284      	movs	r2, #132	; 0x84
 8007102:	2100      	movs	r1, #0
 8007104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	0018      	movs	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	b004      	add	sp, #16
 800710e:	bd80      	pop	{r7, pc}
 8007110:	f1ffffff 	.word	0xf1ffffff

08007114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007120:	2b00      	cmp	r3, #0
 8007122:	d108      	bne.n	8007136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	226a      	movs	r2, #106	; 0x6a
 8007128:	2101      	movs	r1, #1
 800712a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2268      	movs	r2, #104	; 0x68
 8007130:	2101      	movs	r1, #1
 8007132:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007134:	e043      	b.n	80071be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007136:	260f      	movs	r6, #15
 8007138:	19bb      	adds	r3, r7, r6
 800713a:	2208      	movs	r2, #8
 800713c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800713e:	200e      	movs	r0, #14
 8007140:	183b      	adds	r3, r7, r0
 8007142:	2208      	movs	r2, #8
 8007144:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	0e5b      	lsrs	r3, r3, #25
 800714e:	b2da      	uxtb	r2, r3
 8007150:	240d      	movs	r4, #13
 8007152:	193b      	adds	r3, r7, r4
 8007154:	2107      	movs	r1, #7
 8007156:	400a      	ands	r2, r1
 8007158:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	0f5b      	lsrs	r3, r3, #29
 8007162:	b2da      	uxtb	r2, r3
 8007164:	250c      	movs	r5, #12
 8007166:	197b      	adds	r3, r7, r5
 8007168:	2107      	movs	r1, #7
 800716a:	400a      	ands	r2, r1
 800716c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800716e:	183b      	adds	r3, r7, r0
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	197a      	adds	r2, r7, r5
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	4914      	ldr	r1, [pc, #80]	; (80071c8 <UARTEx_SetNbDataToProcess+0xb4>)
 8007178:	5c8a      	ldrb	r2, [r1, r2]
 800717a:	435a      	muls	r2, r3
 800717c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800717e:	197b      	adds	r3, r7, r5
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	4a12      	ldr	r2, [pc, #72]	; (80071cc <UARTEx_SetNbDataToProcess+0xb8>)
 8007184:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007186:	0019      	movs	r1, r3
 8007188:	f7f9 f844 	bl	8000214 <__divsi3>
 800718c:	0003      	movs	r3, r0
 800718e:	b299      	uxth	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	226a      	movs	r2, #106	; 0x6a
 8007194:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007196:	19bb      	adds	r3, r7, r6
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	193a      	adds	r2, r7, r4
 800719c:	7812      	ldrb	r2, [r2, #0]
 800719e:	490a      	ldr	r1, [pc, #40]	; (80071c8 <UARTEx_SetNbDataToProcess+0xb4>)
 80071a0:	5c8a      	ldrb	r2, [r1, r2]
 80071a2:	435a      	muls	r2, r3
 80071a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80071a6:	193b      	adds	r3, r7, r4
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	4a08      	ldr	r2, [pc, #32]	; (80071cc <UARTEx_SetNbDataToProcess+0xb8>)
 80071ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80071ae:	0019      	movs	r1, r3
 80071b0:	f7f9 f830 	bl	8000214 <__divsi3>
 80071b4:	0003      	movs	r3, r0
 80071b6:	b299      	uxth	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2268      	movs	r2, #104	; 0x68
 80071bc:	5299      	strh	r1, [r3, r2]
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b005      	add	sp, #20
 80071c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	0800738c 	.word	0x0800738c
 80071cc:	08007394 	.word	0x08007394

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	2600      	movs	r6, #0
 80071d4:	4d0c      	ldr	r5, [pc, #48]	; (8007208 <__libc_init_array+0x38>)
 80071d6:	4c0d      	ldr	r4, [pc, #52]	; (800720c <__libc_init_array+0x3c>)
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	2600      	movs	r6, #0
 80071e2:	f000 f821 	bl	8007228 <_init>
 80071e6:	4d0a      	ldr	r5, [pc, #40]	; (8007210 <__libc_init_array+0x40>)
 80071e8:	4c0a      	ldr	r4, [pc, #40]	; (8007214 <__libc_init_array+0x44>)
 80071ea:	1b64      	subs	r4, r4, r5
 80071ec:	10a4      	asrs	r4, r4, #2
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	00b3      	lsls	r3, r6, #2
 80071f6:	58eb      	ldr	r3, [r5, r3]
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	00b3      	lsls	r3, r6, #2
 8007200:	58eb      	ldr	r3, [r5, r3]
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	0800739c 	.word	0x0800739c
 800720c:	0800739c 	.word	0x0800739c
 8007210:	0800739c 	.word	0x0800739c
 8007214:	080073a0 	.word	0x080073a0

08007218 <memset>:
 8007218:	0003      	movs	r3, r0
 800721a:	1882      	adds	r2, r0, r2
 800721c:	4293      	cmp	r3, r2
 800721e:	d100      	bne.n	8007222 <memset+0xa>
 8007220:	4770      	bx	lr
 8007222:	7019      	strb	r1, [r3, #0]
 8007224:	3301      	adds	r3, #1
 8007226:	e7f9      	b.n	800721c <memset+0x4>

08007228 <_init>:
 8007228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722e:	bc08      	pop	{r3}
 8007230:	469e      	mov	lr, r3
 8007232:	4770      	bx	lr

08007234 <_fini>:
 8007234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723a:	bc08      	pop	{r3}
 800723c:	469e      	mov	lr, r3
 800723e:	4770      	bx	lr
