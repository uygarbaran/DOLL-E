
AoA_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ecc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800400c  0800400c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08004020  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08004020  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc75  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce4  00000000  00000000  0002bca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014518  00000000  00000000  0002e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afe2  00000000  00000000  00042ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ff48  00000000  00000000  0004deb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cddfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb8  00000000  00000000  000cde4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003f6c 	.word	0x08003f6c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003f6c 	.word	0x08003f6c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t rx[2];
const uint8_t ack = 32; // ack in our case is a space (32)

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
   // do nothing here
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	int16_t angle = ((int16_t *)rx)[0];
 8000404:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_UART_RxCpltCallback+0x5c>)
 8000406:	210e      	movs	r1, #14
 8000408:	187b      	adds	r3, r7, r1
 800040a:	8812      	ldrh	r2, [r2, #0]
 800040c:	801a      	strh	r2, [r3, #0]
//	if (angle >= 90 && angle <= 100)
	if (angle >= 40 && angle <= 50)
 800040e:	000a      	movs	r2, r1
 8000410:	18bb      	adds	r3, r7, r2
 8000412:	2100      	movs	r1, #0
 8000414:	5e5b      	ldrsh	r3, [r3, r1]
 8000416:	2b27      	cmp	r3, #39	; 0x27
 8000418:	dd0c      	ble.n	8000434 <HAL_UART_RxCpltCallback+0x38>
 800041a:	18bb      	adds	r3, r7, r2
 800041c:	2200      	movs	r2, #0
 800041e:	5e9b      	ldrsh	r3, [r3, r2]
 8000420:	2b32      	cmp	r3, #50	; 0x32
 8000422:	dc07      	bgt.n	8000434 <HAL_UART_RxCpltCallback+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000424:	23a0      	movs	r3, #160	; 0xa0
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	2201      	movs	r2, #1
 800042a:	2120      	movs	r1, #32
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f863 	bl	80014f8 <HAL_GPIO_WritePin>
 8000432:	e006      	b.n	8000442 <HAL_UART_RxCpltCallback+0x46>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000434:	23a0      	movs	r3, #160	; 0xa0
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	0018      	movs	r0, r3
 800043e:	f001 f85b 	bl	80014f8 <HAL_GPIO_WritePin>

	// HAL_UART_Transmit_IT(&huart2, rx, 2); // Send it over to monitor (ST-LINK)
//	HAL_UART_Transmit_IT(&huart1, &ack, 1);
//	HAL_UART_Transmit_IT(&huart1, &rx, 1);
	HAL_UART_Receive_IT(&huart1, rx, 2); // UYGAR_LOG: call the interrupt function to keep the interrupt going on call back
 8000442:	4905      	ldr	r1, [pc, #20]	; (8000458 <HAL_UART_RxCpltCallback+0x5c>)
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <HAL_UART_RxCpltCallback+0x60>)
 8000446:	2202      	movs	r2, #2
 8000448:	0018      	movs	r0, r3
 800044a:	f001 ff03 	bl	8002254 <HAL_UART_Receive_IT>
}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000208 	.word	0x20000208
 800045c:	20000028 	.word	0x20000028

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000464:	f000 fb28 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000468:	f000 f814 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046c:	f000 f91c 	bl	80006a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000470:	f000 f8f4 	bl	800065c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000474:	f000 f8a4 	bl	80005c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000478:	f000 f854 	bl	8000524 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rx, 2); // UYGAR_LOG: call the interrupt function
 800047c:	4903      	ldr	r1, [pc, #12]	; (800048c <main+0x2c>)
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <main+0x30>)
 8000480:	2202      	movs	r2, #2
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fee6 	bl	8002254 <HAL_UART_Receive_IT>
//  HAL_ERROR    = 0x01U,
//  HAL_BUSY     = 0x02U,
//  HAL_TIMEOUT  = 0x03U
//  HAL_StatusTypeDef HAL_stat = HAL_ERROR;
//  HAL_StatusTypeDef send_stat = HAL_ERROR;
  while (1)
 8000488:	e7fe      	b.n	8000488 <main+0x28>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	20000208 	.word	0x20000208
 8000490:	20000028 	.word	0x20000028

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b093      	sub	sp, #76	; 0x4c
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	2414      	movs	r4, #20
 800049c:	193b      	adds	r3, r7, r4
 800049e:	0018      	movs	r0, r3
 80004a0:	2334      	movs	r3, #52	; 0x34
 80004a2:	001a      	movs	r2, r3
 80004a4:	2100      	movs	r1, #0
 80004a6:	f003 fd59 	bl	8003f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	0018      	movs	r0, r3
 80004ae:	2310      	movs	r3, #16
 80004b0:	001a      	movs	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	f003 fd52 	bl	8003f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f839 	bl	8001534 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2202      	movs	r2, #2
 80004c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	0052      	lsls	r2, r2, #1
 80004ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2240      	movs	r2, #64	; 0x40
 80004da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 f871 	bl	80015cc <HAL_RCC_OscConfig>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ee:	f000 f92b 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2207      	movs	r2, #7
 80004f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	2100      	movs	r1, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fb6c 	bl	8001bec <HAL_RCC_ClockConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000518:	f000 f916 	bl	8000748 <Error_Handler>
  }
}
 800051c:	46c0      	nop			; (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b013      	add	sp, #76	; 0x4c
 8000522:	bd90      	pop	{r4, r7, pc}

08000524 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 800052a:	4a24      	ldr	r2, [pc, #144]	; (80005bc <MX_USART1_UART_Init+0x98>)
 800052c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000530:	22e1      	movs	r2, #225	; 0xe1
 8000532:	0252      	lsls	r2, r2, #9
 8000534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000536:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800053c:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 800054a:	220c      	movs	r2, #12
 800054c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fe1a 	bl	80021a8 <HAL_UART_Init>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000578:	f000 f8e6 	bl	8000748 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 800057e:	2100      	movs	r1, #0
 8000580:	0018      	movs	r0, r3
 8000582:	f003 fbe7 	bl	8003d54 <HAL_UARTEx_SetTxFifoThreshold>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800058a:	f000 f8dd 	bl	8000748 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 8000590:	2100      	movs	r1, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f003 fc1e 	bl	8003dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800059c:	f000 f8d4 	bl	8000748 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MX_USART1_UART_Init+0x94>)
 80005a2:	0018      	movs	r0, r3
 80005a4:	f003 fb9c 	bl	8003ce0 <HAL_UARTEx_DisableFifoMode>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005ac:	f000 f8cc 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	20000028 	.word	0x20000028
 80005bc:	40013800 	.word	0x40013800

080005c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005c6:	4a24      	ldr	r2, [pc, #144]	; (8000658 <MX_USART2_UART_Init+0x98>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b22      	ldr	r3, [pc, #136]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005cc:	22e1      	movs	r2, #225	; 0xe1
 80005ce:	0252      	lsls	r2, r2, #9
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_USART2_UART_Init+0x94>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_USART2_UART_Init+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_USART2_UART_Init+0x94>)
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fdcc 	bl	80021a8 <HAL_UART_Init>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000614:	f000 f898 	bl	8000748 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART2_UART_Init+0x94>)
 800061a:	2100      	movs	r1, #0
 800061c:	0018      	movs	r0, r3
 800061e:	f003 fb99 	bl	8003d54 <HAL_UARTEx_SetTxFifoThreshold>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000626:	f000 f88f 	bl	8000748 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_USART2_UART_Init+0x94>)
 800062c:	2100      	movs	r1, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f003 fbd0 	bl	8003dd4 <HAL_UARTEx_SetRxFifoThreshold>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000638:	f000 f886 	bl	8000748 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <MX_USART2_UART_Init+0x94>)
 800063e:	0018      	movs	r0, r3
 8000640:	f003 fb4e 	bl	8003ce0 <HAL_UARTEx_DisableFifoMode>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000648:	f000 f87e 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	200000bc 	.word	0x200000bc
 8000658:	40004400 	.word	0x40004400

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_DMA_Init+0x48>)
 8000664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_DMA_Init+0x48>)
 8000668:	2101      	movs	r1, #1
 800066a:	430a      	orrs	r2, r1
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_DMA_Init+0x48>)
 8000670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2009      	movs	r0, #9
 8000680:	f000 fb4c 	bl	8000d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000684:	2009      	movs	r0, #9
 8000686:	f000 fb5e 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	200a      	movs	r0, #10
 8000690:	f000 fb44 	bl	8000d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fb56 	bl	8000d46 <HAL_NVIC_EnableIRQ>

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	40021000 	.word	0x40021000

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	240c      	movs	r4, #12
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	0018      	movs	r0, r3
 80006b4:	2314      	movs	r3, #20
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f003 fc4f 	bl	8003f5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006c4:	2104      	movs	r1, #4
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	2204      	movs	r2, #4
 80006d0:	4013      	ands	r3, r2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006dc:	2120      	movs	r1, #32
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e6:	2220      	movs	r2, #32
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	635a      	str	r2, [r3, #52]	; 0x34
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_GPIO_Init+0x9c>)
 80006fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000706:	23a0      	movs	r3, #160	; 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fef2 	bl	80014f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000714:	0021      	movs	r1, r4
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2220      	movs	r2, #32
 800071a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2201      	movs	r2, #1
 8000720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2202      	movs	r2, #2
 800072c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800072e:	187a      	adds	r2, r7, r1
 8000730:	23a0      	movs	r3, #160	; 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fd7a 	bl	8001230 <HAL_GPIO_Init>

}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b009      	add	sp, #36	; 0x24
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	40021000 	.word	0x40021000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x44>)
 800075c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_MspInit+0x44>)
 8000760:	2101      	movs	r1, #1
 8000762:	430a      	orrs	r2, r1
 8000764:	641a      	str	r2, [r3, #64]	; 0x40
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x44>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	2201      	movs	r2, #1
 800076c:	4013      	ands	r3, r2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_MspInit+0x44>)
 8000774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_MspInit+0x44>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0549      	lsls	r1, r1, #21
 800077c:	430a      	orrs	r2, r1
 800077e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_MspInit+0x44>)
 8000782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	055b      	lsls	r3, r3, #21
 8000788:	4013      	ands	r3, r2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b093      	sub	sp, #76	; 0x4c
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	2334      	movs	r3, #52	; 0x34
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f003 fbd4 	bl	8003f5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b4:	2418      	movs	r4, #24
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	0018      	movs	r0, r3
 80007ba:	231c      	movs	r3, #28
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f003 fbcc 	bl	8003f5c <memset>
  if(huart->Instance==USART1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a77      	ldr	r2, [pc, #476]	; (80009a8 <HAL_UART_MspInit+0x20c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d170      	bne.n	80008b0 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fbaf 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007e6:	f7ff ffaf 	bl	8000748 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ea:	4b70      	ldr	r3, [pc, #448]	; (80009ac <HAL_UART_MspInit+0x210>)
 80007ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ee:	4b6f      	ldr	r3, [pc, #444]	; (80009ac <HAL_UART_MspInit+0x210>)
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	01c9      	lsls	r1, r1, #7
 80007f4:	430a      	orrs	r2, r1
 80007f6:	641a      	str	r2, [r3, #64]	; 0x40
 80007f8:	4b6c      	ldr	r3, [pc, #432]	; (80009ac <HAL_UART_MspInit+0x210>)
 80007fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	01db      	lsls	r3, r3, #7
 8000800:	4013      	ands	r3, r2
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b69      	ldr	r3, [pc, #420]	; (80009ac <HAL_UART_MspInit+0x210>)
 8000808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080a:	4b68      	ldr	r3, [pc, #416]	; (80009ac <HAL_UART_MspInit+0x210>)
 800080c:	2104      	movs	r1, #4
 800080e:	430a      	orrs	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
 8000812:	4b66      	ldr	r3, [pc, #408]	; (80009ac <HAL_UART_MspInit+0x210>)
 8000814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000816:	2204      	movs	r2, #4
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800081e:	2134      	movs	r1, #52	; 0x34
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2202      	movs	r2, #2
 800082a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2201      	movs	r2, #1
 800083c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	4a5b      	ldr	r2, [pc, #364]	; (80009b0 <HAL_UART_MspInit+0x214>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 fcf3 	bl	8001230 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <HAL_UART_MspInit+0x218>)
 800084c:	4a5a      	ldr	r2, [pc, #360]	; (80009b8 <HAL_UART_MspInit+0x21c>)
 800084e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000850:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000852:	2232      	movs	r2, #50	; 0x32
 8000854:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000856:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800085c:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <HAL_UART_MspInit+0x218>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000862:	4b54      	ldr	r3, [pc, #336]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000868:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <HAL_UART_MspInit+0x218>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086e:	4b51      	ldr	r3, [pc, #324]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000874:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <HAL_UART_MspInit+0x218>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000880:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fa7c 	bl	8000d80 <HAL_DMA_Init>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 800088c:	f7ff ff5c 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4a47      	ldr	r2, [pc, #284]	; (80009b4 <HAL_UART_MspInit+0x218>)
 8000896:	505a      	str	r2, [r3, r1]
 8000898:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <HAL_UART_MspInit+0x218>)
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	201b      	movs	r0, #27
 80008a4:	f000 fa3a 	bl	8000d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a8:	201b      	movs	r0, #27
 80008aa:	f000 fa4c 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ae:	e076      	b.n	800099e <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a41      	ldr	r2, [pc, #260]	; (80009bc <HAL_UART_MspInit+0x220>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d171      	bne.n	800099e <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008ba:	2118      	movs	r1, #24
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2202      	movs	r2, #2
 80008c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fb38 	bl	8001f40 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 80008d4:	f7ff ff38 	bl	8000748 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d8:	4b34      	ldr	r3, [pc, #208]	; (80009ac <HAL_UART_MspInit+0x210>)
 80008da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <HAL_UART_MspInit+0x210>)
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	0289      	lsls	r1, r1, #10
 80008e2:	430a      	orrs	r2, r1
 80008e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <HAL_UART_MspInit+0x210>)
 80008e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	029b      	lsls	r3, r3, #10
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <HAL_UART_MspInit+0x210>)
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <HAL_UART_MspInit+0x210>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	430a      	orrs	r2, r1
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <HAL_UART_MspInit+0x210>)
 8000902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000904:	2201      	movs	r2, #1
 8000906:	4013      	ands	r3, r2
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800090c:	2134      	movs	r1, #52	; 0x34
 800090e:	187b      	adds	r3, r7, r1
 8000910:	220c      	movs	r2, #12
 8000912:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2202      	movs	r2, #2
 8000918:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2201      	movs	r2, #1
 800091e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2201      	movs	r2, #1
 800092a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	187a      	adds	r2, r7, r1
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fc7b 	bl	8001230 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_UART_MspInit+0x224>)
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <HAL_UART_MspInit+0x228>)
 800093e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000942:	2234      	movs	r2, #52	; 0x34
 8000944:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_UART_MspInit+0x224>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0x224>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_UART_MspInit+0x224>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fa04 	bl	8000d80 <HAL_DMA_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 800097c:	f7ff fee4 	bl	8000748 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2180      	movs	r1, #128	; 0x80
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_UART_MspInit+0x224>)
 8000986:	505a      	str	r2, [r3, r1]
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_UART_MspInit+0x224>)
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	201c      	movs	r0, #28
 8000994:	f000 f9c2 	bl	8000d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000998:	201c      	movs	r0, #28
 800099a:	f000 f9d4 	bl	8000d46 <HAL_NVIC_EnableIRQ>
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b013      	add	sp, #76	; 0x4c
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40013800 	.word	0x40013800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	50000800 	.word	0x50000800
 80009b4:	20000150 	.word	0x20000150
 80009b8:	4002001c 	.word	0x4002001c
 80009bc:	40004400 	.word	0x40004400
 80009c0:	200001ac 	.word	0x200001ac
 80009c4:	40020008 	.word	0x40020008

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f8ce 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <DMA1_Channel1_IRQHandler+0x14>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fb14 	bl	800102c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	200001ac 	.word	0x200001ac

08000a10 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fb08 	bl	800102c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000150 	.word	0x20000150

08000a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <USART1_IRQHandler+0x14>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 fc68 	bl	8002304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	20000028 	.word	0x20000028

08000a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <USART2_IRQHandler+0x14>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fc5c 	bl	8002304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	200000bc 	.word	0x200000bc

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a68:	f7ff fff6 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopForever+0xe>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopForever+0x16>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a92:	f003 fa3f 	bl	8003f14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a96:	f7ff fce3 	bl	8000460 <main>

08000a9a <LoopForever>:

LoopForever:
  b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa8:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 8000aac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab0:	20000210 	.word	0x20000210

08000ab4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x3c>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Init+0x3c>)
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	0049      	lsls	r1, r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 f810 	bl	8000af8 <HAL_InitTick>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e001      	b.n	8000ae8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ae4:	f7ff fe36 	bl	8000754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	b002      	add	sp, #8
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <HAL_InitTick+0x88>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d02b      	beq.n	8000b68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0x8c>)
 8000b12:	681c      	ldr	r4, [r3, #0]
 8000b14:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <HAL_InitTick+0x88>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	0019      	movs	r1, r3
 8000b1a:	23fa      	movs	r3, #250	; 0xfa
 8000b1c:	0098      	lsls	r0, r3, #2
 8000b1e:	f7ff faef 	bl	8000100 <__udivsi3>
 8000b22:	0003      	movs	r3, r0
 8000b24:	0019      	movs	r1, r3
 8000b26:	0020      	movs	r0, r4
 8000b28:	f7ff faea 	bl	8000100 <__udivsi3>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 f919 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d112      	bne.n	8000b5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d80a      	bhi.n	8000b54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f8e8 	bl	8000d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_InitTick+0x90>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e00d      	b.n	8000b70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e008      	b.n	8000b70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e003      	b.n	8000b70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	781b      	ldrb	r3, [r3, #0]
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b005      	add	sp, #20
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	001a      	movs	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	18d2      	adds	r2, r2, r3
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	2000020c 	.word	0x2000020c

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	2000020c 	.word	0x2000020c

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd6:	d809      	bhi.n	8000bec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	001a      	movs	r2, r3
 8000bde:	231f      	movs	r3, #31
 8000be0:	401a      	ands	r2, r3
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_EnableIRQ+0x30>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	4091      	lsls	r1, r2
 8000be8:	000a      	movs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	0002      	movs	r2, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8000c0c:	d828      	bhi.n	8000c60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <__NVIC_SetPriority+0xd4>)
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	33c0      	adds	r3, #192	; 0xc0
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	589b      	ldr	r3, [r3, r2]
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	400a      	ands	r2, r1
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	21ff      	movs	r1, #255	; 0xff
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	401a      	ands	r2, r3
 8000c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	22ff      	movs	r2, #255	; 0xff
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	2303      	movs	r3, #3
 8000c46:	4003      	ands	r3, r0
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	481f      	ldr	r0, [pc, #124]	; (8000ccc <__NVIC_SetPriority+0xd4>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	430a      	orrs	r2, r1
 8000c58:	33c0      	adds	r3, #192	; 0xc0
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c5e:	e031      	b.n	8000cc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <__NVIC_SetPriority+0xd8>)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0019      	movs	r1, r3
 8000c68:	230f      	movs	r3, #15
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	3b08      	subs	r3, #8
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3306      	adds	r3, #6
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	3304      	adds	r3, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	1dfa      	adds	r2, r7, #7
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	0011      	movs	r1, r2
 8000c80:	2203      	movs	r2, #3
 8000c82:	400a      	ands	r2, r1
 8000c84:	00d2      	lsls	r2, r2, #3
 8000c86:	21ff      	movs	r1, #255	; 0xff
 8000c88:	4091      	lsls	r1, r2
 8000c8a:	000a      	movs	r2, r1
 8000c8c:	43d2      	mvns	r2, r2
 8000c8e:	401a      	ands	r2, r3
 8000c90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	22ff      	movs	r2, #255	; 0xff
 8000c98:	401a      	ands	r2, r3
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	4003      	ands	r3, r0
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <__NVIC_SetPriority+0xd8>)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	001c      	movs	r4, r3
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	4023      	ands	r3, r4
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	3306      	adds	r3, #6
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	18c3      	adds	r3, r0, r3
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b003      	add	sp, #12
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	045b      	lsls	r3, r3, #17
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d301      	bcc.n	8000cec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e010      	b.n	8000d0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <SysTick_Config+0x44>)
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	425b      	negs	r3, r3
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff ff7c 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x44>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x44>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	210f      	movs	r1, #15
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	1c02      	adds	r2, r0, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b004      	add	sp, #16
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ff33 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ffaf 	bl	8000cd4 <SysTick_Config>
 8000d76:	0003      	movs	r3, r0
}
 8000d78:	0018      	movs	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e077      	b.n	8000e82 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <HAL_DMA_Init+0x10c>)
 8000d98:	4694      	mov	ip, r2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	2114      	movs	r1, #20
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff f9ae 	bl	8000100 <__udivsi3>
 8000da4:	0003      	movs	r3, r0
 8000da6:	009a      	lsls	r2, r3, #2
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2225      	movs	r2, #37	; 0x25
 8000db0:	2102      	movs	r1, #2
 8000db2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4934      	ldr	r1, [pc, #208]	; (8000e90 <HAL_DMA_Init+0x110>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	431a      	orrs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 f9c7 	bl	8001190 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	01db      	lsls	r3, r3, #7
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d102      	bne.n	8000e14 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1c:	213f      	movs	r1, #63	; 0x3f
 8000e1e:	400a      	ands	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000e2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d011      	beq.n	8000e58 <HAL_DMA_Init+0xd8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d80d      	bhi.n	8000e58 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 f9d2 	bl	80011e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	e008      	b.n	8000e6a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2225      	movs	r2, #37	; 0x25
 8000e74:	2101      	movs	r1, #1
 8000e76:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2224      	movs	r2, #36	; 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	bffdfff8 	.word	0xbffdfff8
 8000e90:	ffff800f 	.word	0xffff800f

08000e94 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d101      	bne.n	8000ea6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e050      	b.n	8000f48 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2225      	movs	r2, #37	; 0x25
 8000eaa:	5c9b      	ldrb	r3, [r3, r2]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d008      	beq.n	8000ec4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2224      	movs	r2, #36	; 0x24
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e041      	b.n	8000f48 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	210e      	movs	r1, #14
 8000ed0:	438a      	bics	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	491c      	ldr	r1, [pc, #112]	; (8000f50 <HAL_DMA_Abort+0xbc>)
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2101      	movs	r1, #1
 8000ef0:	438a      	bics	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_DMA_Abort+0xc0>)
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	221c      	movs	r2, #28
 8000efe:	4013      	ands	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	409a      	lsls	r2, r3
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_DMA_Abort+0xc0>)
 8000f06:	430a      	orrs	r2, r1
 8000f08:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <HAL_DMA_Abort+0xbc>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2225      	movs	r2, #37	; 0x25
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2224      	movs	r2, #36	; 0x24
 8000f42:	2100      	movs	r1, #0
 8000f44:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	fffffeff 	.word	0xfffffeff
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f60:	210f      	movs	r1, #15
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2225      	movs	r2, #37	; 0x25
 8000f6c:	5c9b      	ldrb	r3, [r3, r2]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d006      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2204      	movs	r2, #4
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e049      	b.n	8001016 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	210e      	movs	r1, #14
 8000f8e:	438a      	bics	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	438a      	bics	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	491d      	ldr	r1, [pc, #116]	; (8001024 <HAL_DMA_Abort_IT+0xcc>)
 8000fae:	400a      	ands	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_DMA_Abort_IT+0xd0>)
 8000fb4:	6859      	ldr	r1, [r3, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	221c      	movs	r2, #28
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_DMA_Abort_IT+0xd0>)
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000fd0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00c      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fe4:	490f      	ldr	r1, [pc, #60]	; (8001024 <HAL_DMA_Abort_IT+0xcc>)
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ff2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2225      	movs	r2, #37	; 0x25
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001008:	2b00      	cmp	r3, #0
 800100a:	d004      	beq.n	8001016 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	0010      	movs	r0, r2
 8001014:	4798      	blx	r3
    }
  }
  return status;
 8001016:	230f      	movs	r3, #15
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b004      	add	sp, #16
 8001022:	bd80      	pop	{r7, pc}
 8001024:	fffffeff 	.word	0xfffffeff
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001034:	4b55      	ldr	r3, [pc, #340]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	221c      	movs	r2, #28
 8001048:	4013      	ands	r3, r2
 800104a:	2204      	movs	r2, #4
 800104c:	409a      	lsls	r2, r3
 800104e:	0013      	movs	r3, r2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4013      	ands	r3, r2
 8001054:	d027      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x7a>
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2204      	movs	r2, #4
 800105a:	4013      	ands	r3, r2
 800105c:	d023      	beq.n	80010a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2220      	movs	r2, #32
 8001066:	4013      	ands	r3, r2
 8001068:	d107      	bne.n	800107a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2104      	movs	r1, #4
 8001076:	438a      	bics	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 800107c:	6859      	ldr	r1, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	221c      	movs	r2, #28
 8001084:	4013      	ands	r3, r2
 8001086:	2204      	movs	r2, #4
 8001088:	409a      	lsls	r2, r3
 800108a:	4b40      	ldr	r3, [pc, #256]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 800108c:	430a      	orrs	r2, r1
 800108e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	2b00      	cmp	r3, #0
 8001096:	d100      	bne.n	800109a <HAL_DMA_IRQHandler+0x6e>
 8001098:	e073      	b.n	8001182 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	0010      	movs	r0, r2
 80010a2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80010a4:	e06d      	b.n	8001182 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	221c      	movs	r2, #28
 80010ac:	4013      	ands	r3, r2
 80010ae:	2202      	movs	r2, #2
 80010b0:	409a      	lsls	r2, r3
 80010b2:	0013      	movs	r3, r2
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	4013      	ands	r3, r2
 80010b8:	d02e      	beq.n	8001118 <HAL_DMA_IRQHandler+0xec>
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	2202      	movs	r2, #2
 80010be:	4013      	ands	r3, r2
 80010c0:	d02a      	beq.n	8001118 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2220      	movs	r2, #32
 80010ca:	4013      	ands	r3, r2
 80010cc:	d10b      	bne.n	80010e6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	210a      	movs	r1, #10
 80010da:	438a      	bics	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2225      	movs	r2, #37	; 0x25
 80010e2:	2101      	movs	r1, #1
 80010e4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 80010e8:	6859      	ldr	r1, [r3, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	221c      	movs	r2, #28
 80010f0:	4013      	ands	r3, r2
 80010f2:	2202      	movs	r2, #2
 80010f4:	409a      	lsls	r2, r3
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 80010f8:	430a      	orrs	r2, r1
 80010fa:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	2b00      	cmp	r3, #0
 800110a:	d03a      	beq.n	8001182 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	0010      	movs	r0, r2
 8001114:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001116:	e034      	b.n	8001182 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	221c      	movs	r2, #28
 800111e:	4013      	ands	r3, r2
 8001120:	2208      	movs	r2, #8
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4013      	ands	r3, r2
 800112a:	d02b      	beq.n	8001184 <HAL_DMA_IRQHandler+0x158>
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	2208      	movs	r2, #8
 8001130:	4013      	ands	r3, r2
 8001132:	d027      	beq.n	8001184 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	210e      	movs	r1, #14
 8001140:	438a      	bics	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	221c      	movs	r2, #28
 800114e:	4013      	ands	r3, r2
 8001150:	2201      	movs	r2, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_DMA_IRQHandler+0x160>)
 8001156:	430a      	orrs	r2, r1
 8001158:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2225      	movs	r2, #37	; 0x25
 8001164:	2101      	movs	r1, #1
 8001166:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2224      	movs	r2, #36	; 0x24
 800116c:	2100      	movs	r1, #0
 800116e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	0010      	movs	r0, r2
 8001180:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46c0      	nop			; (mov r8, r8)
}
 8001186:	46bd      	mov	sp, r7
 8001188:	b004      	add	sp, #16
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020000 	.word	0x40020000

08001190 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80011a0:	4694      	mov	ip, r2
 80011a2:	4463      	add	r3, ip
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	001a      	movs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	001a      	movs	r2, r3
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	4013      	ands	r3, r2
 80011b6:	3b08      	subs	r3, #8
 80011b8:	2114      	movs	r1, #20
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7fe ffa0 	bl	8000100 <__udivsi3>
 80011c0:	0003      	movs	r3, r0
 80011c2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80011c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	221f      	movs	r2, #31
 80011ce:	4013      	ands	r3, r2
 80011d0:	2201      	movs	r2, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	10008200 	.word	0x10008200
 80011e4:	40020880 	.word	0x40020880

080011e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	223f      	movs	r2, #63	; 0x3f
 80011f6:	4013      	ands	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80011fe:	4694      	mov	ip, r2
 8001200:	4463      	add	r3, ip
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	001a      	movs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800120e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3b01      	subs	r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2201      	movs	r2, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bd80      	pop	{r7, pc}
 8001228:	1000823f 	.word	0x1000823f
 800122c:	40020940 	.word	0x40020940

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123e:	e147      	b.n	80014d0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2101      	movs	r1, #1
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_GPIO_Init+0x28>
 8001256:	e138      	b.n	80014ca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2203      	movs	r2, #3
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d005      	beq.n	8001270 <HAL_GPIO_Init+0x40>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	409a      	lsls	r2, r3
 8001292:	0013      	movs	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a6:	2201      	movs	r2, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	2201      	movs	r2, #1
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2203      	movs	r2, #3
 80012d8:	4013      	ands	r3, r2
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d017      	beq.n	800130e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	409a      	lsls	r2, r3
 80012ec:	0013      	movs	r3, r2
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	4013      	ands	r3, r2
 8001316:	2b02      	cmp	r3, #2
 8001318:	d123      	bne.n	8001362 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	58d3      	ldr	r3, [r2, r3]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2207      	movs	r2, #7
 800132c:	4013      	ands	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	691a      	ldr	r2, [r3, #16]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2107      	movs	r1, #7
 8001346:	400b      	ands	r3, r1
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	2203      	movs	r2, #3
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	401a      	ands	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	23c0      	movs	r3, #192	; 0xc0
 800139c:	029b      	lsls	r3, r3, #10
 800139e:	4013      	ands	r3, r2
 80013a0:	d100      	bne.n	80013a4 <HAL_GPIO_Init+0x174>
 80013a2:	e092      	b.n	80014ca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3318      	adds	r3, #24
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	589b      	ldr	r3, [r3, r2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2203      	movs	r2, #3
 80013b6:	4013      	ands	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	220f      	movs	r2, #15
 80013bc:	409a      	lsls	r2, r3
 80013be:	0013      	movs	r3, r2
 80013c0:	43da      	mvns	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	23a0      	movs	r3, #160	; 0xa0
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x1ca>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a45      	ldr	r2, [pc, #276]	; (80014ec <HAL_GPIO_Init+0x2bc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x1c6>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <HAL_GPIO_Init+0x2c0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x1c2>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a43      	ldr	r2, [pc, #268]	; (80014f4 <HAL_GPIO_Init+0x2c4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x1be>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x1cc>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x1cc>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x1cc>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x1cc>
 80013fa:	2300      	movs	r3, #0
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	2103      	movs	r1, #3
 8001400:	400a      	ands	r2, r1
 8001402:	00d2      	lsls	r2, r2, #3
 8001404:	4093      	lsls	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800140c:	4936      	ldr	r1, [pc, #216]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3318      	adds	r3, #24
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43da      	mvns	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	035b      	lsls	r3, r3, #13
 8001432:	4013      	ands	r3, r2
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001444:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43da      	mvns	r2, r3
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	039b      	lsls	r3, r3, #14
 800145c:	4013      	ands	r3, r2
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800146e:	4a1e      	ldr	r2, [pc, #120]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 8001470:	2384      	movs	r3, #132	; 0x84
 8001472:	58d3      	ldr	r3, [r2, r3]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001494:	4914      	ldr	r1, [pc, #80]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 8001496:	2284      	movs	r2, #132	; 0x84
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800149c:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	58d3      	ldr	r3, [r2, r3]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4013      	ands	r3, r2
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c2:	4909      	ldr	r1, [pc, #36]	; (80014e8 <HAL_GPIO_Init+0x2b8>)
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	40da      	lsrs	r2, r3
 80014d8:	1e13      	subs	r3, r2, #0
 80014da:	d000      	beq.n	80014de <HAL_GPIO_Init+0x2ae>
 80014dc:	e6b0      	b.n	8001240 <HAL_GPIO_Init+0x10>
  }
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b006      	add	sp, #24
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021800 	.word	0x40021800
 80014ec:	50000400 	.word	0x50000400
 80014f0:	50000800 	.word	0x50000800
 80014f4:	50000c00 	.word	0x50000c00

080014f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	0008      	movs	r0, r1
 8001502:	0011      	movs	r1, r2
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	1c02      	adds	r2, r0, #0
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	1c7b      	adds	r3, r7, #1
 800150c:	1c0a      	adds	r2, r1, #0
 800150e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001510:	1c7b      	adds	r3, r7, #1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001518:	1cbb      	adds	r3, r7, #2
 800151a:	881a      	ldrh	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001522:	1cbb      	adds	r3, r7, #2
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a19      	ldr	r2, [pc, #100]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d11f      	bne.n	8001598 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	0013      	movs	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	189b      	adds	r3, r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4912      	ldr	r1, [pc, #72]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe fdca 	bl	8000100 <__udivsi3>
 800156c:	0003      	movs	r3, r0
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001572:	e008      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3b01      	subs	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e001      	b.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e009      	b.n	800159a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	401a      	ands	r2, r3
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	429a      	cmp	r2, r3
 8001596:	d0ed      	beq.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40007000 	.word	0x40007000
 80015a8:	fffff9ff 	.word	0xfffff9ff
 80015ac:	20000000 	.word	0x20000000
 80015b0:	000f4240 	.word	0x000f4240

080015b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	23e0      	movs	r3, #224	; 0xe0
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	4013      	ands	r3, r2
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000

080015cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e2f3      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x1e>
 80015e8:	e07c      	b.n	80016e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ea:	4bc3      	ldr	r3, [pc, #780]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2238      	movs	r2, #56	; 0x38
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f4:	4bc0      	ldr	r3, [pc, #768]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2203      	movs	r2, #3
 80015fa:	4013      	ands	r3, r2
 80015fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b10      	cmp	r3, #16
 8001602:	d102      	bne.n	800160a <HAL_RCC_OscConfig+0x3e>
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d002      	beq.n	8001610 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b08      	cmp	r3, #8
 800160e:	d10b      	bne.n	8001628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	4bb9      	ldr	r3, [pc, #740]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	029b      	lsls	r3, r3, #10
 8001618:	4013      	ands	r3, r2
 800161a:	d062      	beq.n	80016e2 <HAL_RCC_OscConfig+0x116>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d15e      	bne.n	80016e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e2ce      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	429a      	cmp	r2, r3
 8001632:	d107      	bne.n	8001644 <HAL_RCC_OscConfig+0x78>
 8001634:	4bb0      	ldr	r3, [pc, #704]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4baf      	ldr	r3, [pc, #700]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800163a:	2180      	movs	r1, #128	; 0x80
 800163c:	0249      	lsls	r1, r1, #9
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e020      	b.n	8001686 <HAL_RCC_OscConfig+0xba>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	02db      	lsls	r3, r3, #11
 800164c:	429a      	cmp	r2, r3
 800164e:	d10e      	bne.n	800166e <HAL_RCC_OscConfig+0xa2>
 8001650:	4ba9      	ldr	r3, [pc, #676]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4ba8      	ldr	r3, [pc, #672]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	02c9      	lsls	r1, r1, #11
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	4ba6      	ldr	r3, [pc, #664]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4ba5      	ldr	r3, [pc, #660]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0249      	lsls	r1, r1, #9
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0xba>
 800166e:	4ba2      	ldr	r3, [pc, #648]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4ba1      	ldr	r3, [pc, #644]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001674:	49a1      	ldr	r1, [pc, #644]	; (80018fc <HAL_RCC_OscConfig+0x330>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	4b9f      	ldr	r3, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	4b9e      	ldr	r3, [pc, #632]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001680:	499f      	ldr	r1, [pc, #636]	; (8001900 <HAL_RCC_OscConfig+0x334>)
 8001682:	400a      	ands	r2, r1
 8001684:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d014      	beq.n	80016b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fa8f 	bl	8000bb0 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fa8a 	bl	8000bb0 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e28d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	4b93      	ldr	r3, [pc, #588]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	029b      	lsls	r3, r3, #10
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0xcc>
 80016b6:	e015      	b.n	80016e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fa7a 	bl	8000bb0 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c2:	f7ff fa75 	bl	8000bb0 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e278      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d4:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	4013      	ands	r3, r2
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0xf6>
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d100      	bne.n	80016f0 <HAL_RCC_OscConfig+0x124>
 80016ee:	e099      	b.n	8001824 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2238      	movs	r2, #56	; 0x38
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016fa:	4b7f      	ldr	r3, [pc, #508]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2203      	movs	r2, #3
 8001700:	4013      	ands	r3, r2
 8001702:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b10      	cmp	r3, #16
 8001708:	d102      	bne.n	8001710 <HAL_RCC_OscConfig+0x144>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d002      	beq.n	8001716 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d135      	bne.n	8001782 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001716:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4013      	ands	r3, r2
 8001720:	d005      	beq.n	800172e <HAL_RCC_OscConfig+0x162>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e24b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172e:	4b72      	ldr	r3, [pc, #456]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a74      	ldr	r2, [pc, #464]	; (8001904 <HAL_RCC_OscConfig+0x338>)
 8001734:	4013      	ands	r3, r2
 8001736:	0019      	movs	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	021a      	lsls	r2, r3, #8
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d112      	bne.n	8001770 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800174a:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 8001750:	4013      	ands	r3, r2
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800175e:	4b66      	ldr	r3, [pc, #408]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0adb      	lsrs	r3, r3, #11
 8001764:	2207      	movs	r2, #7
 8001766:	4013      	ands	r3, r2
 8001768:	4a68      	ldr	r2, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x340>)
 800176a:	40da      	lsrs	r2, r3
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_OscConfig+0x344>)
 800176e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x348>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff f9bf 	bl	8000af8 <HAL_InitTick>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d051      	beq.n	8001822 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e221      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d030      	beq.n	80017ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a5e      	ldr	r2, [pc, #376]	; (8001908 <HAL_RCC_OscConfig+0x33c>)
 8001790:	4013      	ands	r3, r2
 8001792:	0019      	movs	r1, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	0049      	lsls	r1, r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff fa00 	bl	8000bb0 <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff f9fb 	bl	8000bb0 <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1fe      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4013      	ands	r3, r2
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_RCC_OscConfig+0x338>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	021a      	lsls	r2, r3, #8
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e01b      	b.n	8001824 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017ec:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80017f2:	4949      	ldr	r1, [pc, #292]	; (8001918 <HAL_RCC_OscConfig+0x34c>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f9da 	bl	8000bb0 <HAL_GetTick>
 80017fc:	0003      	movs	r3, r0
 80017fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff f9d5 	bl	8000bb0 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1d8      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4013      	ands	r3, r2
 800181e:	d1f0      	bne.n	8001802 <HAL_RCC_OscConfig+0x236>
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001822:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2208      	movs	r2, #8
 800182a:	4013      	ands	r3, r2
 800182c:	d047      	beq.n	80018be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2238      	movs	r2, #56	; 0x38
 8001834:	4013      	ands	r3, r2
 8001836:	2b18      	cmp	r3, #24
 8001838:	d10a      	bne.n	8001850 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x2f2>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d138      	bne.n	80018be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e1ba      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d019      	beq.n	800188c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800185a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800185e:	2101      	movs	r1, #1
 8001860:	430a      	orrs	r2, r1
 8001862:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff f9a4 	bl	8000bb0 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff f99f 	bl	8000bb0 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1a2      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	2202      	movs	r2, #2
 8001886:	4013      	ands	r3, r2
 8001888:	d0f1      	beq.n	800186e <HAL_RCC_OscConfig+0x2a2>
 800188a:	e018      	b.n	80018be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 800188e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 8001892:	2101      	movs	r1, #1
 8001894:	438a      	bics	r2, r1
 8001896:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f98a 	bl	8000bb0 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff f985 	bl	8000bb0 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e188      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f1      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	d100      	bne.n	80018ca <HAL_RCC_OscConfig+0x2fe>
 80018c8:	e0c6      	b.n	8001a58 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ca:	231f      	movs	r3, #31
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2238      	movs	r2, #56	; 0x38
 80018d8:	4013      	ands	r3, r2
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d11e      	bne.n	800191c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_OscConfig+0x32c>)
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	2202      	movs	r2, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x31e>
 80018e8:	e0b6      	b.n	8001a58 <HAL_RCC_OscConfig+0x48c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d000      	beq.n	80018f4 <HAL_RCC_OscConfig+0x328>
 80018f2:	e0b1      	b.n	8001a58 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e166      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
 80018f8:	40021000 	.word	0x40021000
 80018fc:	fffeffff 	.word	0xfffeffff
 8001900:	fffbffff 	.word	0xfffbffff
 8001904:	ffff80ff 	.word	0xffff80ff
 8001908:	ffffc7ff 	.word	0xffffc7ff
 800190c:	00f42400 	.word	0x00f42400
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
 8001918:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800191c:	4bac      	ldr	r3, [pc, #688]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 800191e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	4013      	ands	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x360>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x362>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d011      	beq.n	8001956 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4ba7      	ldr	r3, [pc, #668]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001936:	4ba6      	ldr	r3, [pc, #664]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001938:	2180      	movs	r1, #128	; 0x80
 800193a:	0549      	lsls	r1, r1, #21
 800193c:	430a      	orrs	r2, r1
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001940:	4ba3      	ldr	r3, [pc, #652]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800194e:	231f      	movs	r3, #31
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001956:	4b9f      	ldr	r3, [pc, #636]	; (8001bd4 <HAL_RCC_OscConfig+0x608>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001962:	4b9c      	ldr	r3, [pc, #624]	; (8001bd4 <HAL_RCC_OscConfig+0x608>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b9b      	ldr	r3, [pc, #620]	; (8001bd4 <HAL_RCC_OscConfig+0x608>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0049      	lsls	r1, r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001970:	f7ff f91e 	bl	8000bb0 <HAL_GetTick>
 8001974:	0003      	movs	r3, r0
 8001976:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197a:	f7ff f919 	bl	8000bb0 <HAL_GetTick>
 800197e:	0002      	movs	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e11c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198c:	4b91      	ldr	r3, [pc, #580]	; (8001bd4 <HAL_RCC_OscConfig+0x608>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d106      	bne.n	80019ae <HAL_RCC_OscConfig+0x3e2>
 80019a0:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019a4:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ac:	e01c      	b.n	80019e8 <HAL_RCC_OscConfig+0x41c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x404>
 80019b6:	4b86      	ldr	r3, [pc, #536]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ba:	4b85      	ldr	r3, [pc, #532]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019bc:	2104      	movs	r1, #4
 80019be:	430a      	orrs	r2, r1
 80019c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019c2:	4b83      	ldr	r3, [pc, #524]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	430a      	orrs	r2, r1
 80019cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0x41c>
 80019d0:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
 80019dc:	4b7c      	ldr	r3, [pc, #496]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e0:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 80019e2:	2104      	movs	r1, #4
 80019e4:	438a      	bics	r2, r1
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d014      	beq.n	8001a1a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f8de 	bl	8000bb0 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff f8d9 	bl	8000bb0 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a74      	ldr	r2, [pc, #464]	; (8001bd8 <HAL_RCC_OscConfig+0x60c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e0db      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	2202      	movs	r2, #2
 8001a14:	4013      	ands	r3, r2
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x42e>
 8001a18:	e013      	b.n	8001a42 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff f8c9 	bl	8000bb0 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a22:	e009      	b.n	8001a38 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a24:	f7ff f8c4 	bl	8000bb0 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a6a      	ldr	r2, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x60c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0c6      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a38:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a42:	231f      	movs	r3, #31
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a50:	4b5f      	ldr	r3, [pc, #380]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a52:	4962      	ldr	r1, [pc, #392]	; (8001bdc <HAL_RCC_OscConfig+0x610>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d100      	bne.n	8001a62 <HAL_RCC_OscConfig+0x496>
 8001a60:	e0b0      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2238      	movs	r2, #56	; 0x38
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b10      	cmp	r3, #16
 8001a6c:	d100      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4a4>
 8001a6e:	e078      	b.n	8001b62 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d153      	bne.n	8001b20 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b54      	ldr	r3, [pc, #336]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001a7e:	4958      	ldr	r1, [pc, #352]	; (8001be0 <HAL_RCC_OscConfig+0x614>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f894 	bl	8000bb0 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f88f 	bl	8000bb0 <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e092      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	049b      	lsls	r3, r3, #18
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_RCC_OscConfig+0x618>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001ae0:	2180      	movs	r1, #128	; 0x80
 8001ae2:	0449      	lsls	r1, r1, #17
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ae8:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	4b38      	ldr	r3, [pc, #224]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0549      	lsls	r1, r1, #21
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f85b 	bl	8000bb0 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f856 	bl	8000bb0 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e059      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x534>
 8001b1e:	e051      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b26:	492e      	ldr	r1, [pc, #184]	; (8001be0 <HAL_RCC_OscConfig+0x614>)
 8001b28:	400a      	ands	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f840 	bl	8000bb0 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f83b 	bl	8000bb0 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e03e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	049b      	lsls	r3, r3, #18
 8001b50:	4013      	ands	r3, r2
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b54:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b5a:	4923      	ldr	r1, [pc, #140]	; (8001be8 <HAL_RCC_OscConfig+0x61c>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	e030      	b.n	8001bc4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e02b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_RCC_OscConfig+0x604>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2203      	movs	r2, #3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d11e      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2270      	movs	r2, #112	; 0x70
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d117      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	23fe      	movs	r3, #254	; 0xfe
 8001b94:	01db      	lsls	r3, r3, #7
 8001b96:	401a      	ands	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	23f8      	movs	r3, #248	; 0xf8
 8001ba6:	039b      	lsls	r3, r3, #14
 8001ba8:	401a      	ands	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	0f5b      	lsrs	r3, r3, #29
 8001bb6:	075a      	lsls	r2, r3, #29
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b008      	add	sp, #32
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	00001388 	.word	0x00001388
 8001bdc:	efffffff 	.word	0xefffffff
 8001be0:	feffffff 	.word	0xfeffffff
 8001be4:	1fc1808c 	.word	0x1fc1808c
 8001be8:	effefffc 	.word	0xeffefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0e9      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2207      	movs	r2, #7
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d91e      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2207      	movs	r2, #7
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c20:	f7fe ffc6 	bl	8000bb0 <HAL_GetTick>
 8001c24:	0003      	movs	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c2a:	f7fe ffc1 	bl	8000bb0 <HAL_GetTick>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0ca      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c3e:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2207      	movs	r2, #7
 8001c44:	4013      	ands	r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2202      	movs	r2, #2
 8001c52:	4013      	ands	r3, r2
 8001c54:	d015      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d006      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c60:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	4b5f      	ldr	r3, [pc, #380]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c66:	21e0      	movs	r1, #224	; 0xe0
 8001c68:	01c9      	lsls	r1, r1, #7
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	4a5d      	ldr	r2, [pc, #372]	; (8001de8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d057      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d12b      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e097      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	049b      	lsls	r3, r3, #18
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d11f      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e08b      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d113      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e07f      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e074      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e06d      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf8:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	4393      	bics	r3, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0c:	f7fe ff50 	bl	8000bb0 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7fe ff4b 	bl	8000bb0 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a2f      	ldr	r2, [pc, #188]	; (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e054      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	2238      	movs	r2, #56	; 0x38
 8001d30:	401a      	ands	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1ec      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2207      	movs	r2, #7
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d21e      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2207      	movs	r2, #7
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d5c:	f7fe ff28 	bl	8000bb0 <HAL_GetTick>
 8001d60:	0003      	movs	r3, r0
 8001d62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d64:	e009      	b.n	8001d7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d66:	f7fe ff23 	bl	8000bb0 <HAL_GetTick>
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e02c      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2207      	movs	r2, #7
 8001d80:	4013      	ands	r3, r2
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d009      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_RCC_ClockConfig+0x200>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	430a      	orrs	r2, r1
 8001da4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001da6:	f000 f829 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8001daa:	0001      	movs	r1, r0
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	220f      	movs	r2, #15
 8001db4:	401a      	ands	r2, r3
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x204>)
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	58d3      	ldr	r3, [r2, r3]
 8001dbc:	221f      	movs	r2, #31
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	000a      	movs	r2, r1
 8001dc2:	40da      	lsrs	r2, r3
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_ClockConfig+0x208>)
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_ClockConfig+0x20c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7fe fe93 	bl	8000af8 <HAL_InitTick>
 8001dd2:	0003      	movs	r3, r0
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b004      	add	sp, #16
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000
 8001de0:	00001388 	.word	0x00001388
 8001de4:	40021000 	.word	0x40021000
 8001de8:	fffff0ff 	.word	0xfffff0ff
 8001dec:	ffff8fff 	.word	0xffff8fff
 8001df0:	08003f84 	.word	0x08003f84
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004

08001dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2238      	movs	r2, #56	; 0x38
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d10f      	bne.n	8001e2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e0c:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	0adb      	lsrs	r3, r3, #11
 8001e12:	2207      	movs	r2, #7
 8001e14:	4013      	ands	r3, r2
 8001e16:	2201      	movs	r2, #1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	0013      	movs	r3, r2
 8001e1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e1e:	6839      	ldr	r1, [r7, #0]
 8001e20:	4835      	ldr	r0, [pc, #212]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e22:	f7fe f96d 	bl	8000100 <__udivsi3>
 8001e26:	0003      	movs	r3, r0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	e05d      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2238      	movs	r2, #56	; 0x38
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d102      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e054      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2238      	movs	r2, #56	; 0x38
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d138      	bne.n	8001ebc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d10d      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	4824      	ldr	r0, [pc, #144]	; (8001efc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e6c:	f7fe f948 	bl	8000100 <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	0019      	movs	r1, r3
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	227f      	movs	r2, #127	; 0x7f
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	434b      	muls	r3, r1
 8001e80:	617b      	str	r3, [r7, #20]
        break;
 8001e82:	e00d      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	481c      	ldr	r0, [pc, #112]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e88:	f7fe f93a 	bl	8000100 <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	227f      	movs	r2, #127	; 0x7f
 8001e98:	4013      	ands	r3, r2
 8001e9a:	434b      	muls	r3, r1
 8001e9c:	617b      	str	r3, [r7, #20]
        break;
 8001e9e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0f5b      	lsrs	r3, r3, #29
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	3301      	adds	r3, #1
 8001eac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	6978      	ldr	r0, [r7, #20]
 8001eb2:	f7fe f925 	bl	8000100 <__udivsi3>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e015      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2238      	movs	r2, #56	; 0x38
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d103      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2238      	movs	r2, #56	; 0x38
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b18      	cmp	r3, #24
 8001eda:	d103      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001edc:	23fa      	movs	r3, #250	; 0xfa
 8001ede:	01db      	lsls	r3, r3, #7
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	e001      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ee8:	693b      	ldr	r3, [r7, #16]
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b006      	add	sp, #24
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	00f42400 	.word	0x00f42400
 8001efc:	007a1200 	.word	0x007a1200

08001f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f04:	4b02      	ldr	r3, [pc, #8]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f18:	f7ff fff2 	bl	8001f00 <HAL_RCC_GetHCLKFreq>
 8001f1c:	0004      	movs	r4, r0
 8001f1e:	f7ff fb49 	bl	80015b4 <LL_RCC_GetAPB1Prescaler>
 8001f22:	0003      	movs	r3, r0
 8001f24:	0b1a      	lsrs	r2, r3, #12
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	58d3      	ldr	r3, [r2, r3]
 8001f2c:	221f      	movs	r2, #31
 8001f2e:	4013      	ands	r3, r2
 8001f30:	40dc      	lsrs	r4, r3
 8001f32:	0023      	movs	r3, r4
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	08003fc4 	.word	0x08003fc4

08001f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f48:	2313      	movs	r3, #19
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f50:	2312      	movs	r3, #18
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	4013      	ands	r3, r2
 8001f62:	d100      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f64:	e0a3      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f66:	2011      	movs	r0, #17
 8001f68:	183b      	adds	r3, r7, r0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b86      	ldr	r3, [pc, #536]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	055b      	lsls	r3, r3, #21
 8001f76:	4013      	ands	r3, r2
 8001f78:	d110      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b83      	ldr	r3, [pc, #524]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f7e:	4b82      	ldr	r3, [pc, #520]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	0549      	lsls	r1, r1, #21
 8001f84:	430a      	orrs	r2, r1
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f88:	4b7f      	ldr	r3, [pc, #508]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	055b      	lsls	r3, r3, #21
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	183b      	adds	r3, r7, r0
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b7a      	ldr	r3, [pc, #488]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	0049      	lsls	r1, r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001faa:	f7fe fe01 	bl	8000bb0 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7fe fdfc 	bl	8000bb0 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d904      	bls.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fc2:	2313      	movs	r3, #19
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	701a      	strb	r2, [r3, #0]
        break;
 8001fca:	e005      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fcc:	4b6f      	ldr	r3, [pc, #444]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d0ed      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001fd8:	2313      	movs	r3, #19
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d154      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fe2:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d019      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d014      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ffe:	4b62      	ldr	r3, [pc, #392]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	4a63      	ldr	r2, [pc, #396]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002008:	4b5f      	ldr	r3, [pc, #380]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800200a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800200c:	4b5e      	ldr	r3, [pc, #376]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0249      	lsls	r1, r1, #9
 8002012:	430a      	orrs	r2, r1
 8002014:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800201a:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800201c:	495d      	ldr	r1, [pc, #372]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800201e:	400a      	ands	r2, r1
 8002020:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002022:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2201      	movs	r2, #1
 800202c:	4013      	ands	r3, r2
 800202e:	d016      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002030:	f7fe fdbe 	bl	8000bb0 <HAL_GetTick>
 8002034:	0003      	movs	r3, r0
 8002036:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002038:	e00c      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fdb9 	bl	8000bb0 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d904      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800204a:	2313      	movs	r3, #19
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	2203      	movs	r2, #3
 8002050:	701a      	strb	r2, [r3, #0]
            break;
 8002052:	e004      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002054:	4b4c      	ldr	r3, [pc, #304]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2202      	movs	r2, #2
 800205a:	4013      	ands	r3, r2
 800205c:	d0ed      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800205e:	2313      	movs	r3, #19
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10a      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002068:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	4a48      	ldr	r2, [pc, #288]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002078:	430a      	orrs	r2, r1
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
 800207c:	e00c      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800207e:	2312      	movs	r3, #18
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	2213      	movs	r2, #19
 8002084:	18ba      	adds	r2, r7, r2
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e005      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	2312      	movs	r3, #18
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2213      	movs	r2, #19
 8002092:	18ba      	adds	r2, r7, r2
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002098:	2311      	movs	r3, #17
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020a8:	493c      	ldr	r1, [pc, #240]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	2203      	movs	r2, #3
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	220c      	movs	r2, #12
 80020dc:	4393      	bics	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2220      	movs	r2, #32
 80020f0:	4013      	ands	r3, r2
 80020f2:	d009      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f4:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	4b21      	ldr	r3, [pc, #132]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002104:	430a      	orrs	r2, r1
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	01db      	lsls	r3, r3, #7
 8002110:	4013      	ands	r3, r2
 8002112:	d015      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002114:	4b1c      	ldr	r3, [pc, #112]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	0899      	lsrs	r1, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002122:	430a      	orrs	r2, r1
 8002124:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	05db      	lsls	r3, r3, #23
 800212e:	429a      	cmp	r2, r3
 8002130:	d106      	bne.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0249      	lsls	r1, r1, #9
 800213c:	430a      	orrs	r2, r1
 800213e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d016      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800214c:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800215c:	430a      	orrs	r2, r1
 800215e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	01db      	lsls	r3, r3, #7
 8002168:	429a      	cmp	r2, r3
 800216a:	d106      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	0249      	lsls	r1, r1, #9
 8002176:	430a      	orrs	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800217a:	2312      	movs	r3, #18
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b006      	add	sp, #24
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	40007000 	.word	0x40007000
 8002190:	fffffcff 	.word	0xfffffcff
 8002194:	fffeffff 	.word	0xfffeffff
 8002198:	00001388 	.word	0x00001388
 800219c:	efffffff 	.word	0xefffffff
 80021a0:	ffffcfff 	.word	0xffffcfff
 80021a4:	ffff3fff 	.word	0xffff3fff

080021a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e046      	b.n	8002248 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2288      	movs	r2, #136	; 0x88
 80021be:	589b      	ldr	r3, [r3, r2]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2284      	movs	r2, #132	; 0x84
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fe fae4 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2288      	movs	r2, #136	; 0x88
 80021d8:	2124      	movs	r1, #36	; 0x24
 80021da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fbc2 	bl	8002978 <UART_SetConfig>
 80021f4:	0003      	movs	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e024      	b.n	8002248 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fd59 	bl	8002cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	490d      	ldr	r1, [pc, #52]	; (8002250 <HAL_UART_Init+0xa8>)
 800221a:	400a      	ands	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	212a      	movs	r1, #42	; 0x2a
 800222a:	438a      	bics	r2, r1
 800222c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	0018      	movs	r0, r3
 8002242:	f000 fdf1 	bl	8002e28 <UART_CheckIdleState>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}
 8002250:	ffffb7ff 	.word	0xffffb7ff

08002254 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	1dbb      	adds	r3, r7, #6
 8002260:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	228c      	movs	r2, #140	; 0x8c
 8002266:	589b      	ldr	r3, [r3, r2]
 8002268:	2b20      	cmp	r3, #32
 800226a:	d145      	bne.n	80022f8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_UART_Receive_IT+0x26>
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e03d      	b.n	80022fa <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	429a      	cmp	r2, r3
 8002288:	d109      	bne.n	800229e <HAL_UART_Receive_IT+0x4a>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d001      	beq.n	800229e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e02d      	b.n	80022fa <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	041b      	lsls	r3, r3, #16
 80022ae:	4013      	ands	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022b2:	f3ef 8310 	mrs	r3, PRIMASK
 80022b6:	613b      	str	r3, [r7, #16]
  return(result);
 80022b8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022ba:	61fb      	str	r3, [r7, #28]
 80022bc:	2301      	movs	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f383 8810 	msr	PRIMASK, r3
}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	04c9      	lsls	r1, r1, #19
 80022d6:	430a      	orrs	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f383 8810 	msr	PRIMASK, r3
}
 80022e4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022e6:	1dbb      	adds	r3, r7, #6
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f000 feb0 	bl	8003054 <UART_Start_Receive_IT>
 80022f4:	0003      	movs	r3, r0
 80022f6:	e000      	b.n	80022fa <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b008      	add	sp, #32
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b0aa      	sub	sp, #168	; 0xa8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	22a4      	movs	r2, #164	; 0xa4
 8002314:	18b9      	adds	r1, r7, r2
 8002316:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	20a0      	movs	r0, #160	; 0xa0
 8002320:	1839      	adds	r1, r7, r0
 8002322:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	249c      	movs	r4, #156	; 0x9c
 800232c:	1939      	adds	r1, r7, r4
 800232e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002330:	0011      	movs	r1, r2
 8002332:	18bb      	adds	r3, r7, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4aa2      	ldr	r2, [pc, #648]	; (80025c0 <HAL_UART_IRQHandler+0x2bc>)
 8002338:	4013      	ands	r3, r2
 800233a:	2298      	movs	r2, #152	; 0x98
 800233c:	18bd      	adds	r5, r7, r2
 800233e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002340:	18bb      	adds	r3, r7, r2
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11a      	bne.n	800237e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002348:	187b      	adds	r3, r7, r1
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2220      	movs	r2, #32
 800234e:	4013      	ands	r3, r2
 8002350:	d015      	beq.n	800237e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002352:	183b      	adds	r3, r7, r0
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2220      	movs	r2, #32
 8002358:	4013      	ands	r3, r2
 800235a:	d105      	bne.n	8002368 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800235c:	193b      	adds	r3, r7, r4
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	055b      	lsls	r3, r3, #21
 8002364:	4013      	ands	r3, r2
 8002366:	d00a      	beq.n	800237e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236c:	2b00      	cmp	r3, #0
 800236e:	d100      	bne.n	8002372 <HAL_UART_IRQHandler+0x6e>
 8002370:	e2dc      	b.n	800292c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	0010      	movs	r0, r2
 800237a:	4798      	blx	r3
      }
      return;
 800237c:	e2d6      	b.n	800292c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800237e:	2398      	movs	r3, #152	; 0x98
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d100      	bne.n	800238a <HAL_UART_IRQHandler+0x86>
 8002388:	e122      	b.n	80025d0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800238a:	239c      	movs	r3, #156	; 0x9c
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a8c      	ldr	r2, [pc, #560]	; (80025c4 <HAL_UART_IRQHandler+0x2c0>)
 8002392:	4013      	ands	r3, r2
 8002394:	d106      	bne.n	80023a4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002396:	23a0      	movs	r3, #160	; 0xa0
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a8a      	ldr	r2, [pc, #552]	; (80025c8 <HAL_UART_IRQHandler+0x2c4>)
 800239e:	4013      	ands	r3, r2
 80023a0:	d100      	bne.n	80023a4 <HAL_UART_IRQHandler+0xa0>
 80023a2:	e115      	b.n	80025d0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023a4:	23a4      	movs	r3, #164	; 0xa4
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	4013      	ands	r3, r2
 80023ae:	d012      	beq.n	80023d6 <HAL_UART_IRQHandler+0xd2>
 80023b0:	23a0      	movs	r3, #160	; 0xa0
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4013      	ands	r3, r2
 80023bc:	d00b      	beq.n	80023d6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2201      	movs	r2, #1
 80023c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2290      	movs	r2, #144	; 0x90
 80023ca:	589b      	ldr	r3, [r3, r2]
 80023cc:	2201      	movs	r2, #1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2190      	movs	r1, #144	; 0x90
 80023d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023d6:	23a4      	movs	r3, #164	; 0xa4
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2202      	movs	r2, #2
 80023de:	4013      	ands	r3, r2
 80023e0:	d011      	beq.n	8002406 <HAL_UART_IRQHandler+0x102>
 80023e2:	239c      	movs	r3, #156	; 0x9c
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	4013      	ands	r3, r2
 80023ec:	d00b      	beq.n	8002406 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2290      	movs	r2, #144	; 0x90
 80023fa:	589b      	ldr	r3, [r3, r2]
 80023fc:	2204      	movs	r2, #4
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2190      	movs	r1, #144	; 0x90
 8002404:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002406:	23a4      	movs	r3, #164	; 0xa4
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2204      	movs	r2, #4
 800240e:	4013      	ands	r3, r2
 8002410:	d011      	beq.n	8002436 <HAL_UART_IRQHandler+0x132>
 8002412:	239c      	movs	r3, #156	; 0x9c
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	d00b      	beq.n	8002436 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2204      	movs	r2, #4
 8002424:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2290      	movs	r2, #144	; 0x90
 800242a:	589b      	ldr	r3, [r3, r2]
 800242c:	2202      	movs	r2, #2
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2190      	movs	r1, #144	; 0x90
 8002434:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002436:	23a4      	movs	r3, #164	; 0xa4
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2208      	movs	r2, #8
 800243e:	4013      	ands	r3, r2
 8002440:	d017      	beq.n	8002472 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002442:	23a0      	movs	r3, #160	; 0xa0
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2220      	movs	r2, #32
 800244a:	4013      	ands	r3, r2
 800244c:	d105      	bne.n	800245a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800244e:	239c      	movs	r3, #156	; 0x9c
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a5b      	ldr	r2, [pc, #364]	; (80025c4 <HAL_UART_IRQHandler+0x2c0>)
 8002456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002458:	d00b      	beq.n	8002472 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2208      	movs	r2, #8
 8002460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2290      	movs	r2, #144	; 0x90
 8002466:	589b      	ldr	r3, [r3, r2]
 8002468:	2208      	movs	r2, #8
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2190      	movs	r1, #144	; 0x90
 8002470:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002472:	23a4      	movs	r3, #164	; 0xa4
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_UART_IRQHandler+0x1a4>
 8002480:	23a0      	movs	r3, #160	; 0xa0
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	04db      	lsls	r3, r3, #19
 800248a:	4013      	ands	r3, r2
 800248c:	d00c      	beq.n	80024a8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2290      	movs	r2, #144	; 0x90
 800249c:	589b      	ldr	r3, [r3, r2]
 800249e:	2220      	movs	r2, #32
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2190      	movs	r1, #144	; 0x90
 80024a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2290      	movs	r2, #144	; 0x90
 80024ac:	589b      	ldr	r3, [r3, r2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d100      	bne.n	80024b4 <HAL_UART_IRQHandler+0x1b0>
 80024b2:	e23d      	b.n	8002930 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024b4:	23a4      	movs	r3, #164	; 0xa4
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2220      	movs	r2, #32
 80024bc:	4013      	ands	r3, r2
 80024be:	d015      	beq.n	80024ec <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80024c0:	23a0      	movs	r3, #160	; 0xa0
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2220      	movs	r2, #32
 80024c8:	4013      	ands	r3, r2
 80024ca:	d106      	bne.n	80024da <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024cc:	239c      	movs	r3, #156	; 0x9c
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	055b      	lsls	r3, r3, #21
 80024d6:	4013      	ands	r3, r2
 80024d8:	d008      	beq.n	80024ec <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	0010      	movs	r0, r2
 80024ea:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2290      	movs	r2, #144	; 0x90
 80024f0:	589b      	ldr	r3, [r3, r2]
 80024f2:	2194      	movs	r1, #148	; 0x94
 80024f4:	187a      	adds	r2, r7, r1
 80024f6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	4013      	ands	r3, r2
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d004      	beq.n	8002510 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002506:	187b      	adds	r3, r7, r1
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2228      	movs	r2, #40	; 0x28
 800250c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800250e:	d04c      	beq.n	80025aa <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f000 fec2 	bl	800329c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2240      	movs	r2, #64	; 0x40
 8002520:	4013      	ands	r3, r2
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d13c      	bne.n	80025a0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002526:	f3ef 8310 	mrs	r3, PRIMASK
 800252a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800252c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	2090      	movs	r0, #144	; 0x90
 8002530:	183a      	adds	r2, r7, r0
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253a:	f383 8810 	msr	PRIMASK, r3
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2140      	movs	r1, #64	; 0x40
 800254c:	438a      	bics	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	183b      	adds	r3, r7, r0
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002558:	f383 8810 	msr	PRIMASK, r3
}
 800255c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	589b      	ldr	r3, [r3, r2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d016      	beq.n	8002596 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2280      	movs	r2, #128	; 0x80
 800256c:	589b      	ldr	r3, [r3, r2]
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_UART_IRQHandler+0x2c8>)
 8002570:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	589b      	ldr	r3, [r3, r2]
 8002578:	0018      	movs	r0, r3
 800257a:	f7fe fced 	bl	8000f58 <HAL_DMA_Abort_IT>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d01c      	beq.n	80025bc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	589b      	ldr	r3, [r3, r2]
 8002588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	5852      	ldr	r2, [r2, r1]
 8002590:	0010      	movs	r0, r2
 8002592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002594:	e012      	b.n	80025bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 f9d9 	bl	8002950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259e:	e00d      	b.n	80025bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f9d4 	bl	8002950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	e008      	b.n	80025bc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 f9cf 	bl	8002950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2290      	movs	r2, #144	; 0x90
 80025b6:	2100      	movs	r1, #0
 80025b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80025ba:	e1b9      	b.n	8002930 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	46c0      	nop			; (mov r8, r8)
    return;
 80025be:	e1b7      	b.n	8002930 <HAL_UART_IRQHandler+0x62c>
 80025c0:	0000080f 	.word	0x0000080f
 80025c4:	10000001 	.word	0x10000001
 80025c8:	04000120 	.word	0x04000120
 80025cc:	08003369 	.word	0x08003369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d000      	beq.n	80025da <HAL_UART_IRQHandler+0x2d6>
 80025d8:	e13e      	b.n	8002858 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025da:	23a4      	movs	r3, #164	; 0xa4
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	4013      	ands	r3, r2
 80025e4:	d100      	bne.n	80025e8 <HAL_UART_IRQHandler+0x2e4>
 80025e6:	e137      	b.n	8002858 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025e8:	23a0      	movs	r3, #160	; 0xa0
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2210      	movs	r2, #16
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_UART_IRQHandler+0x2f2>
 80025f4:	e130      	b.n	8002858 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2210      	movs	r2, #16
 80025fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	4013      	ands	r3, r2
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d000      	beq.n	800260e <HAL_UART_IRQHandler+0x30a>
 800260c:	e0a4      	b.n	8002758 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	589b      	ldr	r3, [r3, r2]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	217e      	movs	r1, #126	; 0x7e
 800261a:	187b      	adds	r3, r7, r1
 800261c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800261e:	187b      	adds	r3, r7, r1
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d100      	bne.n	8002628 <HAL_UART_IRQHandler+0x324>
 8002626:	e185      	b.n	8002934 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	225c      	movs	r2, #92	; 0x5c
 800262c:	5a9b      	ldrh	r3, [r3, r2]
 800262e:	187a      	adds	r2, r7, r1
 8002630:	8812      	ldrh	r2, [r2, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d300      	bcc.n	8002638 <HAL_UART_IRQHandler+0x334>
 8002636:	e17d      	b.n	8002934 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	187a      	adds	r2, r7, r1
 800263c:	215e      	movs	r1, #94	; 0x5e
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	589b      	ldr	r3, [r3, r2]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	4013      	ands	r3, r2
 8002650:	d170      	bne.n	8002734 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002652:	f3ef 8310 	mrs	r3, PRIMASK
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800265a:	67bb      	str	r3, [r7, #120]	; 0x78
 800265c:	2301      	movs	r3, #1
 800265e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002662:	f383 8810 	msr	PRIMASK, r3
}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	49b4      	ldr	r1, [pc, #720]	; (8002944 <HAL_UART_IRQHandler+0x640>)
 8002674:	400a      	ands	r2, r1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	f383 8810 	msr	PRIMASK, r3
}
 8002682:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002684:	f3ef 8310 	mrs	r3, PRIMASK
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268c:	677b      	str	r3, [r7, #116]	; 0x74
 800268e:	2301      	movs	r3, #1
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002694:	f383 8810 	msr	PRIMASK, r3
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b0:	f383 8810 	msr	PRIMASK, r3
}
 80026b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80026bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026be:	673b      	str	r3, [r7, #112]	; 0x70
 80026c0:	2301      	movs	r3, #1
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2140      	movs	r1, #64	; 0x40
 80026d8:	438a      	bics	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026de:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	228c      	movs	r2, #140	; 0x8c
 80026ec:	2120      	movs	r1, #32
 80026ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f6:	f3ef 8310 	mrs	r3, PRIMASK
 80026fa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80026fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002700:	2301      	movs	r3, #1
 8002702:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002704:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002706:	f383 8810 	msr	PRIMASK, r3
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2110      	movs	r1, #16
 8002718:	438a      	bics	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002722:	f383 8810 	msr	PRIMASK, r3
}
 8002726:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	589b      	ldr	r3, [r3, r2]
 800272e:	0018      	movs	r0, r3
 8002730:	f7fe fbb0 	bl	8000e94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	225c      	movs	r2, #92	; 0x5c
 800273e:	5a9a      	ldrh	r2, [r3, r2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	215e      	movs	r1, #94	; 0x5e
 8002744:	5a5b      	ldrh	r3, [r3, r1]
 8002746:	b29b      	uxth	r3, r3
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b29a      	uxth	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 f905 	bl	8002960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002756:	e0ed      	b.n	8002934 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	225c      	movs	r2, #92	; 0x5c
 800275c:	5a99      	ldrh	r1, [r3, r2]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	225e      	movs	r2, #94	; 0x5e
 8002762:	5a9b      	ldrh	r3, [r3, r2]
 8002764:	b29a      	uxth	r2, r3
 8002766:	208e      	movs	r0, #142	; 0x8e
 8002768:	183b      	adds	r3, r7, r0
 800276a:	1a8a      	subs	r2, r1, r2
 800276c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	225e      	movs	r2, #94	; 0x5e
 8002772:	5a9b      	ldrh	r3, [r3, r2]
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d100      	bne.n	800277c <HAL_UART_IRQHandler+0x478>
 800277a:	e0dd      	b.n	8002938 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800277c:	183b      	adds	r3, r7, r0
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d100      	bne.n	8002786 <HAL_UART_IRQHandler+0x482>
 8002784:	e0d8      	b.n	8002938 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	60fb      	str	r3, [r7, #12]
  return(result);
 800278c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800278e:	2488      	movs	r4, #136	; 0x88
 8002790:	193a      	adds	r2, r7, r4
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f383 8810 	msr	PRIMASK, r3
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4967      	ldr	r1, [pc, #412]	; (8002948 <HAL_UART_IRQHandler+0x644>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f383 8810 	msr	PRIMASK, r3
}
 80027bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027be:	f3ef 8310 	mrs	r3, PRIMASK
 80027c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027c6:	2484      	movs	r4, #132	; 0x84
 80027c8:	193a      	adds	r2, r7, r4
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	2301      	movs	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f383 8810 	msr	PRIMASK, r3
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	495a      	ldr	r1, [pc, #360]	; (800294c <HAL_UART_IRQHandler+0x648>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	f383 8810 	msr	PRIMASK, r3
}
 80027f4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	228c      	movs	r2, #140	; 0x8c
 80027fa:	2120      	movs	r1, #32
 80027fc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800280a:	f3ef 8310 	mrs	r3, PRIMASK
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	2480      	movs	r4, #128	; 0x80
 8002814:	193a      	adds	r2, r7, r4
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	2301      	movs	r3, #1
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	f383 8810 	msr	PRIMASK, r3
}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2110      	movs	r1, #16
 8002830:	438a      	bics	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	193b      	adds	r3, r7, r4
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	f383 8810 	msr	PRIMASK, r3
}
 8002840:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002848:	183b      	adds	r3, r7, r0
 800284a:	881a      	ldrh	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f000 f885 	bl	8002960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002856:	e06f      	b.n	8002938 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002858:	23a4      	movs	r3, #164	; 0xa4
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	035b      	lsls	r3, r3, #13
 8002862:	4013      	ands	r3, r2
 8002864:	d010      	beq.n	8002888 <HAL_UART_IRQHandler+0x584>
 8002866:	239c      	movs	r3, #156	; 0x9c
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	03db      	lsls	r3, r3, #15
 8002870:	4013      	ands	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	0352      	lsls	r2, r2, #13
 800287c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	0018      	movs	r0, r3
 8002882:	f001 fa15 	bl	8003cb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002886:	e05a      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002888:	23a4      	movs	r3, #164	; 0xa4
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	4013      	ands	r3, r2
 8002892:	d016      	beq.n	80028c2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002894:	23a0      	movs	r3, #160	; 0xa0
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	4013      	ands	r3, r2
 800289e:	d106      	bne.n	80028ae <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80028a0:	239c      	movs	r3, #156	; 0x9c
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	4013      	ands	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d042      	beq.n	800293c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	0010      	movs	r0, r2
 80028be:	4798      	blx	r3
    }
    return;
 80028c0:	e03c      	b.n	800293c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028c2:	23a4      	movs	r3, #164	; 0xa4
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	4013      	ands	r3, r2
 80028cc:	d00a      	beq.n	80028e4 <HAL_UART_IRQHandler+0x5e0>
 80028ce:	23a0      	movs	r3, #160	; 0xa0
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	4013      	ands	r3, r2
 80028d8:	d004      	beq.n	80028e4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 fd5a 	bl	8003396 <UART_EndTransmit_IT>
    return;
 80028e2:	e02c      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80028e4:	23a4      	movs	r3, #164	; 0xa4
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	4013      	ands	r3, r2
 80028f0:	d00b      	beq.n	800290a <HAL_UART_IRQHandler+0x606>
 80028f2:	23a0      	movs	r3, #160	; 0xa0
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	05db      	lsls	r3, r3, #23
 80028fc:	4013      	ands	r3, r2
 80028fe:	d004      	beq.n	800290a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f001 f9e4 	bl	8003cd0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002908:	e019      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800290a:	23a4      	movs	r3, #164	; 0xa4
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	045b      	lsls	r3, r3, #17
 8002914:	4013      	ands	r3, r2
 8002916:	d012      	beq.n	800293e <HAL_UART_IRQHandler+0x63a>
 8002918:	23a0      	movs	r3, #160	; 0xa0
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	da0d      	bge.n	800293e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f001 f9cb 	bl	8003cc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800292a:	e008      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
      return;
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	e006      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
    return;
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	e004      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
      return;
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	e002      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
      return;
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	e000      	b.n	800293e <HAL_UART_IRQHandler+0x63a>
    return;
 800293c:	46c0      	nop			; (mov r8, r8)
  }
}
 800293e:	46bd      	mov	sp, r7
 8002940:	b02a      	add	sp, #168	; 0xa8
 8002942:	bdb0      	pop	{r4, r5, r7, pc}
 8002944:	fffffeff 	.word	0xfffffeff
 8002948:	fffffedf 	.word	0xfffffedf
 800294c:	effffffe 	.word	0xeffffffe

08002950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	000a      	movs	r2, r1
 800296a:	1cbb      	adds	r3, r7, #2
 800296c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002980:	231a      	movs	r3, #26
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	4313      	orrs	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4abc      	ldr	r2, [pc, #752]	; (8002c98 <UART_SetConfig+0x320>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4ab7      	ldr	r2, [pc, #732]	; (8002c9c <UART_SetConfig+0x324>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4aae      	ldr	r2, [pc, #696]	; (8002ca0 <UART_SetConfig+0x328>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	220f      	movs	r2, #15
 80029fc:	4393      	bics	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4aa4      	ldr	r2, [pc, #656]	; (8002ca4 <UART_SetConfig+0x32c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d127      	bne.n	8002a66 <UART_SetConfig+0xee>
 8002a16:	4ba4      	ldr	r3, [pc, #656]	; (8002ca8 <UART_SetConfig+0x330>)
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d017      	beq.n	8002a52 <UART_SetConfig+0xda>
 8002a22:	d81b      	bhi.n	8002a5c <UART_SetConfig+0xe4>
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d00a      	beq.n	8002a3e <UART_SetConfig+0xc6>
 8002a28:	d818      	bhi.n	8002a5c <UART_SetConfig+0xe4>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <UART_SetConfig+0xbc>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d00a      	beq.n	8002a48 <UART_SetConfig+0xd0>
 8002a32:	e013      	b.n	8002a5c <UART_SetConfig+0xe4>
 8002a34:	231b      	movs	r3, #27
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e058      	b.n	8002af0 <UART_SetConfig+0x178>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2202      	movs	r2, #2
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e053      	b.n	8002af0 <UART_SetConfig+0x178>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e04e      	b.n	8002af0 <UART_SetConfig+0x178>
 8002a52:	231b      	movs	r3, #27
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e049      	b.n	8002af0 <UART_SetConfig+0x178>
 8002a5c:	231b      	movs	r3, #27
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	2210      	movs	r2, #16
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e044      	b.n	8002af0 <UART_SetConfig+0x178>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a90      	ldr	r2, [pc, #576]	; (8002cac <UART_SetConfig+0x334>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d127      	bne.n	8002ac0 <UART_SetConfig+0x148>
 8002a70:	4b8d      	ldr	r3, [pc, #564]	; (8002ca8 <UART_SetConfig+0x330>)
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	220c      	movs	r2, #12
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d017      	beq.n	8002aac <UART_SetConfig+0x134>
 8002a7c:	d81b      	bhi.n	8002ab6 <UART_SetConfig+0x13e>
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d00a      	beq.n	8002a98 <UART_SetConfig+0x120>
 8002a82:	d818      	bhi.n	8002ab6 <UART_SetConfig+0x13e>
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <UART_SetConfig+0x116>
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00a      	beq.n	8002aa2 <UART_SetConfig+0x12a>
 8002a8c:	e013      	b.n	8002ab6 <UART_SetConfig+0x13e>
 8002a8e:	231b      	movs	r3, #27
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e02b      	b.n	8002af0 <UART_SetConfig+0x178>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e026      	b.n	8002af0 <UART_SetConfig+0x178>
 8002aa2:	231b      	movs	r3, #27
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e021      	b.n	8002af0 <UART_SetConfig+0x178>
 8002aac:	231b      	movs	r3, #27
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e01c      	b.n	8002af0 <UART_SetConfig+0x178>
 8002ab6:	231b      	movs	r3, #27
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2210      	movs	r2, #16
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e017      	b.n	8002af0 <UART_SetConfig+0x178>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a7a      	ldr	r2, [pc, #488]	; (8002cb0 <UART_SetConfig+0x338>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d104      	bne.n	8002ad4 <UART_SetConfig+0x15c>
 8002aca:	231b      	movs	r3, #27
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e00d      	b.n	8002af0 <UART_SetConfig+0x178>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a76      	ldr	r2, [pc, #472]	; (8002cb4 <UART_SetConfig+0x33c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d104      	bne.n	8002ae8 <UART_SetConfig+0x170>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e003      	b.n	8002af0 <UART_SetConfig+0x178>
 8002ae8:	231b      	movs	r3, #27
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2210      	movs	r2, #16
 8002aee:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d000      	beq.n	8002afe <UART_SetConfig+0x186>
 8002afc:	e065      	b.n	8002bca <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002afe:	231b      	movs	r3, #27
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d015      	beq.n	8002b34 <UART_SetConfig+0x1bc>
 8002b08:	dc18      	bgt.n	8002b3c <UART_SetConfig+0x1c4>
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d00d      	beq.n	8002b2a <UART_SetConfig+0x1b2>
 8002b0e:	dc15      	bgt.n	8002b3c <UART_SetConfig+0x1c4>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <UART_SetConfig+0x1a2>
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d005      	beq.n	8002b24 <UART_SetConfig+0x1ac>
 8002b18:	e010      	b.n	8002b3c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f7ff f9fb 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	617b      	str	r3, [r7, #20]
        break;
 8002b22:	e012      	b.n	8002b4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <UART_SetConfig+0x340>)
 8002b26:	617b      	str	r3, [r7, #20]
        break;
 8002b28:	e00f      	b.n	8002b4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2a:	f7ff f967 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	617b      	str	r3, [r7, #20]
        break;
 8002b32:	e00a      	b.n	8002b4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	617b      	str	r3, [r7, #20]
        break;
 8002b3a:	e006      	b.n	8002b4a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b40:	231a      	movs	r3, #26
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
        break;
 8002b48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d100      	bne.n	8002b52 <UART_SetConfig+0x1da>
 8002b50:	e08d      	b.n	8002c6e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b56:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <UART_SetConfig+0x344>)
 8002b58:	0052      	lsls	r2, r2, #1
 8002b5a:	5ad3      	ldrh	r3, [r2, r3]
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	6978      	ldr	r0, [r7, #20]
 8002b60:	f7fd face 	bl	8000100 <__udivsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	005a      	lsls	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	18d2      	adds	r2, r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0019      	movs	r1, r3
 8002b76:	0010      	movs	r0, r2
 8002b78:	f7fd fac2 	bl	8000100 <__udivsi3>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	d91c      	bls.n	8002bc0 <UART_SetConfig+0x248>
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	025b      	lsls	r3, r3, #9
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d217      	bcs.n	8002bc0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	200e      	movs	r0, #14
 8002b96:	183b      	adds	r3, r7, r0
 8002b98:	210f      	movs	r1, #15
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	b299      	uxth	r1, r3
 8002baa:	183b      	adds	r3, r7, r0
 8002bac:	183a      	adds	r2, r7, r0
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	183a      	adds	r2, r7, r0
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	e056      	b.n	8002c6e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc0:	231a      	movs	r3, #26
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e051      	b.n	8002c6e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bca:	231b      	movs	r3, #27
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d015      	beq.n	8002c00 <UART_SetConfig+0x288>
 8002bd4:	dc18      	bgt.n	8002c08 <UART_SetConfig+0x290>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d00d      	beq.n	8002bf6 <UART_SetConfig+0x27e>
 8002bda:	dc15      	bgt.n	8002c08 <UART_SetConfig+0x290>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <UART_SetConfig+0x26e>
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d005      	beq.n	8002bf0 <UART_SetConfig+0x278>
 8002be4:	e010      	b.n	8002c08 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7ff f995 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8002bea:	0003      	movs	r3, r0
 8002bec:	617b      	str	r3, [r7, #20]
        break;
 8002bee:	e012      	b.n	8002c16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <UART_SetConfig+0x340>)
 8002bf2:	617b      	str	r3, [r7, #20]
        break;
 8002bf4:	e00f      	b.n	8002c16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bf6:	f7ff f901 	bl	8001dfc <HAL_RCC_GetSysClockFreq>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	617b      	str	r3, [r7, #20]
        break;
 8002bfe:	e00a      	b.n	8002c16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	021b      	lsls	r3, r3, #8
 8002c04:	617b      	str	r3, [r7, #20]
        break;
 8002c06:	e006      	b.n	8002c16 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c0c:	231a      	movs	r3, #26
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
        break;
 8002c14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d028      	beq.n	8002c6e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <UART_SetConfig+0x344>)
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	5ad3      	ldrh	r3, [r2, r3]
 8002c26:	0019      	movs	r1, r3
 8002c28:	6978      	ldr	r0, [r7, #20]
 8002c2a:	f7fd fa69 	bl	8000100 <__udivsi3>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	001a      	movs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	18d2      	adds	r2, r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f7fd fa5d 	bl	8000100 <__udivsi3>
 8002c46:	0003      	movs	r3, r0
 8002c48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d90a      	bls.n	8002c66 <UART_SetConfig+0x2ee>
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	025b      	lsls	r3, r3, #9
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d205      	bcs.n	8002c66 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	e003      	b.n	8002c6e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002c66:	231a      	movs	r3, #26
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	226a      	movs	r2, #106	; 0x6a
 8002c72:	2101      	movs	r1, #1
 8002c74:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2268      	movs	r2, #104	; 0x68
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002c8a:	231a      	movs	r3, #26
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b008      	add	sp, #32
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	cfff69f3 	.word	0xcfff69f3
 8002c9c:	ffffcfff 	.word	0xffffcfff
 8002ca0:	11fff4ff 	.word	0x11fff4ff
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40004400 	.word	0x40004400
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40004c00 	.word	0x40004c00
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	08003fe4 	.word	0x08003fe4

08002cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <UART_AdvFeatureConfig+0x144>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	2202      	movs	r2, #2
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4a43      	ldr	r2, [pc, #268]	; (8002e08 <UART_AdvFeatureConfig+0x148>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <UART_AdvFeatureConfig+0x14c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	2208      	movs	r2, #8
 8002d34:	4013      	ands	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <UART_AdvFeatureConfig+0x150>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2210      	movs	r2, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a2c      	ldr	r2, [pc, #176]	; (8002e14 <UART_AdvFeatureConfig+0x154>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	0019      	movs	r1, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	2220      	movs	r2, #32
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <UART_AdvFeatureConfig+0x158>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	0019      	movs	r1, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	2240      	movs	r2, #64	; 0x40
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d01d      	beq.n	8002dda <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <UART_AdvFeatureConfig+0x15c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	035b      	lsls	r3, r3, #13
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10b      	bne.n	8002dda <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <UART_AdvFeatureConfig+0x160>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	4013      	ands	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <UART_AdvFeatureConfig+0x164>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	0019      	movs	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]
  }
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	fffdffff 	.word	0xfffdffff
 8002e08:	fffeffff 	.word	0xfffeffff
 8002e0c:	fffbffff 	.word	0xfffbffff
 8002e10:	ffff7fff 	.word	0xffff7fff
 8002e14:	ffffefff 	.word	0xffffefff
 8002e18:	ffffdfff 	.word	0xffffdfff
 8002e1c:	ffefffff 	.word	0xffefffff
 8002e20:	ff9fffff 	.word	0xff9fffff
 8002e24:	fff7ffff 	.word	0xfff7ffff

08002e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2290      	movs	r2, #144	; 0x90
 8002e34:	2100      	movs	r1, #0
 8002e36:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e38:	f7fd feba 	bl	8000bb0 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2208      	movs	r2, #8
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d10c      	bne.n	8002e68 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2280      	movs	r2, #128	; 0x80
 8002e52:	0391      	lsls	r1, r2, #14
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <UART_CheckIdleState+0x98>)
 8002e58:	9200      	str	r2, [sp, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f000 f832 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d001      	beq.n	8002e68 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e026      	b.n	8002eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d10c      	bne.n	8002e90 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	03d1      	lsls	r1, r2, #15
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <UART_CheckIdleState+0x98>)
 8002e80:	9200      	str	r2, [sp, #0]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f000 f81e 	bl	8002ec4 <UART_WaitOnFlagUntilTimeout>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d001      	beq.n	8002e90 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e012      	b.n	8002eb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2288      	movs	r2, #136	; 0x88
 8002e94:	2120      	movs	r1, #32
 8002e96:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	228c      	movs	r2, #140	; 0x8c
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2284      	movs	r2, #132	; 0x84
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	01ffffff 	.word	0x01ffffff

08002ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b094      	sub	sp, #80	; 0x50
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	1dfb      	adds	r3, r7, #7
 8002ed2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed4:	e0a7      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed8:	3301      	adds	r3, #1
 8002eda:	d100      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x1a>
 8002edc:	e0a3      	b.n	8003026 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fd fe67 	bl	8000bb0 <HAL_GetTick>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d13f      	bne.n	8002f74 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
 8002efe:	2301      	movs	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	494e      	ldr	r1, [pc, #312]	; (8003050 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f30:	2301      	movs	r3, #1
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	438a      	bics	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2288      	movs	r2, #136	; 0x88
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	228c      	movs	r2, #140	; 0x8c
 8002f64:	2120      	movs	r1, #32
 8002f66:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2284      	movs	r2, #132	; 0x84
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e069      	b.n	8003048 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d052      	beq.n	8003026 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d148      	bne.n	8003026 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa2:	613b      	str	r3, [r7, #16]
  return(result);
 8002fa4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa8:	2301      	movs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f383 8810 	msr	PRIMASK, r3
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4924      	ldr	r1, [pc, #144]	; (8003050 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f383 8810 	msr	PRIMASK, r3
}
 8002fce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fd6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fda:	2301      	movs	r3, #1
 8002fdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f383 8810 	msr	PRIMASK, r3
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	438a      	bics	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
 8002ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f383 8810 	msr	PRIMASK, r3
}
 8003000:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2288      	movs	r2, #136	; 0x88
 8003006:	2120      	movs	r1, #32
 8003008:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	228c      	movs	r2, #140	; 0x8c
 800300e:	2120      	movs	r1, #32
 8003010:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2290      	movs	r2, #144	; 0x90
 8003016:	2120      	movs	r1, #32
 8003018:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2284      	movs	r2, #132	; 0x84
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e010      	b.n	8003048 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	425a      	negs	r2, r3
 8003036:	4153      	adcs	r3, r2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	001a      	movs	r2, r3
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d100      	bne.n	8003046 <UART_WaitOnFlagUntilTimeout+0x182>
 8003044:	e747      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b014      	add	sp, #80	; 0x50
 800304e:	bd80      	pop	{r7, pc}
 8003050:	fffffe5f 	.word	0xfffffe5f

08003054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b098      	sub	sp, #96	; 0x60
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	1dbb      	adds	r3, r7, #6
 8003060:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1dba      	adds	r2, r7, #6
 800306c:	215c      	movs	r1, #92	; 0x5c
 800306e:	8812      	ldrh	r2, [r2, #0]
 8003070:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1dba      	adds	r2, r7, #6
 8003076:	215e      	movs	r1, #94	; 0x5e
 8003078:	8812      	ldrh	r2, [r2, #0]
 800307a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	015b      	lsls	r3, r3, #5
 800308a:	429a      	cmp	r2, r3
 800308c:	d10d      	bne.n	80030aa <UART_Start_Receive_IT+0x56>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <UART_Start_Receive_IT+0x4c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2260      	movs	r2, #96	; 0x60
 800309a:	497b      	ldr	r1, [pc, #492]	; (8003288 <UART_Start_Receive_IT+0x234>)
 800309c:	5299      	strh	r1, [r3, r2]
 800309e:	e02e      	b.n	80030fe <UART_Start_Receive_IT+0xaa>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2260      	movs	r2, #96	; 0x60
 80030a4:	21ff      	movs	r1, #255	; 0xff
 80030a6:	5299      	strh	r1, [r3, r2]
 80030a8:	e029      	b.n	80030fe <UART_Start_Receive_IT+0xaa>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10d      	bne.n	80030ce <UART_Start_Receive_IT+0x7a>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <UART_Start_Receive_IT+0x70>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2260      	movs	r2, #96	; 0x60
 80030be:	21ff      	movs	r1, #255	; 0xff
 80030c0:	5299      	strh	r1, [r3, r2]
 80030c2:	e01c      	b.n	80030fe <UART_Start_Receive_IT+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2260      	movs	r2, #96	; 0x60
 80030c8:	217f      	movs	r1, #127	; 0x7f
 80030ca:	5299      	strh	r1, [r3, r2]
 80030cc:	e017      	b.n	80030fe <UART_Start_Receive_IT+0xaa>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	055b      	lsls	r3, r3, #21
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d10d      	bne.n	80030f6 <UART_Start_Receive_IT+0xa2>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <UART_Start_Receive_IT+0x98>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2260      	movs	r2, #96	; 0x60
 80030e6:	217f      	movs	r1, #127	; 0x7f
 80030e8:	5299      	strh	r1, [r3, r2]
 80030ea:	e008      	b.n	80030fe <UART_Start_Receive_IT+0xaa>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2260      	movs	r2, #96	; 0x60
 80030f0:	213f      	movs	r1, #63	; 0x3f
 80030f2:	5299      	strh	r1, [r3, r2]
 80030f4:	e003      	b.n	80030fe <UART_Start_Receive_IT+0xaa>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2260      	movs	r2, #96	; 0x60
 80030fa:	2100      	movs	r1, #0
 80030fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2290      	movs	r2, #144	; 0x90
 8003102:	2100      	movs	r1, #0
 8003104:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	228c      	movs	r2, #140	; 0x8c
 800310a:	2122      	movs	r1, #34	; 0x22
 800310c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310e:	f3ef 8310 	mrs	r3, PRIMASK
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003114:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003118:	2301      	movs	r3, #1
 800311a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003136:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	059b      	lsls	r3, r3, #22
 8003148:	429a      	cmp	r2, r3
 800314a:	d150      	bne.n	80031ee <UART_Start_Receive_IT+0x19a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2268      	movs	r2, #104	; 0x68
 8003150:	5a9b      	ldrh	r3, [r3, r2]
 8003152:	1dba      	adds	r2, r7, #6
 8003154:	8812      	ldrh	r2, [r2, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d349      	bcc.n	80031ee <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	015b      	lsls	r3, r3, #5
 8003162:	429a      	cmp	r2, r3
 8003164:	d107      	bne.n	8003176 <UART_Start_Receive_IT+0x122>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a46      	ldr	r2, [pc, #280]	; (800328c <UART_Start_Receive_IT+0x238>)
 8003172:	675a      	str	r2, [r3, #116]	; 0x74
 8003174:	e002      	b.n	800317c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a45      	ldr	r2, [pc, #276]	; (8003290 <UART_Start_Receive_IT+0x23c>)
 800317a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d019      	beq.n	80031b8 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800318a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800318c:	65bb      	str	r3, [r7, #88]	; 0x58
 800318e:	2301      	movs	r3, #1
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0049      	lsls	r1, r1, #1
 80031a8:	430a      	orrs	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b8:	f3ef 8310 	mrs	r3, PRIMASK
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80031c0:	657b      	str	r3, [r7, #84]	; 0x54
 80031c2:	2301      	movs	r3, #1
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	0549      	lsls	r1, r1, #21
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	e047      	b.n	800327e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	015b      	lsls	r3, r3, #5
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d107      	bne.n	800320a <UART_Start_Receive_IT+0x1b6>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <UART_Start_Receive_IT+0x240>)
 8003206:	675a      	str	r2, [r3, #116]	; 0x74
 8003208:	e002      	b.n	8003210 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <UART_Start_Receive_IT+0x244>)
 800320e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d019      	beq.n	800324c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003218:	f3ef 8310 	mrs	r3, PRIMASK
 800321c:	61fb      	str	r3, [r7, #28]
  return(result);
 800321e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003222:	2301      	movs	r3, #1
 8003224:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2190      	movs	r1, #144	; 0x90
 800323a:	0049      	lsls	r1, r1, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	e018      	b.n	800327e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324c:	f3ef 8310 	mrs	r3, PRIMASK
 8003250:	613b      	str	r3, [r7, #16]
  return(result);
 8003252:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003254:	653b      	str	r3, [r7, #80]	; 0x50
 8003256:	2301      	movs	r3, #1
 8003258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2120      	movs	r1, #32
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003274:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b018      	add	sp, #96	; 0x60
 8003286:	bd80      	pop	{r7, pc}
 8003288:	000001ff 	.word	0x000001ff
 800328c:	080039c5 	.word	0x080039c5
 8003290:	080036d9 	.word	0x080036d9
 8003294:	08003565 	.word	0x08003565
 8003298:	080033f1 	.word	0x080033f1

0800329c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08e      	sub	sp, #56	; 0x38
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	617b      	str	r3, [r7, #20]
  return(result);
 80032aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
 80032ae:	2301      	movs	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4926      	ldr	r1, [pc, #152]	; (8003360 <UART_EndRxTransfer+0xc4>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8310 	mrs	r3, PRIMASK
 80032da:	623b      	str	r3, [r7, #32]
  return(result);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032de:	633b      	str	r3, [r7, #48]	; 0x30
 80032e0:	2301      	movs	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	f383 8810 	msr	PRIMASK, r3
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	491b      	ldr	r1, [pc, #108]	; (8003364 <UART_EndRxTransfer+0xc8>)
 80032f8:	400a      	ands	r2, r1
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d118      	bne.n	8003342 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003310:	f3ef 8310 	mrs	r3, PRIMASK
 8003314:	60bb      	str	r3, [r7, #8]
  return(result);
 8003316:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800331a:	2301      	movs	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f383 8810 	msr	PRIMASK, r3
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2110      	movs	r1, #16
 8003332:	438a      	bics	r2, r1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	228c      	movs	r2, #140	; 0x8c
 8003346:	2120      	movs	r1, #32
 8003348:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b00e      	add	sp, #56	; 0x38
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	fffffedf 	.word	0xfffffedf
 8003364:	effffffe 	.word	0xeffffffe

08003368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	225e      	movs	r2, #94	; 0x5e
 800337a:	2100      	movs	r1, #0
 800337c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2256      	movs	r2, #86	; 0x56
 8003382:	2100      	movs	r1, #0
 8003384:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	0018      	movs	r0, r3
 800338a:	f7ff fae1 	bl	8002950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	2301      	movs	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2140      	movs	r1, #64	; 0x40
 80033c0:	438a      	bics	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2288      	movs	r2, #136	; 0x88
 80033d4:	2120      	movs	r1, #32
 80033d6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7fd f803 	bl	80003ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b006      	add	sp, #24
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b090      	sub	sp, #64	; 0x40
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033f8:	203e      	movs	r0, #62	; 0x3e
 80033fa:	183b      	adds	r3, r7, r0
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	2160      	movs	r1, #96	; 0x60
 8003400:	5a52      	ldrh	r2, [r2, r1]
 8003402:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	228c      	movs	r2, #140	; 0x8c
 8003408:	589b      	ldr	r3, [r3, r2]
 800340a:	2b22      	cmp	r3, #34	; 0x22
 800340c:	d000      	beq.n	8003410 <UART_RxISR_8BIT+0x20>
 800340e:	e09a      	b.n	8003546 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003416:	213c      	movs	r1, #60	; 0x3c
 8003418:	187b      	adds	r3, r7, r1
 800341a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800341c:	187b      	adds	r3, r7, r1
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	183b      	adds	r3, r7, r0
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b2d9      	uxtb	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	400a      	ands	r2, r1
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	225e      	movs	r2, #94	; 0x5e
 8003440:	5a9b      	ldrh	r3, [r3, r2]
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b299      	uxth	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	225e      	movs	r2, #94	; 0x5e
 800344c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	225e      	movs	r2, #94	; 0x5e
 8003452:	5a9b      	ldrh	r3, [r3, r2]
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d000      	beq.n	800345c <UART_RxISR_8BIT+0x6c>
 800345a:	e07c      	b.n	8003556 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	61bb      	str	r3, [r7, #24]
  return(result);
 8003462:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
 8003466:	2301      	movs	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4938      	ldr	r1, [pc, #224]	; (8003560 <UART_RxISR_8BIT+0x170>)
 800347e:	400a      	ands	r2, r1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348e:	f3ef 8310 	mrs	r3, PRIMASK
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
 8003498:	2301      	movs	r3, #1
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	f383 8810 	msr	PRIMASK, r3
}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2101      	movs	r1, #1
 80034b0:	438a      	bics	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	228c      	movs	r2, #140	; 0x8c
 80034c4:	2120      	movs	r1, #32
 80034c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d12f      	bne.n	800353c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
 80034ec:	2301      	movs	r3, #1
 80034ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2110      	movs	r1, #16
 8003504:	438a      	bics	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	2210      	movs	r2, #16
 800351c:	4013      	ands	r3, r2
 800351e:	2b10      	cmp	r3, #16
 8003520:	d103      	bne.n	800352a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2210      	movs	r2, #16
 8003528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	225c      	movs	r2, #92	; 0x5c
 800352e:	5a9a      	ldrh	r2, [r3, r2]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	0011      	movs	r1, r2
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fa13 	bl	8002960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800353a:	e00c      	b.n	8003556 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	0018      	movs	r0, r3
 8003540:	f7fc ff5c 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 8003544:	e007      	b.n	8003556 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2108      	movs	r1, #8
 8003552:	430a      	orrs	r2, r1
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b010      	add	sp, #64	; 0x40
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	fffffedf 	.word	0xfffffedf

08003564 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b090      	sub	sp, #64	; 0x40
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800356c:	203e      	movs	r0, #62	; 0x3e
 800356e:	183b      	adds	r3, r7, r0
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	2160      	movs	r1, #96	; 0x60
 8003574:	5a52      	ldrh	r2, [r2, r1]
 8003576:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	228c      	movs	r2, #140	; 0x8c
 800357c:	589b      	ldr	r3, [r3, r2]
 800357e:	2b22      	cmp	r3, #34	; 0x22
 8003580:	d000      	beq.n	8003584 <UART_RxISR_16BIT+0x20>
 8003582:	e09a      	b.n	80036ba <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800358a:	213c      	movs	r1, #60	; 0x3c
 800358c:	187b      	adds	r3, r7, r1
 800358e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003596:	187b      	adds	r3, r7, r1
 8003598:	183a      	adds	r2, r7, r0
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	1c9a      	adds	r2, r3, #2
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	225e      	movs	r2, #94	; 0x5e
 80035b4:	5a9b      	ldrh	r3, [r3, r2]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b299      	uxth	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	225e      	movs	r2, #94	; 0x5e
 80035c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	225e      	movs	r2, #94	; 0x5e
 80035c6:	5a9b      	ldrh	r3, [r3, r2]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d000      	beq.n	80035d0 <UART_RxISR_16BIT+0x6c>
 80035ce:	e07c      	b.n	80036ca <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d0:	f3ef 8310 	mrs	r3, PRIMASK
 80035d4:	617b      	str	r3, [r7, #20]
  return(result);
 80035d6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4938      	ldr	r1, [pc, #224]	; (80036d4 <UART_RxISR_16BIT+0x170>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003602:	f3ef 8310 	mrs	r3, PRIMASK
 8003606:	623b      	str	r3, [r7, #32]
  return(result);
 8003608:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	633b      	str	r3, [r7, #48]	; 0x30
 800360c:	2301      	movs	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f383 8810 	msr	PRIMASK, r3
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	438a      	bics	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	228c      	movs	r2, #140	; 0x8c
 8003638:	2120      	movs	r1, #32
 800363a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d12f      	bne.n	80036b0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003656:	f3ef 8310 	mrs	r3, PRIMASK
 800365a:	60bb      	str	r3, [r7, #8]
  return(result);
 800365c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	2301      	movs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f383 8810 	msr	PRIMASK, r3
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2110      	movs	r1, #16
 8003678:	438a      	bics	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f383 8810 	msr	PRIMASK, r3
}
 8003686:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	2210      	movs	r2, #16
 8003690:	4013      	ands	r3, r2
 8003692:	2b10      	cmp	r3, #16
 8003694:	d103      	bne.n	800369e <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2210      	movs	r2, #16
 800369c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	225c      	movs	r2, #92	; 0x5c
 80036a2:	5a9a      	ldrh	r2, [r3, r2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff f959 	bl	8002960 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036ae:	e00c      	b.n	80036ca <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fc fea2 	bl	80003fc <HAL_UART_RxCpltCallback>
}
 80036b8:	e007      	b.n	80036ca <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699a      	ldr	r2, [r3, #24]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2108      	movs	r1, #8
 80036c6:	430a      	orrs	r2, r1
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b010      	add	sp, #64	; 0x40
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	fffffedf 	.word	0xfffffedf

080036d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b09c      	sub	sp, #112	; 0x70
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80036e0:	236a      	movs	r3, #106	; 0x6a
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	2160      	movs	r1, #96	; 0x60
 80036e8:	5a52      	ldrh	r2, [r2, r1]
 80036ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	228c      	movs	r2, #140	; 0x8c
 8003708:	589b      	ldr	r3, [r3, r2]
 800370a:	2b22      	cmp	r3, #34	; 0x22
 800370c:	d000      	beq.n	8003710 <UART_RxISR_8BIT_FIFOEN+0x38>
 800370e:	e144      	b.n	800399a <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003710:	235e      	movs	r3, #94	; 0x5e
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	2168      	movs	r1, #104	; 0x68
 8003718:	5a52      	ldrh	r2, [r2, r1]
 800371a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800371c:	e0eb      	b.n	80038f6 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	215c      	movs	r1, #92	; 0x5c
 8003726:	187b      	adds	r3, r7, r1
 8003728:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800372a:	187b      	adds	r3, r7, r1
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b2da      	uxtb	r2, r3
 8003730:	236a      	movs	r3, #106	; 0x6a
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b2d9      	uxtb	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373c:	400a      	ands	r2, r1
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	225e      	movs	r2, #94	; 0x5e
 8003750:	5a9b      	ldrh	r3, [r3, r2]
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b299      	uxth	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	225e      	movs	r2, #94	; 0x5e
 800375c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003768:	2207      	movs	r2, #7
 800376a:	4013      	ands	r3, r2
 800376c:	d049      	beq.n	8003802 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	d010      	beq.n	8003798 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003776:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4013      	ands	r3, r2
 800377e:	d00b      	beq.n	8003798 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2201      	movs	r2, #1
 8003786:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2290      	movs	r2, #144	; 0x90
 800378c:	589b      	ldr	r3, [r3, r2]
 800378e:	2201      	movs	r2, #1
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2190      	movs	r1, #144	; 0x90
 8003796:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	d00f      	beq.n	80037c0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80037a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a2:	2201      	movs	r2, #1
 80037a4:	4013      	ands	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2202      	movs	r2, #2
 80037ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2290      	movs	r2, #144	; 0x90
 80037b4:	589b      	ldr	r3, [r3, r2]
 80037b6:	2204      	movs	r2, #4
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2190      	movs	r1, #144	; 0x90
 80037be:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	2204      	movs	r2, #4
 80037c4:	4013      	ands	r3, r2
 80037c6:	d00f      	beq.n	80037e8 <UART_RxISR_8BIT_FIFOEN+0x110>
 80037c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ca:	2201      	movs	r2, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2204      	movs	r2, #4
 80037d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2290      	movs	r2, #144	; 0x90
 80037dc:	589b      	ldr	r3, [r3, r2]
 80037de:	2202      	movs	r2, #2
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2190      	movs	r1, #144	; 0x90
 80037e6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2290      	movs	r2, #144	; 0x90
 80037ec:	589b      	ldr	r3, [r3, r2]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7ff f8ab 	bl	8002950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2290      	movs	r2, #144	; 0x90
 80037fe:	2100      	movs	r1, #0
 8003800:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	225e      	movs	r2, #94	; 0x5e
 8003806:	5a9b      	ldrh	r3, [r3, r2]
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d173      	bne.n	80038f6 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380e:	f3ef 8310 	mrs	r3, PRIMASK
 8003812:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003816:	65bb      	str	r3, [r7, #88]	; 0x58
 8003818:	2301      	movs	r3, #1
 800381a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4961      	ldr	r1, [pc, #388]	; (80039b4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8003830:	400a      	ands	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	f383 8810 	msr	PRIMASK, r3
}
 800383e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003840:	f3ef 8310 	mrs	r3, PRIMASK
 8003844:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003848:	657b      	str	r3, [r7, #84]	; 0x54
 800384a:	2301      	movs	r3, #1
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4955      	ldr	r1, [pc, #340]	; (80039b8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8003862:	400a      	ands	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003868:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386c:	f383 8810 	msr	PRIMASK, r3
}
 8003870:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	228c      	movs	r2, #140	; 0x8c
 8003876:	2120      	movs	r1, #32
 8003878:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d12f      	bne.n	80038ee <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003894:	f3ef 8310 	mrs	r3, PRIMASK
 8003898:	623b      	str	r3, [r7, #32]
  return(result);
 800389a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	653b      	str	r3, [r7, #80]	; 0x50
 800389e:	2301      	movs	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2110      	movs	r1, #16
 80038b6:	438a      	bics	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	f383 8810 	msr	PRIMASK, r3
}
 80038c4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2210      	movs	r2, #16
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d103      	bne.n	80038dc <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2210      	movs	r2, #16
 80038da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	225c      	movs	r2, #92	; 0x5c
 80038e0:	5a9a      	ldrh	r2, [r3, r2]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	0011      	movs	r1, r2
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff f83a 	bl	8002960 <HAL_UARTEx_RxEventCallback>
 80038ec:	e003      	b.n	80038f6 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fc fd83 	bl	80003fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80038f6:	235e      	movs	r3, #94	; 0x5e
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <UART_RxISR_8BIT_FIFOEN+0x232>
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	2220      	movs	r2, #32
 8003904:	4013      	ands	r3, r2
 8003906:	d000      	beq.n	800390a <UART_RxISR_8BIT_FIFOEN+0x232>
 8003908:	e709      	b.n	800371e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800390a:	204e      	movs	r0, #78	; 0x4e
 800390c:	183b      	adds	r3, r7, r0
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	215e      	movs	r1, #94	; 0x5e
 8003912:	5a52      	ldrh	r2, [r2, r1]
 8003914:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003916:	0001      	movs	r1, r0
 8003918:	187b      	adds	r3, r7, r1
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d044      	beq.n	80039aa <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2268      	movs	r2, #104	; 0x68
 8003924:	5a9b      	ldrh	r3, [r3, r2]
 8003926:	187a      	adds	r2, r7, r1
 8003928:	8812      	ldrh	r2, [r2, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d23d      	bcs.n	80039aa <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	60bb      	str	r3, [r7, #8]
  return(result);
 8003934:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003936:	64bb      	str	r3, [r7, #72]	; 0x48
 8003938:	2301      	movs	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	491b      	ldr	r1, [pc, #108]	; (80039bc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003950:	400a      	ands	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003964:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003966:	f3ef 8310 	mrs	r3, PRIMASK
 800396a:	617b      	str	r3, [r7, #20]
  return(result);
 800396c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800396e:	647b      	str	r3, [r7, #68]	; 0x44
 8003970:	2301      	movs	r3, #1
 8003972:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f383 8810 	msr	PRIMASK, r3
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2120      	movs	r1, #32
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f383 8810 	msr	PRIMASK, r3
}
 8003996:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003998:	e007      	b.n	80039aa <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2108      	movs	r1, #8
 80039a6:	430a      	orrs	r2, r1
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b01c      	add	sp, #112	; 0x70
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	fffffeff 	.word	0xfffffeff
 80039b8:	effffffe 	.word	0xeffffffe
 80039bc:	efffffff 	.word	0xefffffff
 80039c0:	080033f1 	.word	0x080033f1

080039c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b09e      	sub	sp, #120	; 0x78
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80039cc:	2372      	movs	r3, #114	; 0x72
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	2160      	movs	r1, #96	; 0x60
 80039d4:	5a52      	ldrh	r2, [r2, r1]
 80039d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	228c      	movs	r2, #140	; 0x8c
 80039f4:	589b      	ldr	r3, [r3, r2]
 80039f6:	2b22      	cmp	r3, #34	; 0x22
 80039f8:	d000      	beq.n	80039fc <UART_RxISR_16BIT_FIFOEN+0x38>
 80039fa:	e144      	b.n	8003c86 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80039fc:	2366      	movs	r3, #102	; 0x66
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	2168      	movs	r1, #104	; 0x68
 8003a04:	5a52      	ldrh	r2, [r2, r1]
 8003a06:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003a08:	e0eb      	b.n	8003be2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a10:	2164      	movs	r1, #100	; 0x64
 8003a12:	187b      	adds	r3, r7, r1
 8003a14:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2272      	movs	r2, #114	; 0x72
 8003a20:	18ba      	adds	r2, r7, r2
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	8812      	ldrh	r2, [r2, #0]
 8003a26:	4013      	ands	r3, r2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	225e      	movs	r2, #94	; 0x5e
 8003a3c:	5a9b      	ldrh	r3, [r3, r2]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b299      	uxth	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	225e      	movs	r2, #94	; 0x5e
 8003a48:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	2207      	movs	r2, #7
 8003a56:	4013      	ands	r3, r2
 8003a58:	d049      	beq.n	8003aee <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d010      	beq.n	8003a84 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003a62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d00b      	beq.n	8003a84 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2201      	movs	r2, #1
 8003a72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2290      	movs	r2, #144	; 0x90
 8003a78:	589b      	ldr	r3, [r3, r2]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2190      	movs	r1, #144	; 0x90
 8003a82:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a86:	2202      	movs	r2, #2
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d00f      	beq.n	8003aac <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a8e:	2201      	movs	r2, #1
 8003a90:	4013      	ands	r3, r2
 8003a92:	d00b      	beq.n	8003aac <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2290      	movs	r2, #144	; 0x90
 8003aa0:	589b      	ldr	r3, [r3, r2]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2190      	movs	r1, #144	; 0x90
 8003aaa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d00f      	beq.n	8003ad4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003ab4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2290      	movs	r2, #144	; 0x90
 8003ac8:	589b      	ldr	r3, [r3, r2]
 8003aca:	2202      	movs	r2, #2
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2190      	movs	r1, #144	; 0x90
 8003ad2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2290      	movs	r2, #144	; 0x90
 8003ad8:	589b      	ldr	r3, [r3, r2]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7fe ff35 	bl	8002950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2290      	movs	r2, #144	; 0x90
 8003aea:	2100      	movs	r1, #0
 8003aec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	225e      	movs	r2, #94	; 0x5e
 8003af2:	5a9b      	ldrh	r3, [r3, r2]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d173      	bne.n	8003be2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afa:	f3ef 8310 	mrs	r3, PRIMASK
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b04:	2301      	movs	r3, #1
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4961      	ldr	r1, [pc, #388]	; (8003ca0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b36:	2301      	movs	r3, #1
 8003b38:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4955      	ldr	r1, [pc, #340]	; (8003ca4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	228c      	movs	r2, #140	; 0x8c
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12f      	bne.n	8003bda <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b80:	f3ef 8310 	mrs	r3, PRIMASK
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b88:	657b      	str	r3, [r7, #84]	; 0x54
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2110      	movs	r1, #16
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	2210      	movs	r2, #16
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d103      	bne.n	8003bc8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	225c      	movs	r2, #92	; 0x5c
 8003bcc:	5a9a      	ldrh	r2, [r3, r2]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0011      	movs	r1, r2
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7fe fec4 	bl	8002960 <HAL_UARTEx_RxEventCallback>
 8003bd8:	e003      	b.n	8003be2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fc fc0d 	bl	80003fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003be2:	2366      	movs	r3, #102	; 0x66
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <UART_RxISR_16BIT_FIFOEN+0x232>
 8003bec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bee:	2220      	movs	r2, #32
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d000      	beq.n	8003bf6 <UART_RxISR_16BIT_FIFOEN+0x232>
 8003bf4:	e709      	b.n	8003a0a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003bf6:	2052      	movs	r0, #82	; 0x52
 8003bf8:	183b      	adds	r3, r7, r0
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	215e      	movs	r1, #94	; 0x5e
 8003bfe:	5a52      	ldrh	r2, [r2, r1]
 8003c00:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003c02:	0001      	movs	r1, r0
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d044      	beq.n	8003c96 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2268      	movs	r2, #104	; 0x68
 8003c10:	5a9b      	ldrh	r3, [r3, r2]
 8003c12:	187a      	adds	r2, r7, r1
 8003c14:	8812      	ldrh	r2, [r2, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d23d      	bcs.n	8003c96 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c20:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c24:	2301      	movs	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f383 8810 	msr	PRIMASK, r3
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a17      	ldr	r2, [pc, #92]	; (8003cac <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8003c50:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c58:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2120      	movs	r1, #32
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c84:	e007      	b.n	8003c96 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2108      	movs	r1, #8
 8003c92:	430a      	orrs	r2, r1
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	b01e      	add	sp, #120	; 0x78
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	fffffeff 	.word	0xfffffeff
 8003ca4:	effffffe 	.word	0xeffffffe
 8003ca8:	efffffff 	.word	0xefffffff
 8003cac:	08003565 	.word	0x08003565

08003cb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b002      	add	sp, #8
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b002      	add	sp, #8
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2284      	movs	r2, #132	; 0x84
 8003cec:	5c9b      	ldrb	r3, [r3, r2]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UARTEx_DisableFifoMode+0x16>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e027      	b.n	8003d46 <HAL_UARTEx_DisableFifoMode+0x66>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2284      	movs	r2, #132	; 0x84
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2288      	movs	r2, #136	; 0x88
 8003d02:	2124      	movs	r1, #36	; 0x24
 8003d04:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	438a      	bics	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2288      	movs	r2, #136	; 0x88
 8003d38:	2120      	movs	r1, #32
 8003d3a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2284      	movs	r2, #132	; 0x84
 8003d40:	2100      	movs	r1, #0
 8003d42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b004      	add	sp, #16
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	dfffffff 	.word	0xdfffffff

08003d54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2284      	movs	r2, #132	; 0x84
 8003d62:	5c9b      	ldrb	r3, [r3, r2]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e02e      	b.n	8003dca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2284      	movs	r2, #132	; 0x84
 8003d70:	2101      	movs	r1, #1
 8003d72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2288      	movs	r2, #136	; 0x88
 8003d78:	2124      	movs	r1, #36	; 0x24
 8003d7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	438a      	bics	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	08d9      	lsrs	r1, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f000 f854 	bl	8003e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2288      	movs	r2, #136	; 0x88
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2284      	movs	r2, #132	; 0x84
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b004      	add	sp, #16
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2284      	movs	r2, #132	; 0x84
 8003de2:	5c9b      	ldrb	r3, [r3, r2]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e02f      	b.n	8003e4c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2284      	movs	r2, #132	; 0x84
 8003df0:	2101      	movs	r1, #1
 8003df2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2288      	movs	r2, #136	; 0x88
 8003df8:	2124      	movs	r1, #36	; 0x24
 8003dfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2101      	movs	r1, #1
 8003e10:	438a      	bics	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f813 	bl	8003e58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2288      	movs	r2, #136	; 0x88
 8003e3e:	2120      	movs	r1, #32
 8003e40:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2284      	movs	r2, #132	; 0x84
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b004      	add	sp, #16
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	f1ffffff 	.word	0xf1ffffff

08003e58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d108      	bne.n	8003e7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	226a      	movs	r2, #106	; 0x6a
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2268      	movs	r2, #104	; 0x68
 8003e74:	2101      	movs	r1, #1
 8003e76:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e78:	e043      	b.n	8003f02 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e7a:	260f      	movs	r6, #15
 8003e7c:	19bb      	adds	r3, r7, r6
 8003e7e:	2208      	movs	r2, #8
 8003e80:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e82:	200e      	movs	r0, #14
 8003e84:	183b      	adds	r3, r7, r0
 8003e86:	2208      	movs	r2, #8
 8003e88:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	0e5b      	lsrs	r3, r3, #25
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	240d      	movs	r4, #13
 8003e96:	193b      	adds	r3, r7, r4
 8003e98:	2107      	movs	r1, #7
 8003e9a:	400a      	ands	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	0f5b      	lsrs	r3, r3, #29
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	250c      	movs	r5, #12
 8003eaa:	197b      	adds	r3, r7, r5
 8003eac:	2107      	movs	r1, #7
 8003eae:	400a      	ands	r2, r1
 8003eb0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eb2:	183b      	adds	r3, r7, r0
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	197a      	adds	r2, r7, r5
 8003eb8:	7812      	ldrb	r2, [r2, #0]
 8003eba:	4914      	ldr	r1, [pc, #80]	; (8003f0c <UARTEx_SetNbDataToProcess+0xb4>)
 8003ebc:	5c8a      	ldrb	r2, [r1, r2]
 8003ebe:	435a      	muls	r2, r3
 8003ec0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ec2:	197b      	adds	r3, r7, r5
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eca:	0019      	movs	r1, r3
 8003ecc:	f7fc f9a2 	bl	8000214 <__divsi3>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	b299      	uxth	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	226a      	movs	r2, #106	; 0x6a
 8003ed8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eda:	19bb      	adds	r3, r7, r6
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	193a      	adds	r2, r7, r4
 8003ee0:	7812      	ldrb	r2, [r2, #0]
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <UARTEx_SetNbDataToProcess+0xb4>)
 8003ee4:	5c8a      	ldrb	r2, [r1, r2]
 8003ee6:	435a      	muls	r2, r3
 8003ee8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	f7fc f98e 	bl	8000214 <__divsi3>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	b299      	uxth	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2268      	movs	r2, #104	; 0x68
 8003f00:	5299      	strh	r1, [r3, r2]
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b005      	add	sp, #20
 8003f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	08003ffc 	.word	0x08003ffc
 8003f10:	08004004 	.word	0x08004004

08003f14 <__libc_init_array>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	2600      	movs	r6, #0
 8003f18:	4d0c      	ldr	r5, [pc, #48]	; (8003f4c <__libc_init_array+0x38>)
 8003f1a:	4c0d      	ldr	r4, [pc, #52]	; (8003f50 <__libc_init_array+0x3c>)
 8003f1c:	1b64      	subs	r4, r4, r5
 8003f1e:	10a4      	asrs	r4, r4, #2
 8003f20:	42a6      	cmp	r6, r4
 8003f22:	d109      	bne.n	8003f38 <__libc_init_array+0x24>
 8003f24:	2600      	movs	r6, #0
 8003f26:	f000 f821 	bl	8003f6c <_init>
 8003f2a:	4d0a      	ldr	r5, [pc, #40]	; (8003f54 <__libc_init_array+0x40>)
 8003f2c:	4c0a      	ldr	r4, [pc, #40]	; (8003f58 <__libc_init_array+0x44>)
 8003f2e:	1b64      	subs	r4, r4, r5
 8003f30:	10a4      	asrs	r4, r4, #2
 8003f32:	42a6      	cmp	r6, r4
 8003f34:	d105      	bne.n	8003f42 <__libc_init_array+0x2e>
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	00b3      	lsls	r3, r6, #2
 8003f3a:	58eb      	ldr	r3, [r5, r3]
 8003f3c:	4798      	blx	r3
 8003f3e:	3601      	adds	r6, #1
 8003f40:	e7ee      	b.n	8003f20 <__libc_init_array+0xc>
 8003f42:	00b3      	lsls	r3, r6, #2
 8003f44:	58eb      	ldr	r3, [r5, r3]
 8003f46:	4798      	blx	r3
 8003f48:	3601      	adds	r6, #1
 8003f4a:	e7f2      	b.n	8003f32 <__libc_init_array+0x1e>
 8003f4c:	0800400c 	.word	0x0800400c
 8003f50:	0800400c 	.word	0x0800400c
 8003f54:	0800400c 	.word	0x0800400c
 8003f58:	08004010 	.word	0x08004010

08003f5c <memset>:
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	1882      	adds	r2, r0, r2
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d100      	bne.n	8003f66 <memset+0xa>
 8003f64:	4770      	bx	lr
 8003f66:	7019      	strb	r1, [r3, #0]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	e7f9      	b.n	8003f60 <memset+0x4>

08003f6c <_init>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr

08003f78 <_fini>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr
