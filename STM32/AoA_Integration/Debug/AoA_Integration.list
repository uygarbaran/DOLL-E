
AoA_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008314  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008528  08008528  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08008528  08008528  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008528  08008528  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800852c  0800852c  0001852c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000001c  0800854c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  0800854c  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d25  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a6  00000000  00000000  00031d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00034010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001577e  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112db  00000000  00000000  0004b446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b698  00000000  00000000  0005c721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7db9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  000e7e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000001c 	.word	0x2000001c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080083b4 	.word	0x080083b4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000020 	.word	0x20000020
 80000fc:	080083b4 	.word	0x080083b4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f001 f99b 	bl	8001730 <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f001 f905 	bl	8001610 <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fd6c 	bl	8000eec <__aeabi_dsub>
 8000414:	f001 f8fc 	bl	8001610 <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_ddiv>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	4657      	mov	r7, sl
 800042c:	464e      	mov	r6, r9
 800042e:	4645      	mov	r5, r8
 8000430:	46de      	mov	lr, fp
 8000432:	b5e0      	push	{r5, r6, r7, lr}
 8000434:	4681      	mov	r9, r0
 8000436:	0005      	movs	r5, r0
 8000438:	030c      	lsls	r4, r1, #12
 800043a:	0048      	lsls	r0, r1, #1
 800043c:	4692      	mov	sl, r2
 800043e:	001f      	movs	r7, r3
 8000440:	b085      	sub	sp, #20
 8000442:	0b24      	lsrs	r4, r4, #12
 8000444:	0d40      	lsrs	r0, r0, #21
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	2800      	cmp	r0, #0
 800044a:	d100      	bne.n	800044e <__aeabi_ddiv+0x26>
 800044c:	e156      	b.n	80006fc <__aeabi_ddiv+0x2d4>
 800044e:	4bd4      	ldr	r3, [pc, #848]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000450:	4298      	cmp	r0, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x2e>
 8000454:	e172      	b.n	800073c <__aeabi_ddiv+0x314>
 8000456:	0f6b      	lsrs	r3, r5, #29
 8000458:	00e4      	lsls	r4, r4, #3
 800045a:	431c      	orrs	r4, r3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4323      	orrs	r3, r4
 8000462:	4698      	mov	r8, r3
 8000464:	4bcf      	ldr	r3, [pc, #828]	; (80007a4 <__aeabi_ddiv+0x37c>)
 8000466:	00ed      	lsls	r5, r5, #3
 8000468:	469b      	mov	fp, r3
 800046a:	2300      	movs	r3, #0
 800046c:	4699      	mov	r9, r3
 800046e:	4483      	add	fp, r0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	033c      	lsls	r4, r7, #12
 8000474:	007b      	lsls	r3, r7, #1
 8000476:	4650      	mov	r0, sl
 8000478:	0b24      	lsrs	r4, r4, #12
 800047a:	0d5b      	lsrs	r3, r3, #21
 800047c:	0fff      	lsrs	r7, r7, #31
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x5c>
 8000482:	e11f      	b.n	80006c4 <__aeabi_ddiv+0x29c>
 8000484:	4ac6      	ldr	r2, [pc, #792]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x64>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x32a>
 800048c:	49c5      	ldr	r1, [pc, #788]	; (80007a4 <__aeabi_ddiv+0x37c>)
 800048e:	0f42      	lsrs	r2, r0, #29
 8000490:	468c      	mov	ip, r1
 8000492:	00e4      	lsls	r4, r4, #3
 8000494:	4659      	mov	r1, fp
 8000496:	4314      	orrs	r4, r2
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	4463      	add	r3, ip
 800049c:	0412      	lsls	r2, r2, #16
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	4314      	orrs	r4, r2
 80004a2:	469b      	mov	fp, r3
 80004a4:	00c2      	lsls	r2, r0, #3
 80004a6:	2000      	movs	r0, #0
 80004a8:	0033      	movs	r3, r6
 80004aa:	407b      	eors	r3, r7
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d827      	bhi.n	8000504 <__aeabi_ddiv+0xdc>
 80004b4:	49bc      	ldr	r1, [pc, #752]	; (80007a8 <__aeabi_ddiv+0x380>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58cb      	ldr	r3, [r1, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	46b2      	mov	sl, r6
 80004be:	9b00      	ldr	r3, [sp, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d016      	beq.n	80004f2 <__aeabi_ddiv+0xca>
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xa2>
 80004c8:	e28e      	b.n	80009e8 <__aeabi_ddiv+0x5c0>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d000      	beq.n	80004d0 <__aeabi_ddiv+0xa8>
 80004ce:	e0d9      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2400      	movs	r4, #0
 80004d4:	2500      	movs	r5, #0
 80004d6:	4652      	mov	r2, sl
 80004d8:	051b      	lsls	r3, r3, #20
 80004da:	4323      	orrs	r3, r4
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b005      	add	sp, #20
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	4baa      	ldr	r3, [pc, #680]	; (80007a0 <__aeabi_ddiv+0x378>)
 80004f8:	e7ed      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80004fa:	46ba      	mov	sl, r7
 80004fc:	46a0      	mov	r8, r4
 80004fe:	0015      	movs	r5, r2
 8000500:	9000      	str	r0, [sp, #0]
 8000502:	e7dc      	b.n	80004be <__aeabi_ddiv+0x96>
 8000504:	4544      	cmp	r4, r8
 8000506:	d200      	bcs.n	800050a <__aeabi_ddiv+0xe2>
 8000508:	e1c7      	b.n	800089a <__aeabi_ddiv+0x472>
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe6>
 800050c:	e1c2      	b.n	8000894 <__aeabi_ddiv+0x46c>
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	469c      	mov	ip, r3
 8000514:	002e      	movs	r6, r5
 8000516:	4640      	mov	r0, r8
 8000518:	2500      	movs	r5, #0
 800051a:	44e3      	add	fp, ip
 800051c:	0223      	lsls	r3, r4, #8
 800051e:	0e14      	lsrs	r4, r2, #24
 8000520:	431c      	orrs	r4, r3
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4699      	mov	r9, r3
 8000526:	0423      	lsls	r3, r4, #16
 8000528:	0c1f      	lsrs	r7, r3, #16
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	4649      	mov	r1, r9
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9701      	str	r7, [sp, #4]
 8000532:	f7ff fe6b 	bl	800020c <__aeabi_uidivmod>
 8000536:	0002      	movs	r2, r0
 8000538:	437a      	muls	r2, r7
 800053a:	040b      	lsls	r3, r1, #16
 800053c:	0c31      	lsrs	r1, r6, #16
 800053e:	4680      	mov	r8, r0
 8000540:	4319      	orrs	r1, r3
 8000542:	428a      	cmp	r2, r1
 8000544:	d907      	bls.n	8000556 <__aeabi_ddiv+0x12e>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	1909      	adds	r1, r1, r4
 800054e:	44e0      	add	r8, ip
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x12e>
 8000554:	e207      	b.n	8000966 <__aeabi_ddiv+0x53e>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4649      	mov	r1, r9
 800055a:	f7ff fe57 	bl	800020c <__aeabi_uidivmod>
 800055e:	0409      	lsls	r1, r1, #16
 8000560:	468c      	mov	ip, r1
 8000562:	0431      	lsls	r1, r6, #16
 8000564:	4666      	mov	r6, ip
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	0c09      	lsrs	r1, r1, #16
 800056a:	4342      	muls	r2, r0
 800056c:	0003      	movs	r3, r0
 800056e:	4331      	orrs	r1, r6
 8000570:	428a      	cmp	r2, r1
 8000572:	d904      	bls.n	800057e <__aeabi_ddiv+0x156>
 8000574:	1909      	adds	r1, r1, r4
 8000576:	3b01      	subs	r3, #1
 8000578:	428c      	cmp	r4, r1
 800057a:	d800      	bhi.n	800057e <__aeabi_ddiv+0x156>
 800057c:	e1ed      	b.n	800095a <__aeabi_ddiv+0x532>
 800057e:	1a88      	subs	r0, r1, r2
 8000580:	4642      	mov	r2, r8
 8000582:	0412      	lsls	r2, r2, #16
 8000584:	431a      	orrs	r2, r3
 8000586:	4690      	mov	r8, r2
 8000588:	4641      	mov	r1, r8
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	040e      	lsls	r6, r1, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	001f      	movs	r7, r3
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	0c36      	lsrs	r6, r6, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c19      	lsrs	r1, r3, #16
 800059c:	000b      	movs	r3, r1
 800059e:	4373      	muls	r3, r6
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	437e      	muls	r6, r7
 80005a4:	9103      	str	r1, [sp, #12]
 80005a6:	4351      	muls	r1, r2
 80005a8:	437a      	muls	r2, r7
 80005aa:	0c1f      	lsrs	r7, r3, #16
 80005ac:	46bc      	mov	ip, r7
 80005ae:	1876      	adds	r6, r6, r1
 80005b0:	4466      	add	r6, ip
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	d903      	bls.n	80005be <__aeabi_ddiv+0x196>
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	468c      	mov	ip, r1
 80005bc:	4462      	add	r2, ip
 80005be:	0c31      	lsrs	r1, r6, #16
 80005c0:	188a      	adds	r2, r1, r2
 80005c2:	0431      	lsls	r1, r6, #16
 80005c4:	041e      	lsls	r6, r3, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	198e      	adds	r6, r1, r6
 80005ca:	4290      	cmp	r0, r2
 80005cc:	d302      	bcc.n	80005d4 <__aeabi_ddiv+0x1ac>
 80005ce:	d112      	bne.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	d210      	bcs.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d4:	4643      	mov	r3, r8
 80005d6:	1e59      	subs	r1, r3, #1
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	001f      	movs	r7, r3
 80005e0:	429d      	cmp	r5, r3
 80005e2:	419b      	sbcs	r3, r3
 80005e4:	425b      	negs	r3, r3
 80005e6:	191b      	adds	r3, r3, r4
 80005e8:	18c0      	adds	r0, r0, r3
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d200      	bcs.n	80005f0 <__aeabi_ddiv+0x1c8>
 80005ee:	e1a0      	b.n	8000932 <__aeabi_ddiv+0x50a>
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0x1cc>
 80005f2:	e19b      	b.n	800092c <__aeabi_ddiv+0x504>
 80005f4:	4688      	mov	r8, r1
 80005f6:	1bae      	subs	r6, r5, r6
 80005f8:	42b5      	cmp	r5, r6
 80005fa:	41ad      	sbcs	r5, r5
 80005fc:	1a80      	subs	r0, r0, r2
 80005fe:	426d      	negs	r5, r5
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1e0>
 8000606:	e1d5      	b.n	80009b4 <__aeabi_ddiv+0x58c>
 8000608:	4649      	mov	r1, r9
 800060a:	f7ff fdff 	bl	800020c <__aeabi_uidivmod>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	040b      	lsls	r3, r1, #16
 8000612:	4342      	muls	r2, r0
 8000614:	0c31      	lsrs	r1, r6, #16
 8000616:	0005      	movs	r5, r0
 8000618:	4319      	orrs	r1, r3
 800061a:	428a      	cmp	r2, r1
 800061c:	d900      	bls.n	8000620 <__aeabi_ddiv+0x1f8>
 800061e:	e16c      	b.n	80008fa <__aeabi_ddiv+0x4d2>
 8000620:	1a88      	subs	r0, r1, r2
 8000622:	4649      	mov	r1, r9
 8000624:	f7ff fdf2 	bl	800020c <__aeabi_uidivmod>
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	0436      	lsls	r6, r6, #16
 800062c:	4342      	muls	r2, r0
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	0c36      	lsrs	r6, r6, #16
 8000632:	0003      	movs	r3, r0
 8000634:	430e      	orrs	r6, r1
 8000636:	42b2      	cmp	r2, r6
 8000638:	d900      	bls.n	800063c <__aeabi_ddiv+0x214>
 800063a:	e153      	b.n	80008e4 <__aeabi_ddiv+0x4bc>
 800063c:	9803      	ldr	r0, [sp, #12]
 800063e:	1ab6      	subs	r6, r6, r2
 8000640:	0002      	movs	r2, r0
 8000642:	042d      	lsls	r5, r5, #16
 8000644:	431d      	orrs	r5, r3
 8000646:	9f02      	ldr	r7, [sp, #8]
 8000648:	042b      	lsls	r3, r5, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	435a      	muls	r2, r3
 800064e:	437b      	muls	r3, r7
 8000650:	469c      	mov	ip, r3
 8000652:	0c29      	lsrs	r1, r5, #16
 8000654:	4348      	muls	r0, r1
 8000656:	0c13      	lsrs	r3, r2, #16
 8000658:	4484      	add	ip, r0
 800065a:	4463      	add	r3, ip
 800065c:	4379      	muls	r1, r7
 800065e:	4298      	cmp	r0, r3
 8000660:	d903      	bls.n	800066a <__aeabi_ddiv+0x242>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0240      	lsls	r0, r0, #9
 8000666:	4684      	mov	ip, r0
 8000668:	4461      	add	r1, ip
 800066a:	0c18      	lsrs	r0, r3, #16
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	1841      	adds	r1, r0, r1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	428e      	cmp	r6, r1
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x254>
 800067a:	e0ff      	b.n	800087c <__aeabi_ddiv+0x454>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x258>
 800067e:	e0fa      	b.n	8000876 <__aeabi_ddiv+0x44e>
 8000680:	2301      	movs	r3, #1
 8000682:	431d      	orrs	r5, r3
 8000684:	4a49      	ldr	r2, [pc, #292]	; (80007ac <__aeabi_ddiv+0x384>)
 8000686:	445a      	add	r2, fp
 8000688:	2a00      	cmp	r2, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_ddiv+0x266>
 800068c:	e0aa      	b.n	80007e4 <__aeabi_ddiv+0x3bc>
 800068e:	076b      	lsls	r3, r5, #29
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0x26c>
 8000692:	e13d      	b.n	8000910 <__aeabi_ddiv+0x4e8>
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	4643      	mov	r3, r8
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	d506      	bpl.n	80006aa <__aeabi_ddiv+0x282>
 800069c:	4642      	mov	r2, r8
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <__aeabi_ddiv+0x388>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	4690      	mov	r8, r2
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	445a      	add	r2, fp
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <__aeabi_ddiv+0x38c>)
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_ddiv+0x28a>
 80006b0:	e71f      	b.n	80004f2 <__aeabi_ddiv+0xca>
 80006b2:	4643      	mov	r3, r8
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	431d      	orrs	r5, r3
 80006b8:	4643      	mov	r3, r8
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	025c      	lsls	r4, r3, #9
 80006be:	0b24      	lsrs	r4, r4, #12
 80006c0:	0d53      	lsrs	r3, r2, #21
 80006c2:	e708      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4322      	orrs	r2, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_ddiv+0x2a4>
 80006ca:	e07b      	b.n	80007c4 <__aeabi_ddiv+0x39c>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x2aa>
 80006d0:	e0fa      	b.n	80008c8 <__aeabi_ddiv+0x4a0>
 80006d2:	0020      	movs	r0, r4
 80006d4:	f001 f836 	bl	8001744 <__clzsi2>
 80006d8:	0002      	movs	r2, r0
 80006da:	3a0b      	subs	r2, #11
 80006dc:	231d      	movs	r3, #29
 80006de:	0001      	movs	r1, r0
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	4652      	mov	r2, sl
 80006e4:	3908      	subs	r1, #8
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	408c      	lsls	r4, r1
 80006ea:	4314      	orrs	r4, r2
 80006ec:	4652      	mov	r2, sl
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_ddiv+0x390>)
 80006f2:	4458      	add	r0, fp
 80006f4:	469b      	mov	fp, r3
 80006f6:	4483      	add	fp, r0
 80006f8:	2000      	movs	r0, #0
 80006fa:	e6d5      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80006fc:	464b      	mov	r3, r9
 80006fe:	4323      	orrs	r3, r4
 8000700:	4698      	mov	r8, r3
 8000702:	d044      	beq.n	800078e <__aeabi_ddiv+0x366>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_ddiv+0x2e2>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_ddiv+0x480>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 f81a 	bl	8001744 <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	0002      	movs	r2, r0
 8000714:	390b      	subs	r1, #11
 8000716:	231d      	movs	r3, #29
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	4649      	mov	r1, r9
 800071c:	0010      	movs	r0, r2
 800071e:	40d9      	lsrs	r1, r3
 8000720:	3808      	subs	r0, #8
 8000722:	4084      	lsls	r4, r0
 8000724:	000b      	movs	r3, r1
 8000726:	464d      	mov	r5, r9
 8000728:	4323      	orrs	r3, r4
 800072a:	4698      	mov	r8, r3
 800072c:	4085      	lsls	r5, r0
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <__aeabi_ddiv+0x394>)
 8000730:	1a83      	subs	r3, r0, r2
 8000732:	469b      	mov	fp, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4699      	mov	r9, r3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	e69a      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800073c:	464b      	mov	r3, r9
 800073e:	4323      	orrs	r3, r4
 8000740:	4698      	mov	r8, r3
 8000742:	d11d      	bne.n	8000780 <__aeabi_ddiv+0x358>
 8000744:	2308      	movs	r3, #8
 8000746:	4699      	mov	r9, r3
 8000748:	3b06      	subs	r3, #6
 800074a:	2500      	movs	r5, #0
 800074c:	4683      	mov	fp, r0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e68f      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000752:	4652      	mov	r2, sl
 8000754:	4322      	orrs	r2, r4
 8000756:	d109      	bne.n	800076c <__aeabi_ddiv+0x344>
 8000758:	2302      	movs	r3, #2
 800075a:	4649      	mov	r1, r9
 800075c:	4319      	orrs	r1, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000760:	4689      	mov	r9, r1
 8000762:	469c      	mov	ip, r3
 8000764:	2400      	movs	r4, #0
 8000766:	2002      	movs	r0, #2
 8000768:	44e3      	add	fp, ip
 800076a:	e69d      	b.n	80004a8 <__aeabi_ddiv+0x80>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000774:	4691      	mov	r9, r2
 8000776:	469c      	mov	ip, r3
 8000778:	4652      	mov	r2, sl
 800077a:	2003      	movs	r0, #3
 800077c:	44e3      	add	fp, ip
 800077e:	e693      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	46a0      	mov	r8, r4
 8000788:	4683      	mov	fp, r0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e671      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800078e:	2304      	movs	r3, #4
 8000790:	4699      	mov	r9, r3
 8000792:	2300      	movs	r3, #0
 8000794:	469b      	mov	fp, r3
 8000796:	3301      	adds	r3, #1
 8000798:	2500      	movs	r5, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	e669      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	fffffc01 	.word	0xfffffc01
 80007a8:	080083cc 	.word	0x080083cc
 80007ac:	000003ff 	.word	0x000003ff
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	000007fe 	.word	0x000007fe
 80007b8:	000003f3 	.word	0x000003f3
 80007bc:	fffffc0d 	.word	0xfffffc0d
 80007c0:	fffff801 	.word	0xfffff801
 80007c4:	4649      	mov	r1, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4689      	mov	r9, r1
 80007cc:	2400      	movs	r4, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	e66a      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	469a      	mov	sl, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4b8a      	ldr	r3, [pc, #552]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80007dc:	0324      	lsls	r4, r4, #12
 80007de:	e67a      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80007e0:	2501      	movs	r5, #1
 80007e2:	426d      	negs	r5, r5
 80007e4:	2301      	movs	r3, #1
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2b38      	cmp	r3, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_ddiv+0x3c6>
 80007ec:	e670      	b.n	80004d0 <__aeabi_ddiv+0xa8>
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x3cc>
 80007f2:	e0bf      	b.n	8000974 <__aeabi_ddiv+0x54c>
 80007f4:	211f      	movs	r1, #31
 80007f6:	4249      	negs	r1, r1
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	4641      	mov	r1, r8
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	2b20      	cmp	r3, #32
 8000802:	d004      	beq.n	800080e <__aeabi_ddiv+0x3e6>
 8000804:	4641      	mov	r1, r8
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <__aeabi_ddiv+0x5e0>)
 8000808:	445b      	add	r3, fp
 800080a:	4099      	lsls	r1, r3
 800080c:	430d      	orrs	r5, r1
 800080e:	1e6b      	subs	r3, r5, #1
 8000810:	419d      	sbcs	r5, r3
 8000812:	2307      	movs	r3, #7
 8000814:	432a      	orrs	r2, r5
 8000816:	001d      	movs	r5, r3
 8000818:	2400      	movs	r4, #0
 800081a:	4015      	ands	r5, r2
 800081c:	4213      	tst	r3, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_ddiv+0x3fa>
 8000820:	e0d4      	b.n	80009cc <__aeabi_ddiv+0x5a4>
 8000822:	210f      	movs	r1, #15
 8000824:	2300      	movs	r3, #0
 8000826:	4011      	ands	r1, r2
 8000828:	2904      	cmp	r1, #4
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0x406>
 800082c:	e0cb      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 800082e:	1d11      	adds	r1, r2, #4
 8000830:	4291      	cmp	r1, r2
 8000832:	4192      	sbcs	r2, r2
 8000834:	4252      	negs	r2, r2
 8000836:	189b      	adds	r3, r3, r2
 8000838:	000a      	movs	r2, r1
 800083a:	0219      	lsls	r1, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_ddiv+0x418>
 800083e:	e0c2      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 8000840:	2301      	movs	r3, #1
 8000842:	2400      	movs	r4, #0
 8000844:	2500      	movs	r5, #0
 8000846:	e646      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	4641      	mov	r1, r8
 800084c:	031b      	lsls	r3, r3, #12
 800084e:	4219      	tst	r1, r3
 8000850:	d008      	beq.n	8000864 <__aeabi_ddiv+0x43c>
 8000852:	421c      	tst	r4, r3
 8000854:	d106      	bne.n	8000864 <__aeabi_ddiv+0x43c>
 8000856:	431c      	orrs	r4, r3
 8000858:	0324      	lsls	r4, r4, #12
 800085a:	46ba      	mov	sl, r7
 800085c:	0015      	movs	r5, r2
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000860:	0b24      	lsrs	r4, r4, #12
 8000862:	e638      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	4643      	mov	r3, r8
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	431c      	orrs	r4, r3
 800086c:	0324      	lsls	r4, r4, #12
 800086e:	46b2      	mov	sl, r6
 8000870:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000872:	0b24      	lsrs	r4, r4, #12
 8000874:	e62f      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <__aeabi_ddiv+0x454>
 800087a:	e703      	b.n	8000684 <__aeabi_ddiv+0x25c>
 800087c:	19a6      	adds	r6, r4, r6
 800087e:	1e68      	subs	r0, r5, #1
 8000880:	42a6      	cmp	r6, r4
 8000882:	d200      	bcs.n	8000886 <__aeabi_ddiv+0x45e>
 8000884:	e08d      	b.n	80009a2 <__aeabi_ddiv+0x57a>
 8000886:	428e      	cmp	r6, r1
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x464>
 800088a:	e0a3      	b.n	80009d4 <__aeabi_ddiv+0x5ac>
 800088c:	d100      	bne.n	8000890 <__aeabi_ddiv+0x468>
 800088e:	e0b3      	b.n	80009f8 <__aeabi_ddiv+0x5d0>
 8000890:	0005      	movs	r5, r0
 8000892:	e6f5      	b.n	8000680 <__aeabi_ddiv+0x258>
 8000894:	42aa      	cmp	r2, r5
 8000896:	d900      	bls.n	800089a <__aeabi_ddiv+0x472>
 8000898:	e639      	b.n	800050e <__aeabi_ddiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	07de      	lsls	r6, r3, #31
 800089e:	0858      	lsrs	r0, r3, #1
 80008a0:	086b      	lsrs	r3, r5, #1
 80008a2:	431e      	orrs	r6, r3
 80008a4:	07ed      	lsls	r5, r5, #31
 80008a6:	e639      	b.n	800051c <__aeabi_ddiv+0xf4>
 80008a8:	4648      	mov	r0, r9
 80008aa:	f000 ff4b 	bl	8001744 <__clzsi2>
 80008ae:	0001      	movs	r1, r0
 80008b0:	0002      	movs	r2, r0
 80008b2:	3115      	adds	r1, #21
 80008b4:	3220      	adds	r2, #32
 80008b6:	291c      	cmp	r1, #28
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_ddiv+0x494>
 80008ba:	e72c      	b.n	8000716 <__aeabi_ddiv+0x2ee>
 80008bc:	464b      	mov	r3, r9
 80008be:	3808      	subs	r0, #8
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2500      	movs	r5, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	e732      	b.n	800072e <__aeabi_ddiv+0x306>
 80008c8:	f000 ff3c 	bl	8001744 <__clzsi2>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	3215      	adds	r2, #21
 80008d2:	3020      	adds	r0, #32
 80008d4:	2a1c      	cmp	r2, #28
 80008d6:	dc00      	bgt.n	80008da <__aeabi_ddiv+0x4b2>
 80008d8:	e700      	b.n	80006dc <__aeabi_ddiv+0x2b4>
 80008da:	4654      	mov	r4, sl
 80008dc:	3b08      	subs	r3, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	409c      	lsls	r4, r3
 80008e2:	e705      	b.n	80006f0 <__aeabi_ddiv+0x2c8>
 80008e4:	1936      	adds	r6, r6, r4
 80008e6:	3b01      	subs	r3, #1
 80008e8:	42b4      	cmp	r4, r6
 80008ea:	d900      	bls.n	80008ee <__aeabi_ddiv+0x4c6>
 80008ec:	e6a6      	b.n	800063c <__aeabi_ddiv+0x214>
 80008ee:	42b2      	cmp	r2, r6
 80008f0:	d800      	bhi.n	80008f4 <__aeabi_ddiv+0x4cc>
 80008f2:	e6a3      	b.n	800063c <__aeabi_ddiv+0x214>
 80008f4:	1e83      	subs	r3, r0, #2
 80008f6:	1936      	adds	r6, r6, r4
 80008f8:	e6a0      	b.n	800063c <__aeabi_ddiv+0x214>
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	3d01      	subs	r5, #1
 80008fe:	428c      	cmp	r4, r1
 8000900:	d900      	bls.n	8000904 <__aeabi_ddiv+0x4dc>
 8000902:	e68d      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000904:	428a      	cmp	r2, r1
 8000906:	d800      	bhi.n	800090a <__aeabi_ddiv+0x4e2>
 8000908:	e68a      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 800090a:	1e85      	subs	r5, r0, #2
 800090c:	1909      	adds	r1, r1, r4
 800090e:	e687      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000910:	230f      	movs	r3, #15
 8000912:	402b      	ands	r3, r5
 8000914:	2b04      	cmp	r3, #4
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x4f2>
 8000918:	e6bc      	b.n	8000694 <__aeabi_ddiv+0x26c>
 800091a:	2305      	movs	r3, #5
 800091c:	425b      	negs	r3, r3
 800091e:	42ab      	cmp	r3, r5
 8000920:	419b      	sbcs	r3, r3
 8000922:	3504      	adds	r5, #4
 8000924:	425b      	negs	r3, r3
 8000926:	08ed      	lsrs	r5, r5, #3
 8000928:	4498      	add	r8, r3
 800092a:	e6b4      	b.n	8000696 <__aeabi_ddiv+0x26e>
 800092c:	42af      	cmp	r7, r5
 800092e:	d900      	bls.n	8000932 <__aeabi_ddiv+0x50a>
 8000930:	e660      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000932:	4282      	cmp	r2, r0
 8000934:	d804      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 8000936:	d000      	beq.n	800093a <__aeabi_ddiv+0x512>
 8000938:	e65c      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 800093a:	42ae      	cmp	r6, r5
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 800093e:	e659      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000940:	2302      	movs	r3, #2
 8000942:	425b      	negs	r3, r3
 8000944:	469c      	mov	ip, r3
 8000946:	9b00      	ldr	r3, [sp, #0]
 8000948:	44e0      	add	r8, ip
 800094a:	469c      	mov	ip, r3
 800094c:	4465      	add	r5, ip
 800094e:	429d      	cmp	r5, r3
 8000950:	419b      	sbcs	r3, r3
 8000952:	425b      	negs	r3, r3
 8000954:	191b      	adds	r3, r3, r4
 8000956:	18c0      	adds	r0, r0, r3
 8000958:	e64d      	b.n	80005f6 <__aeabi_ddiv+0x1ce>
 800095a:	428a      	cmp	r2, r1
 800095c:	d800      	bhi.n	8000960 <__aeabi_ddiv+0x538>
 800095e:	e60e      	b.n	800057e <__aeabi_ddiv+0x156>
 8000960:	1e83      	subs	r3, r0, #2
 8000962:	1909      	adds	r1, r1, r4
 8000964:	e60b      	b.n	800057e <__aeabi_ddiv+0x156>
 8000966:	428a      	cmp	r2, r1
 8000968:	d800      	bhi.n	800096c <__aeabi_ddiv+0x544>
 800096a:	e5f4      	b.n	8000556 <__aeabi_ddiv+0x12e>
 800096c:	1e83      	subs	r3, r0, #2
 800096e:	4698      	mov	r8, r3
 8000970:	1909      	adds	r1, r1, r4
 8000972:	e5f0      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000974:	4925      	ldr	r1, [pc, #148]	; (8000a0c <__aeabi_ddiv+0x5e4>)
 8000976:	0028      	movs	r0, r5
 8000978:	4459      	add	r1, fp
 800097a:	408d      	lsls	r5, r1
 800097c:	4642      	mov	r2, r8
 800097e:	408a      	lsls	r2, r1
 8000980:	1e69      	subs	r1, r5, #1
 8000982:	418d      	sbcs	r5, r1
 8000984:	4641      	mov	r1, r8
 8000986:	40d8      	lsrs	r0, r3
 8000988:	40d9      	lsrs	r1, r3
 800098a:	4302      	orrs	r2, r0
 800098c:	432a      	orrs	r2, r5
 800098e:	000b      	movs	r3, r1
 8000990:	0751      	lsls	r1, r2, #29
 8000992:	d100      	bne.n	8000996 <__aeabi_ddiv+0x56e>
 8000994:	e751      	b.n	800083a <__aeabi_ddiv+0x412>
 8000996:	210f      	movs	r1, #15
 8000998:	4011      	ands	r1, r2
 800099a:	2904      	cmp	r1, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0x578>
 800099e:	e746      	b.n	800082e <__aeabi_ddiv+0x406>
 80009a0:	e74b      	b.n	800083a <__aeabi_ddiv+0x412>
 80009a2:	0005      	movs	r5, r0
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x582>
 80009a8:	e66a      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009aa:	9a00      	ldr	r2, [sp, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d000      	beq.n	80009b2 <__aeabi_ddiv+0x58a>
 80009b0:	e666      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009b2:	e667      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <__aeabi_ddiv+0x5e8>)
 80009b6:	445a      	add	r2, fp
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_ddiv+0x596>
 80009bc:	e710      	b.n	80007e0 <__aeabi_ddiv+0x3b8>
 80009be:	2301      	movs	r3, #1
 80009c0:	2500      	movs	r5, #0
 80009c2:	4498      	add	r8, r3
 80009c4:	e667      	b.n	8000696 <__aeabi_ddiv+0x26e>
 80009c6:	075d      	lsls	r5, r3, #29
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	0b1c      	lsrs	r4, r3, #12
 80009cc:	08d2      	lsrs	r2, r2, #3
 80009ce:	2300      	movs	r3, #0
 80009d0:	4315      	orrs	r5, r2
 80009d2:	e580      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009d4:	9800      	ldr	r0, [sp, #0]
 80009d6:	3d02      	subs	r5, #2
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	4282      	cmp	r2, r0
 80009dc:	41bf      	sbcs	r7, r7
 80009de:	427f      	negs	r7, r7
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	1936      	adds	r6, r6, r4
 80009e4:	9200      	str	r2, [sp, #0]
 80009e6:	e7dd      	b.n	80009a4 <__aeabi_ddiv+0x57c>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	4643      	mov	r3, r8
 80009ec:	0324      	lsls	r4, r4, #12
 80009ee:	431c      	orrs	r4, r3
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80009f4:	0b24      	lsrs	r4, r4, #12
 80009f6:	e56e      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3ea      	bcc.n	80009d4 <__aeabi_ddiv+0x5ac>
 80009fe:	0005      	movs	r5, r0
 8000a00:	e7d3      	b.n	80009aa <__aeabi_ddiv+0x582>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	0000043e 	.word	0x0000043e
 8000a0c:	0000041e 	.word	0x0000041e
 8000a10:	000003ff 	.word	0x000003ff

08000a14 <__aeabi_dmul>:
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	4657      	mov	r7, sl
 8000a18:	464e      	mov	r6, r9
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	46de      	mov	lr, fp
 8000a1e:	b5e0      	push	{r5, r6, r7, lr}
 8000a20:	4698      	mov	r8, r3
 8000a22:	030c      	lsls	r4, r1, #12
 8000a24:	004b      	lsls	r3, r1, #1
 8000a26:	0006      	movs	r6, r0
 8000a28:	4692      	mov	sl, r2
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	0b24      	lsrs	r4, r4, #12
 8000a2e:	0d5b      	lsrs	r3, r3, #21
 8000a30:	0fcf      	lsrs	r7, r1, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dmul+0x24>
 8000a36:	e15c      	b.n	8000cf2 <__aeabi_dmul+0x2de>
 8000a38:	4ad9      	ldr	r2, [pc, #868]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dmul+0x2c>
 8000a3e:	e175      	b.n	8000d2c <__aeabi_dmul+0x318>
 8000a40:	0f42      	lsrs	r2, r0, #29
 8000a42:	00e4      	lsls	r4, r4, #3
 8000a44:	4314      	orrs	r4, r2
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0412      	lsls	r2, r2, #16
 8000a4a:	4314      	orrs	r4, r2
 8000a4c:	4ad5      	ldr	r2, [pc, #852]	; (8000da4 <__aeabi_dmul+0x390>)
 8000a4e:	00c5      	lsls	r5, r0, #3
 8000a50:	4694      	mov	ip, r2
 8000a52:	4463      	add	r3, ip
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	4699      	mov	r9, r3
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	4642      	mov	r2, r8
 8000a60:	031e      	lsls	r6, r3, #12
 8000a62:	0fd2      	lsrs	r2, r2, #31
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4650      	mov	r0, sl
 8000a68:	4690      	mov	r8, r2
 8000a6a:	0b36      	lsrs	r6, r6, #12
 8000a6c:	0d5b      	lsrs	r3, r3, #21
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dmul+0x5e>
 8000a70:	e120      	b.n	8000cb4 <__aeabi_dmul+0x2a0>
 8000a72:	4acb      	ldr	r2, [pc, #812]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dmul+0x66>
 8000a78:	e162      	b.n	8000d40 <__aeabi_dmul+0x32c>
 8000a7a:	49ca      	ldr	r1, [pc, #808]	; (8000da4 <__aeabi_dmul+0x390>)
 8000a7c:	0f42      	lsrs	r2, r0, #29
 8000a7e:	468c      	mov	ip, r1
 8000a80:	9900      	ldr	r1, [sp, #0]
 8000a82:	4463      	add	r3, ip
 8000a84:	00f6      	lsls	r6, r6, #3
 8000a86:	468c      	mov	ip, r1
 8000a88:	4316      	orrs	r6, r2
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	449c      	add	ip, r3
 8000a8e:	0412      	lsls	r2, r2, #16
 8000a90:	4663      	mov	r3, ip
 8000a92:	4316      	orrs	r6, r2
 8000a94:	00c2      	lsls	r2, r0, #3
 8000a96:	2000      	movs	r0, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	9900      	ldr	r1, [sp, #0]
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	3101      	adds	r1, #1
 8000aa0:	468c      	mov	ip, r1
 8000aa2:	4649      	mov	r1, r9
 8000aa4:	407b      	eors	r3, r7
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	290f      	cmp	r1, #15
 8000aaa:	d826      	bhi.n	8000afa <__aeabi_dmul+0xe6>
 8000aac:	4bbe      	ldr	r3, [pc, #760]	; (8000da8 <__aeabi_dmul+0x394>)
 8000aae:	0089      	lsls	r1, r1, #2
 8000ab0:	5859      	ldr	r1, [r3, r1]
 8000ab2:	468f      	mov	pc, r1
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	0034      	movs	r4, r6
 8000aba:	0015      	movs	r5, r2
 8000abc:	4683      	mov	fp, r0
 8000abe:	465b      	mov	r3, fp
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d016      	beq.n	8000af2 <__aeabi_dmul+0xde>
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dmul+0xb6>
 8000ac8:	e203      	b.n	8000ed2 <__aeabi_dmul+0x4be>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dmul+0xbc>
 8000ace:	e0cd      	b.n	8000c6c <__aeabi_dmul+0x258>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	9b01      	ldr	r3, [sp, #4]
 8000ad8:	0512      	lsls	r2, r2, #20
 8000ada:	4322      	orrs	r2, r4
 8000adc:	07db      	lsls	r3, r3, #31
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	b007      	add	sp, #28
 8000ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae8:	46bb      	mov	fp, r7
 8000aea:	46b2      	mov	sl, r6
 8000aec:	46a9      	mov	r9, r5
 8000aee:	46a0      	mov	r8, r4
 8000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af2:	2400      	movs	r4, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	4aaa      	ldr	r2, [pc, #680]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000af8:	e7ed      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000afa:	0c28      	lsrs	r0, r5, #16
 8000afc:	042d      	lsls	r5, r5, #16
 8000afe:	0c2d      	lsrs	r5, r5, #16
 8000b00:	002b      	movs	r3, r5
 8000b02:	0c11      	lsrs	r1, r2, #16
 8000b04:	0412      	lsls	r2, r2, #16
 8000b06:	0c12      	lsrs	r2, r2, #16
 8000b08:	4353      	muls	r3, r2
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	002f      	movs	r7, r5
 8000b10:	4343      	muls	r3, r0
 8000b12:	4699      	mov	r9, r3
 8000b14:	434f      	muls	r7, r1
 8000b16:	444f      	add	r7, r9
 8000b18:	46bb      	mov	fp, r7
 8000b1a:	4647      	mov	r7, r8
 8000b1c:	000b      	movs	r3, r1
 8000b1e:	0c3f      	lsrs	r7, r7, #16
 8000b20:	46ba      	mov	sl, r7
 8000b22:	4343      	muls	r3, r0
 8000b24:	44da      	add	sl, fp
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	45d1      	cmp	r9, sl
 8000b2a:	d904      	bls.n	8000b36 <__aeabi_dmul+0x122>
 8000b2c:	2780      	movs	r7, #128	; 0x80
 8000b2e:	027f      	lsls	r7, r7, #9
 8000b30:	46b9      	mov	r9, r7
 8000b32:	444b      	add	r3, r9
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	4653      	mov	r3, sl
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	469b      	mov	fp, r3
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	041f      	lsls	r7, r3, #16
 8000b40:	4643      	mov	r3, r8
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	4698      	mov	r8, r3
 8000b48:	003b      	movs	r3, r7
 8000b4a:	4443      	add	r3, r8
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	0c33      	lsrs	r3, r6, #16
 8000b50:	0436      	lsls	r6, r6, #16
 8000b52:	0c36      	lsrs	r6, r6, #16
 8000b54:	4698      	mov	r8, r3
 8000b56:	0033      	movs	r3, r6
 8000b58:	4343      	muls	r3, r0
 8000b5a:	4699      	mov	r9, r3
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	4343      	muls	r3, r0
 8000b60:	002f      	movs	r7, r5
 8000b62:	469a      	mov	sl, r3
 8000b64:	4643      	mov	r3, r8
 8000b66:	4377      	muls	r7, r6
 8000b68:	435d      	muls	r5, r3
 8000b6a:	0c38      	lsrs	r0, r7, #16
 8000b6c:	444d      	add	r5, r9
 8000b6e:	1945      	adds	r5, r0, r5
 8000b70:	45a9      	cmp	r9, r5
 8000b72:	d903      	bls.n	8000b7c <__aeabi_dmul+0x168>
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	025b      	lsls	r3, r3, #9
 8000b78:	4699      	mov	r9, r3
 8000b7a:	44ca      	add	sl, r9
 8000b7c:	043f      	lsls	r7, r7, #16
 8000b7e:	0c28      	lsrs	r0, r5, #16
 8000b80:	0c3f      	lsrs	r7, r7, #16
 8000b82:	042d      	lsls	r5, r5, #16
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	0c27      	lsrs	r7, r4, #16
 8000b88:	0424      	lsls	r4, r4, #16
 8000b8a:	0c24      	lsrs	r4, r4, #16
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	0020      	movs	r0, r4
 8000b90:	4350      	muls	r0, r2
 8000b92:	437a      	muls	r2, r7
 8000b94:	4691      	mov	r9, r2
 8000b96:	003a      	movs	r2, r7
 8000b98:	4453      	add	r3, sl
 8000b9a:	9305      	str	r3, [sp, #20]
 8000b9c:	0c03      	lsrs	r3, r0, #16
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	434a      	muls	r2, r1
 8000ba2:	4361      	muls	r1, r4
 8000ba4:	4449      	add	r1, r9
 8000ba6:	4451      	add	r1, sl
 8000ba8:	44ab      	add	fp, r5
 8000baa:	4589      	cmp	r9, r1
 8000bac:	d903      	bls.n	8000bb6 <__aeabi_dmul+0x1a2>
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	444a      	add	r2, r9
 8000bb6:	0400      	lsls	r0, r0, #16
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	0c00      	lsrs	r0, r0, #16
 8000bbc:	0409      	lsls	r1, r1, #16
 8000bbe:	1809      	adds	r1, r1, r0
 8000bc0:	0020      	movs	r0, r4
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4370      	muls	r0, r6
 8000bc8:	435c      	muls	r4, r3
 8000bca:	437e      	muls	r6, r7
 8000bcc:	435f      	muls	r7, r3
 8000bce:	0c03      	lsrs	r3, r0, #16
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	19a4      	adds	r4, r4, r6
 8000bd4:	4444      	add	r4, r8
 8000bd6:	444a      	add	r2, r9
 8000bd8:	9703      	str	r7, [sp, #12]
 8000bda:	42a6      	cmp	r6, r4
 8000bdc:	d904      	bls.n	8000be8 <__aeabi_dmul+0x1d4>
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	025b      	lsls	r3, r3, #9
 8000be2:	4698      	mov	r8, r3
 8000be4:	4447      	add	r7, r8
 8000be6:	9703      	str	r7, [sp, #12]
 8000be8:	0423      	lsls	r3, r4, #16
 8000bea:	9e02      	ldr	r6, [sp, #8]
 8000bec:	469a      	mov	sl, r3
 8000bee:	9b05      	ldr	r3, [sp, #20]
 8000bf0:	445e      	add	r6, fp
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	42ae      	cmp	r6, r5
 8000bf6:	41ad      	sbcs	r5, r5
 8000bf8:	1876      	adds	r6, r6, r1
 8000bfa:	428e      	cmp	r6, r1
 8000bfc:	4189      	sbcs	r1, r1
 8000bfe:	0400      	lsls	r0, r0, #16
 8000c00:	0c00      	lsrs	r0, r0, #16
 8000c02:	4450      	add	r0, sl
 8000c04:	4440      	add	r0, r8
 8000c06:	426d      	negs	r5, r5
 8000c08:	1947      	adds	r7, r0, r5
 8000c0a:	46b8      	mov	r8, r7
 8000c0c:	4693      	mov	fp, r2
 8000c0e:	4249      	negs	r1, r1
 8000c10:	4689      	mov	r9, r1
 8000c12:	44c3      	add	fp, r8
 8000c14:	44d9      	add	r9, fp
 8000c16:	4298      	cmp	r0, r3
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	45a8      	cmp	r8, r5
 8000c1c:	41ad      	sbcs	r5, r5
 8000c1e:	4593      	cmp	fp, r2
 8000c20:	4192      	sbcs	r2, r2
 8000c22:	4589      	cmp	r9, r1
 8000c24:	4189      	sbcs	r1, r1
 8000c26:	426d      	negs	r5, r5
 8000c28:	4240      	negs	r0, r0
 8000c2a:	4328      	orrs	r0, r5
 8000c2c:	0c24      	lsrs	r4, r4, #16
 8000c2e:	4252      	negs	r2, r2
 8000c30:	4249      	negs	r1, r1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	1900      	adds	r0, r0, r4
 8000c38:	1880      	adds	r0, r0, r2
 8000c3a:	18c7      	adds	r7, r0, r3
 8000c3c:	464b      	mov	r3, r9
 8000c3e:	0ddc      	lsrs	r4, r3, #23
 8000c40:	9b04      	ldr	r3, [sp, #16]
 8000c42:	0275      	lsls	r5, r6, #9
 8000c44:	431d      	orrs	r5, r3
 8000c46:	1e6a      	subs	r2, r5, #1
 8000c48:	4195      	sbcs	r5, r2
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	0df6      	lsrs	r6, r6, #23
 8000c4e:	027f      	lsls	r7, r7, #9
 8000c50:	4335      	orrs	r5, r6
 8000c52:	025a      	lsls	r2, r3, #9
 8000c54:	433c      	orrs	r4, r7
 8000c56:	4315      	orrs	r5, r2
 8000c58:	01fb      	lsls	r3, r7, #7
 8000c5a:	d400      	bmi.n	8000c5e <__aeabi_dmul+0x24a>
 8000c5c:	e11c      	b.n	8000e98 <__aeabi_dmul+0x484>
 8000c5e:	2101      	movs	r1, #1
 8000c60:	086a      	lsrs	r2, r5, #1
 8000c62:	400d      	ands	r5, r1
 8000c64:	4315      	orrs	r5, r2
 8000c66:	07e2      	lsls	r2, r4, #31
 8000c68:	4315      	orrs	r5, r2
 8000c6a:	0864      	lsrs	r4, r4, #1
 8000c6c:	494f      	ldr	r1, [pc, #316]	; (8000dac <__aeabi_dmul+0x398>)
 8000c6e:	4461      	add	r1, ip
 8000c70:	2900      	cmp	r1, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_dmul+0x262>
 8000c74:	e0b0      	b.n	8000dd8 <__aeabi_dmul+0x3c4>
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d009      	beq.n	8000c8e <__aeabi_dmul+0x27a>
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	402a      	ands	r2, r5
 8000c7e:	2a04      	cmp	r2, #4
 8000c80:	d005      	beq.n	8000c8e <__aeabi_dmul+0x27a>
 8000c82:	1d2a      	adds	r2, r5, #4
 8000c84:	42aa      	cmp	r2, r5
 8000c86:	41ad      	sbcs	r5, r5
 8000c88:	426d      	negs	r5, r5
 8000c8a:	1964      	adds	r4, r4, r5
 8000c8c:	0015      	movs	r5, r2
 8000c8e:	01e3      	lsls	r3, r4, #7
 8000c90:	d504      	bpl.n	8000c9c <__aeabi_dmul+0x288>
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <__aeabi_dmul+0x39c>)
 8000c96:	00c9      	lsls	r1, r1, #3
 8000c98:	4014      	ands	r4, r2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <__aeabi_dmul+0x3a0>)
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dmul+0x290>
 8000ca2:	e726      	b.n	8000af2 <__aeabi_dmul+0xde>
 8000ca4:	0762      	lsls	r2, r4, #29
 8000ca6:	08ed      	lsrs	r5, r5, #3
 8000ca8:	0264      	lsls	r4, r4, #9
 8000caa:	0549      	lsls	r1, r1, #21
 8000cac:	4315      	orrs	r5, r2
 8000cae:	0b24      	lsrs	r4, r4, #12
 8000cb0:	0d4a      	lsrs	r2, r1, #21
 8000cb2:	e710      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000cb4:	4652      	mov	r2, sl
 8000cb6:	4332      	orrs	r2, r6
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dmul+0x2a8>
 8000cba:	e07f      	b.n	8000dbc <__aeabi_dmul+0x3a8>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dmul+0x2ae>
 8000cc0:	e0dc      	b.n	8000e7c <__aeabi_dmul+0x468>
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	f000 fd3e 	bl	8001744 <__clzsi2>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	3a0b      	subs	r2, #11
 8000ccc:	231d      	movs	r3, #29
 8000cce:	0001      	movs	r1, r0
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	3908      	subs	r1, #8
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	408e      	lsls	r6, r1
 8000cda:	4316      	orrs	r6, r2
 8000cdc:	4652      	mov	r2, sl
 8000cde:	408a      	lsls	r2, r1
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	4935      	ldr	r1, [pc, #212]	; (8000db8 <__aeabi_dmul+0x3a4>)
 8000ce4:	1a18      	subs	r0, r3, r0
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	468c      	mov	ip, r1
 8000cea:	4463      	add	r3, ip
 8000cec:	2000      	movs	r0, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	e6d3      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000cf2:	0025      	movs	r5, r4
 8000cf4:	4305      	orrs	r5, r0
 8000cf6:	d04a      	beq.n	8000d8e <__aeabi_dmul+0x37a>
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dmul+0x2ea>
 8000cfc:	e0b0      	b.n	8000e60 <__aeabi_dmul+0x44c>
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f000 fd20 	bl	8001744 <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	0002      	movs	r2, r0
 8000d08:	390b      	subs	r1, #11
 8000d0a:	231d      	movs	r3, #29
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	0031      	movs	r1, r6
 8000d12:	0035      	movs	r5, r6
 8000d14:	3808      	subs	r0, #8
 8000d16:	4084      	lsls	r4, r0
 8000d18:	40d9      	lsrs	r1, r3
 8000d1a:	4085      	lsls	r5, r0
 8000d1c:	430c      	orrs	r4, r1
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <__aeabi_dmul+0x3a4>)
 8000d20:	1a83      	subs	r3, r0, r2
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	4699      	mov	r9, r3
 8000d28:	469b      	mov	fp, r3
 8000d2a:	e697      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d2c:	0005      	movs	r5, r0
 8000d2e:	4325      	orrs	r5, r4
 8000d30:	d126      	bne.n	8000d80 <__aeabi_dmul+0x36c>
 8000d32:	2208      	movs	r2, #8
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2302      	movs	r3, #2
 8000d38:	2400      	movs	r4, #0
 8000d3a:	4691      	mov	r9, r2
 8000d3c:	469b      	mov	fp, r3
 8000d3e:	e68d      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d40:	4652      	mov	r2, sl
 8000d42:	9b00      	ldr	r3, [sp, #0]
 8000d44:	4332      	orrs	r2, r6
 8000d46:	d110      	bne.n	8000d6a <__aeabi_dmul+0x356>
 8000d48:	4915      	ldr	r1, [pc, #84]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	4463      	add	r3, ip
 8000d50:	4649      	mov	r1, r9
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2302      	movs	r3, #2
 8000d56:	4319      	orrs	r1, r3
 8000d58:	4689      	mov	r9, r1
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	e69d      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000d5e:	465b      	mov	r3, fp
 8000d60:	9701      	str	r7, [sp, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dmul+0x354>
 8000d66:	e6ad      	b.n	8000ac4 <__aeabi_dmul+0xb0>
 8000d68:	e6c3      	b.n	8000af2 <__aeabi_dmul+0xde>
 8000d6a:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	4694      	mov	ip, r2
 8000d70:	4463      	add	r3, ip
 8000d72:	464a      	mov	r2, r9
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2303      	movs	r3, #3
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	e68c      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000d80:	220c      	movs	r2, #12
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2303      	movs	r3, #3
 8000d86:	0005      	movs	r5, r0
 8000d88:	4691      	mov	r9, r2
 8000d8a:	469b      	mov	fp, r3
 8000d8c:	e666      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	4699      	mov	r9, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	2400      	movs	r4, #0
 8000d9a:	469b      	mov	fp, r3
 8000d9c:	e65e      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	fffffc01 	.word	0xfffffc01
 8000da8:	0800840c 	.word	0x0800840c
 8000dac:	000003ff 	.word	0x000003ff
 8000db0:	feffffff 	.word	0xfeffffff
 8000db4:	000007fe 	.word	0x000007fe
 8000db8:	fffffc0d 	.word	0xfffffc0d
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	4319      	orrs	r1, r3
 8000dc2:	4689      	mov	r9, r1
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e667      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	2500      	movs	r5, #0
 8000dd0:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	0324      	lsls	r4, r4, #12
 8000dd6:	e67e      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	1a40      	subs	r0, r0, r1
 8000ddc:	2838      	cmp	r0, #56	; 0x38
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_dmul+0x3ce>
 8000de0:	e676      	b.n	8000ad0 <__aeabi_dmul+0xbc>
 8000de2:	281f      	cmp	r0, #31
 8000de4:	dd5b      	ble.n	8000e9e <__aeabi_dmul+0x48a>
 8000de6:	221f      	movs	r2, #31
 8000de8:	0023      	movs	r3, r4
 8000dea:	4252      	negs	r2, r2
 8000dec:	1a51      	subs	r1, r2, r1
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	0019      	movs	r1, r3
 8000df2:	2820      	cmp	r0, #32
 8000df4:	d003      	beq.n	8000dfe <__aeabi_dmul+0x3ea>
 8000df6:	4a3b      	ldr	r2, [pc, #236]	; (8000ee4 <__aeabi_dmul+0x4d0>)
 8000df8:	4462      	add	r2, ip
 8000dfa:	4094      	lsls	r4, r2
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	1e6a      	subs	r2, r5, #1
 8000e00:	4195      	sbcs	r5, r2
 8000e02:	002a      	movs	r2, r5
 8000e04:	430a      	orrs	r2, r1
 8000e06:	2107      	movs	r1, #7
 8000e08:	000d      	movs	r5, r1
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	4015      	ands	r5, r2
 8000e0e:	4211      	tst	r1, r2
 8000e10:	d05b      	beq.n	8000eca <__aeabi_dmul+0x4b6>
 8000e12:	210f      	movs	r1, #15
 8000e14:	2400      	movs	r4, #0
 8000e16:	4011      	ands	r1, r2
 8000e18:	2904      	cmp	r1, #4
 8000e1a:	d053      	beq.n	8000ec4 <__aeabi_dmul+0x4b0>
 8000e1c:	1d11      	adds	r1, r2, #4
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	4192      	sbcs	r2, r2
 8000e22:	4252      	negs	r2, r2
 8000e24:	18a4      	adds	r4, r4, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	0223      	lsls	r3, r4, #8
 8000e2a:	d54b      	bpl.n	8000ec4 <__aeabi_dmul+0x4b0>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2400      	movs	r4, #0
 8000e30:	2500      	movs	r5, #0
 8000e32:	e650      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	031b      	lsls	r3, r3, #12
 8000e38:	421c      	tst	r4, r3
 8000e3a:	d009      	beq.n	8000e50 <__aeabi_dmul+0x43c>
 8000e3c:	421e      	tst	r6, r3
 8000e3e:	d107      	bne.n	8000e50 <__aeabi_dmul+0x43c>
 8000e40:	4333      	orrs	r3, r6
 8000e42:	031c      	lsls	r4, r3, #12
 8000e44:	4643      	mov	r3, r8
 8000e46:	0015      	movs	r5, r2
 8000e48:	0b24      	lsrs	r4, r4, #12
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	e642      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0312      	lsls	r2, r2, #12
 8000e54:	4314      	orrs	r4, r2
 8000e56:	0324      	lsls	r4, r4, #12
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000e5a:	0b24      	lsrs	r4, r4, #12
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	e63a      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e60:	f000 fc70 	bl	8001744 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	0002      	movs	r2, r0
 8000e68:	3115      	adds	r1, #21
 8000e6a:	3220      	adds	r2, #32
 8000e6c:	291c      	cmp	r1, #28
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dmul+0x45e>
 8000e70:	e74b      	b.n	8000d0a <__aeabi_dmul+0x2f6>
 8000e72:	0034      	movs	r4, r6
 8000e74:	3808      	subs	r0, #8
 8000e76:	2500      	movs	r5, #0
 8000e78:	4084      	lsls	r4, r0
 8000e7a:	e750      	b.n	8000d1e <__aeabi_dmul+0x30a>
 8000e7c:	f000 fc62 	bl	8001744 <__clzsi2>
 8000e80:	0003      	movs	r3, r0
 8000e82:	001a      	movs	r2, r3
 8000e84:	3215      	adds	r2, #21
 8000e86:	3020      	adds	r0, #32
 8000e88:	2a1c      	cmp	r2, #28
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_dmul+0x47a>
 8000e8c:	e71e      	b.n	8000ccc <__aeabi_dmul+0x2b8>
 8000e8e:	4656      	mov	r6, sl
 8000e90:	3b08      	subs	r3, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	409e      	lsls	r6, r3
 8000e96:	e723      	b.n	8000ce0 <__aeabi_dmul+0x2cc>
 8000e98:	9b00      	ldr	r3, [sp, #0]
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	e6e6      	b.n	8000c6c <__aeabi_dmul+0x258>
 8000e9e:	4912      	ldr	r1, [pc, #72]	; (8000ee8 <__aeabi_dmul+0x4d4>)
 8000ea0:	0022      	movs	r2, r4
 8000ea2:	4461      	add	r1, ip
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	408d      	lsls	r5, r1
 8000ea8:	408a      	lsls	r2, r1
 8000eaa:	40c6      	lsrs	r6, r0
 8000eac:	1e69      	subs	r1, r5, #1
 8000eae:	418d      	sbcs	r5, r1
 8000eb0:	4332      	orrs	r2, r6
 8000eb2:	432a      	orrs	r2, r5
 8000eb4:	40c4      	lsrs	r4, r0
 8000eb6:	0753      	lsls	r3, r2, #29
 8000eb8:	d0b6      	beq.n	8000e28 <__aeabi_dmul+0x414>
 8000eba:	210f      	movs	r1, #15
 8000ebc:	4011      	ands	r1, r2
 8000ebe:	2904      	cmp	r1, #4
 8000ec0:	d1ac      	bne.n	8000e1c <__aeabi_dmul+0x408>
 8000ec2:	e7b1      	b.n	8000e28 <__aeabi_dmul+0x414>
 8000ec4:	0765      	lsls	r5, r4, #29
 8000ec6:	0264      	lsls	r4, r4, #9
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	08d2      	lsrs	r2, r2, #3
 8000ecc:	4315      	orrs	r5, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	e601      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	0312      	lsls	r2, r2, #12
 8000ed6:	4314      	orrs	r4, r2
 8000ed8:	0324      	lsls	r4, r4, #12
 8000eda:	4a01      	ldr	r2, [pc, #4]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000edc:	0b24      	lsrs	r4, r4, #12
 8000ede:	e5fa      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	0000043e 	.word	0x0000043e
 8000ee8:	0000041e 	.word	0x0000041e

08000eec <__aeabi_dsub>:
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	4657      	mov	r7, sl
 8000ef0:	464e      	mov	r6, r9
 8000ef2:	4645      	mov	r5, r8
 8000ef4:	46de      	mov	lr, fp
 8000ef6:	b5e0      	push	{r5, r6, r7, lr}
 8000ef8:	001e      	movs	r6, r3
 8000efa:	0017      	movs	r7, r2
 8000efc:	004a      	lsls	r2, r1, #1
 8000efe:	030b      	lsls	r3, r1, #12
 8000f00:	0d52      	lsrs	r2, r2, #21
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	4690      	mov	r8, r2
 8000f06:	0f42      	lsrs	r2, r0, #29
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	0fcd      	lsrs	r5, r1, #31
 8000f0c:	4ccd      	ldr	r4, [pc, #820]	; (8001244 <__aeabi_dsub+0x358>)
 8000f0e:	0331      	lsls	r1, r6, #12
 8000f10:	00c3      	lsls	r3, r0, #3
 8000f12:	4694      	mov	ip, r2
 8000f14:	0070      	lsls	r0, r6, #1
 8000f16:	0f7a      	lsrs	r2, r7, #29
 8000f18:	0a49      	lsrs	r1, r1, #9
 8000f1a:	00ff      	lsls	r7, r7, #3
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	46b9      	mov	r9, r7
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0ff6      	lsrs	r6, r6, #31
 8000f24:	4311      	orrs	r1, r2
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dsub+0x40>
 8000f2a:	e0b1      	b.n	8001090 <__aeabi_dsub+0x1a4>
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4056      	eors	r6, r2
 8000f30:	46b3      	mov	fp, r6
 8000f32:	42b5      	cmp	r5, r6
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x4c>
 8000f36:	e088      	b.n	800104a <__aeabi_dsub+0x15e>
 8000f38:	4642      	mov	r2, r8
 8000f3a:	1a12      	subs	r2, r2, r0
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	dc00      	bgt.n	8000f42 <__aeabi_dsub+0x56>
 8000f40:	e0ae      	b.n	80010a0 <__aeabi_dsub+0x1b4>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dsub+0x5c>
 8000f46:	e0c1      	b.n	80010cc <__aeabi_dsub+0x1e0>
 8000f48:	48be      	ldr	r0, [pc, #760]	; (8001244 <__aeabi_dsub+0x358>)
 8000f4a:	4580      	cmp	r8, r0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x64>
 8000f4e:	e151      	b.n	80011f4 <__aeabi_dsub+0x308>
 8000f50:	2080      	movs	r0, #128	; 0x80
 8000f52:	0400      	lsls	r0, r0, #16
 8000f54:	4301      	orrs	r1, r0
 8000f56:	2a38      	cmp	r2, #56	; 0x38
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dsub+0x70>
 8000f5a:	e17b      	b.n	8001254 <__aeabi_dsub+0x368>
 8000f5c:	2a1f      	cmp	r2, #31
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dsub+0x76>
 8000f60:	e1ee      	b.n	8001340 <__aeabi_dsub+0x454>
 8000f62:	2020      	movs	r0, #32
 8000f64:	003e      	movs	r6, r7
 8000f66:	1a80      	subs	r0, r0, r2
 8000f68:	000c      	movs	r4, r1
 8000f6a:	40d6      	lsrs	r6, r2
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	4087      	lsls	r7, r0
 8000f70:	4662      	mov	r2, ip
 8000f72:	4084      	lsls	r4, r0
 8000f74:	1a52      	subs	r2, r2, r1
 8000f76:	1e78      	subs	r0, r7, #1
 8000f78:	4187      	sbcs	r7, r0
 8000f7a:	4694      	mov	ip, r2
 8000f7c:	4334      	orrs	r4, r6
 8000f7e:	4327      	orrs	r7, r4
 8000f80:	1bdc      	subs	r4, r3, r7
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	419b      	sbcs	r3, r3
 8000f86:	4662      	mov	r2, ip
 8000f88:	425b      	negs	r3, r3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	464b      	mov	r3, r9
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	d400      	bmi.n	8000f96 <__aeabi_dsub+0xaa>
 8000f94:	e118      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8000f96:	464b      	mov	r3, r9
 8000f98:	0258      	lsls	r0, r3, #9
 8000f9a:	0a43      	lsrs	r3, r0, #9
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0xba>
 8000fa4:	e137      	b.n	8001216 <__aeabi_dsub+0x32a>
 8000fa6:	4648      	mov	r0, r9
 8000fa8:	f000 fbcc 	bl	8001744 <__clzsi2>
 8000fac:	0001      	movs	r1, r0
 8000fae:	3908      	subs	r1, #8
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	4648      	mov	r0, r9
 8000fb6:	1a5b      	subs	r3, r3, r1
 8000fb8:	40da      	lsrs	r2, r3
 8000fba:	4088      	lsls	r0, r1
 8000fbc:	408c      	lsls	r4, r1
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	4310      	orrs	r0, r2
 8000fc2:	4588      	cmp	r8, r1
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dsub+0xdc>
 8000fc6:	e136      	b.n	8001236 <__aeabi_dsub+0x34a>
 8000fc8:	1ac9      	subs	r1, r1, r3
 8000fca:	1c4b      	adds	r3, r1, #1
 8000fcc:	2b1f      	cmp	r3, #31
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dsub+0xe6>
 8000fd0:	e0ea      	b.n	80011a8 <__aeabi_dsub+0x2bc>
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	0026      	movs	r6, r4
 8000fd6:	1ad2      	subs	r2, r2, r3
 8000fd8:	0001      	movs	r1, r0
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	40de      	lsrs	r6, r3
 8000fde:	40d8      	lsrs	r0, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	4681      	mov	r9, r0
 8000fea:	4698      	mov	r8, r3
 8000fec:	4331      	orrs	r1, r6
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	0763      	lsls	r3, r4, #29
 8000ff2:	d009      	beq.n	8001008 <__aeabi_dsub+0x11c>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <__aeabi_dsub+0x11c>
 8000ffc:	1d23      	adds	r3, r4, #4
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	41a4      	sbcs	r4, r4
 8001002:	4264      	negs	r4, r4
 8001004:	44a1      	add	r9, r4
 8001006:	001c      	movs	r4, r3
 8001008:	464b      	mov	r3, r9
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	d400      	bmi.n	8001010 <__aeabi_dsub+0x124>
 800100e:	e0de      	b.n	80011ce <__aeabi_dsub+0x2e2>
 8001010:	4641      	mov	r1, r8
 8001012:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <__aeabi_dsub+0x358>)
 8001014:	3101      	adds	r1, #1
 8001016:	4299      	cmp	r1, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x130>
 800101a:	e0e7      	b.n	80011ec <__aeabi_dsub+0x300>
 800101c:	464b      	mov	r3, r9
 800101e:	488a      	ldr	r0, [pc, #552]	; (8001248 <__aeabi_dsub+0x35c>)
 8001020:	08e4      	lsrs	r4, r4, #3
 8001022:	4003      	ands	r3, r0
 8001024:	0018      	movs	r0, r3
 8001026:	0549      	lsls	r1, r1, #21
 8001028:	075b      	lsls	r3, r3, #29
 800102a:	0240      	lsls	r0, r0, #9
 800102c:	4323      	orrs	r3, r4
 800102e:	0d4a      	lsrs	r2, r1, #21
 8001030:	0b04      	lsrs	r4, r0, #12
 8001032:	0512      	lsls	r2, r2, #20
 8001034:	07ed      	lsls	r5, r5, #31
 8001036:	4322      	orrs	r2, r4
 8001038:	432a      	orrs	r2, r5
 800103a:	0018      	movs	r0, r3
 800103c:	0011      	movs	r1, r2
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
 8001040:	46bb      	mov	fp, r7
 8001042:	46b2      	mov	sl, r6
 8001044:	46a9      	mov	r9, r5
 8001046:	46a0      	mov	r8, r4
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104a:	4642      	mov	r2, r8
 800104c:	1a12      	subs	r2, r2, r0
 800104e:	2a00      	cmp	r2, #0
 8001050:	dd52      	ble.n	80010f8 <__aeabi_dsub+0x20c>
 8001052:	2800      	cmp	r0, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dsub+0x16c>
 8001056:	e09c      	b.n	8001192 <__aeabi_dsub+0x2a6>
 8001058:	45a0      	cmp	r8, r4
 800105a:	d100      	bne.n	800105e <__aeabi_dsub+0x172>
 800105c:	e0ca      	b.n	80011f4 <__aeabi_dsub+0x308>
 800105e:	2080      	movs	r0, #128	; 0x80
 8001060:	0400      	lsls	r0, r0, #16
 8001062:	4301      	orrs	r1, r0
 8001064:	2a38      	cmp	r2, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_dsub+0x17e>
 8001068:	e149      	b.n	80012fe <__aeabi_dsub+0x412>
 800106a:	2a1f      	cmp	r2, #31
 800106c:	dc00      	bgt.n	8001070 <__aeabi_dsub+0x184>
 800106e:	e197      	b.n	80013a0 <__aeabi_dsub+0x4b4>
 8001070:	0010      	movs	r0, r2
 8001072:	000e      	movs	r6, r1
 8001074:	3820      	subs	r0, #32
 8001076:	40c6      	lsrs	r6, r0
 8001078:	2a20      	cmp	r2, #32
 800107a:	d004      	beq.n	8001086 <__aeabi_dsub+0x19a>
 800107c:	2040      	movs	r0, #64	; 0x40
 800107e:	1a82      	subs	r2, r0, r2
 8001080:	4091      	lsls	r1, r2
 8001082:	430f      	orrs	r7, r1
 8001084:	46b9      	mov	r9, r7
 8001086:	464c      	mov	r4, r9
 8001088:	1e62      	subs	r2, r4, #1
 800108a:	4194      	sbcs	r4, r2
 800108c:	4334      	orrs	r4, r6
 800108e:	e13a      	b.n	8001306 <__aeabi_dsub+0x41a>
 8001090:	000a      	movs	r2, r1
 8001092:	433a      	orrs	r2, r7
 8001094:	d028      	beq.n	80010e8 <__aeabi_dsub+0x1fc>
 8001096:	46b3      	mov	fp, r6
 8001098:	42b5      	cmp	r5, r6
 800109a:	d02b      	beq.n	80010f4 <__aeabi_dsub+0x208>
 800109c:	4a6b      	ldr	r2, [pc, #428]	; (800124c <__aeabi_dsub+0x360>)
 800109e:	4442      	add	r2, r8
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d05d      	beq.n	8001160 <__aeabi_dsub+0x274>
 80010a4:	4642      	mov	r2, r8
 80010a6:	4644      	mov	r4, r8
 80010a8:	1a82      	subs	r2, r0, r2
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_dsub+0x1c4>
 80010ae:	e0f5      	b.n	800129c <__aeabi_dsub+0x3b0>
 80010b0:	4665      	mov	r5, ip
 80010b2:	431d      	orrs	r5, r3
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x1cc>
 80010b6:	e19c      	b.n	80013f2 <__aeabi_dsub+0x506>
 80010b8:	1e55      	subs	r5, r2, #1
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x1d4>
 80010be:	e1fb      	b.n	80014b8 <__aeabi_dsub+0x5cc>
 80010c0:	4c60      	ldr	r4, [pc, #384]	; (8001244 <__aeabi_dsub+0x358>)
 80010c2:	42a2      	cmp	r2, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x1dc>
 80010c6:	e1bd      	b.n	8001444 <__aeabi_dsub+0x558>
 80010c8:	002a      	movs	r2, r5
 80010ca:	e0f0      	b.n	80012ae <__aeabi_dsub+0x3c2>
 80010cc:	0008      	movs	r0, r1
 80010ce:	4338      	orrs	r0, r7
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x1e8>
 80010d2:	e0c3      	b.n	800125c <__aeabi_dsub+0x370>
 80010d4:	1e50      	subs	r0, r2, #1
 80010d6:	2a01      	cmp	r2, #1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dsub+0x1f0>
 80010da:	e1a8      	b.n	800142e <__aeabi_dsub+0x542>
 80010dc:	4c59      	ldr	r4, [pc, #356]	; (8001244 <__aeabi_dsub+0x358>)
 80010de:	42a2      	cmp	r2, r4
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x1f8>
 80010e2:	e087      	b.n	80011f4 <__aeabi_dsub+0x308>
 80010e4:	0002      	movs	r2, r0
 80010e6:	e736      	b.n	8000f56 <__aeabi_dsub+0x6a>
 80010e8:	2201      	movs	r2, #1
 80010ea:	4056      	eors	r6, r2
 80010ec:	46b3      	mov	fp, r6
 80010ee:	42b5      	cmp	r5, r6
 80010f0:	d000      	beq.n	80010f4 <__aeabi_dsub+0x208>
 80010f2:	e721      	b.n	8000f38 <__aeabi_dsub+0x4c>
 80010f4:	4a55      	ldr	r2, [pc, #340]	; (800124c <__aeabi_dsub+0x360>)
 80010f6:	4442      	add	r2, r8
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_dsub+0x212>
 80010fc:	e0b5      	b.n	800126a <__aeabi_dsub+0x37e>
 80010fe:	4642      	mov	r2, r8
 8001100:	4644      	mov	r4, r8
 8001102:	1a82      	subs	r2, r0, r2
 8001104:	2c00      	cmp	r4, #0
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x21e>
 8001108:	e138      	b.n	800137c <__aeabi_dsub+0x490>
 800110a:	4e4e      	ldr	r6, [pc, #312]	; (8001244 <__aeabi_dsub+0x358>)
 800110c:	42b0      	cmp	r0, r6
 800110e:	d100      	bne.n	8001112 <__aeabi_dsub+0x226>
 8001110:	e1de      	b.n	80014d0 <__aeabi_dsub+0x5e4>
 8001112:	2680      	movs	r6, #128	; 0x80
 8001114:	4664      	mov	r4, ip
 8001116:	0436      	lsls	r6, r6, #16
 8001118:	4334      	orrs	r4, r6
 800111a:	46a4      	mov	ip, r4
 800111c:	2a38      	cmp	r2, #56	; 0x38
 800111e:	dd00      	ble.n	8001122 <__aeabi_dsub+0x236>
 8001120:	e196      	b.n	8001450 <__aeabi_dsub+0x564>
 8001122:	2a1f      	cmp	r2, #31
 8001124:	dd00      	ble.n	8001128 <__aeabi_dsub+0x23c>
 8001126:	e224      	b.n	8001572 <__aeabi_dsub+0x686>
 8001128:	2620      	movs	r6, #32
 800112a:	1ab4      	subs	r4, r6, r2
 800112c:	46a2      	mov	sl, r4
 800112e:	4664      	mov	r4, ip
 8001130:	4656      	mov	r6, sl
 8001132:	40b4      	lsls	r4, r6
 8001134:	46a1      	mov	r9, r4
 8001136:	001c      	movs	r4, r3
 8001138:	464e      	mov	r6, r9
 800113a:	40d4      	lsrs	r4, r2
 800113c:	4326      	orrs	r6, r4
 800113e:	0034      	movs	r4, r6
 8001140:	4656      	mov	r6, sl
 8001142:	40b3      	lsls	r3, r6
 8001144:	1e5e      	subs	r6, r3, #1
 8001146:	41b3      	sbcs	r3, r6
 8001148:	431c      	orrs	r4, r3
 800114a:	4663      	mov	r3, ip
 800114c:	40d3      	lsrs	r3, r2
 800114e:	18c9      	adds	r1, r1, r3
 8001150:	19e4      	adds	r4, r4, r7
 8001152:	42bc      	cmp	r4, r7
 8001154:	41bf      	sbcs	r7, r7
 8001156:	427f      	negs	r7, r7
 8001158:	46b9      	mov	r9, r7
 800115a:	4680      	mov	r8, r0
 800115c:	4489      	add	r9, r1
 800115e:	e0d8      	b.n	8001312 <__aeabi_dsub+0x426>
 8001160:	4640      	mov	r0, r8
 8001162:	4c3b      	ldr	r4, [pc, #236]	; (8001250 <__aeabi_dsub+0x364>)
 8001164:	3001      	adds	r0, #1
 8001166:	4220      	tst	r0, r4
 8001168:	d000      	beq.n	800116c <__aeabi_dsub+0x280>
 800116a:	e0b4      	b.n	80012d6 <__aeabi_dsub+0x3ea>
 800116c:	4640      	mov	r0, r8
 800116e:	2800      	cmp	r0, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_dsub+0x288>
 8001172:	e144      	b.n	80013fe <__aeabi_dsub+0x512>
 8001174:	4660      	mov	r0, ip
 8001176:	4318      	orrs	r0, r3
 8001178:	d100      	bne.n	800117c <__aeabi_dsub+0x290>
 800117a:	e190      	b.n	800149e <__aeabi_dsub+0x5b2>
 800117c:	0008      	movs	r0, r1
 800117e:	4338      	orrs	r0, r7
 8001180:	d000      	beq.n	8001184 <__aeabi_dsub+0x298>
 8001182:	e1aa      	b.n	80014da <__aeabi_dsub+0x5ee>
 8001184:	4661      	mov	r1, ip
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	0749      	lsls	r1, r1, #29
 800118a:	430b      	orrs	r3, r1
 800118c:	4661      	mov	r1, ip
 800118e:	08cc      	lsrs	r4, r1, #3
 8001190:	e027      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 8001192:	0008      	movs	r0, r1
 8001194:	4338      	orrs	r0, r7
 8001196:	d061      	beq.n	800125c <__aeabi_dsub+0x370>
 8001198:	1e50      	subs	r0, r2, #1
 800119a:	2a01      	cmp	r2, #1
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x2b4>
 800119e:	e139      	b.n	8001414 <__aeabi_dsub+0x528>
 80011a0:	42a2      	cmp	r2, r4
 80011a2:	d027      	beq.n	80011f4 <__aeabi_dsub+0x308>
 80011a4:	0002      	movs	r2, r0
 80011a6:	e75d      	b.n	8001064 <__aeabi_dsub+0x178>
 80011a8:	0002      	movs	r2, r0
 80011aa:	391f      	subs	r1, #31
 80011ac:	40ca      	lsrs	r2, r1
 80011ae:	0011      	movs	r1, r2
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d003      	beq.n	80011bc <__aeabi_dsub+0x2d0>
 80011b4:	2240      	movs	r2, #64	; 0x40
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4098      	lsls	r0, r3
 80011ba:	4304      	orrs	r4, r0
 80011bc:	1e63      	subs	r3, r4, #1
 80011be:	419c      	sbcs	r4, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	4699      	mov	r9, r3
 80011c4:	4698      	mov	r8, r3
 80011c6:	430c      	orrs	r4, r1
 80011c8:	0763      	lsls	r3, r4, #29
 80011ca:	d000      	beq.n	80011ce <__aeabi_dsub+0x2e2>
 80011cc:	e712      	b.n	8000ff4 <__aeabi_dsub+0x108>
 80011ce:	464b      	mov	r3, r9
 80011d0:	464a      	mov	r2, r9
 80011d2:	08e4      	lsrs	r4, r4, #3
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	4323      	orrs	r3, r4
 80011d8:	08d4      	lsrs	r4, r2, #3
 80011da:	4642      	mov	r2, r8
 80011dc:	4919      	ldr	r1, [pc, #100]	; (8001244 <__aeabi_dsub+0x358>)
 80011de:	428a      	cmp	r2, r1
 80011e0:	d00e      	beq.n	8001200 <__aeabi_dsub+0x314>
 80011e2:	0324      	lsls	r4, r4, #12
 80011e4:	0552      	lsls	r2, r2, #21
 80011e6:	0b24      	lsrs	r4, r4, #12
 80011e8:	0d52      	lsrs	r2, r2, #21
 80011ea:	e722      	b.n	8001032 <__aeabi_dsub+0x146>
 80011ec:	000a      	movs	r2, r1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2300      	movs	r3, #0
 80011f2:	e71e      	b.n	8001032 <__aeabi_dsub+0x146>
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	4662      	mov	r2, ip
 80011f8:	0752      	lsls	r2, r2, #29
 80011fa:	4313      	orrs	r3, r2
 80011fc:	4662      	mov	r2, ip
 80011fe:	08d4      	lsrs	r4, r2, #3
 8001200:	001a      	movs	r2, r3
 8001202:	4322      	orrs	r2, r4
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x31c>
 8001206:	e1fc      	b.n	8001602 <__aeabi_dsub+0x716>
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0312      	lsls	r2, r2, #12
 800120c:	4314      	orrs	r4, r2
 800120e:	0324      	lsls	r4, r4, #12
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <__aeabi_dsub+0x358>)
 8001212:	0b24      	lsrs	r4, r4, #12
 8001214:	e70d      	b.n	8001032 <__aeabi_dsub+0x146>
 8001216:	0020      	movs	r0, r4
 8001218:	f000 fa94 	bl	8001744 <__clzsi2>
 800121c:	0001      	movs	r1, r0
 800121e:	3118      	adds	r1, #24
 8001220:	291f      	cmp	r1, #31
 8001222:	dc00      	bgt.n	8001226 <__aeabi_dsub+0x33a>
 8001224:	e6c4      	b.n	8000fb0 <__aeabi_dsub+0xc4>
 8001226:	3808      	subs	r0, #8
 8001228:	4084      	lsls	r4, r0
 800122a:	4643      	mov	r3, r8
 800122c:	0020      	movs	r0, r4
 800122e:	2400      	movs	r4, #0
 8001230:	4588      	cmp	r8, r1
 8001232:	dc00      	bgt.n	8001236 <__aeabi_dsub+0x34a>
 8001234:	e6c8      	b.n	8000fc8 <__aeabi_dsub+0xdc>
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__aeabi_dsub+0x35c>)
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	4010      	ands	r0, r2
 800123c:	4698      	mov	r8, r3
 800123e:	4681      	mov	r9, r0
 8001240:	e6d6      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	000007ff 	.word	0x000007ff
 8001248:	ff7fffff 	.word	0xff7fffff
 800124c:	fffff801 	.word	0xfffff801
 8001250:	000007fe 	.word	0x000007fe
 8001254:	430f      	orrs	r7, r1
 8001256:	1e7a      	subs	r2, r7, #1
 8001258:	4197      	sbcs	r7, r2
 800125a:	e691      	b.n	8000f80 <__aeabi_dsub+0x94>
 800125c:	4661      	mov	r1, ip
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	0749      	lsls	r1, r1, #29
 8001262:	430b      	orrs	r3, r1
 8001264:	4661      	mov	r1, ip
 8001266:	08cc      	lsrs	r4, r1, #3
 8001268:	e7b8      	b.n	80011dc <__aeabi_dsub+0x2f0>
 800126a:	4640      	mov	r0, r8
 800126c:	4cd3      	ldr	r4, [pc, #844]	; (80015bc <__aeabi_dsub+0x6d0>)
 800126e:	3001      	adds	r0, #1
 8001270:	4220      	tst	r0, r4
 8001272:	d000      	beq.n	8001276 <__aeabi_dsub+0x38a>
 8001274:	e0a2      	b.n	80013bc <__aeabi_dsub+0x4d0>
 8001276:	4640      	mov	r0, r8
 8001278:	2800      	cmp	r0, #0
 800127a:	d000      	beq.n	800127e <__aeabi_dsub+0x392>
 800127c:	e101      	b.n	8001482 <__aeabi_dsub+0x596>
 800127e:	4660      	mov	r0, ip
 8001280:	4318      	orrs	r0, r3
 8001282:	d100      	bne.n	8001286 <__aeabi_dsub+0x39a>
 8001284:	e15e      	b.n	8001544 <__aeabi_dsub+0x658>
 8001286:	0008      	movs	r0, r1
 8001288:	4338      	orrs	r0, r7
 800128a:	d000      	beq.n	800128e <__aeabi_dsub+0x3a2>
 800128c:	e15f      	b.n	800154e <__aeabi_dsub+0x662>
 800128e:	4661      	mov	r1, ip
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	0749      	lsls	r1, r1, #29
 8001294:	430b      	orrs	r3, r1
 8001296:	4661      	mov	r1, ip
 8001298:	08cc      	lsrs	r4, r1, #3
 800129a:	e7a2      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 800129c:	4dc8      	ldr	r5, [pc, #800]	; (80015c0 <__aeabi_dsub+0x6d4>)
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x3b8>
 80012a2:	e0cf      	b.n	8001444 <__aeabi_dsub+0x558>
 80012a4:	2580      	movs	r5, #128	; 0x80
 80012a6:	4664      	mov	r4, ip
 80012a8:	042d      	lsls	r5, r5, #16
 80012aa:	432c      	orrs	r4, r5
 80012ac:	46a4      	mov	ip, r4
 80012ae:	2a38      	cmp	r2, #56	; 0x38
 80012b0:	dc56      	bgt.n	8001360 <__aeabi_dsub+0x474>
 80012b2:	2a1f      	cmp	r2, #31
 80012b4:	dd00      	ble.n	80012b8 <__aeabi_dsub+0x3cc>
 80012b6:	e0d1      	b.n	800145c <__aeabi_dsub+0x570>
 80012b8:	2520      	movs	r5, #32
 80012ba:	001e      	movs	r6, r3
 80012bc:	1aad      	subs	r5, r5, r2
 80012be:	4664      	mov	r4, ip
 80012c0:	40ab      	lsls	r3, r5
 80012c2:	40ac      	lsls	r4, r5
 80012c4:	40d6      	lsrs	r6, r2
 80012c6:	1e5d      	subs	r5, r3, #1
 80012c8:	41ab      	sbcs	r3, r5
 80012ca:	4334      	orrs	r4, r6
 80012cc:	4323      	orrs	r3, r4
 80012ce:	4664      	mov	r4, ip
 80012d0:	40d4      	lsrs	r4, r2
 80012d2:	1b09      	subs	r1, r1, r4
 80012d4:	e049      	b.n	800136a <__aeabi_dsub+0x47e>
 80012d6:	4660      	mov	r0, ip
 80012d8:	1bdc      	subs	r4, r3, r7
 80012da:	1a46      	subs	r6, r0, r1
 80012dc:	42a3      	cmp	r3, r4
 80012de:	4180      	sbcs	r0, r0
 80012e0:	4240      	negs	r0, r0
 80012e2:	4681      	mov	r9, r0
 80012e4:	0030      	movs	r0, r6
 80012e6:	464e      	mov	r6, r9
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	4681      	mov	r9, r0
 80012ec:	0200      	lsls	r0, r0, #8
 80012ee:	d476      	bmi.n	80013de <__aeabi_dsub+0x4f2>
 80012f0:	464b      	mov	r3, r9
 80012f2:	4323      	orrs	r3, r4
 80012f4:	d000      	beq.n	80012f8 <__aeabi_dsub+0x40c>
 80012f6:	e652      	b.n	8000f9e <__aeabi_dsub+0xb2>
 80012f8:	2400      	movs	r4, #0
 80012fa:	2500      	movs	r5, #0
 80012fc:	e771      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 80012fe:	4339      	orrs	r1, r7
 8001300:	000c      	movs	r4, r1
 8001302:	1e62      	subs	r2, r4, #1
 8001304:	4194      	sbcs	r4, r2
 8001306:	18e4      	adds	r4, r4, r3
 8001308:	429c      	cmp	r4, r3
 800130a:	419b      	sbcs	r3, r3
 800130c:	425b      	negs	r3, r3
 800130e:	4463      	add	r3, ip
 8001310:	4699      	mov	r9, r3
 8001312:	464b      	mov	r3, r9
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	d400      	bmi.n	800131a <__aeabi_dsub+0x42e>
 8001318:	e756      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 800131a:	2301      	movs	r3, #1
 800131c:	469c      	mov	ip, r3
 800131e:	4ba8      	ldr	r3, [pc, #672]	; (80015c0 <__aeabi_dsub+0x6d4>)
 8001320:	44e0      	add	r8, ip
 8001322:	4598      	cmp	r8, r3
 8001324:	d038      	beq.n	8001398 <__aeabi_dsub+0x4ac>
 8001326:	464b      	mov	r3, r9
 8001328:	48a6      	ldr	r0, [pc, #664]	; (80015c4 <__aeabi_dsub+0x6d8>)
 800132a:	2201      	movs	r2, #1
 800132c:	4003      	ands	r3, r0
 800132e:	0018      	movs	r0, r3
 8001330:	0863      	lsrs	r3, r4, #1
 8001332:	4014      	ands	r4, r2
 8001334:	431c      	orrs	r4, r3
 8001336:	07c3      	lsls	r3, r0, #31
 8001338:	431c      	orrs	r4, r3
 800133a:	0843      	lsrs	r3, r0, #1
 800133c:	4699      	mov	r9, r3
 800133e:	e657      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001340:	0010      	movs	r0, r2
 8001342:	000e      	movs	r6, r1
 8001344:	3820      	subs	r0, #32
 8001346:	40c6      	lsrs	r6, r0
 8001348:	2a20      	cmp	r2, #32
 800134a:	d004      	beq.n	8001356 <__aeabi_dsub+0x46a>
 800134c:	2040      	movs	r0, #64	; 0x40
 800134e:	1a82      	subs	r2, r0, r2
 8001350:	4091      	lsls	r1, r2
 8001352:	430f      	orrs	r7, r1
 8001354:	46b9      	mov	r9, r7
 8001356:	464f      	mov	r7, r9
 8001358:	1e7a      	subs	r2, r7, #1
 800135a:	4197      	sbcs	r7, r2
 800135c:	4337      	orrs	r7, r6
 800135e:	e60f      	b.n	8000f80 <__aeabi_dsub+0x94>
 8001360:	4662      	mov	r2, ip
 8001362:	431a      	orrs	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	4193      	sbcs	r3, r2
 800136a:	1afc      	subs	r4, r7, r3
 800136c:	42a7      	cmp	r7, r4
 800136e:	41bf      	sbcs	r7, r7
 8001370:	427f      	negs	r7, r7
 8001372:	1bcb      	subs	r3, r1, r7
 8001374:	4699      	mov	r9, r3
 8001376:	465d      	mov	r5, fp
 8001378:	4680      	mov	r8, r0
 800137a:	e608      	b.n	8000f8e <__aeabi_dsub+0xa2>
 800137c:	4666      	mov	r6, ip
 800137e:	431e      	orrs	r6, r3
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x498>
 8001382:	e0be      	b.n	8001502 <__aeabi_dsub+0x616>
 8001384:	1e56      	subs	r6, r2, #1
 8001386:	2a01      	cmp	r2, #1
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x4a0>
 800138a:	e109      	b.n	80015a0 <__aeabi_dsub+0x6b4>
 800138c:	4c8c      	ldr	r4, [pc, #560]	; (80015c0 <__aeabi_dsub+0x6d4>)
 800138e:	42a2      	cmp	r2, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x4a8>
 8001392:	e119      	b.n	80015c8 <__aeabi_dsub+0x6dc>
 8001394:	0032      	movs	r2, r6
 8001396:	e6c1      	b.n	800111c <__aeabi_dsub+0x230>
 8001398:	4642      	mov	r2, r8
 800139a:	2400      	movs	r4, #0
 800139c:	2300      	movs	r3, #0
 800139e:	e648      	b.n	8001032 <__aeabi_dsub+0x146>
 80013a0:	2020      	movs	r0, #32
 80013a2:	000c      	movs	r4, r1
 80013a4:	1a80      	subs	r0, r0, r2
 80013a6:	003e      	movs	r6, r7
 80013a8:	4087      	lsls	r7, r0
 80013aa:	4084      	lsls	r4, r0
 80013ac:	40d6      	lsrs	r6, r2
 80013ae:	1e78      	subs	r0, r7, #1
 80013b0:	4187      	sbcs	r7, r0
 80013b2:	40d1      	lsrs	r1, r2
 80013b4:	4334      	orrs	r4, r6
 80013b6:	433c      	orrs	r4, r7
 80013b8:	448c      	add	ip, r1
 80013ba:	e7a4      	b.n	8001306 <__aeabi_dsub+0x41a>
 80013bc:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <__aeabi_dsub+0x6d4>)
 80013be:	4290      	cmp	r0, r2
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x4d8>
 80013c2:	e0e9      	b.n	8001598 <__aeabi_dsub+0x6ac>
 80013c4:	19df      	adds	r7, r3, r7
 80013c6:	429f      	cmp	r7, r3
 80013c8:	419b      	sbcs	r3, r3
 80013ca:	4461      	add	r1, ip
 80013cc:	425b      	negs	r3, r3
 80013ce:	18c9      	adds	r1, r1, r3
 80013d0:	07cc      	lsls	r4, r1, #31
 80013d2:	087f      	lsrs	r7, r7, #1
 80013d4:	084b      	lsrs	r3, r1, #1
 80013d6:	4699      	mov	r9, r3
 80013d8:	4680      	mov	r8, r0
 80013da:	433c      	orrs	r4, r7
 80013dc:	e6f4      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 80013de:	1afc      	subs	r4, r7, r3
 80013e0:	42a7      	cmp	r7, r4
 80013e2:	41bf      	sbcs	r7, r7
 80013e4:	4663      	mov	r3, ip
 80013e6:	427f      	negs	r7, r7
 80013e8:	1ac9      	subs	r1, r1, r3
 80013ea:	1bcb      	subs	r3, r1, r7
 80013ec:	4699      	mov	r9, r3
 80013ee:	465d      	mov	r5, fp
 80013f0:	e5d5      	b.n	8000f9e <__aeabi_dsub+0xb2>
 80013f2:	08ff      	lsrs	r7, r7, #3
 80013f4:	074b      	lsls	r3, r1, #29
 80013f6:	465d      	mov	r5, fp
 80013f8:	433b      	orrs	r3, r7
 80013fa:	08cc      	lsrs	r4, r1, #3
 80013fc:	e6ee      	b.n	80011dc <__aeabi_dsub+0x2f0>
 80013fe:	4662      	mov	r2, ip
 8001400:	431a      	orrs	r2, r3
 8001402:	d000      	beq.n	8001406 <__aeabi_dsub+0x51a>
 8001404:	e082      	b.n	800150c <__aeabi_dsub+0x620>
 8001406:	000b      	movs	r3, r1
 8001408:	433b      	orrs	r3, r7
 800140a:	d11b      	bne.n	8001444 <__aeabi_dsub+0x558>
 800140c:	2480      	movs	r4, #128	; 0x80
 800140e:	2500      	movs	r5, #0
 8001410:	0324      	lsls	r4, r4, #12
 8001412:	e6f9      	b.n	8001208 <__aeabi_dsub+0x31c>
 8001414:	19dc      	adds	r4, r3, r7
 8001416:	429c      	cmp	r4, r3
 8001418:	419b      	sbcs	r3, r3
 800141a:	4461      	add	r1, ip
 800141c:	4689      	mov	r9, r1
 800141e:	425b      	negs	r3, r3
 8001420:	4499      	add	r9, r3
 8001422:	464b      	mov	r3, r9
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	d444      	bmi.n	80014b2 <__aeabi_dsub+0x5c6>
 8001428:	2301      	movs	r3, #1
 800142a:	4698      	mov	r8, r3
 800142c:	e6cc      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 800142e:	1bdc      	subs	r4, r3, r7
 8001430:	4662      	mov	r2, ip
 8001432:	42a3      	cmp	r3, r4
 8001434:	419b      	sbcs	r3, r3
 8001436:	1a51      	subs	r1, r2, r1
 8001438:	425b      	negs	r3, r3
 800143a:	1acb      	subs	r3, r1, r3
 800143c:	4699      	mov	r9, r3
 800143e:	2301      	movs	r3, #1
 8001440:	4698      	mov	r8, r3
 8001442:	e5a4      	b.n	8000f8e <__aeabi_dsub+0xa2>
 8001444:	08ff      	lsrs	r7, r7, #3
 8001446:	074b      	lsls	r3, r1, #29
 8001448:	465d      	mov	r5, fp
 800144a:	433b      	orrs	r3, r7
 800144c:	08cc      	lsrs	r4, r1, #3
 800144e:	e6d7      	b.n	8001200 <__aeabi_dsub+0x314>
 8001450:	4662      	mov	r2, ip
 8001452:	431a      	orrs	r2, r3
 8001454:	0014      	movs	r4, r2
 8001456:	1e63      	subs	r3, r4, #1
 8001458:	419c      	sbcs	r4, r3
 800145a:	e679      	b.n	8001150 <__aeabi_dsub+0x264>
 800145c:	0015      	movs	r5, r2
 800145e:	4664      	mov	r4, ip
 8001460:	3d20      	subs	r5, #32
 8001462:	40ec      	lsrs	r4, r5
 8001464:	46a0      	mov	r8, r4
 8001466:	2a20      	cmp	r2, #32
 8001468:	d005      	beq.n	8001476 <__aeabi_dsub+0x58a>
 800146a:	2540      	movs	r5, #64	; 0x40
 800146c:	4664      	mov	r4, ip
 800146e:	1aaa      	subs	r2, r5, r2
 8001470:	4094      	lsls	r4, r2
 8001472:	4323      	orrs	r3, r4
 8001474:	469a      	mov	sl, r3
 8001476:	4654      	mov	r4, sl
 8001478:	1e63      	subs	r3, r4, #1
 800147a:	419c      	sbcs	r4, r3
 800147c:	4643      	mov	r3, r8
 800147e:	4323      	orrs	r3, r4
 8001480:	e773      	b.n	800136a <__aeabi_dsub+0x47e>
 8001482:	4662      	mov	r2, ip
 8001484:	431a      	orrs	r2, r3
 8001486:	d023      	beq.n	80014d0 <__aeabi_dsub+0x5e4>
 8001488:	000a      	movs	r2, r1
 800148a:	433a      	orrs	r2, r7
 800148c:	d000      	beq.n	8001490 <__aeabi_dsub+0x5a4>
 800148e:	e0a0      	b.n	80015d2 <__aeabi_dsub+0x6e6>
 8001490:	4662      	mov	r2, ip
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	0752      	lsls	r2, r2, #29
 8001496:	4313      	orrs	r3, r2
 8001498:	4662      	mov	r2, ip
 800149a:	08d4      	lsrs	r4, r2, #3
 800149c:	e6b0      	b.n	8001200 <__aeabi_dsub+0x314>
 800149e:	000b      	movs	r3, r1
 80014a0:	433b      	orrs	r3, r7
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dsub+0x5ba>
 80014a4:	e728      	b.n	80012f8 <__aeabi_dsub+0x40c>
 80014a6:	08ff      	lsrs	r7, r7, #3
 80014a8:	074b      	lsls	r3, r1, #29
 80014aa:	465d      	mov	r5, fp
 80014ac:	433b      	orrs	r3, r7
 80014ae:	08cc      	lsrs	r4, r1, #3
 80014b0:	e697      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 80014b2:	2302      	movs	r3, #2
 80014b4:	4698      	mov	r8, r3
 80014b6:	e736      	b.n	8001326 <__aeabi_dsub+0x43a>
 80014b8:	1afc      	subs	r4, r7, r3
 80014ba:	42a7      	cmp	r7, r4
 80014bc:	41bf      	sbcs	r7, r7
 80014be:	4663      	mov	r3, ip
 80014c0:	427f      	negs	r7, r7
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	1bcb      	subs	r3, r1, r7
 80014c6:	4699      	mov	r9, r3
 80014c8:	2301      	movs	r3, #1
 80014ca:	465d      	mov	r5, fp
 80014cc:	4698      	mov	r8, r3
 80014ce:	e55e      	b.n	8000f8e <__aeabi_dsub+0xa2>
 80014d0:	074b      	lsls	r3, r1, #29
 80014d2:	08ff      	lsrs	r7, r7, #3
 80014d4:	433b      	orrs	r3, r7
 80014d6:	08cc      	lsrs	r4, r1, #3
 80014d8:	e692      	b.n	8001200 <__aeabi_dsub+0x314>
 80014da:	1bdc      	subs	r4, r3, r7
 80014dc:	4660      	mov	r0, ip
 80014de:	42a3      	cmp	r3, r4
 80014e0:	41b6      	sbcs	r6, r6
 80014e2:	1a40      	subs	r0, r0, r1
 80014e4:	4276      	negs	r6, r6
 80014e6:	1b80      	subs	r0, r0, r6
 80014e8:	4681      	mov	r9, r0
 80014ea:	0200      	lsls	r0, r0, #8
 80014ec:	d560      	bpl.n	80015b0 <__aeabi_dsub+0x6c4>
 80014ee:	1afc      	subs	r4, r7, r3
 80014f0:	42a7      	cmp	r7, r4
 80014f2:	41bf      	sbcs	r7, r7
 80014f4:	4663      	mov	r3, ip
 80014f6:	427f      	negs	r7, r7
 80014f8:	1ac9      	subs	r1, r1, r3
 80014fa:	1bcb      	subs	r3, r1, r7
 80014fc:	4699      	mov	r9, r3
 80014fe:	465d      	mov	r5, fp
 8001500:	e576      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001502:	08ff      	lsrs	r7, r7, #3
 8001504:	074b      	lsls	r3, r1, #29
 8001506:	433b      	orrs	r3, r7
 8001508:	08cc      	lsrs	r4, r1, #3
 800150a:	e667      	b.n	80011dc <__aeabi_dsub+0x2f0>
 800150c:	000a      	movs	r2, r1
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	433a      	orrs	r2, r7
 8001512:	d100      	bne.n	8001516 <__aeabi_dsub+0x62a>
 8001514:	e66f      	b.n	80011f6 <__aeabi_dsub+0x30a>
 8001516:	4662      	mov	r2, ip
 8001518:	0752      	lsls	r2, r2, #29
 800151a:	4313      	orrs	r3, r2
 800151c:	4662      	mov	r2, ip
 800151e:	08d4      	lsrs	r4, r2, #3
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0312      	lsls	r2, r2, #12
 8001524:	4214      	tst	r4, r2
 8001526:	d007      	beq.n	8001538 <__aeabi_dsub+0x64c>
 8001528:	08c8      	lsrs	r0, r1, #3
 800152a:	4210      	tst	r0, r2
 800152c:	d104      	bne.n	8001538 <__aeabi_dsub+0x64c>
 800152e:	465d      	mov	r5, fp
 8001530:	0004      	movs	r4, r0
 8001532:	08fb      	lsrs	r3, r7, #3
 8001534:	0749      	lsls	r1, r1, #29
 8001536:	430b      	orrs	r3, r1
 8001538:	0f5a      	lsrs	r2, r3, #29
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	0752      	lsls	r2, r2, #29
 8001540:	4313      	orrs	r3, r2
 8001542:	e65d      	b.n	8001200 <__aeabi_dsub+0x314>
 8001544:	074b      	lsls	r3, r1, #29
 8001546:	08ff      	lsrs	r7, r7, #3
 8001548:	433b      	orrs	r3, r7
 800154a:	08cc      	lsrs	r4, r1, #3
 800154c:	e649      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 800154e:	19dc      	adds	r4, r3, r7
 8001550:	429c      	cmp	r4, r3
 8001552:	419b      	sbcs	r3, r3
 8001554:	4461      	add	r1, ip
 8001556:	4689      	mov	r9, r1
 8001558:	425b      	negs	r3, r3
 800155a:	4499      	add	r9, r3
 800155c:	464b      	mov	r3, r9
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	d400      	bmi.n	8001564 <__aeabi_dsub+0x678>
 8001562:	e631      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8001564:	464a      	mov	r2, r9
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <__aeabi_dsub+0x6d8>)
 8001568:	401a      	ands	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	4691      	mov	r9, r2
 800156e:	4698      	mov	r8, r3
 8001570:	e62a      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8001572:	0016      	movs	r6, r2
 8001574:	4664      	mov	r4, ip
 8001576:	3e20      	subs	r6, #32
 8001578:	40f4      	lsrs	r4, r6
 800157a:	46a0      	mov	r8, r4
 800157c:	2a20      	cmp	r2, #32
 800157e:	d005      	beq.n	800158c <__aeabi_dsub+0x6a0>
 8001580:	2640      	movs	r6, #64	; 0x40
 8001582:	4664      	mov	r4, ip
 8001584:	1ab2      	subs	r2, r6, r2
 8001586:	4094      	lsls	r4, r2
 8001588:	4323      	orrs	r3, r4
 800158a:	469a      	mov	sl, r3
 800158c:	4654      	mov	r4, sl
 800158e:	1e63      	subs	r3, r4, #1
 8001590:	419c      	sbcs	r4, r3
 8001592:	4643      	mov	r3, r8
 8001594:	431c      	orrs	r4, r3
 8001596:	e5db      	b.n	8001150 <__aeabi_dsub+0x264>
 8001598:	0002      	movs	r2, r0
 800159a:	2400      	movs	r4, #0
 800159c:	2300      	movs	r3, #0
 800159e:	e548      	b.n	8001032 <__aeabi_dsub+0x146>
 80015a0:	19dc      	adds	r4, r3, r7
 80015a2:	42bc      	cmp	r4, r7
 80015a4:	41bf      	sbcs	r7, r7
 80015a6:	4461      	add	r1, ip
 80015a8:	4689      	mov	r9, r1
 80015aa:	427f      	negs	r7, r7
 80015ac:	44b9      	add	r9, r7
 80015ae:	e738      	b.n	8001422 <__aeabi_dsub+0x536>
 80015b0:	464b      	mov	r3, r9
 80015b2:	4323      	orrs	r3, r4
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x6cc>
 80015b6:	e69f      	b.n	80012f8 <__aeabi_dsub+0x40c>
 80015b8:	e606      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	000007fe 	.word	0x000007fe
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	ff7fffff 	.word	0xff7fffff
 80015c8:	08ff      	lsrs	r7, r7, #3
 80015ca:	074b      	lsls	r3, r1, #29
 80015cc:	433b      	orrs	r3, r7
 80015ce:	08cc      	lsrs	r4, r1, #3
 80015d0:	e616      	b.n	8001200 <__aeabi_dsub+0x314>
 80015d2:	4662      	mov	r2, ip
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0752      	lsls	r2, r2, #29
 80015d8:	4313      	orrs	r3, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	08d4      	lsrs	r4, r2, #3
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	4214      	tst	r4, r2
 80015e4:	d007      	beq.n	80015f6 <__aeabi_dsub+0x70a>
 80015e6:	08c8      	lsrs	r0, r1, #3
 80015e8:	4210      	tst	r0, r2
 80015ea:	d104      	bne.n	80015f6 <__aeabi_dsub+0x70a>
 80015ec:	465d      	mov	r5, fp
 80015ee:	0004      	movs	r4, r0
 80015f0:	08fb      	lsrs	r3, r7, #3
 80015f2:	0749      	lsls	r1, r1, #29
 80015f4:	430b      	orrs	r3, r1
 80015f6:	0f5a      	lsrs	r2, r3, #29
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	0752      	lsls	r2, r2, #29
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	4313      	orrs	r3, r2
 8001600:	e5fe      	b.n	8001200 <__aeabi_dsub+0x314>
 8001602:	2300      	movs	r3, #0
 8001604:	4a01      	ldr	r2, [pc, #4]	; (800160c <__aeabi_dsub+0x720>)
 8001606:	001c      	movs	r4, r3
 8001608:	e513      	b.n	8001032 <__aeabi_dsub+0x146>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_d2iz>:
 8001610:	000a      	movs	r2, r1
 8001612:	b530      	push	{r4, r5, lr}
 8001614:	4c13      	ldr	r4, [pc, #76]	; (8001664 <__aeabi_d2iz+0x54>)
 8001616:	0053      	lsls	r3, r2, #1
 8001618:	0309      	lsls	r1, r1, #12
 800161a:	0005      	movs	r5, r0
 800161c:	0b09      	lsrs	r1, r1, #12
 800161e:	2000      	movs	r0, #0
 8001620:	0d5b      	lsrs	r3, r3, #21
 8001622:	0fd2      	lsrs	r2, r2, #31
 8001624:	42a3      	cmp	r3, r4
 8001626:	dd04      	ble.n	8001632 <__aeabi_d2iz+0x22>
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <__aeabi_d2iz+0x58>)
 800162a:	4283      	cmp	r3, r0
 800162c:	dd02      	ble.n	8001634 <__aeabi_d2iz+0x24>
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <__aeabi_d2iz+0x5c>)
 8001630:	18d0      	adds	r0, r2, r3
 8001632:	bd30      	pop	{r4, r5, pc}
 8001634:	2080      	movs	r0, #128	; 0x80
 8001636:	0340      	lsls	r0, r0, #13
 8001638:	4301      	orrs	r1, r0
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <__aeabi_d2iz+0x60>)
 800163c:	1ac0      	subs	r0, r0, r3
 800163e:	281f      	cmp	r0, #31
 8001640:	dd08      	ble.n	8001654 <__aeabi_d2iz+0x44>
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <__aeabi_d2iz+0x64>)
 8001644:	1ac3      	subs	r3, r0, r3
 8001646:	40d9      	lsrs	r1, r3
 8001648:	000b      	movs	r3, r1
 800164a:	4258      	negs	r0, r3
 800164c:	2a00      	cmp	r2, #0
 800164e:	d1f0      	bne.n	8001632 <__aeabi_d2iz+0x22>
 8001650:	0018      	movs	r0, r3
 8001652:	e7ee      	b.n	8001632 <__aeabi_d2iz+0x22>
 8001654:	4c08      	ldr	r4, [pc, #32]	; (8001678 <__aeabi_d2iz+0x68>)
 8001656:	40c5      	lsrs	r5, r0
 8001658:	46a4      	mov	ip, r4
 800165a:	4463      	add	r3, ip
 800165c:	4099      	lsls	r1, r3
 800165e:	000b      	movs	r3, r1
 8001660:	432b      	orrs	r3, r5
 8001662:	e7f2      	b.n	800164a <__aeabi_d2iz+0x3a>
 8001664:	000003fe 	.word	0x000003fe
 8001668:	0000041d 	.word	0x0000041d
 800166c:	7fffffff 	.word	0x7fffffff
 8001670:	00000433 	.word	0x00000433
 8001674:	00000413 	.word	0x00000413
 8001678:	fffffbed 	.word	0xfffffbed

0800167c <__aeabi_ui2d>:
 800167c:	b510      	push	{r4, lr}
 800167e:	1e04      	subs	r4, r0, #0
 8001680:	d010      	beq.n	80016a4 <__aeabi_ui2d+0x28>
 8001682:	f000 f85f 	bl	8001744 <__clzsi2>
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <__aeabi_ui2d+0x48>)
 8001688:	1a1b      	subs	r3, r3, r0
 800168a:	280a      	cmp	r0, #10
 800168c:	dc11      	bgt.n	80016b2 <__aeabi_ui2d+0x36>
 800168e:	220b      	movs	r2, #11
 8001690:	0021      	movs	r1, r4
 8001692:	1a12      	subs	r2, r2, r0
 8001694:	40d1      	lsrs	r1, r2
 8001696:	3015      	adds	r0, #21
 8001698:	030a      	lsls	r2, r1, #12
 800169a:	055b      	lsls	r3, r3, #21
 800169c:	4084      	lsls	r4, r0
 800169e:	0b12      	lsrs	r2, r2, #12
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	e001      	b.n	80016a8 <__aeabi_ui2d+0x2c>
 80016a4:	2300      	movs	r3, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	4313      	orrs	r3, r2
 80016ac:	0020      	movs	r0, r4
 80016ae:	0019      	movs	r1, r3
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	0022      	movs	r2, r4
 80016b4:	380b      	subs	r0, #11
 80016b6:	4082      	lsls	r2, r0
 80016b8:	055b      	lsls	r3, r3, #21
 80016ba:	0312      	lsls	r2, r2, #12
 80016bc:	2400      	movs	r4, #0
 80016be:	0b12      	lsrs	r2, r2, #12
 80016c0:	0d5b      	lsrs	r3, r3, #21
 80016c2:	e7f1      	b.n	80016a8 <__aeabi_ui2d+0x2c>
 80016c4:	0000041e 	.word	0x0000041e

080016c8 <__aeabi_cdrcmple>:
 80016c8:	4684      	mov	ip, r0
 80016ca:	0010      	movs	r0, r2
 80016cc:	4662      	mov	r2, ip
 80016ce:	468c      	mov	ip, r1
 80016d0:	0019      	movs	r1, r3
 80016d2:	4663      	mov	r3, ip
 80016d4:	e000      	b.n	80016d8 <__aeabi_cdcmpeq>
 80016d6:	46c0      	nop			; (mov r8, r8)

080016d8 <__aeabi_cdcmpeq>:
 80016d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016da:	f000 f8f9 	bl	80018d0 <__ledf2>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d401      	bmi.n	80016e6 <__aeabi_cdcmpeq+0xe>
 80016e2:	2100      	movs	r1, #0
 80016e4:	42c8      	cmn	r0, r1
 80016e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016e8 <__aeabi_dcmpeq>:
 80016e8:	b510      	push	{r4, lr}
 80016ea:	f000 f849 	bl	8001780 <__eqdf2>
 80016ee:	4240      	negs	r0, r0
 80016f0:	3001      	adds	r0, #1
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <__aeabi_dcmplt>:
 80016f4:	b510      	push	{r4, lr}
 80016f6:	f000 f8eb 	bl	80018d0 <__ledf2>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	db01      	blt.n	8001702 <__aeabi_dcmplt+0xe>
 80016fe:	2000      	movs	r0, #0
 8001700:	bd10      	pop	{r4, pc}
 8001702:	2001      	movs	r0, #1
 8001704:	bd10      	pop	{r4, pc}
 8001706:	46c0      	nop			; (mov r8, r8)

08001708 <__aeabi_dcmple>:
 8001708:	b510      	push	{r4, lr}
 800170a:	f000 f8e1 	bl	80018d0 <__ledf2>
 800170e:	2800      	cmp	r0, #0
 8001710:	dd01      	ble.n	8001716 <__aeabi_dcmple+0xe>
 8001712:	2000      	movs	r0, #0
 8001714:	bd10      	pop	{r4, pc}
 8001716:	2001      	movs	r0, #1
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			; (mov r8, r8)

0800171c <__aeabi_dcmpgt>:
 800171c:	b510      	push	{r4, lr}
 800171e:	f000 f871 	bl	8001804 <__gedf2>
 8001722:	2800      	cmp	r0, #0
 8001724:	dc01      	bgt.n	800172a <__aeabi_dcmpgt+0xe>
 8001726:	2000      	movs	r0, #0
 8001728:	bd10      	pop	{r4, pc}
 800172a:	2001      	movs	r0, #1
 800172c:	bd10      	pop	{r4, pc}
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <__aeabi_dcmpge>:
 8001730:	b510      	push	{r4, lr}
 8001732:	f000 f867 	bl	8001804 <__gedf2>
 8001736:	2800      	cmp	r0, #0
 8001738:	da01      	bge.n	800173e <__aeabi_dcmpge+0xe>
 800173a:	2000      	movs	r0, #0
 800173c:	bd10      	pop	{r4, pc}
 800173e:	2001      	movs	r0, #1
 8001740:	bd10      	pop	{r4, pc}
 8001742:	46c0      	nop			; (mov r8, r8)

08001744 <__clzsi2>:
 8001744:	211c      	movs	r1, #28
 8001746:	2301      	movs	r3, #1
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	4298      	cmp	r0, r3
 800174c:	d301      	bcc.n	8001752 <__clzsi2+0xe>
 800174e:	0c00      	lsrs	r0, r0, #16
 8001750:	3910      	subs	r1, #16
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	4298      	cmp	r0, r3
 8001756:	d301      	bcc.n	800175c <__clzsi2+0x18>
 8001758:	0a00      	lsrs	r0, r0, #8
 800175a:	3908      	subs	r1, #8
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	4298      	cmp	r0, r3
 8001760:	d301      	bcc.n	8001766 <__clzsi2+0x22>
 8001762:	0900      	lsrs	r0, r0, #4
 8001764:	3904      	subs	r1, #4
 8001766:	a202      	add	r2, pc, #8	; (adr r2, 8001770 <__clzsi2+0x2c>)
 8001768:	5c10      	ldrb	r0, [r2, r0]
 800176a:	1840      	adds	r0, r0, r1
 800176c:	4770      	bx	lr
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	02020304 	.word	0x02020304
 8001774:	01010101 	.word	0x01010101
	...

08001780 <__eqdf2>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	464e      	mov	r6, r9
 8001784:	4645      	mov	r5, r8
 8001786:	46de      	mov	lr, fp
 8001788:	4657      	mov	r7, sl
 800178a:	4690      	mov	r8, r2
 800178c:	b5e0      	push	{r5, r6, r7, lr}
 800178e:	0017      	movs	r7, r2
 8001790:	031a      	lsls	r2, r3, #12
 8001792:	0b12      	lsrs	r2, r2, #12
 8001794:	0005      	movs	r5, r0
 8001796:	4684      	mov	ip, r0
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <__eqdf2+0x80>)
 800179a:	030e      	lsls	r6, r1, #12
 800179c:	004c      	lsls	r4, r1, #1
 800179e:	4691      	mov	r9, r2
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	0fdb      	lsrs	r3, r3, #31
 80017a4:	469b      	mov	fp, r3
 80017a6:	0b36      	lsrs	r6, r6, #12
 80017a8:	0d64      	lsrs	r4, r4, #21
 80017aa:	0fc9      	lsrs	r1, r1, #31
 80017ac:	0d52      	lsrs	r2, r2, #21
 80017ae:	4284      	cmp	r4, r0
 80017b0:	d019      	beq.n	80017e6 <__eqdf2+0x66>
 80017b2:	4282      	cmp	r2, r0
 80017b4:	d010      	beq.n	80017d8 <__eqdf2+0x58>
 80017b6:	2001      	movs	r0, #1
 80017b8:	4294      	cmp	r4, r2
 80017ba:	d10e      	bne.n	80017da <__eqdf2+0x5a>
 80017bc:	454e      	cmp	r6, r9
 80017be:	d10c      	bne.n	80017da <__eqdf2+0x5a>
 80017c0:	2001      	movs	r0, #1
 80017c2:	45c4      	cmp	ip, r8
 80017c4:	d109      	bne.n	80017da <__eqdf2+0x5a>
 80017c6:	4559      	cmp	r1, fp
 80017c8:	d017      	beq.n	80017fa <__eqdf2+0x7a>
 80017ca:	2c00      	cmp	r4, #0
 80017cc:	d105      	bne.n	80017da <__eqdf2+0x5a>
 80017ce:	0030      	movs	r0, r6
 80017d0:	4328      	orrs	r0, r5
 80017d2:	1e43      	subs	r3, r0, #1
 80017d4:	4198      	sbcs	r0, r3
 80017d6:	e000      	b.n	80017da <__eqdf2+0x5a>
 80017d8:	2001      	movs	r0, #1
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	0033      	movs	r3, r6
 80017e8:	2001      	movs	r0, #1
 80017ea:	432b      	orrs	r3, r5
 80017ec:	d1f5      	bne.n	80017da <__eqdf2+0x5a>
 80017ee:	42a2      	cmp	r2, r4
 80017f0:	d1f3      	bne.n	80017da <__eqdf2+0x5a>
 80017f2:	464b      	mov	r3, r9
 80017f4:	433b      	orrs	r3, r7
 80017f6:	d1f0      	bne.n	80017da <__eqdf2+0x5a>
 80017f8:	e7e2      	b.n	80017c0 <__eqdf2+0x40>
 80017fa:	2000      	movs	r0, #0
 80017fc:	e7ed      	b.n	80017da <__eqdf2+0x5a>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff

08001804 <__gedf2>:
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	4647      	mov	r7, r8
 8001808:	46ce      	mov	lr, r9
 800180a:	0004      	movs	r4, r0
 800180c:	0018      	movs	r0, r3
 800180e:	0016      	movs	r6, r2
 8001810:	031b      	lsls	r3, r3, #12
 8001812:	0b1b      	lsrs	r3, r3, #12
 8001814:	4d2d      	ldr	r5, [pc, #180]	; (80018cc <__gedf2+0xc8>)
 8001816:	004a      	lsls	r2, r1, #1
 8001818:	4699      	mov	r9, r3
 800181a:	b580      	push	{r7, lr}
 800181c:	0043      	lsls	r3, r0, #1
 800181e:	030f      	lsls	r7, r1, #12
 8001820:	46a4      	mov	ip, r4
 8001822:	46b0      	mov	r8, r6
 8001824:	0b3f      	lsrs	r7, r7, #12
 8001826:	0d52      	lsrs	r2, r2, #21
 8001828:	0fc9      	lsrs	r1, r1, #31
 800182a:	0d5b      	lsrs	r3, r3, #21
 800182c:	0fc0      	lsrs	r0, r0, #31
 800182e:	42aa      	cmp	r2, r5
 8001830:	d021      	beq.n	8001876 <__gedf2+0x72>
 8001832:	42ab      	cmp	r3, r5
 8001834:	d013      	beq.n	800185e <__gedf2+0x5a>
 8001836:	2a00      	cmp	r2, #0
 8001838:	d122      	bne.n	8001880 <__gedf2+0x7c>
 800183a:	433c      	orrs	r4, r7
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <__gedf2+0x42>
 8001840:	464d      	mov	r5, r9
 8001842:	432e      	orrs	r6, r5
 8001844:	d022      	beq.n	800188c <__gedf2+0x88>
 8001846:	2c00      	cmp	r4, #0
 8001848:	d010      	beq.n	800186c <__gedf2+0x68>
 800184a:	4281      	cmp	r1, r0
 800184c:	d022      	beq.n	8001894 <__gedf2+0x90>
 800184e:	2002      	movs	r0, #2
 8001850:	3901      	subs	r1, #1
 8001852:	4008      	ands	r0, r1
 8001854:	3801      	subs	r0, #1
 8001856:	bcc0      	pop	{r6, r7}
 8001858:	46b9      	mov	r9, r7
 800185a:	46b0      	mov	r8, r6
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	464d      	mov	r5, r9
 8001860:	432e      	orrs	r6, r5
 8001862:	d129      	bne.n	80018b8 <__gedf2+0xb4>
 8001864:	2a00      	cmp	r2, #0
 8001866:	d1f0      	bne.n	800184a <__gedf2+0x46>
 8001868:	433c      	orrs	r4, r7
 800186a:	d1ee      	bne.n	800184a <__gedf2+0x46>
 800186c:	2800      	cmp	r0, #0
 800186e:	d1f2      	bne.n	8001856 <__gedf2+0x52>
 8001870:	2001      	movs	r0, #1
 8001872:	4240      	negs	r0, r0
 8001874:	e7ef      	b.n	8001856 <__gedf2+0x52>
 8001876:	003d      	movs	r5, r7
 8001878:	4325      	orrs	r5, r4
 800187a:	d11d      	bne.n	80018b8 <__gedf2+0xb4>
 800187c:	4293      	cmp	r3, r2
 800187e:	d0ee      	beq.n	800185e <__gedf2+0x5a>
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e2      	bne.n	800184a <__gedf2+0x46>
 8001884:	464c      	mov	r4, r9
 8001886:	4326      	orrs	r6, r4
 8001888:	d1df      	bne.n	800184a <__gedf2+0x46>
 800188a:	e7e0      	b.n	800184e <__gedf2+0x4a>
 800188c:	2000      	movs	r0, #0
 800188e:	2c00      	cmp	r4, #0
 8001890:	d0e1      	beq.n	8001856 <__gedf2+0x52>
 8001892:	e7dc      	b.n	800184e <__gedf2+0x4a>
 8001894:	429a      	cmp	r2, r3
 8001896:	dc0a      	bgt.n	80018ae <__gedf2+0xaa>
 8001898:	dbe8      	blt.n	800186c <__gedf2+0x68>
 800189a:	454f      	cmp	r7, r9
 800189c:	d8d7      	bhi.n	800184e <__gedf2+0x4a>
 800189e:	d00e      	beq.n	80018be <__gedf2+0xba>
 80018a0:	2000      	movs	r0, #0
 80018a2:	454f      	cmp	r7, r9
 80018a4:	d2d7      	bcs.n	8001856 <__gedf2+0x52>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	d0e2      	beq.n	8001870 <__gedf2+0x6c>
 80018aa:	0008      	movs	r0, r1
 80018ac:	e7d3      	b.n	8001856 <__gedf2+0x52>
 80018ae:	4243      	negs	r3, r0
 80018b0:	4158      	adcs	r0, r3
 80018b2:	0040      	lsls	r0, r0, #1
 80018b4:	3801      	subs	r0, #1
 80018b6:	e7ce      	b.n	8001856 <__gedf2+0x52>
 80018b8:	2002      	movs	r0, #2
 80018ba:	4240      	negs	r0, r0
 80018bc:	e7cb      	b.n	8001856 <__gedf2+0x52>
 80018be:	45c4      	cmp	ip, r8
 80018c0:	d8c5      	bhi.n	800184e <__gedf2+0x4a>
 80018c2:	2000      	movs	r0, #0
 80018c4:	45c4      	cmp	ip, r8
 80018c6:	d2c6      	bcs.n	8001856 <__gedf2+0x52>
 80018c8:	e7ed      	b.n	80018a6 <__gedf2+0xa2>
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	000007ff 	.word	0x000007ff

080018d0 <__ledf2>:
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	4647      	mov	r7, r8
 80018d4:	46ce      	mov	lr, r9
 80018d6:	0004      	movs	r4, r0
 80018d8:	0018      	movs	r0, r3
 80018da:	0016      	movs	r6, r2
 80018dc:	031b      	lsls	r3, r3, #12
 80018de:	0b1b      	lsrs	r3, r3, #12
 80018e0:	4d2c      	ldr	r5, [pc, #176]	; (8001994 <__ledf2+0xc4>)
 80018e2:	004a      	lsls	r2, r1, #1
 80018e4:	4699      	mov	r9, r3
 80018e6:	b580      	push	{r7, lr}
 80018e8:	0043      	lsls	r3, r0, #1
 80018ea:	030f      	lsls	r7, r1, #12
 80018ec:	46a4      	mov	ip, r4
 80018ee:	46b0      	mov	r8, r6
 80018f0:	0b3f      	lsrs	r7, r7, #12
 80018f2:	0d52      	lsrs	r2, r2, #21
 80018f4:	0fc9      	lsrs	r1, r1, #31
 80018f6:	0d5b      	lsrs	r3, r3, #21
 80018f8:	0fc0      	lsrs	r0, r0, #31
 80018fa:	42aa      	cmp	r2, r5
 80018fc:	d00d      	beq.n	800191a <__ledf2+0x4a>
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d010      	beq.n	8001924 <__ledf2+0x54>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d127      	bne.n	8001956 <__ledf2+0x86>
 8001906:	433c      	orrs	r4, r7
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <__ledf2+0x60>
 800190c:	464d      	mov	r5, r9
 800190e:	432e      	orrs	r6, r5
 8001910:	d10e      	bne.n	8001930 <__ledf2+0x60>
 8001912:	2000      	movs	r0, #0
 8001914:	2c00      	cmp	r4, #0
 8001916:	d015      	beq.n	8001944 <__ledf2+0x74>
 8001918:	e00e      	b.n	8001938 <__ledf2+0x68>
 800191a:	003d      	movs	r5, r7
 800191c:	4325      	orrs	r5, r4
 800191e:	d110      	bne.n	8001942 <__ledf2+0x72>
 8001920:	4293      	cmp	r3, r2
 8001922:	d118      	bne.n	8001956 <__ledf2+0x86>
 8001924:	464d      	mov	r5, r9
 8001926:	432e      	orrs	r6, r5
 8001928:	d10b      	bne.n	8001942 <__ledf2+0x72>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d102      	bne.n	8001934 <__ledf2+0x64>
 800192e:	433c      	orrs	r4, r7
 8001930:	2c00      	cmp	r4, #0
 8001932:	d00b      	beq.n	800194c <__ledf2+0x7c>
 8001934:	4281      	cmp	r1, r0
 8001936:	d014      	beq.n	8001962 <__ledf2+0x92>
 8001938:	2002      	movs	r0, #2
 800193a:	3901      	subs	r1, #1
 800193c:	4008      	ands	r0, r1
 800193e:	3801      	subs	r0, #1
 8001940:	e000      	b.n	8001944 <__ledf2+0x74>
 8001942:	2002      	movs	r0, #2
 8001944:	bcc0      	pop	{r6, r7}
 8001946:	46b9      	mov	r9, r7
 8001948:	46b0      	mov	r8, r6
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194c:	2800      	cmp	r0, #0
 800194e:	d1f9      	bne.n	8001944 <__ledf2+0x74>
 8001950:	2001      	movs	r0, #1
 8001952:	4240      	negs	r0, r0
 8001954:	e7f6      	b.n	8001944 <__ledf2+0x74>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ec      	bne.n	8001934 <__ledf2+0x64>
 800195a:	464c      	mov	r4, r9
 800195c:	4326      	orrs	r6, r4
 800195e:	d1e9      	bne.n	8001934 <__ledf2+0x64>
 8001960:	e7ea      	b.n	8001938 <__ledf2+0x68>
 8001962:	429a      	cmp	r2, r3
 8001964:	dd04      	ble.n	8001970 <__ledf2+0xa0>
 8001966:	4243      	negs	r3, r0
 8001968:	4158      	adcs	r0, r3
 800196a:	0040      	lsls	r0, r0, #1
 800196c:	3801      	subs	r0, #1
 800196e:	e7e9      	b.n	8001944 <__ledf2+0x74>
 8001970:	429a      	cmp	r2, r3
 8001972:	dbeb      	blt.n	800194c <__ledf2+0x7c>
 8001974:	454f      	cmp	r7, r9
 8001976:	d8df      	bhi.n	8001938 <__ledf2+0x68>
 8001978:	d006      	beq.n	8001988 <__ledf2+0xb8>
 800197a:	2000      	movs	r0, #0
 800197c:	454f      	cmp	r7, r9
 800197e:	d2e1      	bcs.n	8001944 <__ledf2+0x74>
 8001980:	2900      	cmp	r1, #0
 8001982:	d0e5      	beq.n	8001950 <__ledf2+0x80>
 8001984:	0008      	movs	r0, r1
 8001986:	e7dd      	b.n	8001944 <__ledf2+0x74>
 8001988:	45c4      	cmp	ip, r8
 800198a:	d8d5      	bhi.n	8001938 <__ledf2+0x68>
 800198c:	2000      	movs	r0, #0
 800198e:	45c4      	cmp	ip, r8
 8001990:	d2d8      	bcs.n	8001944 <__ledf2+0x74>
 8001992:	e7f5      	b.n	8001980 <__ledf2+0xb0>
 8001994:	000007ff 	.word	0x000007ff

08001998 <delay_in_us>:
/*********************************************************************************
								Macro Functions End
**********************************************************************************/

void delay_in_us(uint16_t time)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <delay_in_us+0x30>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <delay_in_us+0x30>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b4:	1dbb      	adds	r3, r7, #6
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3f8      	bcc.n	80019ae <delay_in_us+0x16>
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	20000038 	.word	0x20000038

080019cc <HAL_TIM_IC_CaptureCallback>:

uint32_t intCounter = 0, intCounter2 = 0;

// Timer Interrupt Callback for HC-SR04
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // CHECK WHETHER THE PWM STUFF GETS IN HERE
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	// We land here from the sleep mode. Resume the tick interrupt.
//	HAL_ResumeTick();
	intCounter2++;
 80019d4:	4bd8      	ldr	r3, [pc, #864]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	4bd7      	ldr	r3, [pc, #860]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80019dc:	601a      	str	r2, [r3, #0]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4ad6      	ldr	r2, [pc, #856]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x370>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d000      	beq.n	80019ea <HAL_TIM_IC_CaptureCallback+0x1e>
 80019e8:	e08a      	b.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7f1b      	ldrb	r3, [r3, #28]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d000      	beq.n	80019f4 <HAL_TIM_IC_CaptureCallback+0x28>
 80019f2:	e085      	b.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
	{
		intCounter++;
 80019f4:	4bd2      	ldr	r3, [pc, #840]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x374>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	4bd1      	ldr	r3, [pc, #836]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x374>)
 80019fc:	601a      	str	r2, [r3, #0]
		if (Is_First_Captured_1 == 0)
 80019fe:	4bd1      	ldr	r3, [pc, #836]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11b      	bne.n	8001a3e <HAL_TIM_IC_CaptureCallback+0x72>
		{
			/* Take the time stamp of when the rising edge occurs */
			IC_VAL1_HCSR1 = HAL_TIM_ReadCapturedValue(htim, HCSR1_TIMER_CHANNEL);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2100      	movs	r1, #0
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f003 ffca 	bl	80059a4 <HAL_TIM_ReadCapturedValue>
 8001a10:	0002      	movs	r2, r0
 8001a12:	4bcd      	ldr	r3, [pc, #820]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a14:	601a      	str	r2, [r3, #0]
			Is_First_Captured_1 = 1; /* set the first captured as true */
 8001a16:	4bcb      	ldr	r3, [pc, #812]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
			/* Now change the polarity to falling edge to be able to catch it when it happens */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR1_TIMER_CHANNEL, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	210a      	movs	r1, #10
 8001a28:	438a      	bics	r2, r1
 8001a2a:	621a      	str	r2, [r3, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2102      	movs	r1, #2
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	621a      	str	r2, [r3, #32]
 8001a3c:	e060      	b.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
		}
		else if (Is_First_Captured_1 == 1)
 8001a3e:	4bc1      	ldr	r3, [pc, #772]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d15c      	bne.n	8001b00 <HAL_TIM_IC_CaptureCallback+0x134>
		{
			/* Take the time stamp of when the falling edge occurs */
			IC_VAL2_HCSR1 = HAL_TIM_ReadCapturedValue(htim, HCSR1_TIMER_CHANNEL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f003 ffaa 	bl	80059a4 <HAL_TIM_ReadCapturedValue>
 8001a50:	0002      	movs	r2, r0
 8001a52:	4bbe      	ldr	r3, [pc, #760]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a54:	601a      	str	r2, [r3, #0]
			/* __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter, kept here just in case */
			if (IC_VAL2_HCSR1 > IC_VAL1_HCSR1)
 8001a56:	4bbd      	ldr	r3, [pc, #756]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4bbb      	ldr	r3, [pc, #748]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d907      	bls.n	8001a72 <HAL_TIM_IC_CaptureCallback+0xa6>
			{
				Difference_1 = IC_VAL2_HCSR1 - IC_VAL1_HCSR1;
 8001a62:	4bba      	ldr	r3, [pc, #744]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4bb8      	ldr	r3, [pc, #736]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	1ad2      	subs	r2, r2, r3
 8001a6c:	4bb8      	ldr	r3, [pc, #736]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	e00e      	b.n	8001a90 <HAL_TIM_IC_CaptureCallback+0xc4>
			}
			else if (IC_VAL1_HCSR1 > IC_VAL2_HCSR1)
 8001a72:	4bb5      	ldr	r3, [pc, #724]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4bb5      	ldr	r3, [pc, #724]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d908      	bls.n	8001a90 <HAL_TIM_IC_CaptureCallback+0xc4>
			{
				Difference_1 = (0xffff - IC_VAL1_HCSR1) + IC_VAL2_HCSR1;
 8001a7e:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <HAL_TIM_IC_CaptureCallback+0x380>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	4bb1      	ldr	r3, [pc, #708]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4ab2      	ldr	r2, [pc, #712]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001a8a:	189a      	adds	r2, r3, r2
 8001a8c:	4bb0      	ldr	r3, [pc, #704]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001a8e:	601a      	str	r2, [r3, #0]
			}
			HCSR_Distance_1 = Difference_1 * .034/2;
 8001a90:	4baf      	ldr	r3, [pc, #700]	; (8001d50 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff fdf1 	bl	800167c <__aeabi_ui2d>
 8001a9a:	4aaf      	ldr	r2, [pc, #700]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001a9c:	4baf      	ldr	r3, [pc, #700]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x390>)
 8001a9e:	f7fe ffb9 	bl	8000a14 <__aeabi_dmul>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	000b      	movs	r3, r1
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	05db      	lsls	r3, r3, #23
 8001ab0:	f7fe fcba 	bl	8000428 <__aeabi_ddiv>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	000b      	movs	r3, r1
 8001ab8:	0010      	movs	r0, r2
 8001aba:	0019      	movs	r1, r3
 8001abc:	f7fe fc96 	bl	80003ec <__aeabi_d2uiz>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4ba6      	ldr	r3, [pc, #664]	; (8001d60 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001ac6:	801a      	strh	r2, [r3, #0]
			Is_First_Captured_1 = 0; /* set it back to false */
 8001ac8:	4b9e      	ldr	r3, [pc, #632]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
			Distance1_flag = 1; /* Set the distance flag to 1 to indicate that the distance is calculated.*/
 8001ace:	4ba5      	ldr	r3, [pc, #660]	; (8001d64 <HAL_TIM_IC_CaptureCallback+0x398>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
			/* set polarity to rising edge */
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, HCSR1_TIMER_CHANNEL, TIM_INPUTCHANNELPOLARITY_RISING);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	210a      	movs	r1, #10
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	621a      	str	r2, [r3, #32]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6a12      	ldr	r2, [r2, #32]
 8001aee:	621a      	str	r2, [r3, #32]
			/* Disable the interrupt after the distance calculation is done (or the noise can still pull the line up and down and cause interrupts) */
			__HAL_TIM_DISABLE_IT(&htim1, HCSR1_TIM_IT_CC);
 8001af0:	4b9d      	ldr	r3, [pc, #628]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	438a      	bics	r2, r1
 8001afe:	60da      	str	r2, [r3, #12]
//		HCSR_INPUT_HANDLE(htim, HCSR1_TIMER_ADDRESS, HCSR1_TIMER_CHANNEL, HCSR1_TIM_IT_CC,
//					      Is_First_Captured_1, IC_VAL1_HCSR1, IC_VAL2_HCSR1, Difference_1,
//					      HCSR_Distance_1, Distance1_flag);
//	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Timer 14 channel 1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7f1b      	ldrb	r3, [r3, #28]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d000      	beq.n	8001b0a <HAL_TIM_IC_CaptureCallback+0x13e>
 8001b08:	e086      	b.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
	{
		HCSR_INPUT_HANDLE(htim, HCSR2_TIMER_ADDRESS, HCSR2_TIMER_CHANNEL, HCSR2_TIM_IT_CC,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a97      	ldr	r2, [pc, #604]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d000      	beq.n	8001b16 <HAL_TIM_IC_CaptureCallback+0x14a>
 8001b14:	e080      	b.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
 8001b16:	4b96      	ldr	r3, [pc, #600]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d11b      	bne.n	8001b56 <HAL_TIM_IC_CaptureCallback+0x18a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2100      	movs	r1, #0
 8001b22:	0018      	movs	r0, r3
 8001b24:	f003 ff3e 	bl	80059a4 <HAL_TIM_ReadCapturedValue>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b90      	ldr	r3, [pc, #576]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	210a      	movs	r1, #10
 8001b40:	438a      	bics	r2, r1
 8001b42:	621a      	str	r2, [r3, #32]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2102      	movs	r1, #2
 8001b50:	430a      	orrs	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
 8001b54:	e060      	b.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
 8001b56:	4b86      	ldr	r3, [pc, #536]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d15c      	bne.n	8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2100      	movs	r1, #0
 8001b62:	0018      	movs	r0, r3
 8001b64:	f003 ff1e 	bl	80059a4 <HAL_TIM_ReadCapturedValue>
 8001b68:	0002      	movs	r2, r0
 8001b6a:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d907      	bls.n	8001b8a <HAL_TIM_IC_CaptureCallback+0x1be>
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1ad2      	subs	r2, r2, r3
 8001b84:	4b7d      	ldr	r3, [pc, #500]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e00e      	b.n	8001ba8 <HAL_TIM_IC_CaptureCallback+0x1dc>
 8001b8a:	4b7a      	ldr	r3, [pc, #488]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d908      	bls.n	8001ba8 <HAL_TIM_IC_CaptureCallback+0x1dc>
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a6c      	ldr	r2, [pc, #432]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001ba2:	189a      	adds	r2, r3, r2
 8001ba4:	4b75      	ldr	r3, [pc, #468]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff fd65 	bl	800167c <__aeabi_ui2d>
 8001bb2:	4a69      	ldr	r2, [pc, #420]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001bb4:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x390>)
 8001bb6:	f7fe ff2d 	bl	8000a14 <__aeabi_dmul>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	000b      	movs	r3, r1
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	05db      	lsls	r3, r3, #23
 8001bc8:	f7fe fc2e 	bl	8000428 <__aeabi_ddiv>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	000b      	movs	r3, r1
 8001bd0:	0010      	movs	r0, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	f7fe fc0a 	bl	80003ec <__aeabi_d2uiz>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b68      	ldr	r3, [pc, #416]	; (8001d80 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001bde:	801a      	strh	r2, [r3, #0]
 8001be0:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	210a      	movs	r1, #10
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	621a      	str	r2, [r3, #32]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a12      	ldr	r2, [r2, #32]
 8001c06:	621a      	str	r2, [r3, #32]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2102      	movs	r1, #2
 8001c14:	438a      	bics	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
//////		HCSR_INPUT_HANDLE(htim, HCSR4_TIMER_ADDRESS, HCSR4_TIMER_CHANNEL, HCSR4_TIM_IT_CC,
//////						  Is_First_Captured_4, IC_VAL1_HCSR4, IC_VAL2_HCSR4, Difference_4,
//////						  HCSR_Distance_4, Distance4_flag);
//////	}
////
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // Timer 17 channel 1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7f1b      	ldrb	r3, [r3, #28]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d000      	beq.n	8001c22 <HAL_TIM_IC_CaptureCallback+0x256>
 8001c20:	e086      	b.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
	{
		HCSR_INPUT_HANDLE(htim, HCSR5_TIMER_ADDRESS, HCSR5_TIMER_CHANNEL, HCSR5_TIM_IT_CC,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d000      	beq.n	8001c2e <HAL_TIM_IC_CaptureCallback+0x262>
 8001c2c:	e080      	b.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
 8001c2e:	4b57      	ldr	r3, [pc, #348]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d11b      	bne.n	8001c6e <HAL_TIM_IC_CaptureCallback+0x2a2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f003 feb2 	bl	80059a4 <HAL_TIM_ReadCapturedValue>
 8001c40:	0002      	movs	r2, r0
 8001c42:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a1a      	ldr	r2, [r3, #32]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	210a      	movs	r1, #10
 8001c58:	438a      	bics	r2, r1
 8001c5a:	621a      	str	r2, [r3, #32]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2102      	movs	r1, #2
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	621a      	str	r2, [r3, #32]
						  Is_First_Captured_5, IC_VAL1_HCSR5, IC_VAL2_HCSR5, Difference_5,
						  HCSR_Distance_5, Distance5_flag);
	}
}
 8001c6c:	e060      	b.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
		HCSR_INPUT_HANDLE(htim, HCSR5_TIMER_ADDRESS, HCSR5_TIMER_CHANNEL, HCSR5_TIM_IT_CC,
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d15c      	bne.n	8001d30 <HAL_TIM_IC_CaptureCallback+0x364>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f003 fe92 	bl	80059a4 <HAL_TIM_ReadCapturedValue>
 8001c80:	0002      	movs	r2, r0
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d907      	bls.n	8001ca2 <HAL_TIM_IC_CaptureCallback+0x2d6>
 8001c92:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e00e      	b.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d908      	bls.n	8001cc0 <HAL_TIM_IC_CaptureCallback+0x2f4>
 8001cae:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001cba:	189a      	adds	r2, r3, r2
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fcd9 	bl	800167c <__aeabi_ui2d>
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <HAL_TIM_IC_CaptureCallback+0x390>)
 8001cce:	f7fe fea1 	bl	8000a14 <__aeabi_dmul>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	000b      	movs	r3, r1
 8001cd6:	0010      	movs	r0, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	f7fe fba2 	bl	8000428 <__aeabi_ddiv>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	000b      	movs	r3, r1
 8001ce8:	0010      	movs	r0, r2
 8001cea:	0019      	movs	r1, r3
 8001cec:	f7fe fb7e 	bl	80003ec <__aeabi_d2uiz>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	210a      	movs	r1, #10
 8001d10:	438a      	bics	r2, r1
 8001d12:	621a      	str	r2, [r3, #32]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6a12      	ldr	r2, [r2, #32]
 8001d1e:	621a      	str	r2, [r3, #32]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	60da      	str	r2, [r3, #12]
}
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b002      	add	sp, #8
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200003d0 	.word	0x200003d0
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	200003cc 	.word	0x200003cc
 8001d44:	200003c0 	.word	0x200003c0
 8001d48:	2000039c 	.word	0x2000039c
 8001d4c:	200003a0 	.word	0x200003a0
 8001d50:	200003b4 	.word	0x200003b4
 8001d54:	0000ffff 	.word	0x0000ffff
 8001d58:	b020c49c 	.word	0xb020c49c
 8001d5c:	3fa16872 	.word	0x3fa16872
 8001d60:	20000006 	.word	0x20000006
 8001d64:	200003c3 	.word	0x200003c3
 8001d68:	20000038 	.word	0x20000038
 8001d6c:	40002000 	.word	0x40002000
 8001d70:	200003c1 	.word	0x200003c1
 8001d74:	200003a4 	.word	0x200003a4
 8001d78:	200003a8 	.word	0x200003a8
 8001d7c:	200003b8 	.word	0x200003b8
 8001d80:	20000008 	.word	0x20000008
 8001d84:	200003c4 	.word	0x200003c4
 8001d88:	40014800 	.word	0x40014800
 8001d8c:	200003c2 	.word	0x200003c2
 8001d90:	200003ac 	.word	0x200003ac
 8001d94:	200003b0 	.word	0x200003b0
 8001d98:	200003bc 	.word	0x200003bc
 8001d9c:	2000000a 	.word	0x2000000a
 8001da0:	200003c5 	.word	0x200003c5

08001da4 <HCSR04_Read>:

// Pulls the trigger pin high for 10us to start the calculation
void HCSR04_Read (void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	Distance1_flag = 0;
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HCSR04_Read+0x48>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	0099      	lsls	r1, r3, #2
 8001db2:	23a0      	movs	r3, #160	; 0xa0
 8001db4:	05db      	lsls	r3, r3, #23
 8001db6:	2201      	movs	r2, #1
 8001db8:	0018      	movs	r0, r3
 8001dba:	f002 f8c9 	bl	8003f50 <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f7ff fdea 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	23a0      	movs	r3, #160	; 0xa0
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	2200      	movs	r2, #0
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f002 f8be 	bl	8003f50 <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HCSR04_Read+0x4c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HCSR04_Read+0x4c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2102      	movs	r1, #2
 8001de0:	430a      	orrs	r2, r1
 8001de2:	60da      	str	r2, [r3, #12]
//	__HAL_TIM_ENABLE_IT(&HCSR2_timer_handler, HCSR2_TIM_IT_CC);
////	__HAL_TIM_ENABLE_IT(&HCSR3_timer_handler, HCSR3_TIM_IT_CC);
////	__HAL_TIM_ENABLE_IT(&HCSR4_timer_handler, HCSR4_TIM_IT_CC);
//	__HAL_TIM_ENABLE_IT(&HCSR5_timer_handler, HCSR5_TIM_IT_CC);

}
 8001de4:	46c0      	nop			; (mov r8, r8)
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	200003c3 	.word	0x200003c3
 8001df0:	20000038 	.word	0x20000038

08001df4 <HCSR2_Read>:
//	__HAL_TIM_ENABLE_IT(&HCSR1_timer_handler, HCSR1_TIM_IT_CC);
//}
//
// Pulls the trigger pin high for 10us to start the calculation
void HCSR2_Read (void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	Distance2_flag = 0;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HCSR2_Read+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HCSR2_Read+0x44>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0018      	movs	r0, r3
 8001e06:	f002 f8a3 	bl	8003f50 <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f7ff fdc4 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HCSR2_Read+0x44>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	0018      	movs	r0, r3
 8001e18:	f002 f89a 	bl	8003f50 <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
	__HAL_TIM_ENABLE_IT(&HCSR2_timer_handler, HCSR2_TIM_IT_CC);
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HCSR2_Read+0x48>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HCSR2_Read+0x48>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2102      	movs	r1, #2
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	200003c4 	.word	0x200003c4
 8001e38:	50000800 	.word	0x50000800
 8001e3c:	200000d0 	.word	0x200000d0

08001e40 <HCSR5_Read>:
//
//// Pulls the trigger pin high for 10us to start the calculation
void HCSR5_Read (void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	Distance5_flag = 0;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HCSR5_Read+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(TRIG5_PORT, TRIG5_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HCSR5_Read+0x44>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	0018      	movs	r0, r3
 8001e52:	f002 f87d 	bl	8003f50 <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001e56:	200a      	movs	r0, #10
 8001e58:	f7ff fd9e 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG5_PORT, TRIG5_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HCSR5_Read+0x44>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2101      	movs	r1, #1
 8001e62:	0018      	movs	r0, r3
 8001e64:	f002 f874 	bl	8003f50 <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
	__HAL_TIM_ENABLE_IT(&HCSR5_timer_handler, HCSR5_TIM_IT_CC);
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <HCSR5_Read+0x48>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HCSR5_Read+0x48>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2102      	movs	r1, #2
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]
}
 8001e78:	46c0      	nop			; (mov r8, r8)
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	200003c5 	.word	0x200003c5
 8001e84:	50000400 	.word	0x50000400
 8001e88:	20000168 	.word	0x20000168

08001e8c <HAL_UART_TxCpltCallback>:
						Interrupt Callbacks (ISR) Begin
**********************************************************************************/

// UART transmit callback: gets called as soon as STM32 transmits through UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
   // do nothing here
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_UART_RxCpltCallback>:
uint8_t angle_buff_index = 0;
int16_t temp_angle;

// UART receive callback: gets called as soon as STM32 receives through UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	// parse distance of tag from the antenna board (3rd byte)
//	AOA_Distance = rx[2];

	// parse angle from rx buffer
	temp_angle = ((int16_t *)rx)[0];
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <HAL_UART_RxCpltCallback+0x50>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	5e9a      	ldrsh	r2, [r3, r2]
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <HAL_UART_RxCpltCallback+0x54>)
 8001eac:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//	else
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

	// If the angle is valid, then assign it to the global variable
	if (IS_VALID_ANGLE(temp_angle))
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_UART_RxCpltCallback+0x54>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	5e9b      	ldrsh	r3, [r3, r2]
 8001eb4:	33b3      	adds	r3, #179	; 0xb3
 8001eb6:	db0a      	blt.n	8001ece <HAL_UART_RxCpltCallback+0x32>
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_UART_RxCpltCallback+0x54>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	5e9b      	ldrsh	r3, [r3, r2]
 8001ebe:	2bb3      	cmp	r3, #179	; 0xb3
 8001ec0:	dc05      	bgt.n	8001ece <HAL_UART_RxCpltCallback+0x32>
	{
		angle = temp_angle;
 8001ec2:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_UART_RxCpltCallback+0x54>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	5e9a      	ldrsh	r2, [r3, r2]
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_UART_RxCpltCallback+0x58>)
 8001eca:	801a      	strh	r2, [r3, #0]
 8001ecc:	e009      	b.n	8001ee2 <HAL_UART_RxCpltCallback+0x46>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
	else // Else, stop the motors and stop the turning and set the global variable so that DOLL-E thinks it is facing the user.
	{
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		stop = 1;
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_UART_RxCpltCallback+0x5c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	701a      	strb	r2, [r3, #0]
		turn = 0;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_UART_RxCpltCallback+0x60>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
		angle = 179;
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_UART_RxCpltCallback+0x58>)
 8001edc:	22b3      	movs	r2, #179	; 0xb3
 8001ede:	801a      	strh	r2, [r3, #0]
***************************************************************************/

	// UNCOMMENT THIS LATER IF NEEDED!
	// call the interrupt function again to keep the interrupts going
//	USART_State = HAL_UART_Receive_IT(&huart1, rx, AOA_USART_NUM_BYTES);
}
 8001ee0:	46c0      	nop			; (mov r8, r8)
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b002      	add	sp, #8
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	20000398 	.word	0x20000398
 8001ef0:	200003d4 	.word	0x200003d4
 8001ef4:	20000002 	.word	0x20000002
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	2000039a 	.word	0x2000039a

08001f00 <HAL_TIM_PeriodElapsedCallback>:

// Distance sensor reading every 0.5 seconds
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
//	else
//	{
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
//	}
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <speed>:
		set_r = 0;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, set_r);
}

void speed(int32_t l, int32_t r) // range from -250 to 250
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
	if (l < -250 || l > 250 || r < -250 || r > 250)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	33fa      	adds	r3, #250	; 0xfa
 8001f1e:	db08      	blt.n	8001f32 <speed+0x22>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2bfa      	cmp	r3, #250	; 0xfa
 8001f24:	dc05      	bgt.n	8001f32 <speed+0x22>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	33fa      	adds	r3, #250	; 0xfa
 8001f2a:	db02      	blt.n	8001f32 <speed+0x22>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2bfa      	cmp	r3, #250	; 0xfa
 8001f30:	dd03      	ble.n	8001f3a <speed+0x2a>
	{
		l = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
		r = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
	}

	uint32_t set_l = (l) + 750;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <speed+0x6c>)
 8001f3e:	4694      	mov	ip, r2
 8001f40:	4463      	add	r3, ip
 8001f42:	60fb      	str	r3, [r7, #12]
	if (l == 0)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <speed+0x3e>
		set_l = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]

	uint32_t set_r = (r) + 750;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <speed+0x6c>)
 8001f52:	4694      	mov	ip, r2
 8001f54:	4463      	add	r3, ip
 8001f56:	60bb      	str	r3, [r7, #8]
	if (r == 0)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <speed+0x52>
		set_r = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, set_l);
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <speed+0x70>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, set_r);
 8001f6a:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <speed+0x70>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b004      	add	sp, #16
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	000002ee 	.word	0x000002ee
 8001f80:	20000084 	.word	0x20000084

08001f84 <turnLeft>:

// Input: Left wheel absolute speed
void turnLeft(int32_t speed_val)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	// Less than FRICTION_OFFSET is there because the friction on the left wheel is more.
	if (speed_val < FRICTION_OFFSET || speed_val > 250)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	dd02      	ble.n	8001f98 <turnLeft+0x14>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2bfa      	cmp	r3, #250	; 0xfa
 8001f96:	dd04      	ble.n	8001fa2 <turnLeft+0x1e>
	{
		speed(0, 0);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff ffb8 	bl	8001f10 <speed>
		return;
 8001fa0:	e013      	b.n	8001fca <turnLeft+0x46>
	}

	turningLeft = 1;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <turnLeft+0x4c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <turnLeft+0x50>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <turnLeft+0x54>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
	movingStraight = 0;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <turnLeft+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
	speed(-speed_val, speed_val - FRICTION_OFFSET);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	425a      	negs	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3b0a      	subs	r3, #10
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	0010      	movs	r0, r2
 8001fc6:	f7ff ffa3 	bl	8001f10 <speed>
}
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000394 	.word	0x20000394
 8001fd4:	20000395 	.word	0x20000395
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000396 	.word	0x20000396

08001fe0 <turnRight>:
//	if (angle <)
//}

// Input: Left wheel absolute speed (since left wheel has the larger absolute value at all times)
void turnRight(int32_t speed_val)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	// Less than 20 is there because the friction on the left wheel is more.
	if (speed_val < FRICTION_OFFSET || speed_val > 250)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	dd02      	ble.n	8001ff4 <turnRight+0x14>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ff2:	dd04      	ble.n	8001ffe <turnRight+0x1e>
	{
		speed(0, 0);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff ff8a 	bl	8001f10 <speed>
		return;
 8001ffc:	e013      	b.n	8002026 <turnRight+0x46>
	}

	turningRight = 1;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <turnRight+0x4c>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
	turningLeft = 0;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <turnRight+0x50>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <turnRight+0x54>)
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
	movingStraight = 0;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <turnRight+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
	speed(speed_val, -(speed_val - FRICTION_OFFSET));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	220a      	movs	r2, #10
 800201a:	1ad2      	subs	r2, r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0011      	movs	r1, r2
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff ff75 	bl	8001f10 <speed>
}
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000395 	.word	0x20000395
 8002030:	20000394 	.word	0x20000394
 8002034:	20000000 	.word	0x20000000
 8002038:	20000396 	.word	0x20000396

0800203c <goStraight>:

// Input: Left wheel absolute speed
void goStraight(int32_t speed_val)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	// Less than FRICTION_OFFSET is there because the friction on the left wheel is more.
	if (speed_val <= FRICTION_OFFSET || speed_val > 250)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b0a      	cmp	r3, #10
 8002048:	dd02      	ble.n	8002050 <goStraight+0x14>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2bfa      	cmp	r3, #250	; 0xfa
 800204e:	dd04      	ble.n	800205a <goStraight+0x1e>
	{
		speed(0, 0);
 8002050:	2100      	movs	r1, #0
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff ff5c 	bl	8001f10 <speed>
		return;
 8002058:	e013      	b.n	8002082 <goStraight+0x46>
	}

	turningLeft = 0;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <goStraight+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <goStraight+0x50>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <goStraight+0x54>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
	movingStraight = 1;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <goStraight+0x58>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
	speed(speed_val, speed_val - FRICTION_OFFSET);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3b0a      	subs	r3, #10
 8002076:	001a      	movs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0011      	movs	r1, r2
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ff47 	bl	8001f10 <speed>
}
 8002082:	46bd      	mov	sp, r7
 8002084:	b002      	add	sp, #8
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000394 	.word	0x20000394
 800208c:	20000395 	.word	0x20000395
 8002090:	20000000 	.word	0x20000000
 8002094:	20000396 	.word	0x20000396

08002098 <reinitalize_USART1>:



// Reinitializes the USART used to communicate with Raspberry Pi
void reinitalize_USART1(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1); // Deinitialize USART 1
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <reinitalize_USART1+0x2c>)
 800209e:	0018      	movs	r0, r3
 80020a0:	f004 fabc 	bl	800661c <HAL_UART_DeInit>
    MX_USART1_UART_Init();    // Reinitialize USART 1
 80020a4:	f000 fb94 	bl	80027d0 <MX_USART1_UART_Init>

    // Call UART interrupt to sample again before it tries to deinitialize again.
    // If it doesn't work, give some delay after it to wait for the new angle to arrive.
    USART_State = HAL_UART_Receive_IT(&huart1, rx, AOA_USART_NUM_BYTES);
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <reinitalize_USART1+0x30>)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <reinitalize_USART1+0x2c>)
 80020ac:	2202      	movs	r2, #2
 80020ae:	0018      	movs	r0, r3
 80020b0:	f004 faf4 	bl	800669c <HAL_UART_Receive_IT>
 80020b4:	0003      	movs	r3, r0
 80020b6:	001a      	movs	r2, r3
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <reinitalize_USART1+0x34>)
 80020ba:	701a      	strb	r2, [r3, #0]
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	200001b4 	.word	0x200001b4
 80020c8:	20000398 	.word	0x20000398
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d6:	f001 f87d 	bl	80031d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020da:	f000 f93d 	bl	8002358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020de:	f000 fc39 	bl	8002954 <MX_GPIO_Init>
  MX_DMA_Init();
 80020e2:	f000 fc11 	bl	8002908 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020e6:	f000 fbc1 	bl	800286c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80020ea:	f000 fb71 	bl	80027d0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80020ee:	f000 f97b 	bl	80023e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80020f2:	f000 f9dd 	bl	80024b0 <MX_TIM3_Init>
  MX_TIM14_Init();
 80020f6:	f000 fa65 	bl	80025c4 <MX_TIM14_Init>
  MX_TIM17_Init();
 80020fa:	f000 fb19 	bl	8002730 <MX_TIM17_Init>
  MX_TIM15_Init();
 80020fe:	f000 faad 	bl	800265c <MX_TIM15_Init>
//#endif
//#if HCSR2_EN
//  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3); // Start the input capture for TIM1 Channel 3 interrupt for HC-SR04
//#endif

  HAL_TIM_IC_Start_IT(&HCSR1_timer_handler, HCSR1_TIMER_CHANNEL);
 8002102:	4b7e      	ldr	r3, [pc, #504]	; (80022fc <main+0x22c>)
 8002104:	2100      	movs	r1, #0
 8002106:	0018      	movs	r0, r3
 8002108:	f002 ff6e 	bl	8004fe8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&HCSR2_timer_handler, HCSR2_TIMER_CHANNEL);
 800210c:	4b7c      	ldr	r3, [pc, #496]	; (8002300 <main+0x230>)
 800210e:	2100      	movs	r1, #0
 8002110:	0018      	movs	r0, r3
 8002112:	f002 ff69 	bl	8004fe8 <HAL_TIM_IC_Start_IT>
////  HAL_TIM_IC_Start_IT(&HCSR3_timer_handler, HCSR3_TIMER_CHANNEL);
////  HAL_TIM_IC_Start_IT(&HCSR4_timer_handler, HCSR4_TIMER_CHANNEL);
  HAL_TIM_IC_Start_IT(&HCSR5_timer_handler, HCSR5_TIMER_CHANNEL);
 8002116:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <main+0x234>)
 8002118:	2100      	movs	r1, #0
 800211a:	0018      	movs	r0, r3
 800211c:	f002 ff64 	bl	8004fe8 <HAL_TIM_IC_Start_IT>


  // ********** PWM Start for Controlling the Motors **********
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start the PWM for left motor
 8002120:	4b79      	ldr	r3, [pc, #484]	; (8002308 <main+0x238>)
 8002122:	2100      	movs	r1, #0
 8002124:	0018      	movs	r0, r3
 8002126:	f002 fe23 	bl	8004d70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Start the PWM for right motor
 800212a:	4b77      	ldr	r3, [pc, #476]	; (8002308 <main+0x238>)
 800212c:	2104      	movs	r1, #4
 800212e:	0018      	movs	r0, r3
 8002130:	f002 fe1e 	bl	8004d70 <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

  // Snapshots for the volatile variables
//  uint16_t dist1 = 0, dist2 = 0, dist3 = 0, dist4 = 0, dist5 = 0;
//  int16_t angle_snapshot = 179, temp_angle_snapshot = 179;
  speed(0, 0);
 8002134:	2100      	movs	r1, #0
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff feea 	bl	8001f10 <speed>
  HAL_Delay(5000);
 800213c:	4b73      	ldr	r3, [pc, #460]	; (800230c <main+0x23c>)
 800213e:	0018      	movs	r0, r3
 8002140:	f001 f8ce 	bl	80032e0 <HAL_Delay>
  uint32_t HCSR_block_timeout = 60; // MAKE LARGER IF NEEDED
 8002144:	233c      	movs	r3, #60	; 0x3c
 8002146:	607b      	str	r3, [r7, #4]
  uint8_t hcsr_pick = 0;
 8002148:	1cfb      	adds	r3, r7, #3
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
//	  HCSR5_Read();
//	  millis = HAL_GetTick();
//	  while (Distance5_flag == 0 && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
////	  while (Distance5_flag == 0) {}
//	  time = HAL_GetTick() - millis;
	  USART_State = HAL_UART_Receive_IT(&huart1, rx, AOA_USART_NUM_BYTES);
 800214e:	4970      	ldr	r1, [pc, #448]	; (8002310 <main+0x240>)
 8002150:	4b70      	ldr	r3, [pc, #448]	; (8002314 <main+0x244>)
 8002152:	2202      	movs	r2, #2
 8002154:	0018      	movs	r0, r3
 8002156:	f004 faa1 	bl	800669c <HAL_UART_Receive_IT>
 800215a:	0003      	movs	r3, r0
 800215c:	001a      	movs	r2, r3
 800215e:	4b6e      	ldr	r3, [pc, #440]	; (8002318 <main+0x248>)
 8002160:	701a      	strb	r2, [r3, #0]

	  HCSR04_Read();
 8002162:	f7ff fe1f 	bl	8001da4 <HCSR04_Read>
	  millis = HAL_GetTick();
 8002166:	f001 f8b1 	bl	80032cc <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	4b6b      	ldr	r3, [pc, #428]	; (800231c <main+0x24c>)
 800216e:	601a      	str	r2, [r3, #0]
	  while ((Distance1_flag == 0) && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <main+0x250>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <main+0xbc>
 800217a:	f001 f8a7 	bl	80032cc <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <main+0x24c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d2f2      	bcs.n	8002172 <main+0xa2>

	  HCSR2_Read();
 800218c:	f7ff fe32 	bl	8001df4 <HCSR2_Read>
	  millis = HAL_GetTick();
 8002190:	f001 f89c 	bl	80032cc <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	4b61      	ldr	r3, [pc, #388]	; (800231c <main+0x24c>)
 8002198:	601a      	str	r2, [r3, #0]
	  while ((Distance2_flag == 0) && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <main+0x254>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d108      	bne.n	80021b6 <main+0xe6>
 80021a4:	f001 f892 	bl	80032cc <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	4b5c      	ldr	r3, [pc, #368]	; (800231c <main+0x24c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d2f2      	bcs.n	800219c <main+0xcc>

	  HCSR5_Read();
 80021b6:	f7ff fe43 	bl	8001e40 <HCSR5_Read>
	  millis = HAL_GetTick();
 80021ba:	f001 f887 	bl	80032cc <HAL_GetTick>
 80021be:	0002      	movs	r2, r0
 80021c0:	4b56      	ldr	r3, [pc, #344]	; (800231c <main+0x24c>)
 80021c2:	601a      	str	r2, [r3, #0]
	  while ((Distance5_flag == 0) && ((HAL_GetTick() - millis) <= HCSR_block_timeout)) {}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	4b58      	ldr	r3, [pc, #352]	; (8002328 <main+0x258>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <main+0x110>
 80021ce:	f001 f87d 	bl	80032cc <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	4b51      	ldr	r3, [pc, #324]	; (800231c <main+0x24c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d2f2      	bcs.n	80021c6 <main+0xf6>

	  // Update the state.
	  stop = ISSTOP(HCSR_Distance_1, HCSR_Distance_2, HCSR_Distance_5);
 80021e0:	4b52      	ldr	r3, [pc, #328]	; (800232c <main+0x25c>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	2b45      	cmp	r3, #69	; 0x45
 80021e6:	d907      	bls.n	80021f8 <main+0x128>
 80021e8:	4b51      	ldr	r3, [pc, #324]	; (8002330 <main+0x260>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	2b45      	cmp	r3, #69	; 0x45
 80021ee:	d903      	bls.n	80021f8 <main+0x128>
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <main+0x264>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	2b45      	cmp	r3, #69	; 0x45
 80021f6:	d801      	bhi.n	80021fc <main+0x12c>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <main+0x12e>
 80021fc:	2300      	movs	r3, #0
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b4d      	ldr	r3, [pc, #308]	; (8002338 <main+0x268>)
 8002202:	701a      	strb	r2, [r3, #0]
//	  stopTurn = IS_STOP_TURN(HCSR_Distance_1, HCSR_Distance_2, HCSR_Distance_5);
	  turn = ISTURN(angle);
 8002204:	4b4d      	ldr	r3, [pc, #308]	; (800233c <main+0x26c>)
 8002206:	2200      	movs	r2, #0
 8002208:	5e9b      	ldrsh	r3, [r3, r2]
 800220a:	339a      	adds	r3, #154	; 0x9a
 800220c:	db06      	blt.n	800221c <main+0x14c>
 800220e:	4b4b      	ldr	r3, [pc, #300]	; (800233c <main+0x26c>)
 8002210:	2200      	movs	r2, #0
 8002212:	5e9b      	ldrsh	r3, [r3, r2]
 8002214:	2b9a      	cmp	r3, #154	; 0x9a
 8002216:	dc01      	bgt.n	800221c <main+0x14c>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <main+0x14e>
 800221c:	2300      	movs	r3, #0
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b47      	ldr	r3, [pc, #284]	; (8002340 <main+0x270>)
 8002222:	701a      	strb	r2, [r3, #0]

	  // Interpret the results to send motor commands.
	  if (turn)
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <main+0x270>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <main+0x1a4>
//			  turningRight = 0;
//			  stopped = 1;
//			  movingStraight = 0;
//		  }
//		  }
		  if (ISLEFT(angle) && !turningLeft) // if (ISLEFT(angle)  && !turningLeft)
 800222c:	4b43      	ldr	r3, [pc, #268]	; (800233c <main+0x26c>)
 800222e:	2200      	movs	r2, #0
 8002230:	5e9b      	ldrsh	r3, [r3, r2]
 8002232:	339a      	adds	r3, #154	; 0x9a
 8002234:	db0c      	blt.n	8002250 <main+0x180>
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <main+0x26c>)
 8002238:	2200      	movs	r2, #0
 800223a:	5e9b      	ldrsh	r3, [r3, r2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	da07      	bge.n	8002250 <main+0x180>
 8002240:	4b40      	ldr	r3, [pc, #256]	; (8002344 <main+0x274>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d103      	bne.n	8002250 <main+0x180>
		  {
			   turnLeft(50);
 8002248:	2032      	movs	r0, #50	; 0x32
 800224a:	f7ff fe9b 	bl	8001f84 <turnLeft>
 800224e:	e035      	b.n	80022bc <main+0x1ec>
//			  turnLeft(ANGLE_TO_SPEED(angle));
		  }
		  else if (ISRIGHT(angle) && !turningRight) // else if (ISRIGHT(angle) && !turningRight)
 8002250:	4b3a      	ldr	r3, [pc, #232]	; (800233c <main+0x26c>)
 8002252:	2200      	movs	r2, #0
 8002254:	5e9b      	ldrsh	r3, [r3, r2]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db30      	blt.n	80022bc <main+0x1ec>
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <main+0x26c>)
 800225c:	2200      	movs	r2, #0
 800225e:	5e9b      	ldrsh	r3, [r3, r2]
 8002260:	2b9a      	cmp	r3, #154	; 0x9a
 8002262:	dc2b      	bgt.n	80022bc <main+0x1ec>
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <main+0x278>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d127      	bne.n	80022bc <main+0x1ec>
		  {
			   turnRight(50);
 800226c:	2032      	movs	r0, #50	; 0x32
 800226e:	f7ff feb7 	bl	8001fe0 <turnRight>
 8002272:	e023      	b.n	80022bc <main+0x1ec>

//			  turnRight(ANGLE_TO_SPEED(angle));
		  }
	  }
	  else if (stop)
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <main+0x268>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d014      	beq.n	80022a6 <main+0x1d6>
	  {
		  if (!stopped)
 800227c:	4b33      	ldr	r3, [pc, #204]	; (800234c <main+0x27c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d11b      	bne.n	80022bc <main+0x1ec>
		  {
			  speed(0, 0);
 8002284:	2100      	movs	r1, #0
 8002286:	2000      	movs	r0, #0
 8002288:	f7ff fe42 	bl	8001f10 <speed>
			  turningLeft = 0;
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <main+0x274>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
			  turningRight = 0;
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <main+0x278>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
			  stopped = 1;
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <main+0x27c>)
 800229a:	2201      	movs	r2, #1
 800229c:	701a      	strb	r2, [r3, #0]
			  movingStraight = 0;
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <main+0x280>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e00a      	b.n	80022bc <main+0x1ec>
		  }
	  }
	  else if (!stop)
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <main+0x268>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <main+0x1ec>
	  {
		  if (!movingStraight)
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <main+0x280>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <main+0x1ec>
			  goStraight(80);
 80022b6:	2050      	movs	r0, #80	; 0x50
 80022b8:	f7ff fec0 	bl	800203c <goStraight>
//	  {
//		  USART_State = HAL_UART_Receive_IT(&huart1, rx, AOA_USART_NUM_BYTES);
//	  }

	  // If the angle is outside the valid range, restart the UART.
	  if (!IS_VALID_ANGLE(temp_angle))
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <main+0x284>)
 80022be:	2200      	movs	r2, #0
 80022c0:	5e9b      	ldrsh	r3, [r3, r2]
 80022c2:	33b3      	adds	r3, #179	; 0xb3
 80022c4:	db04      	blt.n	80022d0 <main+0x200>
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <main+0x284>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	5e9b      	ldrsh	r3, [r3, r2]
 80022cc:	2bb3      	cmp	r3, #179	; 0xb3
 80022ce:	dd01      	ble.n	80022d4 <main+0x204>
	  {
		  reinitalize_USART1(); // GOTTA TAKE OUT THE USART IT CALL IF WE ARE CALLING IT ALREADY IN THE LOOP
 80022d0:	f7ff fee2 	bl	8002098 <reinitalize_USART1>
	  }

	  if (stopped)
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <main+0x27c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <main+0x21c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80022dc:	23a0      	movs	r3, #160	; 0xa0
 80022de:	05db      	lsls	r3, r3, #23
 80022e0:	2201      	movs	r2, #1
 80022e2:	2120      	movs	r1, #32
 80022e4:	0018      	movs	r0, r3
 80022e6:	f001 fe33 	bl	8003f50 <HAL_GPIO_WritePin>
 80022ea:	e730      	b.n	800214e <main+0x7e>
	  else
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80022ec:	23a0      	movs	r3, #160	; 0xa0
 80022ee:	05db      	lsls	r3, r3, #23
 80022f0:	2200      	movs	r2, #0
 80022f2:	2120      	movs	r1, #32
 80022f4:	0018      	movs	r0, r3
 80022f6:	f001 fe2b 	bl	8003f50 <HAL_GPIO_WritePin>
	  USART_State = HAL_UART_Receive_IT(&huart1, rx, AOA_USART_NUM_BYTES);
 80022fa:	e728      	b.n	800214e <main+0x7e>
 80022fc:	20000038 	.word	0x20000038
 8002300:	200000d0 	.word	0x200000d0
 8002304:	20000168 	.word	0x20000168
 8002308:	20000084 	.word	0x20000084
 800230c:	00001388 	.word	0x00001388
 8002310:	20000398 	.word	0x20000398
 8002314:	200001b4 	.word	0x200001b4
 8002318:	2000000c 	.word	0x2000000c
 800231c:	200003c8 	.word	0x200003c8
 8002320:	200003c3 	.word	0x200003c3
 8002324:	200003c4 	.word	0x200003c4
 8002328:	200003c5 	.word	0x200003c5
 800232c:	20000006 	.word	0x20000006
 8002330:	20000008 	.word	0x20000008
 8002334:	2000000a 	.word	0x2000000a
 8002338:	20000004 	.word	0x20000004
 800233c:	20000002 	.word	0x20000002
 8002340:	2000039a 	.word	0x2000039a
 8002344:	20000394 	.word	0x20000394
 8002348:	20000395 	.word	0x20000395
 800234c:	20000000 	.word	0x20000000
 8002350:	20000396 	.word	0x20000396
 8002354:	200003d4 	.word	0x200003d4

08002358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b093      	sub	sp, #76	; 0x4c
 800235c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235e:	2414      	movs	r4, #20
 8002360:	193b      	adds	r3, r7, r4
 8002362:	0018      	movs	r0, r3
 8002364:	2334      	movs	r3, #52	; 0x34
 8002366:	001a      	movs	r2, r3
 8002368:	2100      	movs	r1, #0
 800236a:	f006 f81b 	bl	80083a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	0018      	movs	r0, r3
 8002372:	2310      	movs	r3, #16
 8002374:	001a      	movs	r2, r3
 8002376:	2100      	movs	r1, #0
 8002378:	f006 f814 	bl	80083a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	0018      	movs	r0, r3
 8002382:	f001 fe03 	bl	8003f8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002386:	193b      	adds	r3, r7, r4
 8002388:	2202      	movs	r2, #2
 800238a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238c:	193b      	adds	r3, r7, r4
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0052      	lsls	r2, r2, #1
 8002392:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002394:	193b      	adds	r3, r7, r4
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800239a:	193b      	adds	r3, r7, r4
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	0018      	movs	r0, r3
 80023aa:	f001 fe3b 	bl	8004024 <HAL_RCC_OscConfig>
 80023ae:	1e03      	subs	r3, r0, #0
 80023b0:	d001      	beq.n	80023b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023b2:	f000 fb77 	bl	8002aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2100      	movs	r1, #0
 80023d2:	0018      	movs	r0, r3
 80023d4:	f002 f936 	bl	8004644 <HAL_RCC_ClockConfig>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80023dc:	f000 fb62 	bl	8002aa4 <Error_Handler>
  }
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b013      	add	sp, #76	; 0x4c
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ee:	2314      	movs	r3, #20
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	0018      	movs	r0, r3
 80023f4:	230c      	movs	r3, #12
 80023f6:	001a      	movs	r2, r3
 80023f8:	2100      	movs	r1, #0
 80023fa:	f005 ffd3 	bl	80083a4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	0018      	movs	r0, r3
 8002402:	2310      	movs	r3, #16
 8002404:	001a      	movs	r2, r3
 8002406:	2100      	movs	r1, #0
 8002408:	f005 ffcc 	bl	80083a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <MX_TIM1_Init+0xbc>)
 800240e:	4a26      	ldr	r2, [pc, #152]	; (80024a8 <MX_TIM1_Init+0xc0>)
 8002410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <MX_TIM1_Init+0xbc>)
 8002414:	220f      	movs	r2, #15
 8002416:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <MX_TIM1_Init+0xbc>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800241e:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <MX_TIM1_Init+0xbc>)
 8002420:	4a22      	ldr	r2, [pc, #136]	; (80024ac <MX_TIM1_Init+0xc4>)
 8002422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002424:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <MX_TIM1_Init+0xbc>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <MX_TIM1_Init+0xbc>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <MX_TIM1_Init+0xbc>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002436:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <MX_TIM1_Init+0xbc>)
 8002438:	0018      	movs	r0, r3
 800243a:	f002 fd7d 	bl	8004f38 <HAL_TIM_IC_Init>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002442:	f000 fb2f 	bl	8002aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	2114      	movs	r1, #20
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2200      	movs	r2, #0
 8002452:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800245a:	187a      	adds	r2, r7, r1
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_TIM1_Init+0xbc>)
 800245e:	0011      	movs	r1, r2
 8002460:	0018      	movs	r0, r3
 8002462:	f004 f805 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 800246a:	f000 fb1b 	bl	8002aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2201      	movs	r2, #1
 8002478:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002486:	1d39      	adds	r1, r7, #4
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_TIM1_Init+0xbc>)
 800248a:	2200      	movs	r2, #0
 800248c:	0018      	movs	r0, r3
 800248e:	f003 f80f 	bl	80054b0 <HAL_TIM_IC_ConfigChannel>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002496:	f000 fb05 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b008      	add	sp, #32
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	20000038 	.word	0x20000038
 80024a8:	40012c00 	.word	0x40012c00
 80024ac:	0000ffff 	.word	0x0000ffff

080024b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	; 0x38
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	2328      	movs	r3, #40	; 0x28
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	0018      	movs	r0, r3
 80024bc:	2310      	movs	r3, #16
 80024be:	001a      	movs	r2, r3
 80024c0:	2100      	movs	r1, #0
 80024c2:	f005 ff6f 	bl	80083a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c6:	231c      	movs	r3, #28
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	0018      	movs	r0, r3
 80024cc:	230c      	movs	r3, #12
 80024ce:	001a      	movs	r2, r3
 80024d0:	2100      	movs	r1, #0
 80024d2:	f005 ff67 	bl	80083a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d6:	003b      	movs	r3, r7
 80024d8:	0018      	movs	r0, r3
 80024da:	231c      	movs	r3, #28
 80024dc:	001a      	movs	r2, r3
 80024de:	2100      	movs	r1, #0
 80024e0:	f005 ff60 	bl	80083a4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <MX_TIM3_Init+0x108>)
 80024e6:	4a35      	ldr	r2, [pc, #212]	; (80025bc <MX_TIM3_Init+0x10c>)
 80024e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <MX_TIM3_Init+0x108>)
 80024ec:	2220      	movs	r2, #32
 80024ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <MX_TIM3_Init+0x108>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <MX_TIM3_Init+0x108>)
 80024f8:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <MX_TIM3_Init+0x110>)
 80024fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <MX_TIM3_Init+0x108>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <MX_TIM3_Init+0x108>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <MX_TIM3_Init+0x108>)
 800250a:	0018      	movs	r0, r3
 800250c:	f002 fb78 	bl	8004c00 <HAL_TIM_Base_Init>
 8002510:	1e03      	subs	r3, r0, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002514:	f000 fac6 	bl	8002aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002518:	2128      	movs	r1, #40	; 0x28
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2280      	movs	r2, #128	; 0x80
 800251e:	0152      	lsls	r2, r2, #5
 8002520:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002522:	187a      	adds	r2, r7, r1
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <MX_TIM3_Init+0x108>)
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f003 f965 	bl	80057f8 <HAL_TIM_ConfigClockSource>
 800252e:	1e03      	subs	r3, r0, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8002532:	f000 fab7 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <MX_TIM3_Init+0x108>)
 8002538:	0018      	movs	r0, r3
 800253a:	f002 fbb9 	bl	8004cb0 <HAL_TIM_PWM_Init>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002542:	f000 faaf 	bl	8002aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002546:	211c      	movs	r1, #28
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002554:	187a      	adds	r2, r7, r1
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_TIM3_Init+0x108>)
 8002558:	0011      	movs	r1, r2
 800255a:	0018      	movs	r0, r3
 800255c:	f003 ff88 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	1e03      	subs	r3, r0, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8002564:	f000 fa9e 	bl	8002aa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002568:	003b      	movs	r3, r7
 800256a:	2260      	movs	r2, #96	; 0x60
 800256c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800256e:	003b      	movs	r3, r7
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002574:	003b      	movs	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257a:	003b      	movs	r3, r7
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002580:	0039      	movs	r1, r7
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <MX_TIM3_Init+0x108>)
 8002584:	2200      	movs	r2, #0
 8002586:	0018      	movs	r0, r3
 8002588:	f003 f836 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 800258c:	1e03      	subs	r3, r0, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002590:	f000 fa88 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002594:	0039      	movs	r1, r7
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <MX_TIM3_Init+0x108>)
 8002598:	2204      	movs	r2, #4
 800259a:	0018      	movs	r0, r3
 800259c:	f003 f82c 	bl	80055f8 <HAL_TIM_PWM_ConfigChannel>
 80025a0:	1e03      	subs	r3, r0, #0
 80025a2:	d001      	beq.n	80025a8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80025a4:	f000 fa7e 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <MX_TIM3_Init+0x108>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 fbda 	bl	8002d64 <HAL_TIM_MspPostInit>

}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b00e      	add	sp, #56	; 0x38
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000084 	.word	0x20000084
 80025bc:	40000400 	.word	0x40000400
 80025c0:	0000270f 	.word	0x0000270f

080025c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80025ca:	003b      	movs	r3, r7
 80025cc:	0018      	movs	r0, r3
 80025ce:	2310      	movs	r3, #16
 80025d0:	001a      	movs	r2, r3
 80025d2:	2100      	movs	r1, #0
 80025d4:	f005 fee6 	bl	80083a4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <MX_TIM14_Init+0x90>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025e0:	220f      	movs	r2, #15
 80025e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <MX_TIM14_Init+0x94>)
 80025ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_TIM14_Init+0x8c>)
 80025fe:	0018      	movs	r0, r3
 8002600:	f002 fafe 	bl	8004c00 <HAL_TIM_Base_Init>
 8002604:	1e03      	subs	r3, r0, #0
 8002606:	d001      	beq.n	800260c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002608:	f000 fa4c 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <MX_TIM14_Init+0x8c>)
 800260e:	0018      	movs	r0, r3
 8002610:	f002 fc92 	bl	8004f38 <HAL_TIM_IC_Init>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d001      	beq.n	800261c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002618:	f000 fa44 	bl	8002aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800261c:	003b      	movs	r3, r7
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002622:	003b      	movs	r3, r7
 8002624:	2201      	movs	r2, #1
 8002626:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002628:	003b      	movs	r3, r7
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800262e:	003b      	movs	r3, r7
 8002630:	2200      	movs	r2, #0
 8002632:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002634:	0039      	movs	r1, r7
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_TIM14_Init+0x8c>)
 8002638:	2200      	movs	r2, #0
 800263a:	0018      	movs	r0, r3
 800263c:	f002 ff38 	bl	80054b0 <HAL_TIM_IC_ConfigChannel>
 8002640:	1e03      	subs	r3, r0, #0
 8002642:	d001      	beq.n	8002648 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002644:	f000 fa2e 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002648:	46c0      	nop			; (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b004      	add	sp, #16
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200000d0 	.word	0x200000d0
 8002654:	40002000 	.word	0x40002000
 8002658:	0000ffff 	.word	0x0000ffff

0800265c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002662:	2314      	movs	r3, #20
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	0018      	movs	r0, r3
 8002668:	230c      	movs	r3, #12
 800266a:	001a      	movs	r2, r3
 800266c:	2100      	movs	r1, #0
 800266e:	f005 fe99 	bl	80083a4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	0018      	movs	r0, r3
 8002676:	2310      	movs	r3, #16
 8002678:	001a      	movs	r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	f005 fe92 	bl	80083a4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <MX_TIM15_Init+0xc8>)
 8002682:	4a29      	ldr	r2, [pc, #164]	; (8002728 <MX_TIM15_Init+0xcc>)
 8002684:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 16-1;
 8002686:	4b27      	ldr	r3, [pc, #156]	; (8002724 <MX_TIM15_Init+0xc8>)
 8002688:	220f      	movs	r2, #15
 800268a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <MX_TIM15_Init+0xc8>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <MX_TIM15_Init+0xc8>)
 8002694:	4a25      	ldr	r2, [pc, #148]	; (800272c <MX_TIM15_Init+0xd0>)
 8002696:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <MX_TIM15_Init+0xc8>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <MX_TIM15_Init+0xc8>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b1f      	ldr	r3, [pc, #124]	; (8002724 <MX_TIM15_Init+0xc8>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <MX_TIM15_Init+0xc8>)
 80026ac:	0018      	movs	r0, r3
 80026ae:	f002 fc43 	bl	8004f38 <HAL_TIM_IC_Init>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80026b6:	f000 f9f5 	bl	8002aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ba:	2114      	movs	r1, #20
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80026c8:	187a      	adds	r2, r7, r1
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <MX_TIM15_Init+0xc8>)
 80026cc:	0011      	movs	r1, r2
 80026ce:	0018      	movs	r0, r3
 80026d0:	f003 fece 	bl	8006470 <HAL_TIMEx_MasterConfigSynchronization>
 80026d4:	1e03      	subs	r3, r0, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM15_Init+0x80>
  {
    Error_Handler();
 80026d8:	f000 f9e4 	bl	8002aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026e2:	1d3b      	adds	r3, r7, #4
 80026e4:	2201      	movs	r2, #1
 80026e6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026f4:	1d39      	adds	r1, r7, #4
 80026f6:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <MX_TIM15_Init+0xc8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	0018      	movs	r0, r3
 80026fc:	f002 fed8 	bl	80054b0 <HAL_TIM_IC_ConfigChannel>
 8002700:	1e03      	subs	r3, r0, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8002704:	f000 f9ce 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002708:	1d39      	adds	r1, r7, #4
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <MX_TIM15_Init+0xc8>)
 800270c:	2204      	movs	r2, #4
 800270e:	0018      	movs	r0, r3
 8002710:	f002 fece 	bl	80054b0 <HAL_TIM_IC_ConfigChannel>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d001      	beq.n	800271c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002718:	f000 f9c4 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b008      	add	sp, #32
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000011c 	.word	0x2000011c
 8002728:	40014000 	.word	0x40014000
 800272c:	0000ffff 	.word	0x0000ffff

08002730 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002736:	003b      	movs	r3, r7
 8002738:	0018      	movs	r0, r3
 800273a:	2310      	movs	r3, #16
 800273c:	001a      	movs	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f005 fe30 	bl	80083a4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <MX_TIM17_Init+0x94>)
 8002746:	4a20      	ldr	r2, [pc, #128]	; (80027c8 <MX_TIM17_Init+0x98>)
 8002748:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16-1;
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <MX_TIM17_Init+0x94>)
 800274c:	220f      	movs	r2, #15
 800274e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <MX_TIM17_Init+0x94>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <MX_TIM17_Init+0x94>)
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <MX_TIM17_Init+0x9c>)
 800275a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <MX_TIM17_Init+0x94>)
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_TIM17_Init+0x94>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_TIM17_Init+0x94>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <MX_TIM17_Init+0x94>)
 8002770:	0018      	movs	r0, r3
 8002772:	f002 fa45 	bl	8004c00 <HAL_TIM_Base_Init>
 8002776:	1e03      	subs	r3, r0, #0
 8002778:	d001      	beq.n	800277e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 800277a:	f000 f993 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_TIM17_Init+0x94>)
 8002780:	0018      	movs	r0, r3
 8002782:	f002 fbd9 	bl	8004f38 <HAL_TIM_IC_Init>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800278a:	f000 f98b 	bl	8002aa4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800278e:	003b      	movs	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002794:	003b      	movs	r3, r7
 8002796:	2201      	movs	r2, #1
 8002798:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800279a:	003b      	movs	r3, r7
 800279c:	2200      	movs	r2, #0
 800279e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80027a0:	003b      	movs	r3, r7
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027a6:	0039      	movs	r1, r7
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_TIM17_Init+0x94>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	0018      	movs	r0, r3
 80027ae:	f002 fe7f 	bl	80054b0 <HAL_TIM_IC_ConfigChannel>
 80027b2:	1e03      	subs	r3, r0, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM17_Init+0x8a>
  {
    Error_Handler();
 80027b6:	f000 f975 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b004      	add	sp, #16
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	20000168 	.word	0x20000168
 80027c8:	40014800 	.word	0x40014800
 80027cc:	0000ffff 	.word	0x0000ffff

080027d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027d6:	4a24      	ldr	r2, [pc, #144]	; (8002868 <MX_USART1_UART_Init+0x98>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027dc:	22e1      	movs	r2, #225	; 0xe1
 80027de:	0252      	lsls	r2, r2, #9
 80027e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <MX_USART1_UART_Init+0x94>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <MX_USART1_UART_Init+0x94>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <MX_USART1_UART_Init+0x94>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <MX_USART1_UART_Init+0x94>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <MX_USART1_UART_Init+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_USART1_UART_Init+0x94>)
 800281a:	0018      	movs	r0, r3
 800281c:	f003 fea8 	bl	8006570 <HAL_UART_Init>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002824:	f000 f93e 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_USART1_UART_Init+0x94>)
 800282a:	2100      	movs	r1, #0
 800282c:	0018      	movs	r0, r3
 800282e:	f005 fcb5 	bl	800819c <HAL_UARTEx_SetTxFifoThreshold>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002836:	f000 f935 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_USART1_UART_Init+0x94>)
 800283c:	2100      	movs	r1, #0
 800283e:	0018      	movs	r0, r3
 8002840:	f005 fcec 	bl	800821c <HAL_UARTEx_SetRxFifoThreshold>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d001      	beq.n	800284c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002848:	f000 f92c 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <MX_USART1_UART_Init+0x94>)
 800284e:	0018      	movs	r0, r3
 8002850:	f005 fc6a 	bl	8008128 <HAL_UARTEx_DisableFifoMode>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002858:	f000 f924 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	200001b4 	.word	0x200001b4
 8002868:	40013800 	.word	0x40013800

0800286c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <MX_USART2_UART_Init+0x94>)
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <MX_USART2_UART_Init+0x98>)
 8002874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002876:	4b22      	ldr	r3, [pc, #136]	; (8002900 <MX_USART2_UART_Init+0x94>)
 8002878:	22e1      	movs	r2, #225	; 0xe1
 800287a:	0252      	lsls	r2, r2, #9
 800287c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800287e:	4b20      	ldr	r3, [pc, #128]	; (8002900 <MX_USART2_UART_Init+0x94>)
 8002880:	2200      	movs	r2, #0
 8002882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002884:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <MX_USART2_UART_Init+0x94>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <MX_USART2_UART_Init+0x94>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MX_USART2_UART_Init+0x94>)
 8002892:	220c      	movs	r2, #12
 8002894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <MX_USART2_UART_Init+0x94>)
 8002898:	2200      	movs	r2, #0
 800289a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <MX_USART2_UART_Init+0x94>)
 800289e:	2200      	movs	r2, #0
 80028a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f003 fe5a 	bl	8006570 <HAL_UART_Init>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d001      	beq.n	80028c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80028c0:	f000 f8f0 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028c6:	2100      	movs	r1, #0
 80028c8:	0018      	movs	r0, r3
 80028ca:	f005 fc67 	bl	800819c <HAL_UARTEx_SetTxFifoThreshold>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80028d2:	f000 f8e7 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028d8:	2100      	movs	r1, #0
 80028da:	0018      	movs	r0, r3
 80028dc:	f005 fc9e 	bl	800821c <HAL_UARTEx_SetRxFifoThreshold>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028e4:	f000 f8de 	bl	8002aa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <MX_USART2_UART_Init+0x94>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f005 fc1c 	bl	8008128 <HAL_UARTEx_DisableFifoMode>
 80028f0:	1e03      	subs	r3, r0, #0
 80028f2:	d001      	beq.n	80028f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028f4:	f000 f8d6 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028f8:	46c0      	nop			; (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000248 	.word	0x20000248
 8002904:	40004400 	.word	0x40004400

08002908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <MX_DMA_Init+0x48>)
 8002910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <MX_DMA_Init+0x48>)
 8002914:	2101      	movs	r1, #1
 8002916:	430a      	orrs	r2, r1
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <MX_DMA_Init+0x48>)
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	2201      	movs	r2, #1
 8002920:	4013      	ands	r3, r2
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2009      	movs	r0, #9
 800292c:	f000 fdca 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002930:	2009      	movs	r0, #9
 8002932:	f000 fddc 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	200a      	movs	r0, #10
 800293c:	f000 fdc2 	bl	80034c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002940:	200a      	movs	r0, #10
 8002942:	f000 fdd4 	bl	80034ee <HAL_NVIC_EnableIRQ>

}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	40021000 	.word	0x40021000

08002954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b08b      	sub	sp, #44	; 0x2c
 8002958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295a:	2414      	movs	r4, #20
 800295c:	193b      	adds	r3, r7, r4
 800295e:	0018      	movs	r0, r3
 8002960:	2314      	movs	r3, #20
 8002962:	001a      	movs	r2, r3
 8002964:	2100      	movs	r1, #0
 8002966:	f005 fd1d 	bl	80083a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <MX_GPIO_Init+0x144>)
 800296c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296e:	4b4a      	ldr	r3, [pc, #296]	; (8002a98 <MX_GPIO_Init+0x144>)
 8002970:	2104      	movs	r1, #4
 8002972:	430a      	orrs	r2, r1
 8002974:	635a      	str	r2, [r3, #52]	; 0x34
 8002976:	4b48      	ldr	r3, [pc, #288]	; (8002a98 <MX_GPIO_Init+0x144>)
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <MX_GPIO_Init+0x144>)
 8002984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002986:	4b44      	ldr	r3, [pc, #272]	; (8002a98 <MX_GPIO_Init+0x144>)
 8002988:	2120      	movs	r1, #32
 800298a:	430a      	orrs	r2, r1
 800298c:	635a      	str	r2, [r3, #52]	; 0x34
 800298e:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <MX_GPIO_Init+0x144>)
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002992:	2220      	movs	r2, #32
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800299a:	4b3f      	ldr	r3, [pc, #252]	; (8002a98 <MX_GPIO_Init+0x144>)
 800299c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800299e:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <MX_GPIO_Init+0x144>)
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	635a      	str	r2, [r3, #52]	; 0x34
 80029a6:	4b3c      	ldr	r3, [pc, #240]	; (8002a98 <MX_GPIO_Init+0x144>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	2201      	movs	r2, #1
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <MX_GPIO_Init+0x144>)
 80029b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b6:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <MX_GPIO_Init+0x144>)
 80029b8:	2102      	movs	r1, #2
 80029ba:	430a      	orrs	r2, r1
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <MX_GPIO_Init+0x144>)
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|TRIG1_Pin, GPIO_PIN_RESET);
 80029ca:	2388      	movs	r3, #136	; 0x88
 80029cc:	0099      	lsls	r1, r3, #2
 80029ce:	23a0      	movs	r3, #160	; 0xa0
 80029d0:	05db      	lsls	r3, r3, #23
 80029d2:	2200      	movs	r2, #0
 80029d4:	0018      	movs	r0, r3
 80029d6:	f001 fabb 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG3_GPIO_Port, TRIG3_Pin, GPIO_PIN_RESET);
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <MX_GPIO_Init+0x148>)
 80029dc:	2200      	movs	r2, #0
 80029de:	2101      	movs	r1, #1
 80029e0:	0018      	movs	r0, r3
 80029e2:	f001 fab5 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG2_GPIO_Port, TRIG2_Pin, GPIO_PIN_RESET);
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <MX_GPIO_Init+0x14c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	; 0x80
 80029ec:	0018      	movs	r0, r3
 80029ee:	f001 faaf 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	2220      	movs	r2, #32
 80029f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	193b      	adds	r3, r7, r4
 80029fa:	2201      	movs	r2, #1
 80029fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	193b      	adds	r3, r7, r4
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2202      	movs	r2, #2
 8002a08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	193a      	adds	r2, r7, r4
 8002a0c:	23a0      	movs	r3, #160	; 0xa0
 8002a0e:	05db      	lsls	r3, r3, #23
 8002a10:	0011      	movs	r1, r2
 8002a12:	0018      	movs	r0, r3
 8002a14:	f001 f868 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG3_Pin */
  GPIO_InitStruct.Pin = TRIG3_Pin;
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2201      	movs	r2, #1
 8002a22:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG3_GPIO_Port, &GPIO_InitStruct);
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <MX_GPIO_Init+0x148>)
 8002a34:	0019      	movs	r1, r3
 8002a36:	0010      	movs	r0, r2
 8002a38:	f001 f856 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG1_Pin */
  GPIO_InitStruct.Pin = TRIG1_Pin;
 8002a3c:	0021      	movs	r1, r4
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a46:	000c      	movs	r4, r1
 8002a48:	193b      	adds	r3, r7, r4
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	2200      	movs	r2, #0
 8002a58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG1_GPIO_Port, &GPIO_InitStruct);
 8002a5a:	193a      	adds	r2, r7, r4
 8002a5c:	23a0      	movs	r3, #160	; 0xa0
 8002a5e:	05db      	lsls	r3, r3, #23
 8002a60:	0011      	movs	r1, r2
 8002a62:	0018      	movs	r0, r3
 8002a64:	f001 f840 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG2_Pin */
  GPIO_InitStruct.Pin = TRIG2_Pin;
 8002a68:	0021      	movs	r1, r4
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	2201      	movs	r2, #1
 8002a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG2_GPIO_Port, &GPIO_InitStruct);
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	4a06      	ldr	r2, [pc, #24]	; (8002aa0 <MX_GPIO_Init+0x14c>)
 8002a86:	0019      	movs	r1, r3
 8002a88:	0010      	movs	r0, r2
 8002a8a:	f001 f82d 	bl	8003ae8 <HAL_GPIO_Init>

}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b00b      	add	sp, #44	; 0x2c
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	50000400 	.word	0x50000400
 8002aa0:	50000800 	.word	0x50000800

08002aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa8:	b672      	cpsid	i
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aac:	e7fe      	b.n	8002aac <Error_Handler+0x8>
	...

08002ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_MspInit+0x44>)
 8002ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_MspInit+0x44>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_MspInit+0x44>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4013      	ands	r3, r2
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_MspInit+0x44>)
 8002ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_MspInit+0x44>)
 8002ad4:	2180      	movs	r1, #128	; 0x80
 8002ad6:	0549      	lsls	r1, r1, #21
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_MspInit+0x44>)
 8002ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	055b      	lsls	r3, r3, #21
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b002      	add	sp, #8
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b08d      	sub	sp, #52	; 0x34
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	241c      	movs	r4, #28
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	0018      	movs	r0, r3
 8002b06:	2314      	movs	r3, #20
 8002b08:	001a      	movs	r2, r3
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	f005 fc4a 	bl	80083a4 <memset>
  if(htim_ic->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <HAL_TIM_IC_MspInit+0x10c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d13a      	bne.n	8002b90 <HAL_TIM_IC_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1e:	4b3a      	ldr	r3, [pc, #232]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0109      	lsls	r1, r1, #4
 8002b24:	430a      	orrs	r2, r1
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
 8002b28:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	4b33      	ldr	r3, [pc, #204]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_HCSR1_ECHO_Pin;
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	0052      	lsls	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	0021      	movs	r1, r4
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2200      	movs	r2, #0
 8002b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_CH1_HCSR1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002b70:	187a      	adds	r2, r7, r1
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 ffb5 	bl	8003ae8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	200e      	movs	r0, #14
 8002b84:	f000 fc9e 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b88:	200e      	movs	r0, #14
 8002b8a:	f000 fcb0 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b8e:	e034      	b.n	8002bfa <HAL_TIM_IC_MspInit+0x102>
  else if(htim_ic->Instance==TIM15)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <HAL_TIM_IC_MspInit+0x114>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12f      	bne.n	8002bfa <HAL_TIM_IC_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0249      	lsls	r1, r1, #9
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	025b      	lsls	r3, r3, #9
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_TIM_IC_MspInit+0x110>)
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002bce:	211c      	movs	r1, #28
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	2206      	movs	r2, #6
 8002bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	2202      	movs	r2, #2
 8002bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	187b      	adds	r3, r7, r1
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2202      	movs	r2, #2
 8002bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	4a07      	ldr	r2, [pc, #28]	; (8002c10 <HAL_TIM_IC_MspInit+0x118>)
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f000 ff77 	bl	8003ae8 <HAL_GPIO_Init>
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b00d      	add	sp, #52	; 0x34
 8002c00:	bd90      	pop	{r4, r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	50000800 	.word	0x50000800

08002c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	231c      	movs	r3, #28
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	0018      	movs	r0, r3
 8002c22:	2314      	movs	r3, #20
 8002c24:	001a      	movs	r2, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	f005 fbbc 	bl	80083a4 <memset>
  if(htim_base->Instance==TIM3)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a47      	ldr	r2, [pc, #284]	; (8002d50 <HAL_TIM_Base_MspInit+0x13c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10c      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c42:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	2202      	movs	r2, #2
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002c4e:	e07b      	b.n	8002d48 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM14)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <HAL_TIM_Base_MspInit+0x144>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d138      	bne.n	8002ccc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002c5a:	4b3e      	ldr	r3, [pc, #248]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	0209      	lsls	r1, r1, #8
 8002c64:	430a      	orrs	r2, r1
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
 8002c68:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7a:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM14_CH1_ECHO_Pin;
 8002c8e:	211c      	movs	r1, #28
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	2202      	movs	r2, #2
 8002c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	187b      	adds	r3, r7, r1
 8002c98:	2202      	movs	r2, #2
 8002c9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	187b      	adds	r3, r7, r1
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	187b      	adds	r3, r7, r1
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8002ca8:	187b      	adds	r3, r7, r1
 8002caa:	2200      	movs	r2, #0
 8002cac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <HAL_TIM_Base_MspInit+0x148>)
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	f000 ff17 	bl	8003ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	2013      	movs	r0, #19
 8002cc0:	f000 fc00 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002cc4:	2013      	movs	r0, #19
 8002cc6:	f000 fc12 	bl	80034ee <HAL_NVIC_EnableIRQ>
}
 8002cca:	e03d      	b.n	8002d48 <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM17)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <HAL_TIM_Base_MspInit+0x14c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d138      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002cdc:	2180      	movs	r1, #128	; 0x80
 8002cde:	02c9      	lsls	r1, r1, #11
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	02db      	lsls	r3, r3, #11
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_TIM_Base_MspInit+0x140>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_ECHO_Pin;
 8002d0a:	211c      	movs	r1, #28
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	187b      	adds	r3, r7, r1
 8002d16:	2202      	movs	r2, #2
 8002d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	187b      	adds	r3, r7, r1
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	2200      	movs	r2, #0
 8002d24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	2202      	movs	r2, #2
 8002d2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_TIM_Base_MspInit+0x148>)
 8002d30:	0019      	movs	r1, r3
 8002d32:	0010      	movs	r0, r2
 8002d34:	f000 fed8 	bl	8003ae8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2016      	movs	r0, #22
 8002d3e:	f000 fbc1 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002d42:	2016      	movs	r0, #22
 8002d44:	f000 fbd3 	bl	80034ee <HAL_NVIC_EnableIRQ>
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b00c      	add	sp, #48	; 0x30
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40002000 	.word	0x40002000
 8002d5c:	50000400 	.word	0x50000400
 8002d60:	40014800 	.word	0x40014800

08002d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	240c      	movs	r4, #12
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	0018      	movs	r0, r3
 8002d72:	2314      	movs	r3, #20
 8002d74:	001a      	movs	r2, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	f005 fb14 	bl	80083a4 <memset>
  if(htim->Instance==TIM3)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_TIM_MspPostInit+0x70>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d121      	bne.n	8002dca <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_TIM_MspPostInit+0x74>)
 8002d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_TIM_MspPostInit+0x74>)
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_MspPostInit+0x74>)
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	2202      	movs	r2, #2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Left_Motor_PWM_Pin|TIM3_CH2_Right_Motor_PWM_Pin;
 8002d9e:	0021      	movs	r1, r4
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	2230      	movs	r2, #48	; 0x30
 8002da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	187b      	adds	r3, r7, r1
 8002da8:	2202      	movs	r2, #2
 8002daa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	2200      	movs	r2, #0
 8002db6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	2201      	movs	r2, #1
 8002dbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	4a06      	ldr	r2, [pc, #24]	; (8002ddc <HAL_TIM_MspPostInit+0x78>)
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	f000 fe8f 	bl	8003ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b009      	add	sp, #36	; 0x24
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	50000400 	.word	0x50000400

08002de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de0:	b590      	push	{r4, r7, lr}
 8002de2:	b093      	sub	sp, #76	; 0x4c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	2334      	movs	r3, #52	; 0x34
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	0018      	movs	r0, r3
 8002dee:	2314      	movs	r3, #20
 8002df0:	001a      	movs	r2, r3
 8002df2:	2100      	movs	r1, #0
 8002df4:	f005 fad6 	bl	80083a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002df8:	2418      	movs	r4, #24
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	231c      	movs	r3, #28
 8002e00:	001a      	movs	r2, r3
 8002e02:	2100      	movs	r1, #0
 8002e04:	f005 face 	bl	80083a4 <memset>
  if(huart->Instance==USART1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a77      	ldr	r2, [pc, #476]	; (8002fec <HAL_UART_MspInit+0x20c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d170      	bne.n	8002ef4 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	0018      	movs	r0, r3
 8002e22:	f001 fdb9 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e2a:	f7ff fe3b 	bl	8002aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e2e:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002e34:	2180      	movs	r1, #128	; 0x80
 8002e36:	01c9      	lsls	r1, r1, #7
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	01db      	lsls	r3, r3, #7
 8002e44:	4013      	ands	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4a:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4e:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002e50:	2104      	movs	r1, #4
 8002e52:	430a      	orrs	r2, r1
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34
 8002e56:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e62:	2134      	movs	r1, #52	; 0x34
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2230      	movs	r2, #48	; 0x30
 8002e68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	187b      	adds	r3, r7, r1
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	2201      	movs	r2, #1
 8002e80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e82:	187b      	adds	r3, r7, r1
 8002e84:	4a5b      	ldr	r2, [pc, #364]	; (8002ff4 <HAL_UART_MspInit+0x214>)
 8002e86:	0019      	movs	r1, r3
 8002e88:	0010      	movs	r0, r2
 8002e8a:	f000 fe2d 	bl	8003ae8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002e8e:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002e90:	4a5a      	ldr	r2, [pc, #360]	; (8002ffc <HAL_UART_MspInit+0x21c>)
 8002e92:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002e94:	4b58      	ldr	r3, [pc, #352]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002e96:	2232      	movs	r2, #50	; 0x32
 8002e98:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea0:	4b55      	ldr	r3, [pc, #340]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea6:	4b54      	ldr	r3, [pc, #336]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eac:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ebe:	4b4e      	ldr	r3, [pc, #312]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 fb3e 	bl	8003548 <HAL_DMA_Init>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002ed0:	f7ff fde8 	bl	8002aa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	4a47      	ldr	r2, [pc, #284]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002eda:	505a      	str	r2, [r3, r1]
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_UART_MspInit+0x218>)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	201b      	movs	r0, #27
 8002ee8:	f000 faec 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eec:	201b      	movs	r0, #27
 8002eee:	f000 fafe 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ef2:	e076      	b.n	8002fe2 <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_UART_MspInit+0x220>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d171      	bne.n	8002fe2 <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002efe:	2118      	movs	r1, #24
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2202      	movs	r2, #2
 8002f04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f001 fd42 	bl	8004998 <HAL_RCCEx_PeriphCLKConfig>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002f18:	f7ff fdc4 	bl	8002aa4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f20:	4b33      	ldr	r3, [pc, #204]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	0289      	lsls	r1, r1, #10
 8002f26:	430a      	orrs	r2, r1
 8002f28:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f2a:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	4013      	ands	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	430a      	orrs	r2, r1
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_UART_MspInit+0x210>)
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f50:	2134      	movs	r1, #52	; 0x34
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	220c      	movs	r2, #12
 8002f56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	2201      	movs	r2, #1
 8002f62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f70:	187a      	adds	r2, r7, r1
 8002f72:	23a0      	movs	r3, #160	; 0xa0
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	0011      	movs	r1, r2
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fdb5 	bl	8003ae8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002f80:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_UART_MspInit+0x228>)
 8002f82:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f84:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002f86:	2234      	movs	r2, #52	; 0x34
 8002f88:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f90:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f96:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 fac6 	bl	8003548 <HAL_DMA_Init>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8002fc0:	f7ff fd70 	bl	8002aa4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002fca:	505a      	str	r2, [r3, r1]
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_UART_MspInit+0x224>)
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	201c      	movs	r0, #28
 8002fd8:	f000 fa74 	bl	80034c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fdc:	201c      	movs	r0, #28
 8002fde:	f000 fa86 	bl	80034ee <HAL_NVIC_EnableIRQ>
}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b013      	add	sp, #76	; 0x4c
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	50000800 	.word	0x50000800
 8002ff8:	200002dc 	.word	0x200002dc
 8002ffc:	4002001c 	.word	0x4002001c
 8003000:	40004400 	.word	0x40004400
 8003004:	20000338 	.word	0x20000338
 8003008:	40020008 	.word	0x40020008

0800300c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <HAL_UART_MspDeInit+0x78>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d114      	bne.n	8003048 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <HAL_UART_MspDeInit+0x7c>)
 8003020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_UART_MspDeInit+0x7c>)
 8003024:	4919      	ldr	r1, [pc, #100]	; (800308c <HAL_UART_MspDeInit+0x80>)
 8003026:	400a      	ands	r2, r1
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_UART_MspDeInit+0x84>)
 800302c:	2130      	movs	r1, #48	; 0x30
 800302e:	0018      	movs	r0, r3
 8003030:	f000 febe 	bl	8003db0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	589b      	ldr	r3, [r3, r2]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fb0e 	bl	800365c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003040:	201b      	movs	r0, #27
 8003042:	f000 fa64 	bl	800350e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003046:	e019      	b.n	800307c <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a11      	ldr	r2, [pc, #68]	; (8003094 <HAL_UART_MspDeInit+0x88>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d114      	bne.n	800307c <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_UART_MspDeInit+0x7c>)
 8003054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_UART_MspDeInit+0x7c>)
 8003058:	490f      	ldr	r1, [pc, #60]	; (8003098 <HAL_UART_MspDeInit+0x8c>)
 800305a:	400a      	ands	r2, r1
 800305c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800305e:	23a0      	movs	r3, #160	; 0xa0
 8003060:	05db      	lsls	r3, r3, #23
 8003062:	210c      	movs	r1, #12
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fea3 	bl	8003db0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	589b      	ldr	r3, [r3, r2]
 8003070:	0018      	movs	r0, r3
 8003072:	f000 faf3 	bl	800365c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003076:	201c      	movs	r0, #28
 8003078:	f000 fa49 	bl	800350e <HAL_NVIC_DisableIRQ>
}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	ffffbfff 	.word	0xffffbfff
 8003090:	50000800 	.word	0x50000800
 8003094:	40004400 	.word	0x40004400
 8003098:	fffdffff 	.word	0xfffdffff

0800309c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <NMI_Handler+0x4>

080030a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler+0x4>

080030a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c0:	f000 f8f2 	bl	80032a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <DMA1_Channel1_IRQHandler+0x14>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 fc06 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	20000338 	.word	0x20000338

080030e4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030e8:	4b03      	ldr	r3, [pc, #12]	; (80030f8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fbfa 	bl	80038e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	200002dc 	.word	0x200002dc

080030fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <TIM1_CC_IRQHandler+0x14>)
 8003102:	0018      	movs	r0, r3
 8003104:	f002 f8a2 	bl	800524c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	20000038 	.word	0x20000038

08003114 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <TIM14_IRQHandler+0x14>)
 800311a:	0018      	movs	r0, r3
 800311c:	f002 f896 	bl	800524c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	200000d0 	.word	0x200000d0

0800312c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <TIM17_IRQHandler+0x14>)
 8003132:	0018      	movs	r0, r3
 8003134:	f002 f88a 	bl	800524c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	20000168 	.word	0x20000168

08003144 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <USART1_IRQHandler+0x14>)
 800314a:	0018      	movs	r0, r3
 800314c:	f003 fafe 	bl	800674c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	200001b4 	.word	0x200001b4

0800315c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <USART2_IRQHandler+0x14>)
 8003162:	0018      	movs	r0, r3
 8003164:	f003 faf2 	bl	800674c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20000248 	.word	0x20000248

08003174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003182:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003184:	f7ff fff6 	bl	8003174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003188:	480c      	ldr	r0, [pc, #48]	; (80031bc <LoopForever+0x6>)
  ldr r1, =_edata
 800318a:	490d      	ldr	r1, [pc, #52]	; (80031c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800318c:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <LoopForever+0xe>)
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003190:	e002      	b.n	8003198 <LoopCopyDataInit>

08003192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003196:	3304      	adds	r3, #4

08003198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800319c:	d3f9      	bcc.n	8003192 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031a0:	4c0a      	ldr	r4, [pc, #40]	; (80031cc <LoopForever+0x16>)
  movs r3, #0
 80031a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a4:	e001      	b.n	80031aa <LoopFillZerobss>

080031a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a8:	3204      	adds	r2, #4

080031aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ac:	d3fb      	bcc.n	80031a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031ae:	f005 f8d5 	bl	800835c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80031b2:	f7fe ff8d 	bl	80020d0 <main>

080031b6 <LoopForever>:

LoopForever:
  b LoopForever
 80031b6:	e7fe      	b.n	80031b6 <LoopForever>
  ldr   r0, =_estack
 80031b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80031bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80031c4:	08008530 	.word	0x08008530
  ldr r2, =_sbss
 80031c8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80031cc:	200003dc 	.word	0x200003dc

080031d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031d0:	e7fe      	b.n	80031d0 <ADC1_IRQHandler>
	...

080031d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_Init+0x3c>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_Init+0x3c>)
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	0049      	lsls	r1, r1, #1
 80031ea:	430a      	orrs	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ee:	2000      	movs	r0, #0
 80031f0:	f000 f810 	bl	8003214 <HAL_InitTick>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d003      	beq.n	8003200 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031f8:	1dfb      	adds	r3, r7, #7
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e001      	b.n	8003204 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003200:	f7ff fc56 	bl	8002ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003204:	1dfb      	adds	r3, r7, #7
 8003206:	781b      	ldrb	r3, [r3, #0]
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40022000 	.word	0x40022000

08003214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800321c:	230f      	movs	r3, #15
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_InitTick+0x88>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02b      	beq.n	8003284 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_InitTick+0x8c>)
 800322e:	681c      	ldr	r4, [r3, #0]
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <HAL_InitTick+0x88>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	0019      	movs	r1, r3
 8003236:	23fa      	movs	r3, #250	; 0xfa
 8003238:	0098      	lsls	r0, r3, #2
 800323a:	f7fc ff61 	bl	8000100 <__udivsi3>
 800323e:	0003      	movs	r3, r0
 8003240:	0019      	movs	r1, r3
 8003242:	0020      	movs	r0, r4
 8003244:	f7fc ff5c 	bl	8000100 <__udivsi3>
 8003248:	0003      	movs	r3, r0
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f96f 	bl	800352e <HAL_SYSTICK_Config>
 8003250:	1e03      	subs	r3, r0, #0
 8003252:	d112      	bne.n	800327a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d80a      	bhi.n	8003270 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	2301      	movs	r3, #1
 800325e:	425b      	negs	r3, r3
 8003260:	2200      	movs	r2, #0
 8003262:	0018      	movs	r0, r3
 8003264:	f000 f92e 	bl	80034c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_InitTick+0x90>)
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e00d      	b.n	800328c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e008      	b.n	800328c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800327a:	230f      	movs	r3, #15
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e003      	b.n	800328c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003284:	230f      	movs	r3, #15
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800328c:	230f      	movs	r3, #15
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	781b      	ldrb	r3, [r3, #0]
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b005      	add	sp, #20
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	20000018 	.word	0x20000018
 80032a0:	20000010 	.word	0x20000010
 80032a4:	20000014 	.word	0x20000014

080032a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_IncTick+0x1c>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	001a      	movs	r2, r3
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HAL_IncTick+0x20>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	18d2      	adds	r2, r2, r3
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_IncTick+0x20>)
 80032ba:	601a      	str	r2, [r3, #0]
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	20000018 	.word	0x20000018
 80032c8:	200003d8 	.word	0x200003d8

080032cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  return uwTick;
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <HAL_GetTick+0x10>)
 80032d2:	681b      	ldr	r3, [r3, #0]
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	200003d8 	.word	0x200003d8

080032e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032e8:	f7ff fff0 	bl	80032cc <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	d005      	beq.n	8003306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_Delay+0x44>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	001a      	movs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	189b      	adds	r3, r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	f7ff ffe0 	bl	80032cc <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	429a      	cmp	r2, r3
 8003316:	d8f7      	bhi.n	8003308 <HAL_Delay+0x28>
  {
  }
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	46bd      	mov	sp, r7
 800331e:	b004      	add	sp, #16
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	20000018 	.word	0x20000018

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	0002      	movs	r2, r0
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003334:	1dfb      	adds	r3, r7, #7
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b7f      	cmp	r3, #127	; 0x7f
 800333a:	d809      	bhi.n	8003350 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333c:	1dfb      	adds	r3, r7, #7
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	001a      	movs	r2, r3
 8003342:	231f      	movs	r3, #31
 8003344:	401a      	ands	r2, r3
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <__NVIC_EnableIRQ+0x30>)
 8003348:	2101      	movs	r1, #1
 800334a:	4091      	lsls	r1, r2
 800334c:	000a      	movs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	0002      	movs	r2, r0
 8003364:	1dfb      	adds	r3, r7, #7
 8003366:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b7f      	cmp	r3, #127	; 0x7f
 800336e:	d810      	bhi.n	8003392 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	001a      	movs	r2, r3
 8003376:	231f      	movs	r3, #31
 8003378:	4013      	ands	r3, r2
 800337a:	4908      	ldr	r1, [pc, #32]	; (800339c <__NVIC_DisableIRQ+0x40>)
 800337c:	2201      	movs	r2, #1
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003386:	f3bf 8f4f 	dsb	sy
}
 800338a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800338c:	f3bf 8f6f 	isb	sy
}
 8003390:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b002      	add	sp, #8
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a0:	b590      	push	{r4, r7, lr}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	0002      	movs	r2, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	1dfb      	adds	r3, r7, #7
 80033ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b7f      	cmp	r3, #127	; 0x7f
 80033b4:	d828      	bhi.n	8003408 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b6:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <__NVIC_SetPriority+0xd4>)
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	b25b      	sxtb	r3, r3
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	33c0      	adds	r3, #192	; 0xc0
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	589b      	ldr	r3, [r3, r2]
 80033c6:	1dfa      	adds	r2, r7, #7
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	0011      	movs	r1, r2
 80033cc:	2203      	movs	r2, #3
 80033ce:	400a      	ands	r2, r1
 80033d0:	00d2      	lsls	r2, r2, #3
 80033d2:	21ff      	movs	r1, #255	; 0xff
 80033d4:	4091      	lsls	r1, r2
 80033d6:	000a      	movs	r2, r1
 80033d8:	43d2      	mvns	r2, r2
 80033da:	401a      	ands	r2, r3
 80033dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	22ff      	movs	r2, #255	; 0xff
 80033e4:	401a      	ands	r2, r3
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	0018      	movs	r0, r3
 80033ec:	2303      	movs	r3, #3
 80033ee:	4003      	ands	r3, r0
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f4:	481f      	ldr	r0, [pc, #124]	; (8003474 <__NVIC_SetPriority+0xd4>)
 80033f6:	1dfb      	adds	r3, r7, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b25b      	sxtb	r3, r3
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	430a      	orrs	r2, r1
 8003400:	33c0      	adds	r3, #192	; 0xc0
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003406:	e031      	b.n	800346c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <__NVIC_SetPriority+0xd8>)
 800340a:	1dfb      	adds	r3, r7, #7
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	0019      	movs	r1, r3
 8003410:	230f      	movs	r3, #15
 8003412:	400b      	ands	r3, r1
 8003414:	3b08      	subs	r3, #8
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3306      	adds	r3, #6
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	18d3      	adds	r3, r2, r3
 800341e:	3304      	adds	r3, #4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1dfa      	adds	r2, r7, #7
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	0011      	movs	r1, r2
 8003428:	2203      	movs	r2, #3
 800342a:	400a      	ands	r2, r1
 800342c:	00d2      	lsls	r2, r2, #3
 800342e:	21ff      	movs	r1, #255	; 0xff
 8003430:	4091      	lsls	r1, r2
 8003432:	000a      	movs	r2, r1
 8003434:	43d2      	mvns	r2, r2
 8003436:	401a      	ands	r2, r3
 8003438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	401a      	ands	r2, r3
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	0018      	movs	r0, r3
 8003448:	2303      	movs	r3, #3
 800344a:	4003      	ands	r3, r0
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003450:	4809      	ldr	r0, [pc, #36]	; (8003478 <__NVIC_SetPriority+0xd8>)
 8003452:	1dfb      	adds	r3, r7, #7
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	001c      	movs	r4, r3
 8003458:	230f      	movs	r3, #15
 800345a:	4023      	ands	r3, r4
 800345c:	3b08      	subs	r3, #8
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	430a      	orrs	r2, r1
 8003462:	3306      	adds	r3, #6
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	18c3      	adds	r3, r0, r3
 8003468:	3304      	adds	r3, #4
 800346a:	601a      	str	r2, [r3, #0]
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b003      	add	sp, #12
 8003472:	bd90      	pop	{r4, r7, pc}
 8003474:	e000e100 	.word	0xe000e100
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1e5a      	subs	r2, r3, #1
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	045b      	lsls	r3, r3, #17
 800348c:	429a      	cmp	r2, r3
 800348e:	d301      	bcc.n	8003494 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003490:	2301      	movs	r3, #1
 8003492:	e010      	b.n	80034b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <SysTick_Config+0x44>)
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	3a01      	subs	r2, #1
 800349a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349c:	2301      	movs	r3, #1
 800349e:	425b      	negs	r3, r3
 80034a0:	2103      	movs	r1, #3
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff ff7c 	bl	80033a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <SysTick_Config+0x44>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SysTick_Config+0x44>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	210f      	movs	r1, #15
 80034d0:	187b      	adds	r3, r7, r1
 80034d2:	1c02      	adds	r2, r0, #0
 80034d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	0011      	movs	r1, r2
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7ff ff5d 	bl	80033a0 <__NVIC_SetPriority>
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	46bd      	mov	sp, r7
 80034ea:	b004      	add	sp, #16
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	0002      	movs	r2, r0
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034fa:	1dfb      	adds	r3, r7, #7
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b25b      	sxtb	r3, r3
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ff11 	bl	8003328 <__NVIC_EnableIRQ>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b002      	add	sp, #8
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	0002      	movs	r2, r0
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b25b      	sxtb	r3, r3
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff1b 	bl	800335c <__NVIC_DisableIRQ>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff ff9f 	bl	800347c <SysTick_Config>
 800353e:	0003      	movs	r3, r0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e077      	b.n	800364a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <HAL_DMA_Init+0x10c>)
 8003560:	4694      	mov	ip, r2
 8003562:	4463      	add	r3, ip
 8003564:	2114      	movs	r1, #20
 8003566:	0018      	movs	r0, r3
 8003568:	f7fc fdca 	bl	8000100 <__udivsi3>
 800356c:	0003      	movs	r3, r0
 800356e:	009a      	lsls	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2225      	movs	r2, #37	; 0x25
 8003578:	2102      	movs	r1, #2
 800357a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_DMA_Init+0x110>)
 8003588:	400a      	ands	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 fa3f 	bl	8003a48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	01db      	lsls	r3, r3, #7
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d102      	bne.n	80035dc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	213f      	movs	r1, #63	; 0x3f
 80035e6:	400a      	ands	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80035f2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d011      	beq.n	8003620 <HAL_DMA_Init+0xd8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b04      	cmp	r3, #4
 8003602:	d80d      	bhi.n	8003620 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 fa4a 	bl	8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e008      	b.n	8003632 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2225      	movs	r2, #37	; 0x25
 800363c:	2101      	movs	r1, #1
 800363e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	0018      	movs	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	b002      	add	sp, #8
 8003650:	bd80      	pop	{r7, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	bffdfff8 	.word	0xbffdfff8
 8003658:	ffff800f 	.word	0xffff800f

0800365c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e066      	b.n	800373c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2101      	movs	r1, #1
 800367a:	438a      	bics	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a30      	ldr	r2, [pc, #192]	; (8003744 <HAL_DMA_DeInit+0xe8>)
 8003684:	4694      	mov	ip, r2
 8003686:	4463      	add	r3, ip
 8003688:	2114      	movs	r1, #20
 800368a:	0018      	movs	r0, r3
 800368c:	f7fc fd38 	bl	8000100 <__udivsi3>
 8003690:	0003      	movs	r3, r0
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_DMA_DeInit+0xec>)
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	221c      	movs	r2, #28
 80036aa:	4013      	ands	r3, r2
 80036ac:	2201      	movs	r2, #1
 80036ae:	409a      	lsls	r2, r3
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <HAL_DMA_DeInit+0xec>)
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f000 f9c5 	bl	8003a48 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036ce:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_DMA_DeInit+0x9e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d80c      	bhi.n	80036fa <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f9dc 	bl	8003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80036f8:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2225      	movs	r2, #37	; 0x25
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2224      	movs	r2, #36	; 0x24
 8003736:	2100      	movs	r1, #0
 8003738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	0018      	movs	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}
 8003744:	bffdfff8 	.word	0xbffdfff8
 8003748:	40020000 	.word	0x40020000

0800374c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e050      	b.n	8003800 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2225      	movs	r2, #37	; 0x25
 8003762:	5c9b      	ldrb	r3, [r3, r2]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d008      	beq.n	800377c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2204      	movs	r2, #4
 800376e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e041      	b.n	8003800 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	210e      	movs	r1, #14
 8003788:	438a      	bics	r2, r1
 800378a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	491c      	ldr	r1, [pc, #112]	; (8003808 <HAL_DMA_Abort+0xbc>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	438a      	bics	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_DMA_Abort+0xc0>)
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	221c      	movs	r2, #28
 80037b6:	4013      	ands	r3, r2
 80037b8:	2201      	movs	r2, #1
 80037ba:	409a      	lsls	r2, r3
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_DMA_Abort+0xc0>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	490a      	ldr	r1, [pc, #40]	; (8003808 <HAL_DMA_Abort+0xbc>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80037ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2225      	movs	r2, #37	; 0x25
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2224      	movs	r2, #36	; 0x24
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	b002      	add	sp, #8
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fffffeff 	.word	0xfffffeff
 800380c:	40020000 	.word	0x40020000

08003810 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	210f      	movs	r1, #15
 800381a:	187b      	adds	r3, r7, r1
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2225      	movs	r2, #37	; 0x25
 8003824:	5c9b      	ldrb	r3, [r3, r2]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d006      	beq.n	800383a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2204      	movs	r2, #4
 8003830:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003832:	187b      	adds	r3, r7, r1
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e049      	b.n	80038ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	210e      	movs	r1, #14
 8003846:	438a      	bics	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	438a      	bics	r2, r1
 8003858:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	491d      	ldr	r1, [pc, #116]	; (80038dc <HAL_DMA_Abort_IT+0xcc>)
 8003866:	400a      	ands	r2, r1
 8003868:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800386a:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <HAL_DMA_Abort_IT+0xd0>)
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	221c      	movs	r2, #28
 8003874:	4013      	ands	r3, r2
 8003876:	2201      	movs	r2, #1
 8003878:	409a      	lsls	r2, r3
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_DMA_Abort_IT+0xd0>)
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003888:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	490f      	ldr	r1, [pc, #60]	; (80038dc <HAL_DMA_Abort_IT+0xcc>)
 800389e:	400a      	ands	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2225      	movs	r2, #37	; 0x25
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	0010      	movs	r0, r2
 80038cc:	4798      	blx	r3
    }
  }
  return status;
 80038ce:	230f      	movs	r3, #15
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	781b      	ldrb	r3, [r3, #0]
}
 80038d4:	0018      	movs	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b004      	add	sp, #16
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fffffeff 	.word	0xfffffeff
 80038e0:	40020000 	.word	0x40020000

080038e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80038ec:	4b55      	ldr	r3, [pc, #340]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	221c      	movs	r2, #28
 8003900:	4013      	ands	r3, r2
 8003902:	2204      	movs	r2, #4
 8003904:	409a      	lsls	r2, r3
 8003906:	0013      	movs	r3, r2
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4013      	ands	r3, r2
 800390c:	d027      	beq.n	800395e <HAL_DMA_IRQHandler+0x7a>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2204      	movs	r2, #4
 8003912:	4013      	ands	r3, r2
 8003914:	d023      	beq.n	800395e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	4013      	ands	r3, r2
 8003920:	d107      	bne.n	8003932 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2104      	movs	r1, #4
 800392e:	438a      	bics	r2, r1
 8003930:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 8003934:	6859      	ldr	r1, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	221c      	movs	r2, #28
 800393c:	4013      	ands	r3, r2
 800393e:	2204      	movs	r2, #4
 8003940:	409a      	lsls	r2, r3
 8003942:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	2b00      	cmp	r3, #0
 800394e:	d100      	bne.n	8003952 <HAL_DMA_IRQHandler+0x6e>
 8003950:	e073      	b.n	8003a3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	0010      	movs	r0, r2
 800395a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800395c:	e06d      	b.n	8003a3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	221c      	movs	r2, #28
 8003964:	4013      	ands	r3, r2
 8003966:	2202      	movs	r2, #2
 8003968:	409a      	lsls	r2, r3
 800396a:	0013      	movs	r3, r2
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	d02e      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xec>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2202      	movs	r2, #2
 8003976:	4013      	ands	r3, r2
 8003978:	d02a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2220      	movs	r2, #32
 8003982:	4013      	ands	r3, r2
 8003984:	d10b      	bne.n	800399e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	210a      	movs	r1, #10
 8003992:	438a      	bics	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2225      	movs	r2, #37	; 0x25
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	221c      	movs	r2, #28
 80039a8:	4013      	ands	r3, r2
 80039aa:	2202      	movs	r2, #2
 80039ac:	409a      	lsls	r2, r3
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 80039b0:	430a      	orrs	r2, r1
 80039b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	; 0x24
 80039b8:	2100      	movs	r1, #0
 80039ba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d03a      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	0010      	movs	r0, r2
 80039cc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80039ce:	e034      	b.n	8003a3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	221c      	movs	r2, #28
 80039d6:	4013      	ands	r3, r2
 80039d8:	2208      	movs	r2, #8
 80039da:	409a      	lsls	r2, r3
 80039dc:	0013      	movs	r3, r2
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	d02b      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x158>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2208      	movs	r2, #8
 80039e8:	4013      	ands	r3, r2
 80039ea:	d027      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	210e      	movs	r1, #14
 80039f8:	438a      	bics	r2, r1
 80039fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	221c      	movs	r2, #28
 8003a06:	4013      	ands	r3, r2
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <HAL_DMA_IRQHandler+0x160>)
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2225      	movs	r2, #37	; 0x25
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	0010      	movs	r0, r2
 8003a38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46c0      	nop			; (mov r8, r8)
}
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40020000 	.word	0x40020000

08003a48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	089b      	lsrs	r3, r3, #2
 8003a56:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003a58:	4694      	mov	ip, r2
 8003a5a:	4463      	add	r3, ip
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	001a      	movs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	001a      	movs	r2, r3
 8003a6a:	23ff      	movs	r3, #255	; 0xff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	3b08      	subs	r3, #8
 8003a70:	2114      	movs	r1, #20
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fc fb44 	bl	8000100 <__udivsi3>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003a80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	221f      	movs	r2, #31
 8003a86:	4013      	ands	r3, r2
 8003a88:	2201      	movs	r2, #1
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	10008200 	.word	0x10008200
 8003a9c:	40020880 	.word	0x40020880

08003aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	223f      	movs	r2, #63	; 0x3f
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ab6:	4694      	mov	ip, r2
 8003ab8:	4463      	add	r3, ip
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	001a      	movs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b004      	add	sp, #16
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	1000823f 	.word	0x1000823f
 8003ae4:	40020940 	.word	0x40020940

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af6:	e147      	b.n	8003d88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4091      	lsls	r1, r2
 8003b02:	000a      	movs	r2, r1
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d100      	bne.n	8003b10 <HAL_GPIO_Init+0x28>
 8003b0e:	e138      	b.n	8003d82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d005      	beq.n	8003b28 <HAL_GPIO_Init+0x40>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2203      	movs	r2, #3
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d130      	bne.n	8003b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	409a      	lsls	r2, r3
 8003b36:	0013      	movs	r3, r2
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5e:	2201      	movs	r2, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	43da      	mvns	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	2201      	movs	r2, #1
 8003b76:	401a      	ands	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	0013      	movs	r3, r2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d017      	beq.n	8003bc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	0013      	movs	r3, r2
 8003ba6:	43da      	mvns	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	0013      	movs	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d123      	bne.n	8003c1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	0092      	lsls	r2, r2, #2
 8003bdc:	58d3      	ldr	r3, [r2, r3]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2207      	movs	r2, #7
 8003be4:	4013      	ands	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	220f      	movs	r2, #15
 8003bea:	409a      	lsls	r2, r3
 8003bec:	0013      	movs	r3, r2
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2107      	movs	r1, #7
 8003bfe:	400b      	ands	r3, r1
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	08da      	lsrs	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3208      	adds	r2, #8
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	6939      	ldr	r1, [r7, #16]
 8003c18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	409a      	lsls	r2, r3
 8003c28:	0013      	movs	r3, r2
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2203      	movs	r2, #3
 8003c38:	401a      	ands	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	23c0      	movs	r3, #192	; 0xc0
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	4013      	ands	r3, r2
 8003c58:	d100      	bne.n	8003c5c <HAL_GPIO_Init+0x174>
 8003c5a:	e092      	b.n	8003d82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c5c:	4a50      	ldr	r2, [pc, #320]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	089b      	lsrs	r3, r3, #2
 8003c62:	3318      	adds	r3, #24
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	589b      	ldr	r3, [r3, r2]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	4013      	ands	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	220f      	movs	r2, #15
 8003c74:	409a      	lsls	r2, r3
 8003c76:	0013      	movs	r3, r2
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	23a0      	movs	r3, #160	; 0xa0
 8003c84:	05db      	lsls	r3, r3, #23
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d013      	beq.n	8003cb2 <HAL_GPIO_Init+0x1ca>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a45      	ldr	r2, [pc, #276]	; (8003da4 <HAL_GPIO_Init+0x2bc>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00d      	beq.n	8003cae <HAL_GPIO_Init+0x1c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a44      	ldr	r2, [pc, #272]	; (8003da8 <HAL_GPIO_Init+0x2c0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d007      	beq.n	8003caa <HAL_GPIO_Init+0x1c2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a43      	ldr	r2, [pc, #268]	; (8003dac <HAL_GPIO_Init+0x2c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <HAL_GPIO_Init+0x1be>
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e006      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	e004      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e002      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_GPIO_Init+0x1cc>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	400a      	ands	r2, r1
 8003cba:	00d2      	lsls	r2, r2, #3
 8003cbc:	4093      	lsls	r3, r2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cc4:	4936      	ldr	r1, [pc, #216]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3318      	adds	r3, #24
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	035b      	lsls	r3, r3, #13
 8003cea:	4013      	ands	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cf6:	4b2a      	ldr	r3, [pc, #168]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	43da      	mvns	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	039b      	lsls	r3, r3, #14
 8003d14:	4013      	ands	r3, r2
 8003d16:	d003      	beq.n	8003d20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d20:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d28:	2384      	movs	r3, #132	; 0x84
 8003d2a:	58d3      	ldr	r3, [r2, r3]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	2380      	movs	r3, #128	; 0x80
 8003d3e:	029b      	lsls	r3, r3, #10
 8003d40:	4013      	ands	r3, r2
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d4c:	4914      	ldr	r1, [pc, #80]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d4e:	2284      	movs	r2, #132	; 0x84
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d54:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	58d3      	ldr	r3, [r2, r3]
 8003d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d7a:	4909      	ldr	r1, [pc, #36]	; (8003da0 <HAL_GPIO_Init+0x2b8>)
 8003d7c:	2280      	movs	r2, #128	; 0x80
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	40da      	lsrs	r2, r3
 8003d90:	1e13      	subs	r3, r2, #0
 8003d92:	d000      	beq.n	8003d96 <HAL_GPIO_Init+0x2ae>
 8003d94:	e6b0      	b.n	8003af8 <HAL_GPIO_Init+0x10>
  }
}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b006      	add	sp, #24
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021800 	.word	0x40021800
 8003da4:	50000400 	.word	0x50000400
 8003da8:	50000800 	.word	0x50000800
 8003dac:	50000c00 	.word	0x50000c00

08003db0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003dbe:	e0b4      	b.n	8003f2a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d100      	bne.n	8003dd4 <HAL_GPIO_DeInit+0x24>
 8003dd2:	e0a7      	b.n	8003f24 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003dd4:	4a5a      	ldr	r2, [pc, #360]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3318      	adds	r3, #24
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	589b      	ldr	r3, [r3, r2]
 8003de0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2203      	movs	r2, #3
 8003de6:	4013      	ands	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	220f      	movs	r2, #15
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	23a0      	movs	r3, #160	; 0xa0
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d013      	beq.n	8003e26 <HAL_GPIO_DeInit+0x76>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a50      	ldr	r2, [pc, #320]	; (8003f44 <HAL_GPIO_DeInit+0x194>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00d      	beq.n	8003e22 <HAL_GPIO_DeInit+0x72>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4f      	ldr	r2, [pc, #316]	; (8003f48 <HAL_GPIO_DeInit+0x198>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <HAL_GPIO_DeInit+0x6e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4e      	ldr	r2, [pc, #312]	; (8003f4c <HAL_GPIO_DeInit+0x19c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <HAL_GPIO_DeInit+0x6a>
 8003e16:	2303      	movs	r3, #3
 8003e18:	e006      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	e004      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <HAL_GPIO_DeInit+0x78>
 8003e26:	2300      	movs	r3, #0
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	00d2      	lsls	r2, r2, #3
 8003e30:	4093      	lsls	r3, r2
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d136      	bne.n	8003ea6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e38:	4a41      	ldr	r2, [pc, #260]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	58d3      	ldr	r3, [r2, r3]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	43d2      	mvns	r2, r2
 8003e42:	493f      	ldr	r1, [pc, #252]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003e4a:	4a3d      	ldr	r2, [pc, #244]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e4c:	2384      	movs	r3, #132	; 0x84
 8003e4e:	58d3      	ldr	r3, [r2, r3]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	43d2      	mvns	r2, r2
 8003e54:	493a      	ldr	r1, [pc, #232]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	2284      	movs	r2, #132	; 0x84
 8003e5a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e5c:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e6a:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43d9      	mvns	r1, r3
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	220f      	movs	r2, #15
 8003e82:	409a      	lsls	r2, r3
 8003e84:	0013      	movs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003e88:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3318      	adds	r3, #24
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	589a      	ldr	r2, [r3, r2]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43d9      	mvns	r1, r3
 8003e98:	4829      	ldr	r0, [pc, #164]	; (8003f40 <HAL_GPIO_DeInit+0x190>)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4099      	lsls	r1, r3
 8003eb2:	000b      	movs	r3, r1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	08da      	lsrs	r2, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3208      	adds	r2, #8
 8003ec2:	0092      	lsls	r2, r2, #2
 8003ec4:	58d3      	ldr	r3, [r2, r3]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	2107      	movs	r1, #7
 8003eca:	400a      	ands	r2, r1
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	210f      	movs	r1, #15
 8003ed0:	4091      	lsls	r1, r2
 8003ed2:	000a      	movs	r2, r1
 8003ed4:	43d1      	mvns	r1, r2
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	08d2      	lsrs	r2, r2, #3
 8003eda:	4019      	ands	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3208      	adds	r2, #8
 8003ee0:	0092      	lsls	r2, r2, #2
 8003ee2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	0052      	lsls	r2, r2, #1
 8003eec:	2103      	movs	r1, #3
 8003eee:	4091      	lsls	r1, r2
 8003ef0:	000a      	movs	r2, r1
 8003ef2:	43d2      	mvns	r2, r2
 8003ef4:	401a      	ands	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2101      	movs	r1, #1
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4091      	lsls	r1, r2
 8003f04:	000a      	movs	r2, r1
 8003f06:	43d2      	mvns	r2, r2
 8003f08:	401a      	ands	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	0052      	lsls	r2, r2, #1
 8003f16:	2103      	movs	r1, #3
 8003f18:	4091      	lsls	r1, r2
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	43d2      	mvns	r2, r2
 8003f1e:	401a      	ands	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	40da      	lsrs	r2, r3
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	d000      	beq.n	8003f36 <HAL_GPIO_DeInit+0x186>
 8003f34:	e744      	b.n	8003dc0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021800 	.word	0x40021800
 8003f44:	50000400 	.word	0x50000400
 8003f48:	50000800 	.word	0x50000800
 8003f4c:	50000c00 	.word	0x50000c00

08003f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	0008      	movs	r0, r1
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	1cbb      	adds	r3, r7, #2
 8003f5e:	1c02      	adds	r2, r0, #0
 8003f60:	801a      	strh	r2, [r3, #0]
 8003f62:	1c7b      	adds	r3, r7, #1
 8003f64:	1c0a      	adds	r2, r1, #0
 8003f66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f68:	1c7b      	adds	r3, r7, #1
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f70:	1cbb      	adds	r3, r7, #2
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f78:	e003      	b.n	8003f82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f7a:	1cbb      	adds	r3, r7, #2
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b002      	add	sp, #8
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d11f      	bne.n	8003ff0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	0013      	movs	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	189b      	adds	r3, r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	4912      	ldr	r1, [pc, #72]	; (8004008 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f7fc f89e 	bl	8000100 <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fca:	e008      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e009      	b.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d0ed      	beq.n	8003fcc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b004      	add	sp, #16
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	40007000 	.word	0x40007000
 8004000:	fffff9ff 	.word	0xfffff9ff
 8004004:	20000010 	.word	0x20000010
 8004008:	000f4240 	.word	0x000f4240

0800400c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	23e0      	movs	r3, #224	; 0xe0
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	4013      	ands	r3, r2
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e2f3      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	4013      	ands	r3, r2
 800403e:	d100      	bne.n	8004042 <HAL_RCC_OscConfig+0x1e>
 8004040:	e07c      	b.n	800413c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004042:	4bc3      	ldr	r3, [pc, #780]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2238      	movs	r2, #56	; 0x38
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800404c:	4bc0      	ldr	r3, [pc, #768]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2203      	movs	r2, #3
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b10      	cmp	r3, #16
 800405a:	d102      	bne.n	8004062 <HAL_RCC_OscConfig+0x3e>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d002      	beq.n	8004068 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d10b      	bne.n	8004080 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	4bb9      	ldr	r3, [pc, #740]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	4013      	ands	r3, r2
 8004072:	d062      	beq.n	800413a <HAL_RCC_OscConfig+0x116>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d15e      	bne.n	800413a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e2ce      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	025b      	lsls	r3, r3, #9
 8004088:	429a      	cmp	r2, r3
 800408a:	d107      	bne.n	800409c <HAL_RCC_OscConfig+0x78>
 800408c:	4bb0      	ldr	r3, [pc, #704]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4baf      	ldr	r3, [pc, #700]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004092:	2180      	movs	r1, #128	; 0x80
 8004094:	0249      	lsls	r1, r1, #9
 8004096:	430a      	orrs	r2, r1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e020      	b.n	80040de <HAL_RCC_OscConfig+0xba>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	23a0      	movs	r3, #160	; 0xa0
 80040a2:	02db      	lsls	r3, r3, #11
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d10e      	bne.n	80040c6 <HAL_RCC_OscConfig+0xa2>
 80040a8:	4ba9      	ldr	r3, [pc, #676]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4ba8      	ldr	r3, [pc, #672]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	02c9      	lsls	r1, r1, #11
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	4ba6      	ldr	r3, [pc, #664]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4ba5      	ldr	r3, [pc, #660]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040bc:	2180      	movs	r1, #128	; 0x80
 80040be:	0249      	lsls	r1, r1, #9
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e00b      	b.n	80040de <HAL_RCC_OscConfig+0xba>
 80040c6:	4ba2      	ldr	r3, [pc, #648]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4ba1      	ldr	r3, [pc, #644]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040cc:	49a1      	ldr	r1, [pc, #644]	; (8004354 <HAL_RCC_OscConfig+0x330>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	4b9f      	ldr	r3, [pc, #636]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b9e      	ldr	r3, [pc, #632]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80040d8:	499f      	ldr	r1, [pc, #636]	; (8004358 <HAL_RCC_OscConfig+0x334>)
 80040da:	400a      	ands	r2, r1
 80040dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d014      	beq.n	8004110 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7ff f8f1 	bl	80032cc <HAL_GetTick>
 80040ea:	0003      	movs	r3, r0
 80040ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f0:	f7ff f8ec 	bl	80032cc <HAL_GetTick>
 80040f4:	0002      	movs	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b64      	cmp	r3, #100	; 0x64
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e28d      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004102:	4b93      	ldr	r3, [pc, #588]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	029b      	lsls	r3, r3, #10
 800410a:	4013      	ands	r3, r2
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0xcc>
 800410e:	e015      	b.n	800413c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7ff f8dc 	bl	80032cc <HAL_GetTick>
 8004114:	0003      	movs	r3, r0
 8004116:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800411a:	f7ff f8d7 	bl	80032cc <HAL_GetTick>
 800411e:	0002      	movs	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e278      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412c:	4b88      	ldr	r3, [pc, #544]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	029b      	lsls	r3, r3, #10
 8004134:	4013      	ands	r3, r2
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0xf6>
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800413a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2202      	movs	r2, #2
 8004142:	4013      	ands	r3, r2
 8004144:	d100      	bne.n	8004148 <HAL_RCC_OscConfig+0x124>
 8004146:	e099      	b.n	800427c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004148:	4b81      	ldr	r3, [pc, #516]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2238      	movs	r2, #56	; 0x38
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2203      	movs	r2, #3
 8004158:	4013      	ands	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b10      	cmp	r3, #16
 8004160:	d102      	bne.n	8004168 <HAL_RCC_OscConfig+0x144>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d002      	beq.n	800416e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d135      	bne.n	80041da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416e:	4b78      	ldr	r3, [pc, #480]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	2380      	movs	r3, #128	; 0x80
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4013      	ands	r3, r2
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x162>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e24b      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b72      	ldr	r3, [pc, #456]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4a74      	ldr	r2, [pc, #464]	; (800435c <HAL_RCC_OscConfig+0x338>)
 800418c:	4013      	ands	r3, r2
 800418e:	0019      	movs	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	4b6e      	ldr	r3, [pc, #440]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004198:	430a      	orrs	r2, r1
 800419a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d112      	bne.n	80041c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041a2:	4b6b      	ldr	r3, [pc, #428]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6e      	ldr	r2, [pc, #440]	; (8004360 <HAL_RCC_OscConfig+0x33c>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	0019      	movs	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	4b67      	ldr	r3, [pc, #412]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80041b6:	4b66      	ldr	r3, [pc, #408]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	0adb      	lsrs	r3, r3, #11
 80041bc:	2207      	movs	r2, #7
 80041be:	4013      	ands	r3, r2
 80041c0:	4a68      	ldr	r2, [pc, #416]	; (8004364 <HAL_RCC_OscConfig+0x340>)
 80041c2:	40da      	lsrs	r2, r3
 80041c4:	4b68      	ldr	r3, [pc, #416]	; (8004368 <HAL_RCC_OscConfig+0x344>)
 80041c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041c8:	4b68      	ldr	r3, [pc, #416]	; (800436c <HAL_RCC_OscConfig+0x348>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff f821 	bl	8003214 <HAL_InitTick>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d051      	beq.n	800427a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e221      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d030      	beq.n	8004244 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041e2:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5e      	ldr	r2, [pc, #376]	; (8004360 <HAL_RCC_OscConfig+0x33c>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041f2:	430a      	orrs	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80041f6:	4b56      	ldr	r3, [pc, #344]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	0049      	lsls	r1, r1, #1
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7ff f862 	bl	80032cc <HAL_GetTick>
 8004208:	0003      	movs	r3, r0
 800420a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420e:	f7ff f85d 	bl	80032cc <HAL_GetTick>
 8004212:	0002      	movs	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e1fe      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4013      	ands	r3, r2
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422c:	4b48      	ldr	r3, [pc, #288]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a4a      	ldr	r2, [pc, #296]	; (800435c <HAL_RCC_OscConfig+0x338>)
 8004232:	4013      	ands	r3, r2
 8004234:	0019      	movs	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	021a      	lsls	r2, r3, #8
 800423c:	4b44      	ldr	r3, [pc, #272]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	e01b      	b.n	800427c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004244:	4b42      	ldr	r3, [pc, #264]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4b41      	ldr	r3, [pc, #260]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800424a:	4949      	ldr	r1, [pc, #292]	; (8004370 <HAL_RCC_OscConfig+0x34c>)
 800424c:	400a      	ands	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7ff f83c 	bl	80032cc <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425a:	f7ff f837 	bl	80032cc <HAL_GetTick>
 800425e:	0002      	movs	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1d8      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4013      	ands	r3, r2
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_OscConfig+0x236>
 8004278:	e000      	b.n	800427c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800427a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2208      	movs	r2, #8
 8004282:	4013      	ands	r3, r2
 8004284:	d047      	beq.n	8004316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004286:	4b32      	ldr	r3, [pc, #200]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2238      	movs	r2, #56	; 0x38
 800428c:	4013      	ands	r3, r2
 800428e:	2b18      	cmp	r3, #24
 8004290:	d10a      	bne.n	80042a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004292:	4b2f      	ldr	r3, [pc, #188]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004296:	2202      	movs	r2, #2
 8004298:	4013      	ands	r3, r2
 800429a:	d03c      	beq.n	8004316 <HAL_RCC_OscConfig+0x2f2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d138      	bne.n	8004316 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e1ba      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80042b0:	4b27      	ldr	r3, [pc, #156]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80042b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042b4:	4b26      	ldr	r3, [pc, #152]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80042b6:	2101      	movs	r1, #1
 80042b8:	430a      	orrs	r2, r1
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7ff f806 	bl	80032cc <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c6:	f7ff f801 	bl	80032cc <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e1a2      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	2202      	movs	r2, #2
 80042de:	4013      	ands	r3, r2
 80042e0:	d0f1      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2a2>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80042e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	438a      	bics	r2, r1
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe ffec 	bl	80032cc <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fa:	f7fe ffe7 	bl	80032cc <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e188      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800430e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004310:	2202      	movs	r2, #2
 8004312:	4013      	ands	r3, r2
 8004314:	d1f1      	bne.n	80042fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2204      	movs	r2, #4
 800431c:	4013      	ands	r3, r2
 800431e:	d100      	bne.n	8004322 <HAL_RCC_OscConfig+0x2fe>
 8004320:	e0c6      	b.n	80044b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004322:	231f      	movs	r3, #31
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2238      	movs	r2, #56	; 0x38
 8004330:	4013      	ands	r3, r2
 8004332:	2b20      	cmp	r3, #32
 8004334:	d11e      	bne.n	8004374 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_OscConfig+0x32c>)
 8004338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433a:	2202      	movs	r2, #2
 800433c:	4013      	ands	r3, r2
 800433e:	d100      	bne.n	8004342 <HAL_RCC_OscConfig+0x31e>
 8004340:	e0b6      	b.n	80044b0 <HAL_RCC_OscConfig+0x48c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d000      	beq.n	800434c <HAL_RCC_OscConfig+0x328>
 800434a:	e0b1      	b.n	80044b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e166      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
 8004350:	40021000 	.word	0x40021000
 8004354:	fffeffff 	.word	0xfffeffff
 8004358:	fffbffff 	.word	0xfffbffff
 800435c:	ffff80ff 	.word	0xffff80ff
 8004360:	ffffc7ff 	.word	0xffffc7ff
 8004364:	00f42400 	.word	0x00f42400
 8004368:	20000010 	.word	0x20000010
 800436c:	20000014 	.word	0x20000014
 8004370:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004374:	4bac      	ldr	r3, [pc, #688]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	055b      	lsls	r3, r3, #21
 800437c:	4013      	ands	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_RCC_OscConfig+0x360>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x362>
 8004384:	2300      	movs	r3, #0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d011      	beq.n	80043ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800438a:	4ba7      	ldr	r3, [pc, #668]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800438c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800438e:	4ba6      	ldr	r3, [pc, #664]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004390:	2180      	movs	r1, #128	; 0x80
 8004392:	0549      	lsls	r1, r1, #21
 8004394:	430a      	orrs	r2, r1
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
 8004398:	4ba3      	ldr	r3, [pc, #652]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800439a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439c:	2380      	movs	r3, #128	; 0x80
 800439e:	055b      	lsls	r3, r3, #21
 80043a0:	4013      	ands	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80043a6:	231f      	movs	r3, #31
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ae:	4b9f      	ldr	r3, [pc, #636]	; (800462c <HAL_RCC_OscConfig+0x608>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	d11a      	bne.n	80043f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ba:	4b9c      	ldr	r3, [pc, #624]	; (800462c <HAL_RCC_OscConfig+0x608>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b9b      	ldr	r3, [pc, #620]	; (800462c <HAL_RCC_OscConfig+0x608>)
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	0049      	lsls	r1, r1, #1
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80043c8:	f7fe ff80 	bl	80032cc <HAL_GetTick>
 80043cc:	0003      	movs	r3, r0
 80043ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fe ff7b 	bl	80032cc <HAL_GetTick>
 80043d6:	0002      	movs	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e11c      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043e4:	4b91      	ldr	r3, [pc, #580]	; (800462c <HAL_RCC_OscConfig+0x608>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x3e2>
 80043f8:	4b8b      	ldr	r3, [pc, #556]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80043fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043fc:	4b8a      	ldr	r3, [pc, #552]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80043fe:	2101      	movs	r1, #1
 8004400:	430a      	orrs	r2, r1
 8004402:	65da      	str	r2, [r3, #92]	; 0x5c
 8004404:	e01c      	b.n	8004440 <HAL_RCC_OscConfig+0x41c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x404>
 800440e:	4b86      	ldr	r3, [pc, #536]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004412:	4b85      	ldr	r3, [pc, #532]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004414:	2104      	movs	r1, #4
 8004416:	430a      	orrs	r2, r1
 8004418:	65da      	str	r2, [r3, #92]	; 0x5c
 800441a:	4b83      	ldr	r3, [pc, #524]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800441c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800441e:	4b82      	ldr	r3, [pc, #520]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004420:	2101      	movs	r1, #1
 8004422:	430a      	orrs	r2, r1
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0x41c>
 8004428:	4b7f      	ldr	r3, [pc, #508]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800442a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800442c:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800442e:	2101      	movs	r1, #1
 8004430:	438a      	bics	r2, r1
 8004432:	65da      	str	r2, [r3, #92]	; 0x5c
 8004434:	4b7c      	ldr	r3, [pc, #496]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004438:	4b7b      	ldr	r3, [pc, #492]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800443a:	2104      	movs	r1, #4
 800443c:	438a      	bics	r2, r1
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d014      	beq.n	8004472 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fe ff40 	bl	80032cc <HAL_GetTick>
 800444c:	0003      	movs	r3, r0
 800444e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004450:	e009      	b.n	8004466 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fe ff3b 	bl	80032cc <HAL_GetTick>
 8004456:	0002      	movs	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	4a74      	ldr	r2, [pc, #464]	; (8004630 <HAL_RCC_OscConfig+0x60c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0db      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004466:	4b70      	ldr	r3, [pc, #448]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446a:	2202      	movs	r2, #2
 800446c:	4013      	ands	r3, r2
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x42e>
 8004470:	e013      	b.n	800449a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fe ff2b 	bl	80032cc <HAL_GetTick>
 8004476:	0003      	movs	r3, r0
 8004478:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800447a:	e009      	b.n	8004490 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fe ff26 	bl	80032cc <HAL_GetTick>
 8004480:	0002      	movs	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	4a6a      	ldr	r2, [pc, #424]	; (8004630 <HAL_RCC_OscConfig+0x60c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0c6      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004494:	2202      	movs	r2, #2
 8004496:	4013      	ands	r3, r2
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800449a:	231f      	movs	r3, #31
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80044a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a8:	4b5f      	ldr	r3, [pc, #380]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80044aa:	4962      	ldr	r1, [pc, #392]	; (8004634 <HAL_RCC_OscConfig+0x610>)
 80044ac:	400a      	ands	r2, r1
 80044ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d100      	bne.n	80044ba <HAL_RCC_OscConfig+0x496>
 80044b8:	e0b0      	b.n	800461c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ba:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	2238      	movs	r2, #56	; 0x38
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b10      	cmp	r3, #16
 80044c4:	d100      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4a4>
 80044c6:	e078      	b.n	80045ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d153      	bne.n	8004578 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d0:	4b55      	ldr	r3, [pc, #340]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b54      	ldr	r3, [pc, #336]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80044d6:	4958      	ldr	r1, [pc, #352]	; (8004638 <HAL_RCC_OscConfig+0x614>)
 80044d8:	400a      	ands	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe fef6 	bl	80032cc <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fe fef1 	bl	80032cc <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e092      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f8:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	049b      	lsls	r3, r3, #18
 8004500:	4013      	ands	r3, r2
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004504:	4b48      	ldr	r3, [pc, #288]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4a4c      	ldr	r2, [pc, #304]	; (800463c <HAL_RCC_OscConfig+0x618>)
 800450a:	4013      	ands	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	431a      	orrs	r2, r3
 800452c:	4b3e      	ldr	r3, [pc, #248]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800452e:	430a      	orrs	r2, r1
 8004530:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004532:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4b3c      	ldr	r3, [pc, #240]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004538:	2180      	movs	r1, #128	; 0x80
 800453a:	0449      	lsls	r1, r1, #17
 800453c:	430a      	orrs	r2, r1
 800453e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004540:	4b39      	ldr	r3, [pc, #228]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b38      	ldr	r3, [pc, #224]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	0549      	lsls	r1, r1, #21
 800454a:	430a      	orrs	r2, r1
 800454c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454e:	f7fe febd 	bl	80032cc <HAL_GetTick>
 8004552:	0003      	movs	r3, r0
 8004554:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004558:	f7fe feb8 	bl	80032cc <HAL_GetTick>
 800455c:	0002      	movs	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e059      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456a:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	2380      	movs	r3, #128	; 0x80
 8004570:	049b      	lsls	r3, r3, #18
 8004572:	4013      	ands	r3, r2
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x534>
 8004576:	e051      	b.n	800461c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b2b      	ldr	r3, [pc, #172]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b2a      	ldr	r3, [pc, #168]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 800457e:	492e      	ldr	r1, [pc, #184]	; (8004638 <HAL_RCC_OscConfig+0x614>)
 8004580:	400a      	ands	r2, r1
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fe fea2 	bl	80032cc <HAL_GetTick>
 8004588:	0003      	movs	r3, r0
 800458a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458e:	f7fe fe9d 	bl	80032cc <HAL_GetTick>
 8004592:	0002      	movs	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e03e      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	049b      	lsls	r3, r3, #18
 80045a8:	4013      	ands	r3, r2
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80045ac:	4b1e      	ldr	r3, [pc, #120]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80045b2:	4923      	ldr	r1, [pc, #140]	; (8004640 <HAL_RCC_OscConfig+0x61c>)
 80045b4:	400a      	ands	r2, r1
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	e030      	b.n	800461c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e02b      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCC_OscConfig+0x604>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2203      	movs	r2, #3
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d11e      	bne.n	8004618 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2270      	movs	r2, #112	; 0x70
 80045de:	401a      	ands	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d117      	bne.n	8004618 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	23fe      	movs	r3, #254	; 0xfe
 80045ec:	01db      	lsls	r3, r3, #7
 80045ee:	401a      	ands	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d10e      	bne.n	8004618 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	23f8      	movs	r3, #248	; 0xf8
 80045fe:	039b      	lsls	r3, r3, #14
 8004600:	401a      	ands	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d106      	bne.n	8004618 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	0f5b      	lsrs	r3, r3, #29
 800460e:	075a      	lsls	r2, r3, #29
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	0018      	movs	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	b008      	add	sp, #32
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	40021000 	.word	0x40021000
 800462c:	40007000 	.word	0x40007000
 8004630:	00001388 	.word	0x00001388
 8004634:	efffffff 	.word	0xefffffff
 8004638:	feffffff 	.word	0xfeffffff
 800463c:	1fc1808c 	.word	0x1fc1808c
 8004640:	effefffc 	.word	0xeffefffc

08004644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0e9      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004658:	4b76      	ldr	r3, [pc, #472]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2207      	movs	r2, #7
 800465e:	4013      	ands	r3, r2
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d91e      	bls.n	80046a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b73      	ldr	r3, [pc, #460]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2207      	movs	r2, #7
 800466c:	4393      	bics	r3, r2
 800466e:	0019      	movs	r1, r3
 8004670:	4b70      	ldr	r3, [pc, #448]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004678:	f7fe fe28 	bl	80032cc <HAL_GetTick>
 800467c:	0003      	movs	r3, r0
 800467e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004680:	e009      	b.n	8004696 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004682:	f7fe fe23 	bl	80032cc <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	4a6a      	ldr	r2, [pc, #424]	; (8004838 <HAL_RCC_ClockConfig+0x1f4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0ca      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004696:	4b67      	ldr	r3, [pc, #412]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2207      	movs	r2, #7
 800469c:	4013      	ands	r3, r2
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d1ee      	bne.n	8004682 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2202      	movs	r2, #2
 80046aa:	4013      	ands	r3, r2
 80046ac:	d015      	beq.n	80046da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2204      	movs	r2, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d006      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046b8:	4b60      	ldr	r3, [pc, #384]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	4b5f      	ldr	r3, [pc, #380]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80046be:	21e0      	movs	r1, #224	; 0xe0
 80046c0:	01c9      	lsls	r1, r1, #7
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c6:	4b5d      	ldr	r3, [pc, #372]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4a5d      	ldr	r2, [pc, #372]	; (8004840 <HAL_RCC_ClockConfig+0x1fc>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4b59      	ldr	r3, [pc, #356]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80046d6:	430a      	orrs	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	4013      	ands	r3, r2
 80046e2:	d057      	beq.n	8004794 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ec:	4b53      	ldr	r3, [pc, #332]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	029b      	lsls	r3, r3, #10
 80046f4:	4013      	ands	r3, r2
 80046f6:	d12b      	bne.n	8004750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e097      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b02      	cmp	r3, #2
 8004702:	d107      	bne.n	8004714 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004704:	4b4d      	ldr	r3, [pc, #308]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	049b      	lsls	r3, r3, #18
 800470c:	4013      	ands	r3, r2
 800470e:	d11f      	bne.n	8004750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e08b      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800471c:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	4013      	ands	r3, r2
 8004726:	d113      	bne.n	8004750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e07f      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d106      	bne.n	8004742 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004734:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004738:	2202      	movs	r2, #2
 800473a:	4013      	ands	r3, r2
 800473c:	d108      	bne.n	8004750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e074      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004742:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004746:	2202      	movs	r2, #2
 8004748:	4013      	ands	r3, r2
 800474a:	d101      	bne.n	8004750 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e06d      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004750:	4b3a      	ldr	r3, [pc, #232]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2207      	movs	r2, #7
 8004756:	4393      	bics	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004764:	f7fe fdb2 	bl	80032cc <HAL_GetTick>
 8004768:	0003      	movs	r3, r0
 800476a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476c:	e009      	b.n	8004782 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800476e:	f7fe fdad 	bl	80032cc <HAL_GetTick>
 8004772:	0002      	movs	r2, r0
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	4a2f      	ldr	r2, [pc, #188]	; (8004838 <HAL_RCC_ClockConfig+0x1f4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e054      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	4b2e      	ldr	r3, [pc, #184]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2238      	movs	r2, #56	; 0x38
 8004788:	401a      	ands	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	429a      	cmp	r2, r3
 8004792:	d1ec      	bne.n	800476e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004794:	4b27      	ldr	r3, [pc, #156]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2207      	movs	r2, #7
 800479a:	4013      	ands	r3, r2
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d21e      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2207      	movs	r2, #7
 80047a8:	4393      	bics	r3, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047b4:	f7fe fd8a 	bl	80032cc <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047bc:	e009      	b.n	80047d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047be:	f7fe fd85 	bl	80032cc <HAL_GetTick>
 80047c2:	0002      	movs	r2, r0
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_RCC_ClockConfig+0x1f4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e02c      	b.n	800482c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80047d2:	4b18      	ldr	r3, [pc, #96]	; (8004834 <HAL_RCC_ClockConfig+0x1f0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2207      	movs	r2, #7
 80047d8:	4013      	ands	r3, r2
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d1ee      	bne.n	80047be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2204      	movs	r2, #4
 80047e6:	4013      	ands	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047ea:	4b14      	ldr	r3, [pc, #80]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4a15      	ldr	r2, [pc, #84]	; (8004844 <HAL_RCC_ClockConfig+0x200>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	4b10      	ldr	r3, [pc, #64]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047fe:	f000 f829 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8004802:	0001      	movs	r1, r0
 8004804:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCC_ClockConfig+0x1f8>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	220f      	movs	r2, #15
 800480c:	401a      	ands	r2, r3
 800480e:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <HAL_RCC_ClockConfig+0x204>)
 8004810:	0092      	lsls	r2, r2, #2
 8004812:	58d3      	ldr	r3, [r2, r3]
 8004814:	221f      	movs	r2, #31
 8004816:	4013      	ands	r3, r2
 8004818:	000a      	movs	r2, r1
 800481a:	40da      	lsrs	r2, r3
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x208>)
 800481e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x20c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0018      	movs	r0, r3
 8004826:	f7fe fcf5 	bl	8003214 <HAL_InitTick>
 800482a:	0003      	movs	r3, r0
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b004      	add	sp, #16
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40022000 	.word	0x40022000
 8004838:	00001388 	.word	0x00001388
 800483c:	40021000 	.word	0x40021000
 8004840:	fffff0ff 	.word	0xfffff0ff
 8004844:	ffff8fff 	.word	0xffff8fff
 8004848:	0800844c 	.word	0x0800844c
 800484c:	20000010 	.word	0x20000010
 8004850:	20000014 	.word	0x20000014

08004854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2238      	movs	r2, #56	; 0x38
 8004860:	4013      	ands	r3, r2
 8004862:	d10f      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004864:	4b39      	ldr	r3, [pc, #228]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0adb      	lsrs	r3, r3, #11
 800486a:	2207      	movs	r2, #7
 800486c:	4013      	ands	r3, r2
 800486e:	2201      	movs	r2, #1
 8004870:	409a      	lsls	r2, r3
 8004872:	0013      	movs	r3, r2
 8004874:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004876:	6839      	ldr	r1, [r7, #0]
 8004878:	4835      	ldr	r0, [pc, #212]	; (8004950 <HAL_RCC_GetSysClockFreq+0xfc>)
 800487a:	f7fb fc41 	bl	8000100 <__udivsi3>
 800487e:	0003      	movs	r3, r0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	e05d      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004884:	4b31      	ldr	r3, [pc, #196]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2238      	movs	r2, #56	; 0x38
 800488a:	4013      	ands	r3, r2
 800488c:	2b08      	cmp	r3, #8
 800488e:	d102      	bne.n	8004896 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004890:	4b30      	ldr	r3, [pc, #192]	; (8004954 <HAL_RCC_GetSysClockFreq+0x100>)
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e054      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004896:	4b2d      	ldr	r3, [pc, #180]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2238      	movs	r2, #56	; 0x38
 800489c:	4013      	ands	r3, r2
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d138      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2203      	movs	r2, #3
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	2207      	movs	r2, #7
 80048b4:	4013      	ands	r3, r2
 80048b6:	3301      	adds	r3, #1
 80048b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d10d      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	4824      	ldr	r0, [pc, #144]	; (8004954 <HAL_RCC_GetSysClockFreq+0x100>)
 80048c4:	f7fb fc1c 	bl	8000100 <__udivsi3>
 80048c8:	0003      	movs	r3, r0
 80048ca:	0019      	movs	r1, r3
 80048cc:	4b1f      	ldr	r3, [pc, #124]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	227f      	movs	r2, #127	; 0x7f
 80048d4:	4013      	ands	r3, r2
 80048d6:	434b      	muls	r3, r1
 80048d8:	617b      	str	r3, [r7, #20]
        break;
 80048da:	e00d      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	481c      	ldr	r0, [pc, #112]	; (8004950 <HAL_RCC_GetSysClockFreq+0xfc>)
 80048e0:	f7fb fc0e 	bl	8000100 <__udivsi3>
 80048e4:	0003      	movs	r3, r0
 80048e6:	0019      	movs	r1, r3
 80048e8:	4b18      	ldr	r3, [pc, #96]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	0a1b      	lsrs	r3, r3, #8
 80048ee:	227f      	movs	r2, #127	; 0x7f
 80048f0:	4013      	ands	r3, r2
 80048f2:	434b      	muls	r3, r1
 80048f4:	617b      	str	r3, [r7, #20]
        break;
 80048f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	0f5b      	lsrs	r3, r3, #29
 80048fe:	2207      	movs	r2, #7
 8004900:	4013      	ands	r3, r2
 8004902:	3301      	adds	r3, #1
 8004904:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	6978      	ldr	r0, [r7, #20]
 800490a:	f7fb fbf9 	bl	8000100 <__udivsi3>
 800490e:	0003      	movs	r3, r0
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e015      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004914:	4b0d      	ldr	r3, [pc, #52]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2238      	movs	r2, #56	; 0x38
 800491a:	4013      	ands	r3, r2
 800491c:	2b20      	cmp	r3, #32
 800491e:	d103      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e00b      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <HAL_RCC_GetSysClockFreq+0xf8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2238      	movs	r2, #56	; 0x38
 800492e:	4013      	ands	r3, r2
 8004930:	2b18      	cmp	r3, #24
 8004932:	d103      	bne.n	800493c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004934:	23fa      	movs	r3, #250	; 0xfa
 8004936:	01db      	lsls	r3, r3, #7
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	e001      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004940:	693b      	ldr	r3, [r7, #16]
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b006      	add	sp, #24
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	40021000 	.word	0x40021000
 8004950:	00f42400 	.word	0x00f42400
 8004954:	007a1200 	.word	0x007a1200

08004958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800495c:	4b02      	ldr	r3, [pc, #8]	; (8004968 <HAL_RCC_GetHCLKFreq+0x10>)
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	0018      	movs	r0, r3
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	20000010 	.word	0x20000010

0800496c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800496c:	b5b0      	push	{r4, r5, r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004970:	f7ff fff2 	bl	8004958 <HAL_RCC_GetHCLKFreq>
 8004974:	0004      	movs	r4, r0
 8004976:	f7ff fb49 	bl	800400c <LL_RCC_GetAPB1Prescaler>
 800497a:	0003      	movs	r3, r0
 800497c:	0b1a      	lsrs	r2, r3, #12
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004980:	0092      	lsls	r2, r2, #2
 8004982:	58d3      	ldr	r3, [r2, r3]
 8004984:	221f      	movs	r2, #31
 8004986:	4013      	ands	r3, r2
 8004988:	40dc      	lsrs	r4, r3
 800498a:	0023      	movs	r3, r4
}
 800498c:	0018      	movs	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	bdb0      	pop	{r4, r5, r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	0800848c 	.word	0x0800848c

08004998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80049a0:	2313      	movs	r3, #19
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049a8:	2312      	movs	r3, #18
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	4013      	ands	r3, r2
 80049ba:	d100      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80049bc:	e0a3      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049be:	2011      	movs	r0, #17
 80049c0:	183b      	adds	r3, r7, r0
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c6:	4b86      	ldr	r3, [pc, #536]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	055b      	lsls	r3, r3, #21
 80049ce:	4013      	ands	r3, r2
 80049d0:	d110      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d2:	4b83      	ldr	r3, [pc, #524]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d6:	4b82      	ldr	r3, [pc, #520]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	0549      	lsls	r1, r1, #21
 80049dc:	430a      	orrs	r2, r1
 80049de:	63da      	str	r2, [r3, #60]	; 0x3c
 80049e0:	4b7f      	ldr	r3, [pc, #508]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	055b      	lsls	r3, r3, #21
 80049e8:	4013      	ands	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
 80049ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ee:	183b      	adds	r3, r7, r0
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049f4:	4b7b      	ldr	r3, [pc, #492]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80049fa:	2180      	movs	r1, #128	; 0x80
 80049fc:	0049      	lsls	r1, r1, #1
 80049fe:	430a      	orrs	r2, r1
 8004a00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a02:	f7fe fc63 	bl	80032cc <HAL_GetTick>
 8004a06:	0003      	movs	r3, r0
 8004a08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0c:	f7fe fc5e 	bl	80032cc <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d904      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004a1a:	2313      	movs	r3, #19
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	2203      	movs	r2, #3
 8004a20:	701a      	strb	r2, [r3, #0]
        break;
 8004a22:	e005      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a24:	4b6f      	ldr	r3, [pc, #444]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d0ed      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004a30:	2313      	movs	r3, #19
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d154      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a3a:	4b69      	ldr	r3, [pc, #420]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a3e:	23c0      	movs	r3, #192	; 0xc0
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d019      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d014      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a56:	4b62      	ldr	r3, [pc, #392]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a5a:	4a63      	ldr	r2, [pc, #396]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a60:	4b5f      	ldr	r3, [pc, #380]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a64:	4b5e      	ldr	r3, [pc, #376]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a66:	2180      	movs	r1, #128	; 0x80
 8004a68:	0249      	lsls	r1, r1, #9
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a6e:	4b5c      	ldr	r3, [pc, #368]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a72:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a74:	495d      	ldr	r1, [pc, #372]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a7a:	4b59      	ldr	r3, [pc, #356]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4013      	ands	r3, r2
 8004a86:	d016      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fe fc20 	bl	80032cc <HAL_GetTick>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a90:	e00c      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fe fc1b 	bl	80032cc <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	4a54      	ldr	r2, [pc, #336]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d904      	bls.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004aa2:	2313      	movs	r3, #19
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	701a      	strb	r2, [r3, #0]
            break;
 8004aaa:	e004      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aac:	4b4c      	ldr	r3, [pc, #304]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d0ed      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004ab6:	2313      	movs	r3, #19
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ac0:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac4:	4a48      	ldr	r2, [pc, #288]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ad4:	e00c      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ad6:	2312      	movs	r3, #18
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2213      	movs	r2, #19
 8004adc:	18ba      	adds	r2, r7, r2
 8004ade:	7812      	ldrb	r2, [r2, #0]
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e005      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	2312      	movs	r3, #18
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	2213      	movs	r2, #19
 8004aea:	18ba      	adds	r2, r7, r2
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004af0:	2311      	movs	r3, #17
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b39      	ldr	r3, [pc, #228]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afe:	4b38      	ldr	r3, [pc, #224]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b00:	493c      	ldr	r1, [pc, #240]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b10:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b14:	2203      	movs	r2, #3
 8004b16:	4393      	bics	r3, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b2e:	4b2c      	ldr	r3, [pc, #176]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	220c      	movs	r2, #12
 8004b34:	4393      	bics	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2220      	movs	r2, #32
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b4c:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b50:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d015      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	0899      	lsrs	r1, r3, #2
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695a      	ldr	r2, [r3, #20]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	05db      	lsls	r3, r3, #23
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d106      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	0249      	lsls	r1, r1, #9
 8004b94:	430a      	orrs	r2, r1
 8004b96:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d016      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	2380      	movs	r3, #128	; 0x80
 8004bbe:	01db      	lsls	r3, r3, #7
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004bca:	2180      	movs	r1, #128	; 0x80
 8004bcc:	0249      	lsls	r1, r1, #9
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004bd2:	2312      	movs	r3, #18
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
}
 8004bd8:	0018      	movs	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40007000 	.word	0x40007000
 8004be8:	fffffcff 	.word	0xfffffcff
 8004bec:	fffeffff 	.word	0xfffeffff
 8004bf0:	00001388 	.word	0x00001388
 8004bf4:	efffffff 	.word	0xefffffff
 8004bf8:	ffffcfff 	.word	0xffffcfff
 8004bfc:	ffff3fff 	.word	0xffff3fff

08004c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e04a      	b.n	8004ca8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	223d      	movs	r2, #61	; 0x3d
 8004c16:	5c9b      	ldrb	r3, [r3, r2]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	223c      	movs	r2, #60	; 0x3c
 8004c22:	2100      	movs	r1, #0
 8004c24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7fd fff3 	bl	8002c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	223d      	movs	r2, #61	; 0x3d
 8004c32:	2102      	movs	r1, #2
 8004c34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	0019      	movs	r1, r3
 8004c40:	0010      	movs	r0, r2
 8004c42:	f000 fefb 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2248      	movs	r2, #72	; 0x48
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	223e      	movs	r2, #62	; 0x3e
 8004c52:	2101      	movs	r1, #1
 8004c54:	5499      	strb	r1, [r3, r2]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	223f      	movs	r2, #63	; 0x3f
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	5499      	strb	r1, [r3, r2]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2240      	movs	r2, #64	; 0x40
 8004c62:	2101      	movs	r1, #1
 8004c64:	5499      	strb	r1, [r3, r2]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2241      	movs	r2, #65	; 0x41
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	5499      	strb	r1, [r3, r2]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2242      	movs	r2, #66	; 0x42
 8004c72:	2101      	movs	r1, #1
 8004c74:	5499      	strb	r1, [r3, r2]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2243      	movs	r2, #67	; 0x43
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2244      	movs	r2, #68	; 0x44
 8004c82:	2101      	movs	r1, #1
 8004c84:	5499      	strb	r1, [r3, r2]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2245      	movs	r2, #69	; 0x45
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	5499      	strb	r1, [r3, r2]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2246      	movs	r2, #70	; 0x46
 8004c92:	2101      	movs	r1, #1
 8004c94:	5499      	strb	r1, [r3, r2]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2247      	movs	r2, #71	; 0x47
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	223d      	movs	r2, #61	; 0x3d
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e04a      	b.n	8004d58 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	223d      	movs	r2, #61	; 0x3d
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	223c      	movs	r2, #60	; 0x3c
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 f841 	bl	8004d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	223d      	movs	r2, #61	; 0x3d
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	3304      	adds	r3, #4
 8004cee:	0019      	movs	r1, r3
 8004cf0:	0010      	movs	r0, r2
 8004cf2:	f000 fea3 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2248      	movs	r2, #72	; 0x48
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	223e      	movs	r2, #62	; 0x3e
 8004d02:	2101      	movs	r1, #1
 8004d04:	5499      	strb	r1, [r3, r2]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223f      	movs	r2, #63	; 0x3f
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2241      	movs	r2, #65	; 0x41
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2242      	movs	r2, #66	; 0x42
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2243      	movs	r2, #67	; 0x43
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2244      	movs	r2, #68	; 0x44
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2245      	movs	r2, #69	; 0x45
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2246      	movs	r2, #70	; 0x46
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2247      	movs	r2, #71	; 0x47
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	223d      	movs	r2, #61	; 0x3d
 8004d52:	2101      	movs	r1, #1
 8004d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	0018      	movs	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x22>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	223e      	movs	r2, #62	; 0x3e
 8004d84:	5c9b      	ldrb	r3, [r3, r2]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	1e5a      	subs	r2, r3, #1
 8004d8c:	4193      	sbcs	r3, r2
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	e037      	b.n	8004e02 <HAL_TIM_PWM_Start+0x92>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d108      	bne.n	8004daa <HAL_TIM_PWM_Start+0x3a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	223f      	movs	r2, #63	; 0x3f
 8004d9c:	5c9b      	ldrb	r3, [r3, r2]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	1e5a      	subs	r2, r3, #1
 8004da4:	4193      	sbcs	r3, r2
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e02b      	b.n	8004e02 <HAL_TIM_PWM_Start+0x92>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d108      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x52>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2240      	movs	r2, #64	; 0x40
 8004db4:	5c9b      	ldrb	r3, [r3, r2]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	1e5a      	subs	r2, r3, #1
 8004dbc:	4193      	sbcs	r3, r2
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e01f      	b.n	8004e02 <HAL_TIM_PWM_Start+0x92>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b0c      	cmp	r3, #12
 8004dc6:	d108      	bne.n	8004dda <HAL_TIM_PWM_Start+0x6a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2241      	movs	r2, #65	; 0x41
 8004dcc:	5c9b      	ldrb	r3, [r3, r2]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	1e5a      	subs	r2, r3, #1
 8004dd4:	4193      	sbcs	r3, r2
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	e013      	b.n	8004e02 <HAL_TIM_PWM_Start+0x92>
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d108      	bne.n	8004df2 <HAL_TIM_PWM_Start+0x82>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2242      	movs	r2, #66	; 0x42
 8004de4:	5c9b      	ldrb	r3, [r3, r2]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	1e5a      	subs	r2, r3, #1
 8004dec:	4193      	sbcs	r3, r2
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	e007      	b.n	8004e02 <HAL_TIM_PWM_Start+0x92>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2243      	movs	r2, #67	; 0x43
 8004df6:	5c9b      	ldrb	r3, [r3, r2]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	1e5a      	subs	r2, r3, #1
 8004dfe:	4193      	sbcs	r3, r2
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e085      	b.n	8004f16 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xaa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	223e      	movs	r2, #62	; 0x3e
 8004e14:	2102      	movs	r1, #2
 8004e16:	5499      	strb	r1, [r3, r2]
 8004e18:	e023      	b.n	8004e62 <HAL_TIM_PWM_Start+0xf2>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0xba>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	223f      	movs	r2, #63	; 0x3f
 8004e24:	2102      	movs	r1, #2
 8004e26:	5499      	strb	r1, [r3, r2]
 8004e28:	e01b      	b.n	8004e62 <HAL_TIM_PWM_Start+0xf2>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xca>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	2102      	movs	r1, #2
 8004e36:	5499      	strb	r1, [r3, r2]
 8004e38:	e013      	b.n	8004e62 <HAL_TIM_PWM_Start+0xf2>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xda>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2241      	movs	r2, #65	; 0x41
 8004e44:	2102      	movs	r1, #2
 8004e46:	5499      	strb	r1, [r3, r2]
 8004e48:	e00b      	b.n	8004e62 <HAL_TIM_PWM_Start+0xf2>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0xea>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2242      	movs	r2, #66	; 0x42
 8004e54:	2102      	movs	r1, #2
 8004e56:	5499      	strb	r1, [r3, r2]
 8004e58:	e003      	b.n	8004e62 <HAL_TIM_PWM_Start+0xf2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2243      	movs	r2, #67	; 0x43
 8004e5e:	2102      	movs	r1, #2
 8004e60:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f001 fadc 	bl	8006428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <HAL_TIM_PWM_Start+0x1b0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00e      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x128>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <HAL_TIM_PWM_Start+0x1b4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d009      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x128>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <HAL_TIM_PWM_Start+0x1b8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d004      	beq.n	8004e98 <HAL_TIM_PWM_Start+0x128>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <HAL_TIM_PWM_Start+0x1bc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_PWM_Start+0x12c>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_PWM_Start+0x12e>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0209      	lsls	r1, r1, #8
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <HAL_TIM_PWM_Start+0x1b0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x162>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <HAL_TIM_PWM_Start+0x1c0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_TIM_PWM_Start+0x162>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <HAL_TIM_PWM_Start+0x1b4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d116      	bne.n	8004f00 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_TIM_PWM_Start+0x1c4>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b06      	cmp	r3, #6
 8004ee2:	d016      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x1a2>
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	025b      	lsls	r3, r3, #9
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d011      	beq.n	8004f12 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2101      	movs	r1, #1
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	e008      	b.n	8004f12 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f12:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b004      	add	sp, #16
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40000400 	.word	0x40000400
 8004f34:	00010007 	.word	0x00010007

08004f38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e04a      	b.n	8004fe0 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	223d      	movs	r2, #61	; 0x3d
 8004f4e:	5c9b      	ldrb	r3, [r3, r2]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d107      	bne.n	8004f66 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	223c      	movs	r2, #60	; 0x3c
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f7fd fdc9 	bl	8002af8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	223d      	movs	r2, #61	; 0x3d
 8004f6a:	2102      	movs	r1, #2
 8004f6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	0019      	movs	r1, r3
 8004f78:	0010      	movs	r0, r2
 8004f7a:	f000 fd5f 	bl	8005a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2248      	movs	r2, #72	; 0x48
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	223e      	movs	r2, #62	; 0x3e
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	223f      	movs	r2, #63	; 0x3f
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2240      	movs	r2, #64	; 0x40
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2241      	movs	r2, #65	; 0x41
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2242      	movs	r2, #66	; 0x42
 8004faa:	2101      	movs	r1, #1
 8004fac:	5499      	strb	r1, [r3, r2]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2243      	movs	r2, #67	; 0x43
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2244      	movs	r2, #68	; 0x44
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2245      	movs	r2, #69	; 0x45
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2246      	movs	r2, #70	; 0x46
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2247      	movs	r2, #71	; 0x47
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	223d      	movs	r2, #61	; 0x3d
 8004fda:	2101      	movs	r1, #1
 8004fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	230f      	movs	r3, #15
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d104      	bne.n	800500a <HAL_TIM_IC_Start_IT+0x22>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	223e      	movs	r2, #62	; 0x3e
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e023      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x6a>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b04      	cmp	r3, #4
 800500e:	d104      	bne.n	800501a <HAL_TIM_IC_Start_IT+0x32>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	223f      	movs	r2, #63	; 0x3f
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e01b      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x6a>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d104      	bne.n	800502a <HAL_TIM_IC_Start_IT+0x42>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	5c9b      	ldrb	r3, [r3, r2]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	e013      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x6a>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d104      	bne.n	800503a <HAL_TIM_IC_Start_IT+0x52>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2241      	movs	r2, #65	; 0x41
 8005034:	5c9b      	ldrb	r3, [r3, r2]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e00b      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x6a>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b10      	cmp	r3, #16
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0x62>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2242      	movs	r2, #66	; 0x42
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e003      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x6a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2243      	movs	r2, #67	; 0x43
 800504e:	5c9b      	ldrb	r3, [r3, r2]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	220e      	movs	r2, #14
 8005054:	18ba      	adds	r2, r7, r2
 8005056:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_TIM_IC_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2244      	movs	r2, #68	; 0x44
 8005062:	5c9b      	ldrb	r3, [r3, r2]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e013      	b.n	8005090 <HAL_TIM_IC_Start_IT+0xa8>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b04      	cmp	r3, #4
 800506c:	d104      	bne.n	8005078 <HAL_TIM_IC_Start_IT+0x90>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2245      	movs	r2, #69	; 0x45
 8005072:	5c9b      	ldrb	r3, [r3, r2]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e00b      	b.n	8005090 <HAL_TIM_IC_Start_IT+0xa8>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b08      	cmp	r3, #8
 800507c:	d104      	bne.n	8005088 <HAL_TIM_IC_Start_IT+0xa0>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2246      	movs	r2, #70	; 0x46
 8005082:	5c9b      	ldrb	r3, [r3, r2]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	e003      	b.n	8005090 <HAL_TIM_IC_Start_IT+0xa8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2247      	movs	r2, #71	; 0x47
 800508c:	5c9b      	ldrb	r3, [r3, r2]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	210d      	movs	r1, #13
 8005092:	187a      	adds	r2, r7, r1
 8005094:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005096:	230e      	movs	r3, #14
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d103      	bne.n	80050a8 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d001      	beq.n	80050ac <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e0c2      	b.n	8005232 <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_TIM_IC_Start_IT+0xd4>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	223e      	movs	r2, #62	; 0x3e
 80050b6:	2102      	movs	r1, #2
 80050b8:	5499      	strb	r1, [r3, r2]
 80050ba:	e023      	b.n	8005104 <HAL_TIM_IC_Start_IT+0x11c>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_IC_Start_IT+0xe4>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	223f      	movs	r2, #63	; 0x3f
 80050c6:	2102      	movs	r1, #2
 80050c8:	5499      	strb	r1, [r3, r2]
 80050ca:	e01b      	b.n	8005104 <HAL_TIM_IC_Start_IT+0x11c>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d104      	bne.n	80050dc <HAL_TIM_IC_Start_IT+0xf4>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2240      	movs	r2, #64	; 0x40
 80050d6:	2102      	movs	r1, #2
 80050d8:	5499      	strb	r1, [r3, r2]
 80050da:	e013      	b.n	8005104 <HAL_TIM_IC_Start_IT+0x11c>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d104      	bne.n	80050ec <HAL_TIM_IC_Start_IT+0x104>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2241      	movs	r2, #65	; 0x41
 80050e6:	2102      	movs	r1, #2
 80050e8:	5499      	strb	r1, [r3, r2]
 80050ea:	e00b      	b.n	8005104 <HAL_TIM_IC_Start_IT+0x11c>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d104      	bne.n	80050fc <HAL_TIM_IC_Start_IT+0x114>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2242      	movs	r2, #66	; 0x42
 80050f6:	2102      	movs	r1, #2
 80050f8:	5499      	strb	r1, [r3, r2]
 80050fa:	e003      	b.n	8005104 <HAL_TIM_IC_Start_IT+0x11c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2243      	movs	r2, #67	; 0x43
 8005100:	2102      	movs	r1, #2
 8005102:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d104      	bne.n	8005114 <HAL_TIM_IC_Start_IT+0x12c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2244      	movs	r2, #68	; 0x44
 800510e:	2102      	movs	r1, #2
 8005110:	5499      	strb	r1, [r3, r2]
 8005112:	e013      	b.n	800513c <HAL_TIM_IC_Start_IT+0x154>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b04      	cmp	r3, #4
 8005118:	d104      	bne.n	8005124 <HAL_TIM_IC_Start_IT+0x13c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2245      	movs	r2, #69	; 0x45
 800511e:	2102      	movs	r1, #2
 8005120:	5499      	strb	r1, [r3, r2]
 8005122:	e00b      	b.n	800513c <HAL_TIM_IC_Start_IT+0x154>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b08      	cmp	r3, #8
 8005128:	d104      	bne.n	8005134 <HAL_TIM_IC_Start_IT+0x14c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2246      	movs	r2, #70	; 0x46
 800512e:	2102      	movs	r1, #2
 8005130:	5499      	strb	r1, [r3, r2]
 8005132:	e003      	b.n	800513c <HAL_TIM_IC_Start_IT+0x154>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2247      	movs	r2, #71	; 0x47
 8005138:	2102      	movs	r1, #2
 800513a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d02a      	beq.n	8005198 <HAL_TIM_IC_Start_IT+0x1b0>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b0c      	cmp	r3, #12
 8005146:	d830      	bhi.n	80051aa <HAL_TIM_IC_Start_IT+0x1c2>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b08      	cmp	r3, #8
 800514c:	d01b      	beq.n	8005186 <HAL_TIM_IC_Start_IT+0x19e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d82a      	bhi.n	80051aa <HAL_TIM_IC_Start_IT+0x1c2>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IC_Start_IT+0x17a>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d009      	beq.n	8005174 <HAL_TIM_IC_Start_IT+0x18c>
 8005160:	e023      	b.n	80051aa <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2102      	movs	r1, #2
 800516e:	430a      	orrs	r2, r1
 8005170:	60da      	str	r2, [r3, #12]
      break;
 8005172:	e01f      	b.n	80051b4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2104      	movs	r1, #4
 8005180:	430a      	orrs	r2, r1
 8005182:	60da      	str	r2, [r3, #12]
      break;
 8005184:	e016      	b.n	80051b4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2108      	movs	r1, #8
 8005192:	430a      	orrs	r2, r1
 8005194:	60da      	str	r2, [r3, #12]
      break;
 8005196:	e00d      	b.n	80051b4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2110      	movs	r1, #16
 80051a4:	430a      	orrs	r2, r1
 80051a6:	60da      	str	r2, [r3, #12]
      break;
 80051a8:	e004      	b.n	80051b4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 80051aa:	230f      	movs	r3, #15
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	2201      	movs	r2, #1
 80051b0:	701a      	strb	r2, [r3, #0]
      break;
 80051b2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80051b4:	230f      	movs	r3, #15
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d136      	bne.n	800522c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6839      	ldr	r1, [r7, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	0018      	movs	r0, r3
 80051c8:	f001 f92e 	bl	8006428 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1a      	ldr	r2, [pc, #104]	; (800523c <HAL_TIM_IC_Start_IT+0x254>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIM_IC_Start_IT+0x202>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a19      	ldr	r2, [pc, #100]	; (8005240 <HAL_TIM_IC_Start_IT+0x258>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIM_IC_Start_IT+0x202>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a17      	ldr	r2, [pc, #92]	; (8005244 <HAL_TIM_IC_Start_IT+0x25c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d116      	bne.n	8005218 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <HAL_TIM_IC_Start_IT+0x260>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d016      	beq.n	800522a <HAL_TIM_IC_Start_IT+0x242>
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	025b      	lsls	r3, r3, #9
 8005202:	429a      	cmp	r2, r3
 8005204:	d011      	beq.n	800522a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2101      	movs	r1, #1
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005216:	e008      	b.n	800522a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2101      	movs	r1, #1
 8005224:	430a      	orrs	r2, r1
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e000      	b.n	800522c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800522c:	230f      	movs	r3, #15
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	781b      	ldrb	r3, [r3, #0]
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b004      	add	sp, #16
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	40012c00 	.word	0x40012c00
 8005240:	40000400 	.word	0x40000400
 8005244:	40014000 	.word	0x40014000
 8005248:	00010007 	.word	0x00010007

0800524c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d124      	bne.n	80052ac <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2202      	movs	r2, #2
 800526a:	4013      	ands	r3, r2
 800526c:	2b02      	cmp	r3, #2
 800526e:	d11d      	bne.n	80052ac <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2203      	movs	r2, #3
 8005276:	4252      	negs	r2, r2
 8005278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2203      	movs	r2, #3
 8005288:	4013      	ands	r3, r2
 800528a:	d004      	beq.n	8005296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	0018      	movs	r0, r3
 8005290:	f7fc fb9c 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8005294:	e007      	b.n	80052a6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	0018      	movs	r0, r3
 800529a:	f000 fbb7 	bl	8005a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 fbbb 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2204      	movs	r2, #4
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d125      	bne.n	8005306 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2204      	movs	r2, #4
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d11e      	bne.n	8005306 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2205      	movs	r2, #5
 80052ce:	4252      	negs	r2, r2
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2202      	movs	r2, #2
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	23c0      	movs	r3, #192	; 0xc0
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4013      	ands	r3, r2
 80052e4:	d004      	beq.n	80052f0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f7fc fb6f 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 80052ee:	e007      	b.n	8005300 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f000 fb8a 	bl	8005a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	0018      	movs	r0, r3
 80052fc:	f000 fb8e 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	2208      	movs	r2, #8
 800530e:	4013      	ands	r3, r2
 8005310:	2b08      	cmp	r3, #8
 8005312:	d124      	bne.n	800535e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2208      	movs	r2, #8
 800531c:	4013      	ands	r3, r2
 800531e:	2b08      	cmp	r3, #8
 8005320:	d11d      	bne.n	800535e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2209      	movs	r2, #9
 8005328:	4252      	negs	r2, r2
 800532a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2204      	movs	r2, #4
 8005330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	2203      	movs	r2, #3
 800533a:	4013      	ands	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0018      	movs	r0, r3
 8005342:	f7fc fb43 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8005346:	e007      	b.n	8005358 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	0018      	movs	r0, r3
 800534c:	f000 fb5e 	bl	8005a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fb62 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2210      	movs	r2, #16
 8005366:	4013      	ands	r3, r2
 8005368:	2b10      	cmp	r3, #16
 800536a:	d125      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2210      	movs	r2, #16
 8005374:	4013      	ands	r3, r2
 8005376:	2b10      	cmp	r3, #16
 8005378:	d11e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2211      	movs	r2, #17
 8005380:	4252      	negs	r2, r2
 8005382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2208      	movs	r2, #8
 8005388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	23c0      	movs	r3, #192	; 0xc0
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4013      	ands	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0018      	movs	r0, r3
 800539c:	f7fc fb16 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 80053a0:	e007      	b.n	80053b2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	0018      	movs	r0, r3
 80053a6:	f000 fb31 	bl	8005a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0018      	movs	r0, r3
 80053ae:	f000 fb35 	bl	8005a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2201      	movs	r2, #1
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d10f      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	4252      	negs	r2, r2
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fc fd8d 	bl	8001f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2280      	movs	r2, #128	; 0x80
 80053ee:	4013      	ands	r3, r2
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d10f      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d108      	bne.n	8005414 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2281      	movs	r2, #129	; 0x81
 8005408:	4252      	negs	r2, r2
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0018      	movs	r0, r3
 8005410:	f001 f89e 	bl	8006550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	401a      	ands	r2, r3
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	429a      	cmp	r2, r3
 8005426:	d10e      	bne.n	8005446 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2280      	movs	r2, #128	; 0x80
 8005430:	4013      	ands	r3, r2
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d107      	bne.n	8005446 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <HAL_TIM_IRQHandler+0x260>)
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0018      	movs	r0, r3
 8005442:	f001 f88d 	bl	8006560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	4013      	ands	r3, r2
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d10f      	bne.n	8005474 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	4013      	ands	r3, r2
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d108      	bne.n	8005474 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2241      	movs	r2, #65	; 0x41
 8005468:	4252      	negs	r2, r2
 800546a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	0018      	movs	r0, r3
 8005470:	f000 fadc 	bl	8005a2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2220      	movs	r2, #32
 800547c:	4013      	ands	r3, r2
 800547e:	2b20      	cmp	r3, #32
 8005480:	d10f      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	4013      	ands	r3, r2
 800548c:	2b20      	cmp	r3, #32
 800548e:	d108      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2221      	movs	r2, #33	; 0x21
 8005496:	4252      	negs	r2, r2
 8005498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	0018      	movs	r0, r3
 800549e:	f001 f84f 	bl	8006540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b002      	add	sp, #8
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	fffffeff 	.word	0xfffffeff

080054b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054bc:	2317      	movs	r3, #23
 80054be:	18fb      	adds	r3, r7, r3
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	223c      	movs	r2, #60	; 0x3c
 80054c8:	5c9b      	ldrb	r3, [r3, r2]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_IC_ConfigChannel+0x22>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e08c      	b.n	80055ec <HAL_TIM_IC_ConfigChannel+0x13c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	223c      	movs	r2, #60	; 0x3c
 80054d6:	2101      	movs	r1, #1
 80054d8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11b      	bne.n	8005518 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6819      	ldr	r1, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f000 fdde 	bl	80060b0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	210c      	movs	r1, #12
 8005500:	438a      	bics	r2, r1
 8005502:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	619a      	str	r2, [r3, #24]
 8005516:	e062      	b.n	80055de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d11c      	bne.n	8005558 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f000 fe45 	bl	80061bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699a      	ldr	r2, [r3, #24]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	492d      	ldr	r1, [pc, #180]	; (80055f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800553e:	400a      	ands	r2, r1
 8005540:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6999      	ldr	r1, [r3, #24]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	619a      	str	r2, [r3, #24]
 8005556:	e042      	b.n	80055de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2b08      	cmp	r3, #8
 800555c:	d11b      	bne.n	8005596 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6818      	ldr	r0, [r3, #0]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6819      	ldr	r1, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f000 fe99 	bl	80062a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	210c      	movs	r1, #12
 800557e:	438a      	bics	r2, r1
 8005580:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69d9      	ldr	r1, [r3, #28]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	61da      	str	r2, [r3, #28]
 8005594:	e023      	b.n	80055de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d11c      	bne.n	80055d6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f000 feba 	bl	8006324 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69da      	ldr	r2, [r3, #28]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	490e      	ldr	r1, [pc, #56]	; (80055f4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80055bc:	400a      	ands	r2, r1
 80055be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69d9      	ldr	r1, [r3, #28]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	61da      	str	r2, [r3, #28]
 80055d4:	e003      	b.n	80055de <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80055d6:	2317      	movs	r3, #23
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	223c      	movs	r2, #60	; 0x3c
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

  return status;
 80055e6:	2317      	movs	r3, #23
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b006      	add	sp, #24
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	fffff3ff 	.word	0xfffff3ff

080055f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005604:	2317      	movs	r3, #23
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	223c      	movs	r2, #60	; 0x3c
 8005610:	5c9b      	ldrb	r3, [r3, r2]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005616:	2302      	movs	r3, #2
 8005618:	e0e5      	b.n	80057e6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	223c      	movs	r2, #60	; 0x3c
 800561e:	2101      	movs	r1, #1
 8005620:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b14      	cmp	r3, #20
 8005626:	d900      	bls.n	800562a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005628:	e0d1      	b.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	009a      	lsls	r2, r3, #2
 800562e:	4b70      	ldr	r3, [pc, #448]	; (80057f0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005630:	18d3      	adds	r3, r2, r3
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f000 fa72 	bl	8005b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2108      	movs	r1, #8
 8005650:	430a      	orrs	r2, r1
 8005652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2104      	movs	r1, #4
 8005660:	438a      	bics	r2, r1
 8005662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6999      	ldr	r1, [r3, #24]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	619a      	str	r2, [r3, #24]
      break;
 8005676:	e0af      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	0011      	movs	r1, r2
 8005680:	0018      	movs	r0, r3
 8005682:	f000 fadb 	bl	8005c3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	0109      	lsls	r1, r1, #4
 8005694:	430a      	orrs	r2, r1
 8005696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4954      	ldr	r1, [pc, #336]	; (80057f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6999      	ldr	r1, [r3, #24]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	619a      	str	r2, [r3, #24]
      break;
 80056bc:	e08c      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0011      	movs	r1, r2
 80056c6:	0018      	movs	r0, r3
 80056c8:	f000 fb3c 	bl	8005d44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2108      	movs	r1, #8
 80056d8:	430a      	orrs	r2, r1
 80056da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2104      	movs	r1, #4
 80056e8:	438a      	bics	r2, r1
 80056ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69d9      	ldr	r1, [r3, #28]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	61da      	str	r2, [r3, #28]
      break;
 80056fe:	e06b      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	0011      	movs	r1, r2
 8005708:	0018      	movs	r0, r3
 800570a:	f000 fba3 	bl	8005e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	0109      	lsls	r1, r1, #4
 800571c:	430a      	orrs	r2, r1
 800571e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4932      	ldr	r1, [pc, #200]	; (80057f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800572c:	400a      	ands	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	69d9      	ldr	r1, [r3, #28]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	021a      	lsls	r2, r3, #8
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	61da      	str	r2, [r3, #28]
      break;
 8005744:	e048      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	0011      	movs	r1, r2
 800574e:	0018      	movs	r0, r3
 8005750:	f000 fbea 	bl	8005f28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2108      	movs	r1, #8
 8005760:	430a      	orrs	r2, r1
 8005762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2104      	movs	r1, #4
 8005770:	438a      	bics	r2, r1
 8005772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005786:	e027      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	0011      	movs	r1, r2
 8005790:	0018      	movs	r0, r3
 8005792:	f000 fc29 	bl	8005fe8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	0109      	lsls	r1, r1, #4
 80057a4:	430a      	orrs	r2, r1
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4910      	ldr	r1, [pc, #64]	; (80057f4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	021a      	lsls	r2, r3, #8
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057cc:	e004      	b.n	80057d8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80057ce:	2317      	movs	r3, #23
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
      break;
 80057d6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	223c      	movs	r2, #60	; 0x3c
 80057dc:	2100      	movs	r1, #0
 80057de:	5499      	strb	r1, [r3, r2]

  return status;
 80057e0:	2317      	movs	r3, #23
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	781b      	ldrb	r3, [r3, #0]
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b006      	add	sp, #24
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	080084ac 	.word	0x080084ac
 80057f4:	fffffbff 	.word	0xfffffbff

080057f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005802:	230f      	movs	r3, #15
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	223c      	movs	r2, #60	; 0x3c
 800580e:	5c9b      	ldrb	r3, [r3, r2]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_TIM_ConfigClockSource+0x20>
 8005814:	2302      	movs	r3, #2
 8005816:	e0bc      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x19a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	223c      	movs	r2, #60	; 0x3c
 800581c:	2101      	movs	r1, #1
 800581e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	223d      	movs	r2, #61	; 0x3d
 8005824:	2102      	movs	r1, #2
 8005826:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a5a      	ldr	r2, [pc, #360]	; (800599c <HAL_TIM_ConfigClockSource+0x1a4>)
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a59      	ldr	r2, [pc, #356]	; (80059a0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2280      	movs	r2, #128	; 0x80
 800584e:	0192      	lsls	r2, r2, #6
 8005850:	4293      	cmp	r3, r2
 8005852:	d040      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0xde>
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	0192      	lsls	r2, r2, #6
 8005858:	4293      	cmp	r3, r2
 800585a:	d900      	bls.n	800585e <HAL_TIM_ConfigClockSource+0x66>
 800585c:	e088      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	0152      	lsls	r2, r2, #5
 8005862:	4293      	cmp	r3, r2
 8005864:	d100      	bne.n	8005868 <HAL_TIM_ConfigClockSource+0x70>
 8005866:	e088      	b.n	800597a <HAL_TIM_ConfigClockSource+0x182>
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	0152      	lsls	r2, r2, #5
 800586c:	4293      	cmp	r3, r2
 800586e:	d900      	bls.n	8005872 <HAL_TIM_ConfigClockSource+0x7a>
 8005870:	e07e      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 8005872:	2b70      	cmp	r3, #112	; 0x70
 8005874:	d018      	beq.n	80058a8 <HAL_TIM_ConfigClockSource+0xb0>
 8005876:	d900      	bls.n	800587a <HAL_TIM_ConfigClockSource+0x82>
 8005878:	e07a      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 800587a:	2b60      	cmp	r3, #96	; 0x60
 800587c:	d04f      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x126>
 800587e:	d900      	bls.n	8005882 <HAL_TIM_ConfigClockSource+0x8a>
 8005880:	e076      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 8005882:	2b50      	cmp	r3, #80	; 0x50
 8005884:	d03b      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x106>
 8005886:	d900      	bls.n	800588a <HAL_TIM_ConfigClockSource+0x92>
 8005888:	e072      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 800588a:	2b40      	cmp	r3, #64	; 0x40
 800588c:	d057      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x146>
 800588e:	d900      	bls.n	8005892 <HAL_TIM_ConfigClockSource+0x9a>
 8005890:	e06e      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 8005892:	2b30      	cmp	r3, #48	; 0x30
 8005894:	d063      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x166>
 8005896:	d86b      	bhi.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d060      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x166>
 800589c:	d868      	bhi.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d05d      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x166>
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d05b      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x166>
 80058a6:	e063      	b.n	8005970 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	6899      	ldr	r1, [r3, #8]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f000 fd96 	bl	80063e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2277      	movs	r2, #119	; 0x77
 80058c8:	4313      	orrs	r3, r2
 80058ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
      break;
 80058d4:	e052      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	6899      	ldr	r1, [r3, #8]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f000 fd7f 	bl	80063e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2180      	movs	r1, #128	; 0x80
 80058f6:	01c9      	lsls	r1, r1, #7
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
      break;
 80058fc:	e03e      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	001a      	movs	r2, r3
 800590c:	f000 fc28 	bl	8006160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2150      	movs	r1, #80	; 0x50
 8005916:	0018      	movs	r0, r3
 8005918:	f000 fd4a 	bl	80063b0 <TIM_ITRx_SetConfig>
      break;
 800591c:	e02e      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	001a      	movs	r2, r3
 800592c:	f000 fc88 	bl	8006240 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2160      	movs	r1, #96	; 0x60
 8005936:	0018      	movs	r0, r3
 8005938:	f000 fd3a 	bl	80063b0 <TIM_ITRx_SetConfig>
      break;
 800593c:	e01e      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	001a      	movs	r2, r3
 800594c:	f000 fc08 	bl	8006160 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	0018      	movs	r0, r3
 8005958:	f000 fd2a 	bl	80063b0 <TIM_ITRx_SetConfig>
      break;
 800595c:	e00e      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	0019      	movs	r1, r3
 8005968:	0010      	movs	r0, r2
 800596a:	f000 fd21 	bl	80063b0 <TIM_ITRx_SetConfig>
      break;
 800596e:	e005      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005970:	230f      	movs	r3, #15
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
      break;
 8005978:	e000      	b.n	800597c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800597a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	223d      	movs	r2, #61	; 0x3d
 8005980:	2101      	movs	r1, #1
 8005982:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	223c      	movs	r2, #60	; 0x3c
 8005988:	2100      	movs	r1, #0
 800598a:	5499      	strb	r1, [r3, r2]

  return status;
 800598c:	230f      	movs	r3, #15
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	781b      	ldrb	r3, [r3, #0]
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b004      	add	sp, #16
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	ffceff88 	.word	0xffceff88
 80059a0:	ffff00ff 	.word	0xffff00ff

080059a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d01e      	beq.n	80059f6 <HAL_TIM_ReadCapturedValue+0x52>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b0c      	cmp	r3, #12
 80059bc:	d820      	bhi.n	8005a00 <HAL_TIM_ReadCapturedValue+0x5c>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d013      	beq.n	80059ec <HAL_TIM_ReadCapturedValue+0x48>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d81a      	bhi.n	8005a00 <HAL_TIM_ReadCapturedValue+0x5c>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_TIM_ReadCapturedValue+0x34>
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b04      	cmp	r3, #4
 80059d4:	d005      	beq.n	80059e2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80059d6:	e013      	b.n	8005a00 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	60fb      	str	r3, [r7, #12]
      break;
 80059e0:	e00f      	b.n	8005a02 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	60fb      	str	r3, [r7, #12]
      break;
 80059ea:	e00a      	b.n	8005a02 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	60fb      	str	r3, [r7, #12]
      break;
 80059f4:	e005      	b.n	8005a02 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	60fb      	str	r3, [r7, #12]
      break;
 80059fe:	e000      	b.n	8005a02 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005a00:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b004      	add	sp, #16
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a34:	46c0      	nop			; (mov r8, r8)
 8005a36:	46bd      	mov	sp, r7
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <TIM_Base_SetConfig+0xd0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0x20>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <TIM_Base_SetConfig+0xd4>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d108      	bne.n	8005a6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2270      	movs	r2, #112	; 0x70
 8005a60:	4393      	bics	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <TIM_Base_SetConfig+0xd0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_Base_SetConfig+0x62>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <TIM_Base_SetConfig+0xd4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_Base_SetConfig+0x62>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <TIM_Base_SetConfig+0xd8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_Base_SetConfig+0x62>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <TIM_Base_SetConfig+0xdc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0x62>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <TIM_Base_SetConfig+0xe0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0x62>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <TIM_Base_SetConfig+0xe4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	; (8005b24 <TIM_Base_SetConfig+0xe8>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2280      	movs	r2, #128	; 0x80
 8005ab4:	4393      	bics	r3, r2
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <TIM_Base_SetConfig+0xd0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <TIM_Base_SetConfig+0xba>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <TIM_Base_SetConfig+0xdc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <TIM_Base_SetConfig+0xba>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a0c      	ldr	r2, [pc, #48]	; (8005b1c <TIM_Base_SetConfig+0xe0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_Base_SetConfig+0xba>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a0b      	ldr	r2, [pc, #44]	; (8005b20 <TIM_Base_SetConfig+0xe4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d103      	bne.n	8005afe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	615a      	str	r2, [r3, #20]
}
 8005b04:	46c0      	nop			; (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b004      	add	sp, #16
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40002000 	.word	0x40002000
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	fffffcff 	.word	0xfffffcff

08005b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	2201      	movs	r2, #1
 8005b38:	4393      	bics	r3, r2
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a32      	ldr	r2, [pc, #200]	; (8005c20 <TIM_OC1_SetConfig+0xf8>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	4393      	bics	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4393      	bics	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <TIM_OC1_SetConfig+0xfc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_OC1_SetConfig+0x76>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <TIM_OC1_SetConfig+0x100>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_OC1_SetConfig+0x76>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a26      	ldr	r2, [pc, #152]	; (8005c2c <TIM_OC1_SetConfig+0x104>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC1_SetConfig+0x76>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a25      	ldr	r2, [pc, #148]	; (8005c30 <TIM_OC1_SetConfig+0x108>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d10c      	bne.n	8005bb8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	4393      	bics	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	4393      	bics	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a1a      	ldr	r2, [pc, #104]	; (8005c24 <TIM_OC1_SetConfig+0xfc>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00b      	beq.n	8005bd8 <TIM_OC1_SetConfig+0xb0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <TIM_OC1_SetConfig+0x100>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d007      	beq.n	8005bd8 <TIM_OC1_SetConfig+0xb0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <TIM_OC1_SetConfig+0x104>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d003      	beq.n	8005bd8 <TIM_OC1_SetConfig+0xb0>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <TIM_OC1_SetConfig+0x108>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d111      	bne.n	8005bfc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <TIM_OC1_SetConfig+0x10c>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <TIM_OC1_SetConfig+0x110>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b006      	add	sp, #24
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	fffeff8f 	.word	0xfffeff8f
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800
 8005c34:	fffffeff 	.word	0xfffffeff
 8005c38:	fffffdff 	.word	0xfffffdff

08005c3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	4393      	bics	r3, r2
 8005c4e:	001a      	movs	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a2e      	ldr	r2, [pc, #184]	; (8005d24 <TIM_OC2_SetConfig+0xe8>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a2d      	ldr	r2, [pc, #180]	; (8005d28 <TIM_OC2_SetConfig+0xec>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2220      	movs	r2, #32
 8005c86:	4393      	bics	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <TIM_OC2_SetConfig+0xf0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10d      	bne.n	8005cba <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2280      	movs	r2, #128	; 0x80
 8005ca2:	4393      	bics	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2240      	movs	r2, #64	; 0x40
 8005cb6:	4393      	bics	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <TIM_OC2_SetConfig+0xf0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_OC2_SetConfig+0x9e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1a      	ldr	r2, [pc, #104]	; (8005d30 <TIM_OC2_SetConfig+0xf4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_OC2_SetConfig+0x9e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <TIM_OC2_SetConfig+0xf8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC2_SetConfig+0x9e>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <TIM_OC2_SetConfig+0xfc>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d113      	bne.n	8005d02 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4a17      	ldr	r2, [pc, #92]	; (8005d3c <TIM_OC2_SetConfig+0x100>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <TIM_OC2_SetConfig+0x104>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	621a      	str	r2, [r3, #32]
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b006      	add	sp, #24
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	feff8fff 	.word	0xfeff8fff
 8005d28:	fffffcff 	.word	0xfffffcff
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	fffffbff 	.word	0xfffffbff
 8005d40:	fffff7ff 	.word	0xfffff7ff

08005d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	4a35      	ldr	r2, [pc, #212]	; (8005e28 <TIM_OC3_SetConfig+0xe4>)
 8005d54:	401a      	ands	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a2f      	ldr	r2, [pc, #188]	; (8005e2c <TIM_OC3_SetConfig+0xe8>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2203      	movs	r2, #3
 8005d78:	4393      	bics	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	4a29      	ldr	r2, [pc, #164]	; (8005e30 <TIM_OC3_SetConfig+0xec>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a25      	ldr	r2, [pc, #148]	; (8005e34 <TIM_OC3_SetConfig+0xf0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10d      	bne.n	8005dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <TIM_OC3_SetConfig+0xf4>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <TIM_OC3_SetConfig+0xf8>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	; (8005e34 <TIM_OC3_SetConfig+0xf0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_OC3_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <TIM_OC3_SetConfig+0xfc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_OC3_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <TIM_OC3_SetConfig+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_OC3_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <TIM_OC3_SetConfig+0x104>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d113      	bne.n	8005e06 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <TIM_OC3_SetConfig+0x108>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <TIM_OC3_SetConfig+0x10c>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	46c0      	nop			; (mov r8, r8)
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b006      	add	sp, #24
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	fffffeff 	.word	0xfffffeff
 8005e2c:	fffeff8f 	.word	0xfffeff8f
 8005e30:	fffffdff 	.word	0xfffffdff
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	fffff7ff 	.word	0xfffff7ff
 8005e3c:	fffffbff 	.word	0xfffffbff
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40014400 	.word	0x40014400
 8005e48:	40014800 	.word	0x40014800
 8005e4c:	ffffefff 	.word	0xffffefff
 8005e50:	ffffdfff 	.word	0xffffdfff

08005e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	4a28      	ldr	r2, [pc, #160]	; (8005f04 <TIM_OC4_SetConfig+0xb0>)
 8005e64:	401a      	ands	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <TIM_OC4_SetConfig+0xb4>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <TIM_OC4_SetConfig+0xb8>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <TIM_OC4_SetConfig+0xbc>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <TIM_OC4_SetConfig+0xc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00b      	beq.n	8005ecc <TIM_OC4_SetConfig+0x78>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <TIM_OC4_SetConfig+0xc4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC4_SetConfig+0x78>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <TIM_OC4_SetConfig+0xc8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC4_SetConfig+0x78>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <TIM_OC4_SetConfig+0xcc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d109      	bne.n	8005ee0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <TIM_OC4_SetConfig+0xd0>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	019b      	lsls	r3, r3, #6
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	621a      	str	r2, [r3, #32]
}
 8005efa:	46c0      	nop			; (mov r8, r8)
 8005efc:	46bd      	mov	sp, r7
 8005efe:	b006      	add	sp, #24
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	ffffefff 	.word	0xffffefff
 8005f08:	feff8fff 	.word	0xfeff8fff
 8005f0c:	fffffcff 	.word	0xfffffcff
 8005f10:	ffffdfff 	.word	0xffffdfff
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	40014400 	.word	0x40014400
 8005f20:	40014800 	.word	0x40014800
 8005f24:	ffffbfff 	.word	0xffffbfff

08005f28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	4a25      	ldr	r2, [pc, #148]	; (8005fcc <TIM_OC5_SetConfig+0xa4>)
 8005f38:	401a      	ands	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <TIM_OC5_SetConfig+0xa8>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <TIM_OC5_SetConfig+0xac>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <TIM_OC5_SetConfig+0xb0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00b      	beq.n	8005f96 <TIM_OC5_SetConfig+0x6e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC5_SetConfig+0xb4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d007      	beq.n	8005f96 <TIM_OC5_SetConfig+0x6e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <TIM_OC5_SetConfig+0xb8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_OC5_SetConfig+0x6e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a14      	ldr	r2, [pc, #80]	; (8005fe4 <TIM_OC5_SetConfig+0xbc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d109      	bne.n	8005faa <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4a0c      	ldr	r2, [pc, #48]	; (8005fcc <TIM_OC5_SetConfig+0xa4>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	621a      	str	r2, [r3, #32]
}
 8005fc4:	46c0      	nop			; (mov r8, r8)
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b006      	add	sp, #24
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	fffeffff 	.word	0xfffeffff
 8005fd0:	fffeff8f 	.word	0xfffeff8f
 8005fd4:	fffdffff 	.word	0xfffdffff
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800

08005fe8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4a26      	ldr	r2, [pc, #152]	; (8006090 <TIM_OC6_SetConfig+0xa8>)
 8005ff8:	401a      	ands	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a20      	ldr	r2, [pc, #128]	; (8006094 <TIM_OC6_SetConfig+0xac>)
 8006014:	4013      	ands	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4a1c      	ldr	r2, [pc, #112]	; (8006098 <TIM_OC6_SetConfig+0xb0>)
 8006028:	4013      	ands	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	051b      	lsls	r3, r3, #20
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a18      	ldr	r2, [pc, #96]	; (800609c <TIM_OC6_SetConfig+0xb4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d00b      	beq.n	8006058 <TIM_OC6_SetConfig+0x70>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <TIM_OC6_SetConfig+0xb8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d007      	beq.n	8006058 <TIM_OC6_SetConfig+0x70>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <TIM_OC6_SetConfig+0xbc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d003      	beq.n	8006058 <TIM_OC6_SetConfig+0x70>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <TIM_OC6_SetConfig+0xc0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d109      	bne.n	800606c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4a14      	ldr	r2, [pc, #80]	; (80060ac <TIM_OC6_SetConfig+0xc4>)
 800605c:	4013      	ands	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	029b      	lsls	r3, r3, #10
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	693a      	ldr	r2, [r7, #16]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	46bd      	mov	sp, r7
 800608a:	b006      	add	sp, #24
 800608c:	bd80      	pop	{r7, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	ffefffff 	.word	0xffefffff
 8006094:	feff8fff 	.word	0xfeff8fff
 8006098:	ffdfffff 	.word	0xffdfffff
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40014000 	.word	0x40014000
 80060a4:	40014400 	.word	0x40014400
 80060a8:	40014800 	.word	0x40014800
 80060ac:	fffbffff 	.word	0xfffbffff

080060b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	2201      	movs	r2, #1
 80060c4:	4393      	bics	r3, r2
 80060c6:	001a      	movs	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <TIM_TI1_SetConfig+0xa4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_TI1_SetConfig+0x40>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4a1d      	ldr	r2, [pc, #116]	; (8006158 <TIM_TI1_SetConfig+0xa8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_TI1_SetConfig+0x40>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <TIM_TI1_SetConfig+0xac>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <TIM_TI1_SetConfig+0x44>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <TIM_TI1_SetConfig+0x46>
 80060f4:	2300      	movs	r3, #0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d008      	beq.n	800610c <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2203      	movs	r2, #3
 80060fe:	4393      	bics	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e003      	b.n	8006114 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2201      	movs	r2, #1
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	22f0      	movs	r2, #240	; 0xf0
 8006118:	4393      	bics	r3, r2
 800611a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	22ff      	movs	r2, #255	; 0xff
 8006122:	4013      	ands	r3, r2
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	220a      	movs	r2, #10
 800612e:	4393      	bics	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	220a      	movs	r2, #10
 8006136:	4013      	ands	r3, r2
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	46c0      	nop			; (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b006      	add	sp, #24
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	40012c00 	.word	0x40012c00
 8006158:	40000400 	.word	0x40000400
 800615c:	40014000 	.word	0x40014000

08006160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	2201      	movs	r2, #1
 8006178:	4393      	bics	r3, r2
 800617a:	001a      	movs	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	22f0      	movs	r2, #240	; 0xf0
 800618a:	4393      	bics	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	220a      	movs	r2, #10
 800619c:	4393      	bics	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	621a      	str	r2, [r3, #32]
}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b006      	add	sp, #24
 80061ba:	bd80      	pop	{r7, pc}

080061bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	2210      	movs	r2, #16
 80061d0:	4393      	bics	r3, r2
 80061d2:	001a      	movs	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	4a14      	ldr	r2, [pc, #80]	; (8006238 <TIM_TI2_SetConfig+0x7c>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4a10      	ldr	r2, [pc, #64]	; (800623c <TIM_TI2_SetConfig+0x80>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	031b      	lsls	r3, r3, #12
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	22a0      	movs	r2, #160	; 0xa0
 8006210:	4393      	bics	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	22a0      	movs	r2, #160	; 0xa0
 800621a:	4013      	ands	r3, r2
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	621a      	str	r2, [r3, #32]
}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	46bd      	mov	sp, r7
 8006232:	b006      	add	sp, #24
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	fffffcff 	.word	0xfffffcff
 800623c:	ffff0fff 	.word	0xffff0fff

08006240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	2210      	movs	r2, #16
 8006252:	4393      	bics	r3, r2
 8006254:	001a      	movs	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4a0d      	ldr	r2, [pc, #52]	; (80062a0 <TIM_TI2_ConfigInputStage+0x60>)
 800626a:	4013      	ands	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	031b      	lsls	r3, r3, #12
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	22a0      	movs	r2, #160	; 0xa0
 800627c:	4393      	bics	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	46bd      	mov	sp, r7
 800629a:	b006      	add	sp, #24
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	ffff0fff 	.word	0xffff0fff

080062a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	4a19      	ldr	r2, [pc, #100]	; (800631c <TIM_TI3_SetConfig+0x78>)
 80062b8:	401a      	ands	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2203      	movs	r2, #3
 80062ce:	4393      	bics	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	22f0      	movs	r2, #240	; 0xf0
 80062de:	4393      	bics	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	011b      	lsls	r3, r3, #4
 80062e6:	22ff      	movs	r2, #255	; 0xff
 80062e8:	4013      	ands	r3, r2
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <TIM_TI3_SetConfig+0x7c>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	021a      	lsls	r2, r3, #8
 80062fc:	23a0      	movs	r3, #160	; 0xa0
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	4013      	ands	r3, r2
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	621a      	str	r2, [r3, #32]
}
 8006314:	46c0      	nop			; (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b006      	add	sp, #24
 800631a:	bd80      	pop	{r7, pc}
 800631c:	fffffeff 	.word	0xfffffeff
 8006320:	fffff5ff 	.word	0xfffff5ff

08006324 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	4a1a      	ldr	r2, [pc, #104]	; (80063a0 <TIM_TI4_SetConfig+0x7c>)
 8006338:	401a      	ands	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <TIM_TI4_SetConfig+0x80>)
 800634e:	4013      	ands	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4a12      	ldr	r2, [pc, #72]	; (80063a8 <TIM_TI4_SetConfig+0x84>)
 8006360:	4013      	ands	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	031b      	lsls	r3, r3, #12
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	0c1b      	lsrs	r3, r3, #16
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	4a0d      	ldr	r2, [pc, #52]	; (80063ac <TIM_TI4_SetConfig+0x88>)
 8006376:	4013      	ands	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	031a      	lsls	r2, r3, #12
 800637e:	23a0      	movs	r3, #160	; 0xa0
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	4013      	ands	r3, r2
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	b006      	add	sp, #24
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	ffffefff 	.word	0xffffefff
 80063a4:	fffffcff 	.word	0xfffffcff
 80063a8:	ffff0fff 	.word	0xffff0fff
 80063ac:	ffff5fff 	.word	0xffff5fff

080063b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <TIM_ITRx_SetConfig+0x34>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	2207      	movs	r2, #7
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	609a      	str	r2, [r3, #8]
}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	46bd      	mov	sp, r7
 80063de:	b004      	add	sp, #16
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	ffcfff8f 	.word	0xffcfff8f

080063e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4a09      	ldr	r2, [pc, #36]	; (8006424 <TIM_ETR_SetConfig+0x3c>)
 8006400:	4013      	ands	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	431a      	orrs	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	609a      	str	r2, [r3, #8]
}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b006      	add	sp, #24
 8006422:	bd80      	pop	{r7, pc}
 8006424:	ffff00ff 	.word	0xffff00ff

08006428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	221f      	movs	r2, #31
 8006438:	4013      	ands	r3, r2
 800643a:	2201      	movs	r2, #1
 800643c:	409a      	lsls	r2, r3
 800643e:	0013      	movs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	43d2      	mvns	r2, r2
 800644a:	401a      	ands	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1a      	ldr	r2, [r3, #32]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	211f      	movs	r1, #31
 8006458:	400b      	ands	r3, r1
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4099      	lsls	r1, r3
 800645e:	000b      	movs	r3, r1
 8006460:	431a      	orrs	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	46bd      	mov	sp, r7
 800646a:	b006      	add	sp, #24
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	223c      	movs	r2, #60	; 0x3c
 800647e:	5c9b      	ldrb	r3, [r3, r2]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006484:	2302      	movs	r3, #2
 8006486:	e04f      	b.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	223c      	movs	r2, #60	; 0x3c
 800648c:	2101      	movs	r1, #1
 800648e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	223d      	movs	r2, #61	; 0x3d
 8006494:	2102      	movs	r1, #2
 8006496:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a20      	ldr	r2, [pc, #128]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d108      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a1f      	ldr	r2, [pc, #124]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2270      	movs	r2, #112	; 0x70
 80064c8:	4393      	bics	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a13      	ldr	r2, [pc, #76]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d009      	beq.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a12      	ldr	r2, [pc, #72]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a11      	ldr	r2, [pc, #68]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d10c      	bne.n	8006516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2280      	movs	r2, #128	; 0x80
 8006500:	4393      	bics	r3, r2
 8006502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	223d      	movs	r2, #61	; 0x3d
 800651a:	2101      	movs	r1, #1
 800651c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	223c      	movs	r2, #60	; 0x3c
 8006522:	2100      	movs	r1, #0
 8006524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	0018      	movs	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	b004      	add	sp, #16
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40012c00 	.word	0x40012c00
 8006534:	ff0fffff 	.word	0xff0fffff
 8006538:	40000400 	.word	0x40000400
 800653c:	40014000 	.word	0x40014000

08006540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006548:	46c0      	nop			; (mov r8, r8)
 800654a:	46bd      	mov	sp, r7
 800654c:	b002      	add	sp, #8
 800654e:	bd80      	pop	{r7, pc}

08006550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006558:	46c0      	nop			; (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b002      	add	sp, #8
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e046      	b.n	8006610 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2288      	movs	r2, #136	; 0x88
 8006586:	589b      	ldr	r3, [r3, r2]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d107      	bne.n	800659c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2284      	movs	r2, #132	; 0x84
 8006590:	2100      	movs	r1, #0
 8006592:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	0018      	movs	r0, r3
 8006598:	f7fc fc22 	bl	8002de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2288      	movs	r2, #136	; 0x88
 80065a0:	2124      	movs	r1, #36	; 0x24
 80065a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	438a      	bics	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 fc02 	bl	8006dc0 <UART_SetConfig>
 80065bc:	0003      	movs	r3, r0
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e024      	b.n	8006610 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f000 fd99 	bl	8007108 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	490d      	ldr	r1, [pc, #52]	; (8006618 <HAL_UART_Init+0xa8>)
 80065e2:	400a      	ands	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	212a      	movs	r1, #42	; 0x2a
 80065f2:	438a      	bics	r2, r1
 80065f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2101      	movs	r1, #1
 8006602:	430a      	orrs	r2, r1
 8006604:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f000 fe31 	bl	8007270 <UART_CheckIdleState>
 800660e:	0003      	movs	r3, r0
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b002      	add	sp, #8
 8006616:	bd80      	pop	{r7, pc}
 8006618:	ffffb7ff 	.word	0xffffb7ff

0800661c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e032      	b.n	8006694 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2288      	movs	r2, #136	; 0x88
 8006632:	2124      	movs	r1, #36	; 0x24
 8006634:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2101      	movs	r1, #1
 8006642:	438a      	bics	r2, r1
 8006644:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f7fc fcd3 	bl	800300c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2290      	movs	r2, #144	; 0x90
 800666a:	2100      	movs	r1, #0
 800666c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2288      	movs	r2, #136	; 0x88
 8006672:	2100      	movs	r1, #0
 8006674:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	228c      	movs	r2, #140	; 0x8c
 800667a:	2100      	movs	r1, #0
 800667c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2284      	movs	r2, #132	; 0x84
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	1dbb      	adds	r3, r7, #6
 80066a8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	228c      	movs	r2, #140	; 0x8c
 80066ae:	589b      	ldr	r3, [r3, r2]
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d145      	bne.n	8006740 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_UART_Receive_IT+0x26>
 80066ba:	1dbb      	adds	r3, r7, #6
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e03d      	b.n	8006742 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	015b      	lsls	r3, r3, #5
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d109      	bne.n	80066e6 <HAL_UART_Receive_IT+0x4a>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2201      	movs	r2, #1
 80066de:	4013      	ands	r3, r2
 80066e0:	d001      	beq.n	80066e6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e02d      	b.n	8006742 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	4013      	ands	r3, r2
 80066f8:	d019      	beq.n	800672e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066fa:	f3ef 8310 	mrs	r3, PRIMASK
 80066fe:	613b      	str	r3, [r7, #16]
  return(result);
 8006700:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	2301      	movs	r3, #1
 8006706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f383 8810 	msr	PRIMASK, r3
}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	04c9      	lsls	r1, r1, #19
 800671e:	430a      	orrs	r2, r1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f383 8810 	msr	PRIMASK, r3
}
 800672c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800672e:	1dbb      	adds	r3, r7, #6
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	68b9      	ldr	r1, [r7, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	0018      	movs	r0, r3
 8006738:	f000 feb0 	bl	800749c <UART_Start_Receive_IT>
 800673c:	0003      	movs	r3, r0
 800673e:	e000      	b.n	8006742 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006740:	2302      	movs	r3, #2
  }
}
 8006742:	0018      	movs	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	b008      	add	sp, #32
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800674c:	b5b0      	push	{r4, r5, r7, lr}
 800674e:	b0aa      	sub	sp, #168	; 0xa8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	69db      	ldr	r3, [r3, #28]
 800675a:	22a4      	movs	r2, #164	; 0xa4
 800675c:	18b9      	adds	r1, r7, r2
 800675e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	20a0      	movs	r0, #160	; 0xa0
 8006768:	1839      	adds	r1, r7, r0
 800676a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	249c      	movs	r4, #156	; 0x9c
 8006774:	1939      	adds	r1, r7, r4
 8006776:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006778:	0011      	movs	r1, r2
 800677a:	18bb      	adds	r3, r7, r2
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4aa2      	ldr	r2, [pc, #648]	; (8006a08 <HAL_UART_IRQHandler+0x2bc>)
 8006780:	4013      	ands	r3, r2
 8006782:	2298      	movs	r2, #152	; 0x98
 8006784:	18bd      	adds	r5, r7, r2
 8006786:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006788:	18bb      	adds	r3, r7, r2
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11a      	bne.n	80067c6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006790:	187b      	adds	r3, r7, r1
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2220      	movs	r2, #32
 8006796:	4013      	ands	r3, r2
 8006798:	d015      	beq.n	80067c6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800679a:	183b      	adds	r3, r7, r0
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2220      	movs	r2, #32
 80067a0:	4013      	ands	r3, r2
 80067a2:	d105      	bne.n	80067b0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067a4:	193b      	adds	r3, r7, r4
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	055b      	lsls	r3, r3, #21
 80067ac:	4013      	ands	r3, r2
 80067ae:	d00a      	beq.n	80067c6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d100      	bne.n	80067ba <HAL_UART_IRQHandler+0x6e>
 80067b8:	e2dc      	b.n	8006d74 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	0010      	movs	r0, r2
 80067c2:	4798      	blx	r3
      }
      return;
 80067c4:	e2d6      	b.n	8006d74 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067c6:	2398      	movs	r3, #152	; 0x98
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d100      	bne.n	80067d2 <HAL_UART_IRQHandler+0x86>
 80067d0:	e122      	b.n	8006a18 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80067d2:	239c      	movs	r3, #156	; 0x9c
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a8c      	ldr	r2, [pc, #560]	; (8006a0c <HAL_UART_IRQHandler+0x2c0>)
 80067da:	4013      	ands	r3, r2
 80067dc:	d106      	bne.n	80067ec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80067de:	23a0      	movs	r3, #160	; 0xa0
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a8a      	ldr	r2, [pc, #552]	; (8006a10 <HAL_UART_IRQHandler+0x2c4>)
 80067e6:	4013      	ands	r3, r2
 80067e8:	d100      	bne.n	80067ec <HAL_UART_IRQHandler+0xa0>
 80067ea:	e115      	b.n	8006a18 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067ec:	23a4      	movs	r3, #164	; 0xa4
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	4013      	ands	r3, r2
 80067f6:	d012      	beq.n	800681e <HAL_UART_IRQHandler+0xd2>
 80067f8:	23a0      	movs	r3, #160	; 0xa0
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	4013      	ands	r3, r2
 8006804:	d00b      	beq.n	800681e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2201      	movs	r2, #1
 800680c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2290      	movs	r2, #144	; 0x90
 8006812:	589b      	ldr	r3, [r3, r2]
 8006814:	2201      	movs	r2, #1
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2190      	movs	r1, #144	; 0x90
 800681c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800681e:	23a4      	movs	r3, #164	; 0xa4
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2202      	movs	r2, #2
 8006826:	4013      	ands	r3, r2
 8006828:	d011      	beq.n	800684e <HAL_UART_IRQHandler+0x102>
 800682a:	239c      	movs	r3, #156	; 0x9c
 800682c:	18fb      	adds	r3, r7, r3
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2201      	movs	r2, #1
 8006832:	4013      	ands	r3, r2
 8006834:	d00b      	beq.n	800684e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2202      	movs	r2, #2
 800683c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2290      	movs	r2, #144	; 0x90
 8006842:	589b      	ldr	r3, [r3, r2]
 8006844:	2204      	movs	r2, #4
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2190      	movs	r1, #144	; 0x90
 800684c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800684e:	23a4      	movs	r3, #164	; 0xa4
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2204      	movs	r2, #4
 8006856:	4013      	ands	r3, r2
 8006858:	d011      	beq.n	800687e <HAL_UART_IRQHandler+0x132>
 800685a:	239c      	movs	r3, #156	; 0x9c
 800685c:	18fb      	adds	r3, r7, r3
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2201      	movs	r2, #1
 8006862:	4013      	ands	r3, r2
 8006864:	d00b      	beq.n	800687e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2204      	movs	r2, #4
 800686c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2290      	movs	r2, #144	; 0x90
 8006872:	589b      	ldr	r3, [r3, r2]
 8006874:	2202      	movs	r2, #2
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2190      	movs	r1, #144	; 0x90
 800687c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800687e:	23a4      	movs	r3, #164	; 0xa4
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2208      	movs	r2, #8
 8006886:	4013      	ands	r3, r2
 8006888:	d017      	beq.n	80068ba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800688a:	23a0      	movs	r3, #160	; 0xa0
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2220      	movs	r2, #32
 8006892:	4013      	ands	r3, r2
 8006894:	d105      	bne.n	80068a2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006896:	239c      	movs	r3, #156	; 0x9c
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a5b      	ldr	r2, [pc, #364]	; (8006a0c <HAL_UART_IRQHandler+0x2c0>)
 800689e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068a0:	d00b      	beq.n	80068ba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2208      	movs	r2, #8
 80068a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2290      	movs	r2, #144	; 0x90
 80068ae:	589b      	ldr	r3, [r3, r2]
 80068b0:	2208      	movs	r2, #8
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2190      	movs	r1, #144	; 0x90
 80068b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068ba:	23a4      	movs	r3, #164	; 0xa4
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	4013      	ands	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_UART_IRQHandler+0x1a4>
 80068c8:	23a0      	movs	r3, #160	; 0xa0
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	2380      	movs	r3, #128	; 0x80
 80068d0:	04db      	lsls	r3, r3, #19
 80068d2:	4013      	ands	r3, r2
 80068d4:	d00c      	beq.n	80068f0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	0112      	lsls	r2, r2, #4
 80068de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2290      	movs	r2, #144	; 0x90
 80068e4:	589b      	ldr	r3, [r3, r2]
 80068e6:	2220      	movs	r2, #32
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2190      	movs	r1, #144	; 0x90
 80068ee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2290      	movs	r2, #144	; 0x90
 80068f4:	589b      	ldr	r3, [r3, r2]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d100      	bne.n	80068fc <HAL_UART_IRQHandler+0x1b0>
 80068fa:	e23d      	b.n	8006d78 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068fc:	23a4      	movs	r3, #164	; 0xa4
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2220      	movs	r2, #32
 8006904:	4013      	ands	r3, r2
 8006906:	d015      	beq.n	8006934 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006908:	23a0      	movs	r3, #160	; 0xa0
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2220      	movs	r2, #32
 8006910:	4013      	ands	r3, r2
 8006912:	d106      	bne.n	8006922 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006914:	239c      	movs	r3, #156	; 0x9c
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	2380      	movs	r3, #128	; 0x80
 800691c:	055b      	lsls	r3, r3, #21
 800691e:	4013      	ands	r3, r2
 8006920:	d008      	beq.n	8006934 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006926:	2b00      	cmp	r3, #0
 8006928:	d004      	beq.n	8006934 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	0010      	movs	r0, r2
 8006932:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2290      	movs	r2, #144	; 0x90
 8006938:	589b      	ldr	r3, [r3, r2]
 800693a:	2194      	movs	r1, #148	; 0x94
 800693c:	187a      	adds	r2, r7, r1
 800693e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2240      	movs	r2, #64	; 0x40
 8006948:	4013      	ands	r3, r2
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d004      	beq.n	8006958 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800694e:	187b      	adds	r3, r7, r1
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2228      	movs	r2, #40	; 0x28
 8006954:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006956:	d04c      	beq.n	80069f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	0018      	movs	r0, r3
 800695c:	f000 fec2 	bl	80076e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2240      	movs	r2, #64	; 0x40
 8006968:	4013      	ands	r3, r2
 800696a:	2b40      	cmp	r3, #64	; 0x40
 800696c:	d13c      	bne.n	80069e8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696e:	f3ef 8310 	mrs	r3, PRIMASK
 8006972:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006976:	2090      	movs	r0, #144	; 0x90
 8006978:	183a      	adds	r2, r7, r0
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	2301      	movs	r3, #1
 800697e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006982:	f383 8810 	msr	PRIMASK, r3
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2140      	movs	r1, #64	; 0x40
 8006994:	438a      	bics	r2, r1
 8006996:	609a      	str	r2, [r3, #8]
 8006998:	183b      	adds	r3, r7, r0
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800699e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069a0:	f383 8810 	msr	PRIMASK, r3
}
 80069a4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2280      	movs	r2, #128	; 0x80
 80069aa:	589b      	ldr	r3, [r3, r2]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d016      	beq.n	80069de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2280      	movs	r2, #128	; 0x80
 80069b4:	589b      	ldr	r3, [r3, r2]
 80069b6:	4a17      	ldr	r2, [pc, #92]	; (8006a14 <HAL_UART_IRQHandler+0x2c8>)
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2280      	movs	r2, #128	; 0x80
 80069be:	589b      	ldr	r3, [r3, r2]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fc ff25 	bl	8003810 <HAL_DMA_Abort_IT>
 80069c6:	1e03      	subs	r3, r0, #0
 80069c8:	d01c      	beq.n	8006a04 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2280      	movs	r2, #128	; 0x80
 80069ce:	589b      	ldr	r3, [r3, r2]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	2180      	movs	r1, #128	; 0x80
 80069d6:	5852      	ldr	r2, [r2, r1]
 80069d8:	0010      	movs	r0, r2
 80069da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069dc:	e012      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 f9d9 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e6:	e00d      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	0018      	movs	r0, r3
 80069ec:	f000 f9d4 	bl	8006d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e008      	b.n	8006a04 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f000 f9cf 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2290      	movs	r2, #144	; 0x90
 80069fe:	2100      	movs	r1, #0
 8006a00:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006a02:	e1b9      	b.n	8006d78 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	46c0      	nop			; (mov r8, r8)
    return;
 8006a06:	e1b7      	b.n	8006d78 <HAL_UART_IRQHandler+0x62c>
 8006a08:	0000080f 	.word	0x0000080f
 8006a0c:	10000001 	.word	0x10000001
 8006a10:	04000120 	.word	0x04000120
 8006a14:	080077b1 	.word	0x080077b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d000      	beq.n	8006a22 <HAL_UART_IRQHandler+0x2d6>
 8006a20:	e13e      	b.n	8006ca0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a22:	23a4      	movs	r3, #164	; 0xa4
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2210      	movs	r2, #16
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d100      	bne.n	8006a30 <HAL_UART_IRQHandler+0x2e4>
 8006a2e:	e137      	b.n	8006ca0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a30:	23a0      	movs	r3, #160	; 0xa0
 8006a32:	18fb      	adds	r3, r7, r3
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2210      	movs	r2, #16
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d100      	bne.n	8006a3e <HAL_UART_IRQHandler+0x2f2>
 8006a3c:	e130      	b.n	8006ca0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2210      	movs	r2, #16
 8006a44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2240      	movs	r2, #64	; 0x40
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b40      	cmp	r3, #64	; 0x40
 8006a52:	d000      	beq.n	8006a56 <HAL_UART_IRQHandler+0x30a>
 8006a54:	e0a4      	b.n	8006ba0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2280      	movs	r2, #128	; 0x80
 8006a5a:	589b      	ldr	r3, [r3, r2]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	217e      	movs	r1, #126	; 0x7e
 8006a62:	187b      	adds	r3, r7, r1
 8006a64:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006a66:	187b      	adds	r3, r7, r1
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d100      	bne.n	8006a70 <HAL_UART_IRQHandler+0x324>
 8006a6e:	e185      	b.n	8006d7c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	225c      	movs	r2, #92	; 0x5c
 8006a74:	5a9b      	ldrh	r3, [r3, r2]
 8006a76:	187a      	adds	r2, r7, r1
 8006a78:	8812      	ldrh	r2, [r2, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d300      	bcc.n	8006a80 <HAL_UART_IRQHandler+0x334>
 8006a7e:	e17d      	b.n	8006d7c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	187a      	adds	r2, r7, r1
 8006a84:	215e      	movs	r1, #94	; 0x5e
 8006a86:	8812      	ldrh	r2, [r2, #0]
 8006a88:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2280      	movs	r2, #128	; 0x80
 8006a8e:	589b      	ldr	r3, [r3, r2]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2220      	movs	r2, #32
 8006a96:	4013      	ands	r3, r2
 8006a98:	d170      	bne.n	8006b7c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a9e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa2:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	f383 8810 	msr	PRIMASK, r3
}
 8006aae:	46c0      	nop			; (mov r8, r8)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	49b4      	ldr	r1, [pc, #720]	; (8006d8c <HAL_UART_IRQHandler+0x640>)
 8006abc:	400a      	ands	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	f383 8810 	msr	PRIMASK, r3
}
 8006aca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006acc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	677b      	str	r3, [r7, #116]	; 0x74
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006adc:	f383 8810 	msr	PRIMASK, r3
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2101      	movs	r1, #1
 8006aee:	438a      	bics	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]
 8006af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af8:	f383 8810 	msr	PRIMASK, r3
}
 8006afc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006afe:	f3ef 8310 	mrs	r3, PRIMASK
 8006b02:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	673b      	str	r3, [r7, #112]	; 0x70
 8006b08:	2301      	movs	r3, #1
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b0e:	f383 8810 	msr	PRIMASK, r3
}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2140      	movs	r1, #64	; 0x40
 8006b20:	438a      	bics	r2, r1
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b26:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b2a:	f383 8810 	msr	PRIMASK, r3
}
 8006b2e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	228c      	movs	r2, #140	; 0x8c
 8006b34:	2120      	movs	r1, #32
 8006b36:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b42:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b48:	2301      	movs	r3, #1
 8006b4a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b4e:	f383 8810 	msr	PRIMASK, r3
}
 8006b52:	46c0      	nop			; (mov r8, r8)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2110      	movs	r1, #16
 8006b60:	438a      	bics	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b66:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6a:	f383 8810 	msr	PRIMASK, r3
}
 8006b6e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2280      	movs	r2, #128	; 0x80
 8006b74:	589b      	ldr	r3, [r3, r2]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fc fde8 	bl	800374c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	225c      	movs	r2, #92	; 0x5c
 8006b86:	5a9a      	ldrh	r2, [r3, r2]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	215e      	movs	r1, #94	; 0x5e
 8006b8c:	5a5b      	ldrh	r3, [r3, r1]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0011      	movs	r1, r2
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 f905 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b9e:	e0ed      	b.n	8006d7c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	225c      	movs	r2, #92	; 0x5c
 8006ba4:	5a99      	ldrh	r1, [r3, r2]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	225e      	movs	r2, #94	; 0x5e
 8006baa:	5a9b      	ldrh	r3, [r3, r2]
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	208e      	movs	r0, #142	; 0x8e
 8006bb0:	183b      	adds	r3, r7, r0
 8006bb2:	1a8a      	subs	r2, r1, r2
 8006bb4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	225e      	movs	r2, #94	; 0x5e
 8006bba:	5a9b      	ldrh	r3, [r3, r2]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d100      	bne.n	8006bc4 <HAL_UART_IRQHandler+0x478>
 8006bc2:	e0dd      	b.n	8006d80 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006bc4:	183b      	adds	r3, r7, r0
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d100      	bne.n	8006bce <HAL_UART_IRQHandler+0x482>
 8006bcc:	e0d8      	b.n	8006d80 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bce:	f3ef 8310 	mrs	r3, PRIMASK
 8006bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bd6:	2488      	movs	r4, #136	; 0x88
 8006bd8:	193a      	adds	r2, r7, r4
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f383 8810 	msr	PRIMASK, r3
}
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4967      	ldr	r1, [pc, #412]	; (8006d90 <HAL_UART_IRQHandler+0x644>)
 8006bf4:	400a      	ands	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	193b      	adds	r3, r7, r4
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f383 8810 	msr	PRIMASK, r3
}
 8006c04:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c06:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c0c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c0e:	2484      	movs	r4, #132	; 0x84
 8006c10:	193a      	adds	r2, r7, r4
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	2301      	movs	r3, #1
 8006c16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f383 8810 	msr	PRIMASK, r3
}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	495a      	ldr	r1, [pc, #360]	; (8006d94 <HAL_UART_IRQHandler+0x648>)
 8006c2c:	400a      	ands	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	193b      	adds	r3, r7, r4
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	f383 8810 	msr	PRIMASK, r3
}
 8006c3c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	228c      	movs	r2, #140	; 0x8c
 8006c42:	2120      	movs	r1, #32
 8006c44:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c52:	f3ef 8310 	mrs	r3, PRIMASK
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5a:	2480      	movs	r4, #128	; 0x80
 8006c5c:	193a      	adds	r2, r7, r4
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	2301      	movs	r3, #1
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	f383 8810 	msr	PRIMASK, r3
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2110      	movs	r1, #16
 8006c78:	438a      	bics	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	193b      	adds	r3, r7, r4
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	f383 8810 	msr	PRIMASK, r3
}
 8006c88:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c90:	183b      	adds	r3, r7, r0
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 f885 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c9e:	e06f      	b.n	8006d80 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ca0:	23a4      	movs	r3, #164	; 0xa4
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	2380      	movs	r3, #128	; 0x80
 8006ca8:	035b      	lsls	r3, r3, #13
 8006caa:	4013      	ands	r3, r2
 8006cac:	d010      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x584>
 8006cae:	239c      	movs	r3, #156	; 0x9c
 8006cb0:	18fb      	adds	r3, r7, r3
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	03db      	lsls	r3, r3, #15
 8006cb8:	4013      	ands	r3, r2
 8006cba:	d009      	beq.n	8006cd0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2280      	movs	r2, #128	; 0x80
 8006cc2:	0352      	lsls	r2, r2, #13
 8006cc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f001 fa15 	bl	80080f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cce:	e05a      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006cd0:	23a4      	movs	r3, #164	; 0xa4
 8006cd2:	18fb      	adds	r3, r7, r3
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d016      	beq.n	8006d0a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cdc:	23a0      	movs	r3, #160	; 0xa0
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d106      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ce8:	239c      	movs	r3, #156	; 0x9c
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d042      	beq.n	8006d84 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	0010      	movs	r0, r2
 8006d06:	4798      	blx	r3
    }
    return;
 8006d08:	e03c      	b.n	8006d84 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d0a:	23a4      	movs	r3, #164	; 0xa4
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2240      	movs	r2, #64	; 0x40
 8006d12:	4013      	ands	r3, r2
 8006d14:	d00a      	beq.n	8006d2c <HAL_UART_IRQHandler+0x5e0>
 8006d16:	23a0      	movs	r3, #160	; 0xa0
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2240      	movs	r2, #64	; 0x40
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 fd5a 	bl	80077de <UART_EndTransmit_IT>
    return;
 8006d2a:	e02c      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d2c:	23a4      	movs	r3, #164	; 0xa4
 8006d2e:	18fb      	adds	r3, r7, r3
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	2380      	movs	r3, #128	; 0x80
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	4013      	ands	r3, r2
 8006d38:	d00b      	beq.n	8006d52 <HAL_UART_IRQHandler+0x606>
 8006d3a:	23a0      	movs	r3, #160	; 0xa0
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	2380      	movs	r3, #128	; 0x80
 8006d42:	05db      	lsls	r3, r3, #23
 8006d44:	4013      	ands	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	f001 f9e4 	bl	8008118 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d50:	e019      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d52:	23a4      	movs	r3, #164	; 0xa4
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	045b      	lsls	r3, r3, #17
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d012      	beq.n	8006d86 <HAL_UART_IRQHandler+0x63a>
 8006d60:	23a0      	movs	r3, #160	; 0xa0
 8006d62:	18fb      	adds	r3, r7, r3
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da0d      	bge.n	8006d86 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f001 f9cb 	bl	8008108 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d72:	e008      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
      return;
 8006d74:	46c0      	nop			; (mov r8, r8)
 8006d76:	e006      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
    return;
 8006d78:	46c0      	nop			; (mov r8, r8)
 8006d7a:	e004      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
      return;
 8006d7c:	46c0      	nop			; (mov r8, r8)
 8006d7e:	e002      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
      return;
 8006d80:	46c0      	nop			; (mov r8, r8)
 8006d82:	e000      	b.n	8006d86 <HAL_UART_IRQHandler+0x63a>
    return;
 8006d84:	46c0      	nop			; (mov r8, r8)
  }
}
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b02a      	add	sp, #168	; 0xa8
 8006d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d8c:	fffffeff 	.word	0xfffffeff
 8006d90:	fffffedf 	.word	0xfffffedf
 8006d94:	effffffe 	.word	0xeffffffe

08006d98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	000a      	movs	r2, r1
 8006db2:	1cbb      	adds	r3, r7, #2
 8006db4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	46bd      	mov	sp, r7
 8006dba:	b002      	add	sp, #8
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dc8:	231a      	movs	r3, #26
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4abc      	ldr	r2, [pc, #752]	; (80070e0 <UART_SetConfig+0x320>)
 8006df0:	4013      	ands	r3, r2
 8006df2:	0019      	movs	r1, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4ab7      	ldr	r2, [pc, #732]	; (80070e4 <UART_SetConfig+0x324>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	0019      	movs	r1, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	4aae      	ldr	r2, [pc, #696]	; (80070e8 <UART_SetConfig+0x328>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	0019      	movs	r1, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	220f      	movs	r2, #15
 8006e44:	4393      	bics	r3, r2
 8006e46:	0019      	movs	r1, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4aa4      	ldr	r2, [pc, #656]	; (80070ec <UART_SetConfig+0x32c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d127      	bne.n	8006eae <UART_SetConfig+0xee>
 8006e5e:	4ba4      	ldr	r3, [pc, #656]	; (80070f0 <UART_SetConfig+0x330>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	2203      	movs	r2, #3
 8006e64:	4013      	ands	r3, r2
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d017      	beq.n	8006e9a <UART_SetConfig+0xda>
 8006e6a:	d81b      	bhi.n	8006ea4 <UART_SetConfig+0xe4>
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d00a      	beq.n	8006e86 <UART_SetConfig+0xc6>
 8006e70:	d818      	bhi.n	8006ea4 <UART_SetConfig+0xe4>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <UART_SetConfig+0xbc>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d00a      	beq.n	8006e90 <UART_SetConfig+0xd0>
 8006e7a:	e013      	b.n	8006ea4 <UART_SetConfig+0xe4>
 8006e7c:	231b      	movs	r3, #27
 8006e7e:	18fb      	adds	r3, r7, r3
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
 8006e84:	e058      	b.n	8006f38 <UART_SetConfig+0x178>
 8006e86:	231b      	movs	r3, #27
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	701a      	strb	r2, [r3, #0]
 8006e8e:	e053      	b.n	8006f38 <UART_SetConfig+0x178>
 8006e90:	231b      	movs	r3, #27
 8006e92:	18fb      	adds	r3, r7, r3
 8006e94:	2204      	movs	r2, #4
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e04e      	b.n	8006f38 <UART_SetConfig+0x178>
 8006e9a:	231b      	movs	r3, #27
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e049      	b.n	8006f38 <UART_SetConfig+0x178>
 8006ea4:	231b      	movs	r3, #27
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e044      	b.n	8006f38 <UART_SetConfig+0x178>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a90      	ldr	r2, [pc, #576]	; (80070f4 <UART_SetConfig+0x334>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d127      	bne.n	8006f08 <UART_SetConfig+0x148>
 8006eb8:	4b8d      	ldr	r3, [pc, #564]	; (80070f0 <UART_SetConfig+0x330>)
 8006eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebc:	220c      	movs	r2, #12
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	d017      	beq.n	8006ef4 <UART_SetConfig+0x134>
 8006ec4:	d81b      	bhi.n	8006efe <UART_SetConfig+0x13e>
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d00a      	beq.n	8006ee0 <UART_SetConfig+0x120>
 8006eca:	d818      	bhi.n	8006efe <UART_SetConfig+0x13e>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <UART_SetConfig+0x116>
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d00a      	beq.n	8006eea <UART_SetConfig+0x12a>
 8006ed4:	e013      	b.n	8006efe <UART_SetConfig+0x13e>
 8006ed6:	231b      	movs	r3, #27
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	e02b      	b.n	8006f38 <UART_SetConfig+0x178>
 8006ee0:	231b      	movs	r3, #27
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e026      	b.n	8006f38 <UART_SetConfig+0x178>
 8006eea:	231b      	movs	r3, #27
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2204      	movs	r2, #4
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e021      	b.n	8006f38 <UART_SetConfig+0x178>
 8006ef4:	231b      	movs	r3, #27
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	2208      	movs	r2, #8
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	e01c      	b.n	8006f38 <UART_SetConfig+0x178>
 8006efe:	231b      	movs	r3, #27
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	2210      	movs	r2, #16
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	e017      	b.n	8006f38 <UART_SetConfig+0x178>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a7a      	ldr	r2, [pc, #488]	; (80070f8 <UART_SetConfig+0x338>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d104      	bne.n	8006f1c <UART_SetConfig+0x15c>
 8006f12:	231b      	movs	r3, #27
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	e00d      	b.n	8006f38 <UART_SetConfig+0x178>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a76      	ldr	r2, [pc, #472]	; (80070fc <UART_SetConfig+0x33c>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d104      	bne.n	8006f30 <UART_SetConfig+0x170>
 8006f26:	231b      	movs	r3, #27
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	e003      	b.n	8006f38 <UART_SetConfig+0x178>
 8006f30:	231b      	movs	r3, #27
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	2210      	movs	r2, #16
 8006f36:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	2380      	movs	r3, #128	; 0x80
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d000      	beq.n	8006f46 <UART_SetConfig+0x186>
 8006f44:	e065      	b.n	8007012 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006f46:	231b      	movs	r3, #27
 8006f48:	18fb      	adds	r3, r7, r3
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d015      	beq.n	8006f7c <UART_SetConfig+0x1bc>
 8006f50:	dc18      	bgt.n	8006f84 <UART_SetConfig+0x1c4>
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d00d      	beq.n	8006f72 <UART_SetConfig+0x1b2>
 8006f56:	dc15      	bgt.n	8006f84 <UART_SetConfig+0x1c4>
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <UART_SetConfig+0x1a2>
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d005      	beq.n	8006f6c <UART_SetConfig+0x1ac>
 8006f60:	e010      	b.n	8006f84 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f62:	f7fd fd03 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8006f66:	0003      	movs	r3, r0
 8006f68:	617b      	str	r3, [r7, #20]
        break;
 8006f6a:	e012      	b.n	8006f92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f6c:	4b64      	ldr	r3, [pc, #400]	; (8007100 <UART_SetConfig+0x340>)
 8006f6e:	617b      	str	r3, [r7, #20]
        break;
 8006f70:	e00f      	b.n	8006f92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f72:	f7fd fc6f 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8006f76:	0003      	movs	r3, r0
 8006f78:	617b      	str	r3, [r7, #20]
        break;
 8006f7a:	e00a      	b.n	8006f92 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7c:	2380      	movs	r3, #128	; 0x80
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	617b      	str	r3, [r7, #20]
        break;
 8006f82:	e006      	b.n	8006f92 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f88:	231a      	movs	r3, #26
 8006f8a:	18fb      	adds	r3, r7, r3
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
        break;
 8006f90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d100      	bne.n	8006f9a <UART_SetConfig+0x1da>
 8006f98:	e08d      	b.n	80070b6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f9e:	4b59      	ldr	r3, [pc, #356]	; (8007104 <UART_SetConfig+0x344>)
 8006fa0:	0052      	lsls	r2, r2, #1
 8006fa2:	5ad3      	ldrh	r3, [r2, r3]
 8006fa4:	0019      	movs	r1, r3
 8006fa6:	6978      	ldr	r0, [r7, #20]
 8006fa8:	f7f9 f8aa 	bl	8000100 <__udivsi3>
 8006fac:	0003      	movs	r3, r0
 8006fae:	005a      	lsls	r2, r3, #1
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	18d2      	adds	r2, r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	0019      	movs	r1, r3
 8006fbe:	0010      	movs	r0, r2
 8006fc0:	f7f9 f89e 	bl	8000100 <__udivsi3>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	2b0f      	cmp	r3, #15
 8006fcc:	d91c      	bls.n	8007008 <UART_SetConfig+0x248>
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	025b      	lsls	r3, r3, #9
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d217      	bcs.n	8007008 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	200e      	movs	r0, #14
 8006fde:	183b      	adds	r3, r7, r0
 8006fe0:	210f      	movs	r1, #15
 8006fe2:	438a      	bics	r2, r1
 8006fe4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2207      	movs	r2, #7
 8006fee:	4013      	ands	r3, r2
 8006ff0:	b299      	uxth	r1, r3
 8006ff2:	183b      	adds	r3, r7, r0
 8006ff4:	183a      	adds	r2, r7, r0
 8006ff6:	8812      	ldrh	r2, [r2, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	183a      	adds	r2, r7, r0
 8007002:	8812      	ldrh	r2, [r2, #0]
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	e056      	b.n	80070b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007008:	231a      	movs	r3, #26
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	2201      	movs	r2, #1
 800700e:	701a      	strb	r2, [r3, #0]
 8007010:	e051      	b.n	80070b6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007012:	231b      	movs	r3, #27
 8007014:	18fb      	adds	r3, r7, r3
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d015      	beq.n	8007048 <UART_SetConfig+0x288>
 800701c:	dc18      	bgt.n	8007050 <UART_SetConfig+0x290>
 800701e:	2b04      	cmp	r3, #4
 8007020:	d00d      	beq.n	800703e <UART_SetConfig+0x27e>
 8007022:	dc15      	bgt.n	8007050 <UART_SetConfig+0x290>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <UART_SetConfig+0x26e>
 8007028:	2b02      	cmp	r3, #2
 800702a:	d005      	beq.n	8007038 <UART_SetConfig+0x278>
 800702c:	e010      	b.n	8007050 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800702e:	f7fd fc9d 	bl	800496c <HAL_RCC_GetPCLK1Freq>
 8007032:	0003      	movs	r3, r0
 8007034:	617b      	str	r3, [r7, #20]
        break;
 8007036:	e012      	b.n	800705e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007038:	4b31      	ldr	r3, [pc, #196]	; (8007100 <UART_SetConfig+0x340>)
 800703a:	617b      	str	r3, [r7, #20]
        break;
 800703c:	e00f      	b.n	800705e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703e:	f7fd fc09 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8007042:	0003      	movs	r3, r0
 8007044:	617b      	str	r3, [r7, #20]
        break;
 8007046:	e00a      	b.n	800705e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007048:	2380      	movs	r3, #128	; 0x80
 800704a:	021b      	lsls	r3, r3, #8
 800704c:	617b      	str	r3, [r7, #20]
        break;
 800704e:	e006      	b.n	800705e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007054:	231a      	movs	r3, #26
 8007056:	18fb      	adds	r3, r7, r3
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]
        break;
 800705c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d028      	beq.n	80070b6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007068:	4b26      	ldr	r3, [pc, #152]	; (8007104 <UART_SetConfig+0x344>)
 800706a:	0052      	lsls	r2, r2, #1
 800706c:	5ad3      	ldrh	r3, [r2, r3]
 800706e:	0019      	movs	r1, r3
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f7f9 f845 	bl	8000100 <__udivsi3>
 8007076:	0003      	movs	r3, r0
 8007078:	001a      	movs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	085b      	lsrs	r3, r3, #1
 8007080:	18d2      	adds	r2, r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	0019      	movs	r1, r3
 8007088:	0010      	movs	r0, r2
 800708a:	f7f9 f839 	bl	8000100 <__udivsi3>
 800708e:	0003      	movs	r3, r0
 8007090:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b0f      	cmp	r3, #15
 8007096:	d90a      	bls.n	80070ae <UART_SetConfig+0x2ee>
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	025b      	lsls	r3, r3, #9
 800709e:	429a      	cmp	r2, r3
 80070a0:	d205      	bcs.n	80070ae <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60da      	str	r2, [r3, #12]
 80070ac:	e003      	b.n	80070b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80070ae:	231a      	movs	r3, #26
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	2201      	movs	r2, #1
 80070b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	226a      	movs	r2, #106	; 0x6a
 80070ba:	2101      	movs	r1, #1
 80070bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2268      	movs	r2, #104	; 0x68
 80070c2:	2101      	movs	r1, #1
 80070c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80070d2:	231a      	movs	r3, #26
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	781b      	ldrb	r3, [r3, #0]
}
 80070d8:	0018      	movs	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	b008      	add	sp, #32
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	cfff69f3 	.word	0xcfff69f3
 80070e4:	ffffcfff 	.word	0xffffcfff
 80070e8:	11fff4ff 	.word	0x11fff4ff
 80070ec:	40013800 	.word	0x40013800
 80070f0:	40021000 	.word	0x40021000
 80070f4:	40004400 	.word	0x40004400
 80070f8:	40004800 	.word	0x40004800
 80070fc:	40004c00 	.word	0x40004c00
 8007100:	00f42400 	.word	0x00f42400
 8007104:	08008500 	.word	0x08008500

08007108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	2201      	movs	r2, #1
 8007116:	4013      	ands	r3, r2
 8007118:	d00b      	beq.n	8007132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	4a4a      	ldr	r2, [pc, #296]	; (800724c <UART_AdvFeatureConfig+0x144>)
 8007122:	4013      	ands	r3, r2
 8007124:	0019      	movs	r1, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	2202      	movs	r2, #2
 8007138:	4013      	ands	r3, r2
 800713a:	d00b      	beq.n	8007154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	4a43      	ldr	r2, [pc, #268]	; (8007250 <UART_AdvFeatureConfig+0x148>)
 8007144:	4013      	ands	r3, r2
 8007146:	0019      	movs	r1, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007158:	2204      	movs	r2, #4
 800715a:	4013      	ands	r3, r2
 800715c:	d00b      	beq.n	8007176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a3b      	ldr	r2, [pc, #236]	; (8007254 <UART_AdvFeatureConfig+0x14c>)
 8007166:	4013      	ands	r3, r2
 8007168:	0019      	movs	r1, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	2208      	movs	r2, #8
 800717c:	4013      	ands	r3, r2
 800717e:	d00b      	beq.n	8007198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4a34      	ldr	r2, [pc, #208]	; (8007258 <UART_AdvFeatureConfig+0x150>)
 8007188:	4013      	ands	r3, r2
 800718a:	0019      	movs	r1, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	430a      	orrs	r2, r1
 8007196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800719c:	2210      	movs	r2, #16
 800719e:	4013      	ands	r3, r2
 80071a0:	d00b      	beq.n	80071ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	4a2c      	ldr	r2, [pc, #176]	; (800725c <UART_AdvFeatureConfig+0x154>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	0019      	movs	r1, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071be:	2220      	movs	r2, #32
 80071c0:	4013      	ands	r3, r2
 80071c2:	d00b      	beq.n	80071dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	4a25      	ldr	r2, [pc, #148]	; (8007260 <UART_AdvFeatureConfig+0x158>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	0019      	movs	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e0:	2240      	movs	r2, #64	; 0x40
 80071e2:	4013      	ands	r3, r2
 80071e4:	d01d      	beq.n	8007222 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	4a1d      	ldr	r2, [pc, #116]	; (8007264 <UART_AdvFeatureConfig+0x15c>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	0019      	movs	r1, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007202:	2380      	movs	r3, #128	; 0x80
 8007204:	035b      	lsls	r3, r3, #13
 8007206:	429a      	cmp	r2, r3
 8007208:	d10b      	bne.n	8007222 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	4a15      	ldr	r2, [pc, #84]	; (8007268 <UART_AdvFeatureConfig+0x160>)
 8007212:	4013      	ands	r3, r2
 8007214:	0019      	movs	r1, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007226:	2280      	movs	r2, #128	; 0x80
 8007228:	4013      	ands	r3, r2
 800722a:	d00b      	beq.n	8007244 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	4a0e      	ldr	r2, [pc, #56]	; (800726c <UART_AdvFeatureConfig+0x164>)
 8007234:	4013      	ands	r3, r2
 8007236:	0019      	movs	r1, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	605a      	str	r2, [r3, #4]
  }
}
 8007244:	46c0      	nop			; (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b002      	add	sp, #8
 800724a:	bd80      	pop	{r7, pc}
 800724c:	fffdffff 	.word	0xfffdffff
 8007250:	fffeffff 	.word	0xfffeffff
 8007254:	fffbffff 	.word	0xfffbffff
 8007258:	ffff7fff 	.word	0xffff7fff
 800725c:	ffffefff 	.word	0xffffefff
 8007260:	ffffdfff 	.word	0xffffdfff
 8007264:	ffefffff 	.word	0xffefffff
 8007268:	ff9fffff 	.word	0xff9fffff
 800726c:	fff7ffff 	.word	0xfff7ffff

08007270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af02      	add	r7, sp, #8
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2290      	movs	r2, #144	; 0x90
 800727c:	2100      	movs	r1, #0
 800727e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007280:	f7fc f824 	bl	80032cc <HAL_GetTick>
 8007284:	0003      	movs	r3, r0
 8007286:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2208      	movs	r2, #8
 8007290:	4013      	ands	r3, r2
 8007292:	2b08      	cmp	r3, #8
 8007294:	d10c      	bne.n	80072b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2280      	movs	r2, #128	; 0x80
 800729a:	0391      	lsls	r1, r2, #14
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4a1a      	ldr	r2, [pc, #104]	; (8007308 <UART_CheckIdleState+0x98>)
 80072a0:	9200      	str	r2, [sp, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f000 f832 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 80072a8:	1e03      	subs	r3, r0, #0
 80072aa:	d001      	beq.n	80072b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e026      	b.n	80072fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2204      	movs	r2, #4
 80072b8:	4013      	ands	r3, r2
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d10c      	bne.n	80072d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2280      	movs	r2, #128	; 0x80
 80072c2:	03d1      	lsls	r1, r2, #15
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	4a10      	ldr	r2, [pc, #64]	; (8007308 <UART_CheckIdleState+0x98>)
 80072c8:	9200      	str	r2, [sp, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f000 f81e 	bl	800730c <UART_WaitOnFlagUntilTimeout>
 80072d0:	1e03      	subs	r3, r0, #0
 80072d2:	d001      	beq.n	80072d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e012      	b.n	80072fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2288      	movs	r2, #136	; 0x88
 80072dc:	2120      	movs	r1, #32
 80072de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	228c      	movs	r2, #140	; 0x8c
 80072e4:	2120      	movs	r1, #32
 80072e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2284      	movs	r2, #132	; 0x84
 80072f8:	2100      	movs	r1, #0
 80072fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	0018      	movs	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	b004      	add	sp, #16
 8007304:	bd80      	pop	{r7, pc}
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	01ffffff 	.word	0x01ffffff

0800730c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b094      	sub	sp, #80	; 0x50
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	1dfb      	adds	r3, r7, #7
 800731a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731c:	e0a7      	b.n	800746e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800731e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007320:	3301      	adds	r3, #1
 8007322:	d100      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007324:	e0a3      	b.n	800746e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007326:	f7fb ffd1 	bl	80032cc <HAL_GetTick>
 800732a:	0002      	movs	r2, r0
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007332:	429a      	cmp	r2, r3
 8007334:	d302      	bcc.n	800733c <UART_WaitOnFlagUntilTimeout+0x30>
 8007336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007338:	2b00      	cmp	r3, #0
 800733a:	d13f      	bne.n	80073bc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733c:	f3ef 8310 	mrs	r3, PRIMASK
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007342:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007344:	647b      	str	r3, [r7, #68]	; 0x44
 8007346:	2301      	movs	r3, #1
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	f383 8810 	msr	PRIMASK, r3
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	494e      	ldr	r1, [pc, #312]	; (8007498 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800735e:	400a      	ands	r2, r1
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007364:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	f383 8810 	msr	PRIMASK, r3
}
 800736c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800736e:	f3ef 8310 	mrs	r3, PRIMASK
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
 8007378:	2301      	movs	r3, #1
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	f383 8810 	msr	PRIMASK, r3
}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2101      	movs	r1, #1
 8007390:	438a      	bics	r2, r1
 8007392:	609a      	str	r2, [r3, #8]
 8007394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739a:	f383 8810 	msr	PRIMASK, r3
}
 800739e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2288      	movs	r2, #136	; 0x88
 80073a4:	2120      	movs	r1, #32
 80073a6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	228c      	movs	r2, #140	; 0x8c
 80073ac:	2120      	movs	r1, #32
 80073ae:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2284      	movs	r2, #132	; 0x84
 80073b4:	2100      	movs	r1, #0
 80073b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e069      	b.n	8007490 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2204      	movs	r2, #4
 80073c4:	4013      	ands	r3, r2
 80073c6:	d052      	beq.n	800746e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	2380      	movs	r3, #128	; 0x80
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	401a      	ands	r2, r3
 80073d4:	2380      	movs	r3, #128	; 0x80
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	429a      	cmp	r2, r3
 80073da:	d148      	bne.n	800746e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2280      	movs	r2, #128	; 0x80
 80073e2:	0112      	lsls	r2, r2, #4
 80073e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ea:	613b      	str	r3, [r7, #16]
  return(result);
 80073ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f383 8810 	msr	PRIMASK, r3
}
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4924      	ldr	r1, [pc, #144]	; (8007498 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007408:	400a      	ands	r2, r1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f383 8810 	msr	PRIMASK, r3
}
 8007416:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007418:	f3ef 8310 	mrs	r3, PRIMASK
 800741c:	61fb      	str	r3, [r7, #28]
  return(result);
 800741e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007420:	64bb      	str	r3, [r7, #72]	; 0x48
 8007422:	2301      	movs	r3, #1
 8007424:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f383 8810 	msr	PRIMASK, r3
}
 800742c:	46c0      	nop			; (mov r8, r8)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2101      	movs	r1, #1
 800743a:	438a      	bics	r2, r1
 800743c:	609a      	str	r2, [r3, #8]
 800743e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	f383 8810 	msr	PRIMASK, r3
}
 8007448:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2288      	movs	r2, #136	; 0x88
 800744e:	2120      	movs	r1, #32
 8007450:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	228c      	movs	r2, #140	; 0x8c
 8007456:	2120      	movs	r1, #32
 8007458:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2290      	movs	r2, #144	; 0x90
 800745e:	2120      	movs	r1, #32
 8007460:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2284      	movs	r2, #132	; 0x84
 8007466:	2100      	movs	r1, #0
 8007468:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e010      	b.n	8007490 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	4013      	ands	r3, r2
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	425a      	negs	r2, r3
 800747e:	4153      	adcs	r3, r2
 8007480:	b2db      	uxtb	r3, r3
 8007482:	001a      	movs	r2, r3
 8007484:	1dfb      	adds	r3, r7, #7
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d100      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0x182>
 800748c:	e747      	b.n	800731e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b014      	add	sp, #80	; 0x50
 8007496:	bd80      	pop	{r7, pc}
 8007498:	fffffe5f 	.word	0xfffffe5f

0800749c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b098      	sub	sp, #96	; 0x60
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	1dbb      	adds	r3, r7, #6
 80074a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1dba      	adds	r2, r7, #6
 80074b4:	215c      	movs	r1, #92	; 0x5c
 80074b6:	8812      	ldrh	r2, [r2, #0]
 80074b8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1dba      	adds	r2, r7, #6
 80074be:	215e      	movs	r1, #94	; 0x5e
 80074c0:	8812      	ldrh	r2, [r2, #0]
 80074c2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	2380      	movs	r3, #128	; 0x80
 80074d0:	015b      	lsls	r3, r3, #5
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d10d      	bne.n	80074f2 <UART_Start_Receive_IT+0x56>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <UART_Start_Receive_IT+0x4c>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2260      	movs	r2, #96	; 0x60
 80074e2:	497b      	ldr	r1, [pc, #492]	; (80076d0 <UART_Start_Receive_IT+0x234>)
 80074e4:	5299      	strh	r1, [r3, r2]
 80074e6:	e02e      	b.n	8007546 <UART_Start_Receive_IT+0xaa>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2260      	movs	r2, #96	; 0x60
 80074ec:	21ff      	movs	r1, #255	; 0xff
 80074ee:	5299      	strh	r1, [r3, r2]
 80074f0:	e029      	b.n	8007546 <UART_Start_Receive_IT+0xaa>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10d      	bne.n	8007516 <UART_Start_Receive_IT+0x7a>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <UART_Start_Receive_IT+0x70>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2260      	movs	r2, #96	; 0x60
 8007506:	21ff      	movs	r1, #255	; 0xff
 8007508:	5299      	strh	r1, [r3, r2]
 800750a:	e01c      	b.n	8007546 <UART_Start_Receive_IT+0xaa>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2260      	movs	r2, #96	; 0x60
 8007510:	217f      	movs	r1, #127	; 0x7f
 8007512:	5299      	strh	r1, [r3, r2]
 8007514:	e017      	b.n	8007546 <UART_Start_Receive_IT+0xaa>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	2380      	movs	r3, #128	; 0x80
 800751c:	055b      	lsls	r3, r3, #21
 800751e:	429a      	cmp	r2, r3
 8007520:	d10d      	bne.n	800753e <UART_Start_Receive_IT+0xa2>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <UART_Start_Receive_IT+0x98>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2260      	movs	r2, #96	; 0x60
 800752e:	217f      	movs	r1, #127	; 0x7f
 8007530:	5299      	strh	r1, [r3, r2]
 8007532:	e008      	b.n	8007546 <UART_Start_Receive_IT+0xaa>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2260      	movs	r2, #96	; 0x60
 8007538:	213f      	movs	r1, #63	; 0x3f
 800753a:	5299      	strh	r1, [r3, r2]
 800753c:	e003      	b.n	8007546 <UART_Start_Receive_IT+0xaa>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2260      	movs	r2, #96	; 0x60
 8007542:	2100      	movs	r1, #0
 8007544:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2290      	movs	r2, #144	; 0x90
 800754a:	2100      	movs	r1, #0
 800754c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	228c      	movs	r2, #140	; 0x8c
 8007552:	2122      	movs	r1, #34	; 0x22
 8007554:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007556:	f3ef 8310 	mrs	r3, PRIMASK
 800755a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 800755c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007560:	2301      	movs	r3, #1
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007566:	f383 8810 	msr	PRIMASK, r3
}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2101      	movs	r1, #1
 8007578:	430a      	orrs	r2, r1
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800757e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007582:	f383 8810 	msr	PRIMASK, r3
}
 8007586:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	059b      	lsls	r3, r3, #22
 8007590:	429a      	cmp	r2, r3
 8007592:	d150      	bne.n	8007636 <UART_Start_Receive_IT+0x19a>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2268      	movs	r2, #104	; 0x68
 8007598:	5a9b      	ldrh	r3, [r3, r2]
 800759a:	1dba      	adds	r2, r7, #6
 800759c:	8812      	ldrh	r2, [r2, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d349      	bcc.n	8007636 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689a      	ldr	r2, [r3, #8]
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	015b      	lsls	r3, r3, #5
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d107      	bne.n	80075be <UART_Start_Receive_IT+0x122>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d103      	bne.n	80075be <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a46      	ldr	r2, [pc, #280]	; (80076d4 <UART_Start_Receive_IT+0x238>)
 80075ba:	675a      	str	r2, [r3, #116]	; 0x74
 80075bc:	e002      	b.n	80075c4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a45      	ldr	r2, [pc, #276]	; (80076d8 <UART_Start_Receive_IT+0x23c>)
 80075c2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d019      	beq.n	8007600 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075cc:	f3ef 8310 	mrs	r3, PRIMASK
 80075d0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075d6:	2301      	movs	r3, #1
 80075d8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	f383 8810 	msr	PRIMASK, r3
}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2180      	movs	r1, #128	; 0x80
 80075ee:	0049      	lsls	r1, r1, #1
 80075f0:	430a      	orrs	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075fa:	f383 8810 	msr	PRIMASK, r3
}
 80075fe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007600:	f3ef 8310 	mrs	r3, PRIMASK
 8007604:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007608:	657b      	str	r3, [r7, #84]	; 0x54
 800760a:	2301      	movs	r3, #1
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	f383 8810 	msr	PRIMASK, r3
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	0549      	lsls	r1, r1, #21
 8007624:	430a      	orrs	r2, r1
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800762a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	f383 8810 	msr	PRIMASK, r3
}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	e047      	b.n	80076c6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	2380      	movs	r3, #128	; 0x80
 800763c:	015b      	lsls	r3, r3, #5
 800763e:	429a      	cmp	r2, r3
 8007640:	d107      	bne.n	8007652 <UART_Start_Receive_IT+0x1b6>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4a23      	ldr	r2, [pc, #140]	; (80076dc <UART_Start_Receive_IT+0x240>)
 800764e:	675a      	str	r2, [r3, #116]	; 0x74
 8007650:	e002      	b.n	8007658 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4a22      	ldr	r2, [pc, #136]	; (80076e0 <UART_Start_Receive_IT+0x244>)
 8007656:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d019      	beq.n	8007694 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007660:	f3ef 8310 	mrs	r3, PRIMASK
 8007664:	61fb      	str	r3, [r7, #28]
  return(result);
 8007666:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800766a:	2301      	movs	r3, #1
 800766c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	f383 8810 	msr	PRIMASK, r3
}
 8007674:	46c0      	nop			; (mov r8, r8)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2190      	movs	r1, #144	; 0x90
 8007682:	0049      	lsls	r1, r1, #1
 8007684:	430a      	orrs	r2, r1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	f383 8810 	msr	PRIMASK, r3
}
 8007692:	e018      	b.n	80076c6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007694:	f3ef 8310 	mrs	r3, PRIMASK
 8007698:	613b      	str	r3, [r7, #16]
  return(result);
 800769a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800769c:	653b      	str	r3, [r7, #80]	; 0x50
 800769e:	2301      	movs	r3, #1
 80076a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f383 8810 	msr	PRIMASK, r3
}
 80076a8:	46c0      	nop			; (mov r8, r8)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2120      	movs	r1, #32
 80076b6:	430a      	orrs	r2, r1
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	f383 8810 	msr	PRIMASK, r3
}
 80076c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	0018      	movs	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b018      	add	sp, #96	; 0x60
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	000001ff 	.word	0x000001ff
 80076d4:	08007e0d 	.word	0x08007e0d
 80076d8:	08007b21 	.word	0x08007b21
 80076dc:	080079ad 	.word	0x080079ad
 80076e0:	08007839 	.word	0x08007839

080076e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08e      	sub	sp, #56	; 0x38
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076ec:	f3ef 8310 	mrs	r3, PRIMASK
 80076f0:	617b      	str	r3, [r7, #20]
  return(result);
 80076f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
 80076f6:	2301      	movs	r3, #1
 80076f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	f383 8810 	msr	PRIMASK, r3
}
 8007700:	46c0      	nop			; (mov r8, r8)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4926      	ldr	r1, [pc, #152]	; (80077a8 <UART_EndRxTransfer+0xc4>)
 800770e:	400a      	ands	r2, r1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	f383 8810 	msr	PRIMASK, r3
}
 800771c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800771e:	f3ef 8310 	mrs	r3, PRIMASK
 8007722:	623b      	str	r3, [r7, #32]
  return(result);
 8007724:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007726:	633b      	str	r3, [r7, #48]	; 0x30
 8007728:	2301      	movs	r3, #1
 800772a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	f383 8810 	msr	PRIMASK, r3
}
 8007732:	46c0      	nop			; (mov r8, r8)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	491b      	ldr	r1, [pc, #108]	; (80077ac <UART_EndRxTransfer+0xc8>)
 8007740:	400a      	ands	r2, r1
 8007742:	609a      	str	r2, [r3, #8]
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	f383 8810 	msr	PRIMASK, r3
}
 800774e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d118      	bne.n	800778a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007758:	f3ef 8310 	mrs	r3, PRIMASK
 800775c:	60bb      	str	r3, [r7, #8]
  return(result);
 800775e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007762:	2301      	movs	r3, #1
 8007764:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f383 8810 	msr	PRIMASK, r3
}
 800776c:	46c0      	nop			; (mov r8, r8)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2110      	movs	r1, #16
 800777a:	438a      	bics	r2, r1
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f383 8810 	msr	PRIMASK, r3
}
 8007788:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	228c      	movs	r2, #140	; 0x8c
 800778e:	2120      	movs	r1, #32
 8007790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b00e      	add	sp, #56	; 0x38
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	fffffedf 	.word	0xfffffedf
 80077ac:	effffffe 	.word	0xeffffffe

080077b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	225e      	movs	r2, #94	; 0x5e
 80077c2:	2100      	movs	r1, #0
 80077c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2256      	movs	r2, #86	; 0x56
 80077ca:	2100      	movs	r1, #0
 80077cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	0018      	movs	r0, r3
 80077d2:	f7ff fae1 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	46bd      	mov	sp, r7
 80077da:	b004      	add	sp, #16
 80077dc:	bd80      	pop	{r7, pc}

080077de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e6:	f3ef 8310 	mrs	r3, PRIMASK
 80077ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	2301      	movs	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2140      	movs	r1, #64	; 0x40
 8007808:	438a      	bics	r2, r1
 800780a:	601a      	str	r2, [r3, #0]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	f383 8810 	msr	PRIMASK, r3
}
 8007816:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2288      	movs	r2, #136	; 0x88
 800781c:	2120      	movs	r1, #32
 800781e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	0018      	movs	r0, r3
 800782a:	f7fa fb2f 	bl	8001e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	46bd      	mov	sp, r7
 8007832:	b006      	add	sp, #24
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b090      	sub	sp, #64	; 0x40
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007840:	203e      	movs	r0, #62	; 0x3e
 8007842:	183b      	adds	r3, r7, r0
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	2160      	movs	r1, #96	; 0x60
 8007848:	5a52      	ldrh	r2, [r2, r1]
 800784a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	228c      	movs	r2, #140	; 0x8c
 8007850:	589b      	ldr	r3, [r3, r2]
 8007852:	2b22      	cmp	r3, #34	; 0x22
 8007854:	d000      	beq.n	8007858 <UART_RxISR_8BIT+0x20>
 8007856:	e09a      	b.n	800798e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800785e:	213c      	movs	r1, #60	; 0x3c
 8007860:	187b      	adds	r3, r7, r1
 8007862:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007864:	187b      	adds	r3, r7, r1
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b2da      	uxtb	r2, r3
 800786a:	183b      	adds	r3, r7, r0
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b2d9      	uxtb	r1, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007874:	400a      	ands	r2, r1
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	225e      	movs	r2, #94	; 0x5e
 8007888:	5a9b      	ldrh	r3, [r3, r2]
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b299      	uxth	r1, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	225e      	movs	r2, #94	; 0x5e
 8007894:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	225e      	movs	r2, #94	; 0x5e
 800789a:	5a9b      	ldrh	r3, [r3, r2]
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d000      	beq.n	80078a4 <UART_RxISR_8BIT+0x6c>
 80078a2:	e07c      	b.n	800799e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a4:	f3ef 8310 	mrs	r3, PRIMASK
 80078a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80078aa:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ae:	2301      	movs	r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f383 8810 	msr	PRIMASK, r3
}
 80078b8:	46c0      	nop			; (mov r8, r8)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4938      	ldr	r1, [pc, #224]	; (80079a8 <UART_RxISR_8BIT+0x170>)
 80078c6:	400a      	ands	r2, r1
 80078c8:	601a      	str	r2, [r3, #0]
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	f383 8810 	msr	PRIMASK, r3
}
 80078d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d6:	f3ef 8310 	mrs	r3, PRIMASK
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
 80078e0:	2301      	movs	r3, #1
 80078e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e6:	f383 8810 	msr	PRIMASK, r3
}
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2101      	movs	r1, #1
 80078f8:	438a      	bics	r2, r1
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	f383 8810 	msr	PRIMASK, r3
}
 8007906:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	228c      	movs	r2, #140	; 0x8c
 800790c:	2120      	movs	r1, #32
 800790e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007920:	2b01      	cmp	r3, #1
 8007922:	d12f      	bne.n	8007984 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792a:	f3ef 8310 	mrs	r3, PRIMASK
 800792e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007930:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007932:	633b      	str	r3, [r7, #48]	; 0x30
 8007934:	2301      	movs	r3, #1
 8007936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2110      	movs	r1, #16
 800794c:	438a      	bics	r2, r1
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	2210      	movs	r2, #16
 8007964:	4013      	ands	r3, r2
 8007966:	2b10      	cmp	r3, #16
 8007968:	d103      	bne.n	8007972 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2210      	movs	r2, #16
 8007970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	225c      	movs	r2, #92	; 0x5c
 8007976:	5a9a      	ldrh	r2, [r3, r2]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	0011      	movs	r1, r2
 800797c:	0018      	movs	r0, r3
 800797e:	f7ff fa13 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007982:	e00c      	b.n	800799e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	0018      	movs	r0, r3
 8007988:	f7fa fa88 	bl	8001e9c <HAL_UART_RxCpltCallback>
}
 800798c:	e007      	b.n	800799e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2108      	movs	r1, #8
 800799a:	430a      	orrs	r2, r1
 800799c:	619a      	str	r2, [r3, #24]
}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	46bd      	mov	sp, r7
 80079a2:	b010      	add	sp, #64	; 0x40
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	fffffedf 	.word	0xfffffedf

080079ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b090      	sub	sp, #64	; 0x40
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079b4:	203e      	movs	r0, #62	; 0x3e
 80079b6:	183b      	adds	r3, r7, r0
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	2160      	movs	r1, #96	; 0x60
 80079bc:	5a52      	ldrh	r2, [r2, r1]
 80079be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	228c      	movs	r2, #140	; 0x8c
 80079c4:	589b      	ldr	r3, [r3, r2]
 80079c6:	2b22      	cmp	r3, #34	; 0x22
 80079c8:	d000      	beq.n	80079cc <UART_RxISR_16BIT+0x20>
 80079ca:	e09a      	b.n	8007b02 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d2:	213c      	movs	r1, #60	; 0x3c
 80079d4:	187b      	adds	r3, r7, r1
 80079d6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80079de:	187b      	adds	r3, r7, r1
 80079e0:	183a      	adds	r2, r7, r0
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	8812      	ldrh	r2, [r2, #0]
 80079e6:	4013      	ands	r3, r2
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	225e      	movs	r2, #94	; 0x5e
 80079fc:	5a9b      	ldrh	r3, [r3, r2]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b299      	uxth	r1, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	225e      	movs	r2, #94	; 0x5e
 8007a08:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	225e      	movs	r2, #94	; 0x5e
 8007a0e:	5a9b      	ldrh	r3, [r3, r2]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d000      	beq.n	8007a18 <UART_RxISR_16BIT+0x6c>
 8007a16:	e07c      	b.n	8007b12 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a18:	f3ef 8310 	mrs	r3, PRIMASK
 8007a1c:	617b      	str	r3, [r7, #20]
  return(result);
 8007a1e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	2301      	movs	r3, #1
 8007a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	f383 8810 	msr	PRIMASK, r3
}
 8007a2c:	46c0      	nop			; (mov r8, r8)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4938      	ldr	r1, [pc, #224]	; (8007b1c <UART_RxISR_16BIT+0x170>)
 8007a3a:	400a      	ands	r2, r1
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	f383 8810 	msr	PRIMASK, r3
}
 8007a48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a4e:	623b      	str	r3, [r7, #32]
  return(result);
 8007a50:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a52:	633b      	str	r3, [r7, #48]	; 0x30
 8007a54:	2301      	movs	r3, #1
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	f383 8810 	msr	PRIMASK, r3
}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	438a      	bics	r2, r1
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	f383 8810 	msr	PRIMASK, r3
}
 8007a7a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	228c      	movs	r2, #140	; 0x8c
 8007a80:	2120      	movs	r1, #32
 8007a82:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d12f      	bne.n	8007af8 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007aa4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f383 8810 	msr	PRIMASK, r3
}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2110      	movs	r1, #16
 8007ac0:	438a      	bics	r2, r1
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f383 8810 	msr	PRIMASK, r3
}
 8007ace:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	2210      	movs	r2, #16
 8007ad8:	4013      	ands	r3, r2
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d103      	bne.n	8007ae6 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2210      	movs	r2, #16
 8007ae4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	225c      	movs	r2, #92	; 0x5c
 8007aea:	5a9a      	ldrh	r2, [r3, r2]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	0011      	movs	r1, r2
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7ff f959 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007af6:	e00c      	b.n	8007b12 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	0018      	movs	r0, r3
 8007afc:	f7fa f9ce 	bl	8001e9c <HAL_UART_RxCpltCallback>
}
 8007b00:	e007      	b.n	8007b12 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	699a      	ldr	r2, [r3, #24]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2108      	movs	r1, #8
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	619a      	str	r2, [r3, #24]
}
 8007b12:	46c0      	nop			; (mov r8, r8)
 8007b14:	46bd      	mov	sp, r7
 8007b16:	b010      	add	sp, #64	; 0x40
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	46c0      	nop			; (mov r8, r8)
 8007b1c:	fffffedf 	.word	0xfffffedf

08007b20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b09c      	sub	sp, #112	; 0x70
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b28:	236a      	movs	r3, #106	; 0x6a
 8007b2a:	18fb      	adds	r3, r7, r3
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	2160      	movs	r1, #96	; 0x60
 8007b30:	5a52      	ldrh	r2, [r2, r1]
 8007b32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	228c      	movs	r2, #140	; 0x8c
 8007b50:	589b      	ldr	r3, [r3, r2]
 8007b52:	2b22      	cmp	r3, #34	; 0x22
 8007b54:	d000      	beq.n	8007b58 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007b56:	e144      	b.n	8007de2 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007b58:	235e      	movs	r3, #94	; 0x5e
 8007b5a:	18fb      	adds	r3, r7, r3
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	2168      	movs	r1, #104	; 0x68
 8007b60:	5a52      	ldrh	r2, [r2, r1]
 8007b62:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b64:	e0eb      	b.n	8007d3e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b6c:	215c      	movs	r1, #92	; 0x5c
 8007b6e:	187b      	adds	r3, r7, r1
 8007b70:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b72:	187b      	adds	r3, r7, r1
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	236a      	movs	r3, #106	; 0x6a
 8007b7a:	18fb      	adds	r3, r7, r3
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	b2d9      	uxtb	r1, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b84:	400a      	ands	r2, r1
 8007b86:	b2d2      	uxtb	r2, r2
 8007b88:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	225e      	movs	r2, #94	; 0x5e
 8007b98:	5a9b      	ldrh	r3, [r3, r2]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	b299      	uxth	r1, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	225e      	movs	r2, #94	; 0x5e
 8007ba4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	d049      	beq.n	8007c4a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb8:	2201      	movs	r2, #1
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d010      	beq.n	8007be0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007bbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bc0:	2380      	movs	r3, #128	; 0x80
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	d00b      	beq.n	8007be0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2290      	movs	r2, #144	; 0x90
 8007bd4:	589b      	ldr	r3, [r3, r2]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2190      	movs	r1, #144	; 0x90
 8007bde:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be2:	2202      	movs	r2, #2
 8007be4:	4013      	ands	r3, r2
 8007be6:	d00f      	beq.n	8007c08 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bea:	2201      	movs	r2, #1
 8007bec:	4013      	ands	r3, r2
 8007bee:	d00b      	beq.n	8007c08 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2290      	movs	r2, #144	; 0x90
 8007bfc:	589b      	ldr	r3, [r3, r2]
 8007bfe:	2204      	movs	r2, #4
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2190      	movs	r1, #144	; 0x90
 8007c06:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	d00f      	beq.n	8007c30 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c12:	2201      	movs	r2, #1
 8007c14:	4013      	ands	r3, r2
 8007c16:	d00b      	beq.n	8007c30 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2290      	movs	r2, #144	; 0x90
 8007c24:	589b      	ldr	r3, [r3, r2]
 8007c26:	2202      	movs	r2, #2
 8007c28:	431a      	orrs	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2190      	movs	r1, #144	; 0x90
 8007c2e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2290      	movs	r2, #144	; 0x90
 8007c34:	589b      	ldr	r3, [r3, r2]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d007      	beq.n	8007c4a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	f7ff f8ab 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2290      	movs	r2, #144	; 0x90
 8007c46:	2100      	movs	r1, #0
 8007c48:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	225e      	movs	r2, #94	; 0x5e
 8007c4e:	5a9b      	ldrh	r3, [r3, r2]
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d173      	bne.n	8007d3e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c56:	f3ef 8310 	mrs	r3, PRIMASK
 8007c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c60:	2301      	movs	r3, #1
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f383 8810 	msr	PRIMASK, r3
}
 8007c6a:	46c0      	nop			; (mov r8, r8)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4961      	ldr	r1, [pc, #388]	; (8007dfc <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007c78:	400a      	ands	r2, r1
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	f383 8810 	msr	PRIMASK, r3
}
 8007c86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c88:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c90:	657b      	str	r3, [r7, #84]	; 0x54
 8007c92:	2301      	movs	r3, #1
 8007c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c98:	f383 8810 	msr	PRIMASK, r3
}
 8007c9c:	46c0      	nop			; (mov r8, r8)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689a      	ldr	r2, [r3, #8]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4955      	ldr	r1, [pc, #340]	; (8007e00 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007caa:	400a      	ands	r2, r1
 8007cac:	609a      	str	r2, [r3, #8]
 8007cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb4:	f383 8810 	msr	PRIMASK, r3
}
 8007cb8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	228c      	movs	r2, #140	; 0x8c
 8007cbe:	2120      	movs	r1, #32
 8007cc0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d12f      	bne.n	8007d36 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ce0:	623b      	str	r3, [r7, #32]
  return(result);
 8007ce2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	f383 8810 	msr	PRIMASK, r3
}
 8007cf0:	46c0      	nop			; (mov r8, r8)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2110      	movs	r1, #16
 8007cfe:	438a      	bics	r2, r1
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	f383 8810 	msr	PRIMASK, r3
}
 8007d0c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	2210      	movs	r2, #16
 8007d16:	4013      	ands	r3, r2
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d103      	bne.n	8007d24 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2210      	movs	r2, #16
 8007d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	225c      	movs	r2, #92	; 0x5c
 8007d28:	5a9a      	ldrh	r2, [r3, r2]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	0011      	movs	r1, r2
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f7ff f83a 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
 8007d34:	e003      	b.n	8007d3e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7fa f8af 	bl	8001e9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d3e:	235e      	movs	r3, #94	; 0x5e
 8007d40:	18fb      	adds	r3, r7, r3
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d000      	beq.n	8007d52 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007d50:	e709      	b.n	8007b66 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d52:	204e      	movs	r0, #78	; 0x4e
 8007d54:	183b      	adds	r3, r7, r0
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	215e      	movs	r1, #94	; 0x5e
 8007d5a:	5a52      	ldrh	r2, [r2, r1]
 8007d5c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d5e:	0001      	movs	r1, r0
 8007d60:	187b      	adds	r3, r7, r1
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d044      	beq.n	8007df2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2268      	movs	r2, #104	; 0x68
 8007d6c:	5a9b      	ldrh	r3, [r3, r2]
 8007d6e:	187a      	adds	r2, r7, r1
 8007d70:	8812      	ldrh	r2, [r2, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d23d      	bcs.n	8007df2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d76:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d80:	2301      	movs	r3, #1
 8007d82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f383 8810 	msr	PRIMASK, r3
}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	491b      	ldr	r1, [pc, #108]	; (8007e04 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007d98:	400a      	ands	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
 8007d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f383 8810 	msr	PRIMASK, r3
}
 8007da6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007dac:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dae:	f3ef 8310 	mrs	r3, PRIMASK
 8007db2:	617b      	str	r3, [r7, #20]
  return(result);
 8007db4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007db6:	647b      	str	r3, [r7, #68]	; 0x44
 8007db8:	2301      	movs	r3, #1
 8007dba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f383 8810 	msr	PRIMASK, r3
}
 8007dc2:	46c0      	nop			; (mov r8, r8)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2120      	movs	r1, #32
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f383 8810 	msr	PRIMASK, r3
}
 8007dde:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007de0:	e007      	b.n	8007df2 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2108      	movs	r1, #8
 8007dee:	430a      	orrs	r2, r1
 8007df0:	619a      	str	r2, [r3, #24]
}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b01c      	add	sp, #112	; 0x70
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	fffffeff 	.word	0xfffffeff
 8007e00:	effffffe 	.word	0xeffffffe
 8007e04:	efffffff 	.word	0xefffffff
 8007e08:	08007839 	.word	0x08007839

08007e0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b09e      	sub	sp, #120	; 0x78
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e14:	2372      	movs	r3, #114	; 0x72
 8007e16:	18fb      	adds	r3, r7, r3
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	2160      	movs	r1, #96	; 0x60
 8007e1c:	5a52      	ldrh	r2, [r2, r1]
 8007e1e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	228c      	movs	r2, #140	; 0x8c
 8007e3c:	589b      	ldr	r3, [r3, r2]
 8007e3e:	2b22      	cmp	r3, #34	; 0x22
 8007e40:	d000      	beq.n	8007e44 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007e42:	e144      	b.n	80080ce <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e44:	2366      	movs	r3, #102	; 0x66
 8007e46:	18fb      	adds	r3, r7, r3
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	2168      	movs	r1, #104	; 0x68
 8007e4c:	5a52      	ldrh	r2, [r2, r1]
 8007e4e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e50:	e0eb      	b.n	800802a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e58:	2164      	movs	r1, #100	; 0x64
 8007e5a:	187b      	adds	r3, r7, r1
 8007e5c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	2272      	movs	r2, #114	; 0x72
 8007e68:	18ba      	adds	r2, r7, r2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	8812      	ldrh	r2, [r2, #0]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7a:	1c9a      	adds	r2, r3, #2
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	225e      	movs	r2, #94	; 0x5e
 8007e84:	5a9b      	ldrh	r3, [r3, r2]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b299      	uxth	r1, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	225e      	movs	r2, #94	; 0x5e
 8007e90:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e9c:	2207      	movs	r2, #7
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d049      	beq.n	8007f36 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	d010      	beq.n	8007ecc <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007eaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007eac:	2380      	movs	r3, #128	; 0x80
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	d00b      	beq.n	8007ecc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2290      	movs	r2, #144	; 0x90
 8007ec0:	589b      	ldr	r3, [r3, r2]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2190      	movs	r1, #144	; 0x90
 8007eca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ece:	2202      	movs	r2, #2
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d00f      	beq.n	8007ef4 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4013      	ands	r3, r2
 8007eda:	d00b      	beq.n	8007ef4 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2290      	movs	r2, #144	; 0x90
 8007ee8:	589b      	ldr	r3, [r3, r2]
 8007eea:	2204      	movs	r2, #4
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2190      	movs	r1, #144	; 0x90
 8007ef2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ef6:	2204      	movs	r2, #4
 8007ef8:	4013      	ands	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <UART_RxISR_16BIT_FIFOEN+0x110>
 8007efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007efe:	2201      	movs	r2, #1
 8007f00:	4013      	ands	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2290      	movs	r2, #144	; 0x90
 8007f10:	589b      	ldr	r3, [r3, r2]
 8007f12:	2202      	movs	r2, #2
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2190      	movs	r1, #144	; 0x90
 8007f1a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2290      	movs	r2, #144	; 0x90
 8007f20:	589b      	ldr	r3, [r3, r2]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d007      	beq.n	8007f36 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7fe ff35 	bl	8006d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2290      	movs	r2, #144	; 0x90
 8007f32:	2100      	movs	r1, #0
 8007f34:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	225e      	movs	r2, #94	; 0x5e
 8007f3a:	5a9b      	ldrh	r3, [r3, r2]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d173      	bne.n	800802a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f42:	f3ef 8310 	mrs	r3, PRIMASK
 8007f46:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f52:	f383 8810 	msr	PRIMASK, r3
}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4961      	ldr	r1, [pc, #388]	; (80080e8 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007f64:	400a      	ands	r2, r1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	f383 8810 	msr	PRIMASK, r3
}
 8007f72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f74:	f3ef 8310 	mrs	r3, PRIMASK
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f7e:	2301      	movs	r3, #1
 8007f80:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f84:	f383 8810 	msr	PRIMASK, r3
}
 8007f88:	46c0      	nop			; (mov r8, r8)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4955      	ldr	r1, [pc, #340]	; (80080ec <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8007f96:	400a      	ands	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
 8007f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f9c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa0:	f383 8810 	msr	PRIMASK, r3
}
 8007fa4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	228c      	movs	r2, #140	; 0x8c
 8007faa:	2120      	movs	r1, #32
 8007fac:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d12f      	bne.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	f383 8810 	msr	PRIMASK, r3
}
 8007fdc:	46c0      	nop			; (mov r8, r8)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2110      	movs	r1, #16
 8007fea:	438a      	bics	r2, r1
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	f383 8810 	msr	PRIMASK, r3
}
 8007ff8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	2210      	movs	r2, #16
 8008002:	4013      	ands	r3, r2
 8008004:	2b10      	cmp	r3, #16
 8008006:	d103      	bne.n	8008010 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2210      	movs	r2, #16
 800800e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	225c      	movs	r2, #92	; 0x5c
 8008014:	5a9a      	ldrh	r2, [r3, r2]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	0011      	movs	r1, r2
 800801a:	0018      	movs	r0, r3
 800801c:	f7fe fec4 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
 8008020:	e003      	b.n	800802a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	0018      	movs	r0, r3
 8008026:	f7f9 ff39 	bl	8001e9c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800802a:	2366      	movs	r3, #102	; 0x66
 800802c:	18fb      	adds	r3, r7, r3
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <UART_RxISR_16BIT_FIFOEN+0x232>
 8008034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008036:	2220      	movs	r2, #32
 8008038:	4013      	ands	r3, r2
 800803a:	d000      	beq.n	800803e <UART_RxISR_16BIT_FIFOEN+0x232>
 800803c:	e709      	b.n	8007e52 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800803e:	2052      	movs	r0, #82	; 0x52
 8008040:	183b      	adds	r3, r7, r0
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	215e      	movs	r1, #94	; 0x5e
 8008046:	5a52      	ldrh	r2, [r2, r1]
 8008048:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800804a:	0001      	movs	r1, r0
 800804c:	187b      	adds	r3, r7, r1
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d044      	beq.n	80080de <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2268      	movs	r2, #104	; 0x68
 8008058:	5a9b      	ldrh	r3, [r3, r2]
 800805a:	187a      	adds	r2, r7, r1
 800805c:	8812      	ldrh	r2, [r2, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d23d      	bcs.n	80080de <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008062:	f3ef 8310 	mrs	r3, PRIMASK
 8008066:	60fb      	str	r3, [r7, #12]
  return(result);
 8008068:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800806a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800806c:	2301      	movs	r3, #1
 800806e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f383 8810 	msr	PRIMASK, r3
}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	491b      	ldr	r1, [pc, #108]	; (80080f0 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8008084:	400a      	ands	r2, r1
 8008086:	609a      	str	r2, [r3, #8]
 8008088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800808a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f383 8810 	msr	PRIMASK, r3
}
 8008092:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8008098:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800809a:	f3ef 8310 	mrs	r3, PRIMASK
 800809e:	61bb      	str	r3, [r7, #24]
  return(result);
 80080a0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a4:	2301      	movs	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	f383 8810 	msr	PRIMASK, r3
}
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2120      	movs	r1, #32
 80080bc:	430a      	orrs	r2, r1
 80080be:	601a      	str	r2, [r3, #0]
 80080c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	f383 8810 	msr	PRIMASK, r3
}
 80080ca:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080cc:	e007      	b.n	80080de <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699a      	ldr	r2, [r3, #24]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2108      	movs	r1, #8
 80080da:	430a      	orrs	r2, r1
 80080dc:	619a      	str	r2, [r3, #24]
}
 80080de:	46c0      	nop			; (mov r8, r8)
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b01e      	add	sp, #120	; 0x78
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	46c0      	nop			; (mov r8, r8)
 80080e8:	fffffeff 	.word	0xfffffeff
 80080ec:	effffffe 	.word	0xeffffffe
 80080f0:	efffffff 	.word	0xefffffff
 80080f4:	080079ad 	.word	0x080079ad

080080f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008100:	46c0      	nop			; (mov r8, r8)
 8008102:	46bd      	mov	sp, r7
 8008104:	b002      	add	sp, #8
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008110:	46c0      	nop			; (mov r8, r8)
 8008112:	46bd      	mov	sp, r7
 8008114:	b002      	add	sp, #8
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008120:	46c0      	nop			; (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	b002      	add	sp, #8
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2284      	movs	r2, #132	; 0x84
 8008134:	5c9b      	ldrb	r3, [r3, r2]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d101      	bne.n	800813e <HAL_UARTEx_DisableFifoMode+0x16>
 800813a:	2302      	movs	r3, #2
 800813c:	e027      	b.n	800818e <HAL_UARTEx_DisableFifoMode+0x66>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2284      	movs	r2, #132	; 0x84
 8008142:	2101      	movs	r1, #1
 8008144:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2288      	movs	r2, #136	; 0x88
 800814a:	2124      	movs	r1, #36	; 0x24
 800814c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2101      	movs	r1, #1
 8008162:	438a      	bics	r2, r1
 8008164:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a0b      	ldr	r2, [pc, #44]	; (8008198 <HAL_UARTEx_DisableFifoMode+0x70>)
 800816a:	4013      	ands	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2288      	movs	r2, #136	; 0x88
 8008180:	2120      	movs	r1, #32
 8008182:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2284      	movs	r2, #132	; 0x84
 8008188:	2100      	movs	r1, #0
 800818a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	0018      	movs	r0, r3
 8008190:	46bd      	mov	sp, r7
 8008192:	b004      	add	sp, #16
 8008194:	bd80      	pop	{r7, pc}
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	dfffffff 	.word	0xdfffffff

0800819c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2284      	movs	r2, #132	; 0x84
 80081aa:	5c9b      	ldrb	r3, [r3, r2]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e02e      	b.n	8008212 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2284      	movs	r2, #132	; 0x84
 80081b8:	2101      	movs	r1, #1
 80081ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2288      	movs	r2, #136	; 0x88
 80081c0:	2124      	movs	r1, #36	; 0x24
 80081c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2101      	movs	r1, #1
 80081d8:	438a      	bics	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	08d9      	lsrs	r1, r3, #3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f000 f854 	bl	80082a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2288      	movs	r2, #136	; 0x88
 8008204:	2120      	movs	r1, #32
 8008206:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2284      	movs	r2, #132	; 0x84
 800820c:	2100      	movs	r1, #0
 800820e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	0018      	movs	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	b004      	add	sp, #16
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2284      	movs	r2, #132	; 0x84
 800822a:	5c9b      	ldrb	r3, [r3, r2]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008230:	2302      	movs	r3, #2
 8008232:	e02f      	b.n	8008294 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2284      	movs	r2, #132	; 0x84
 8008238:	2101      	movs	r1, #1
 800823a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2288      	movs	r2, #136	; 0x88
 8008240:	2124      	movs	r1, #36	; 0x24
 8008242:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2101      	movs	r1, #1
 8008258:	438a      	bics	r2, r1
 800825a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008264:	4013      	ands	r3, r2
 8008266:	0019      	movs	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	0018      	movs	r0, r3
 8008276:	f000 f813 	bl	80082a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2288      	movs	r2, #136	; 0x88
 8008286:	2120      	movs	r1, #32
 8008288:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2284      	movs	r2, #132	; 0x84
 800828e:	2100      	movs	r1, #0
 8008290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	0018      	movs	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	b004      	add	sp, #16
 800829a:	bd80      	pop	{r7, pc}
 800829c:	f1ffffff 	.word	0xf1ffffff

080082a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d108      	bne.n	80082c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	226a      	movs	r2, #106	; 0x6a
 80082b4:	2101      	movs	r1, #1
 80082b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2268      	movs	r2, #104	; 0x68
 80082bc:	2101      	movs	r1, #1
 80082be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082c0:	e043      	b.n	800834a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082c2:	260f      	movs	r6, #15
 80082c4:	19bb      	adds	r3, r7, r6
 80082c6:	2208      	movs	r2, #8
 80082c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082ca:	200e      	movs	r0, #14
 80082cc:	183b      	adds	r3, r7, r0
 80082ce:	2208      	movs	r2, #8
 80082d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	0e5b      	lsrs	r3, r3, #25
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	240d      	movs	r4, #13
 80082de:	193b      	adds	r3, r7, r4
 80082e0:	2107      	movs	r1, #7
 80082e2:	400a      	ands	r2, r1
 80082e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	0f5b      	lsrs	r3, r3, #29
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	250c      	movs	r5, #12
 80082f2:	197b      	adds	r3, r7, r5
 80082f4:	2107      	movs	r1, #7
 80082f6:	400a      	ands	r2, r1
 80082f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082fa:	183b      	adds	r3, r7, r0
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	197a      	adds	r2, r7, r5
 8008300:	7812      	ldrb	r2, [r2, #0]
 8008302:	4914      	ldr	r1, [pc, #80]	; (8008354 <UARTEx_SetNbDataToProcess+0xb4>)
 8008304:	5c8a      	ldrb	r2, [r1, r2]
 8008306:	435a      	muls	r2, r3
 8008308:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800830a:	197b      	adds	r3, r7, r5
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <UARTEx_SetNbDataToProcess+0xb8>)
 8008310:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008312:	0019      	movs	r1, r3
 8008314:	f7f7 ff7e 	bl	8000214 <__divsi3>
 8008318:	0003      	movs	r3, r0
 800831a:	b299      	uxth	r1, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	226a      	movs	r2, #106	; 0x6a
 8008320:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008322:	19bb      	adds	r3, r7, r6
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	193a      	adds	r2, r7, r4
 8008328:	7812      	ldrb	r2, [r2, #0]
 800832a:	490a      	ldr	r1, [pc, #40]	; (8008354 <UARTEx_SetNbDataToProcess+0xb4>)
 800832c:	5c8a      	ldrb	r2, [r1, r2]
 800832e:	435a      	muls	r2, r3
 8008330:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008332:	193b      	adds	r3, r7, r4
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	4a08      	ldr	r2, [pc, #32]	; (8008358 <UARTEx_SetNbDataToProcess+0xb8>)
 8008338:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800833a:	0019      	movs	r1, r3
 800833c:	f7f7 ff6a 	bl	8000214 <__divsi3>
 8008340:	0003      	movs	r3, r0
 8008342:	b299      	uxth	r1, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2268      	movs	r2, #104	; 0x68
 8008348:	5299      	strh	r1, [r3, r2]
}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	46bd      	mov	sp, r7
 800834e:	b005      	add	sp, #20
 8008350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	08008518 	.word	0x08008518
 8008358:	08008520 	.word	0x08008520

0800835c <__libc_init_array>:
 800835c:	b570      	push	{r4, r5, r6, lr}
 800835e:	2600      	movs	r6, #0
 8008360:	4d0c      	ldr	r5, [pc, #48]	; (8008394 <__libc_init_array+0x38>)
 8008362:	4c0d      	ldr	r4, [pc, #52]	; (8008398 <__libc_init_array+0x3c>)
 8008364:	1b64      	subs	r4, r4, r5
 8008366:	10a4      	asrs	r4, r4, #2
 8008368:	42a6      	cmp	r6, r4
 800836a:	d109      	bne.n	8008380 <__libc_init_array+0x24>
 800836c:	2600      	movs	r6, #0
 800836e:	f000 f821 	bl	80083b4 <_init>
 8008372:	4d0a      	ldr	r5, [pc, #40]	; (800839c <__libc_init_array+0x40>)
 8008374:	4c0a      	ldr	r4, [pc, #40]	; (80083a0 <__libc_init_array+0x44>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	42a6      	cmp	r6, r4
 800837c:	d105      	bne.n	800838a <__libc_init_array+0x2e>
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	00b3      	lsls	r3, r6, #2
 8008382:	58eb      	ldr	r3, [r5, r3]
 8008384:	4798      	blx	r3
 8008386:	3601      	adds	r6, #1
 8008388:	e7ee      	b.n	8008368 <__libc_init_array+0xc>
 800838a:	00b3      	lsls	r3, r6, #2
 800838c:	58eb      	ldr	r3, [r5, r3]
 800838e:	4798      	blx	r3
 8008390:	3601      	adds	r6, #1
 8008392:	e7f2      	b.n	800837a <__libc_init_array+0x1e>
 8008394:	08008528 	.word	0x08008528
 8008398:	08008528 	.word	0x08008528
 800839c:	08008528 	.word	0x08008528
 80083a0:	0800852c 	.word	0x0800852c

080083a4 <memset>:
 80083a4:	0003      	movs	r3, r0
 80083a6:	1882      	adds	r2, r0, r2
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d100      	bne.n	80083ae <memset+0xa>
 80083ac:	4770      	bx	lr
 80083ae:	7019      	strb	r1, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	e7f9      	b.n	80083a8 <memset+0x4>

080083b4 <_init>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	46c0      	nop			; (mov r8, r8)
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr

080083c0 <_fini>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	46c0      	nop			; (mov r8, r8)
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr
