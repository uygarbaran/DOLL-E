
AoA_Integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e38  08007e38  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08007e38  08007e38  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e38  08007e38  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e3c  08007e3c  00017e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000018  08007e58  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08007e58  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011883  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  000318c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00033bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00034a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015684  00000000  00000000  000357e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fce  00000000  00000000  0004ae6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac11  00000000  00000000  0005be3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000363c  00000000  00000000  000e6a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007cc4 	.word	0x08007cc4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08007cc4 	.word	0x08007cc4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f001 f99b 	bl	8001730 <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f001 f905 	bl	8001610 <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fd6c 	bl	8000eec <__aeabi_dsub>
 8000414:	f001 f8fc 	bl	8001610 <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_ddiv>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	4657      	mov	r7, sl
 800042c:	464e      	mov	r6, r9
 800042e:	4645      	mov	r5, r8
 8000430:	46de      	mov	lr, fp
 8000432:	b5e0      	push	{r5, r6, r7, lr}
 8000434:	4681      	mov	r9, r0
 8000436:	0005      	movs	r5, r0
 8000438:	030c      	lsls	r4, r1, #12
 800043a:	0048      	lsls	r0, r1, #1
 800043c:	4692      	mov	sl, r2
 800043e:	001f      	movs	r7, r3
 8000440:	b085      	sub	sp, #20
 8000442:	0b24      	lsrs	r4, r4, #12
 8000444:	0d40      	lsrs	r0, r0, #21
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	2800      	cmp	r0, #0
 800044a:	d100      	bne.n	800044e <__aeabi_ddiv+0x26>
 800044c:	e156      	b.n	80006fc <__aeabi_ddiv+0x2d4>
 800044e:	4bd4      	ldr	r3, [pc, #848]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000450:	4298      	cmp	r0, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x2e>
 8000454:	e172      	b.n	800073c <__aeabi_ddiv+0x314>
 8000456:	0f6b      	lsrs	r3, r5, #29
 8000458:	00e4      	lsls	r4, r4, #3
 800045a:	431c      	orrs	r4, r3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4323      	orrs	r3, r4
 8000462:	4698      	mov	r8, r3
 8000464:	4bcf      	ldr	r3, [pc, #828]	; (80007a4 <__aeabi_ddiv+0x37c>)
 8000466:	00ed      	lsls	r5, r5, #3
 8000468:	469b      	mov	fp, r3
 800046a:	2300      	movs	r3, #0
 800046c:	4699      	mov	r9, r3
 800046e:	4483      	add	fp, r0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	033c      	lsls	r4, r7, #12
 8000474:	007b      	lsls	r3, r7, #1
 8000476:	4650      	mov	r0, sl
 8000478:	0b24      	lsrs	r4, r4, #12
 800047a:	0d5b      	lsrs	r3, r3, #21
 800047c:	0fff      	lsrs	r7, r7, #31
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x5c>
 8000482:	e11f      	b.n	80006c4 <__aeabi_ddiv+0x29c>
 8000484:	4ac6      	ldr	r2, [pc, #792]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x64>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x32a>
 800048c:	49c5      	ldr	r1, [pc, #788]	; (80007a4 <__aeabi_ddiv+0x37c>)
 800048e:	0f42      	lsrs	r2, r0, #29
 8000490:	468c      	mov	ip, r1
 8000492:	00e4      	lsls	r4, r4, #3
 8000494:	4659      	mov	r1, fp
 8000496:	4314      	orrs	r4, r2
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	4463      	add	r3, ip
 800049c:	0412      	lsls	r2, r2, #16
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	4314      	orrs	r4, r2
 80004a2:	469b      	mov	fp, r3
 80004a4:	00c2      	lsls	r2, r0, #3
 80004a6:	2000      	movs	r0, #0
 80004a8:	0033      	movs	r3, r6
 80004aa:	407b      	eors	r3, r7
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d827      	bhi.n	8000504 <__aeabi_ddiv+0xdc>
 80004b4:	49bc      	ldr	r1, [pc, #752]	; (80007a8 <__aeabi_ddiv+0x380>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58cb      	ldr	r3, [r1, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	46b2      	mov	sl, r6
 80004be:	9b00      	ldr	r3, [sp, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d016      	beq.n	80004f2 <__aeabi_ddiv+0xca>
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xa2>
 80004c8:	e28e      	b.n	80009e8 <__aeabi_ddiv+0x5c0>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d000      	beq.n	80004d0 <__aeabi_ddiv+0xa8>
 80004ce:	e0d9      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2400      	movs	r4, #0
 80004d4:	2500      	movs	r5, #0
 80004d6:	4652      	mov	r2, sl
 80004d8:	051b      	lsls	r3, r3, #20
 80004da:	4323      	orrs	r3, r4
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b005      	add	sp, #20
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	4baa      	ldr	r3, [pc, #680]	; (80007a0 <__aeabi_ddiv+0x378>)
 80004f8:	e7ed      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80004fa:	46ba      	mov	sl, r7
 80004fc:	46a0      	mov	r8, r4
 80004fe:	0015      	movs	r5, r2
 8000500:	9000      	str	r0, [sp, #0]
 8000502:	e7dc      	b.n	80004be <__aeabi_ddiv+0x96>
 8000504:	4544      	cmp	r4, r8
 8000506:	d200      	bcs.n	800050a <__aeabi_ddiv+0xe2>
 8000508:	e1c7      	b.n	800089a <__aeabi_ddiv+0x472>
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe6>
 800050c:	e1c2      	b.n	8000894 <__aeabi_ddiv+0x46c>
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	469c      	mov	ip, r3
 8000514:	002e      	movs	r6, r5
 8000516:	4640      	mov	r0, r8
 8000518:	2500      	movs	r5, #0
 800051a:	44e3      	add	fp, ip
 800051c:	0223      	lsls	r3, r4, #8
 800051e:	0e14      	lsrs	r4, r2, #24
 8000520:	431c      	orrs	r4, r3
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4699      	mov	r9, r3
 8000526:	0423      	lsls	r3, r4, #16
 8000528:	0c1f      	lsrs	r7, r3, #16
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	4649      	mov	r1, r9
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9701      	str	r7, [sp, #4]
 8000532:	f7ff fe6b 	bl	800020c <__aeabi_uidivmod>
 8000536:	0002      	movs	r2, r0
 8000538:	437a      	muls	r2, r7
 800053a:	040b      	lsls	r3, r1, #16
 800053c:	0c31      	lsrs	r1, r6, #16
 800053e:	4680      	mov	r8, r0
 8000540:	4319      	orrs	r1, r3
 8000542:	428a      	cmp	r2, r1
 8000544:	d907      	bls.n	8000556 <__aeabi_ddiv+0x12e>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	1909      	adds	r1, r1, r4
 800054e:	44e0      	add	r8, ip
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x12e>
 8000554:	e207      	b.n	8000966 <__aeabi_ddiv+0x53e>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4649      	mov	r1, r9
 800055a:	f7ff fe57 	bl	800020c <__aeabi_uidivmod>
 800055e:	0409      	lsls	r1, r1, #16
 8000560:	468c      	mov	ip, r1
 8000562:	0431      	lsls	r1, r6, #16
 8000564:	4666      	mov	r6, ip
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	0c09      	lsrs	r1, r1, #16
 800056a:	4342      	muls	r2, r0
 800056c:	0003      	movs	r3, r0
 800056e:	4331      	orrs	r1, r6
 8000570:	428a      	cmp	r2, r1
 8000572:	d904      	bls.n	800057e <__aeabi_ddiv+0x156>
 8000574:	1909      	adds	r1, r1, r4
 8000576:	3b01      	subs	r3, #1
 8000578:	428c      	cmp	r4, r1
 800057a:	d800      	bhi.n	800057e <__aeabi_ddiv+0x156>
 800057c:	e1ed      	b.n	800095a <__aeabi_ddiv+0x532>
 800057e:	1a88      	subs	r0, r1, r2
 8000580:	4642      	mov	r2, r8
 8000582:	0412      	lsls	r2, r2, #16
 8000584:	431a      	orrs	r2, r3
 8000586:	4690      	mov	r8, r2
 8000588:	4641      	mov	r1, r8
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	040e      	lsls	r6, r1, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	001f      	movs	r7, r3
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	0c36      	lsrs	r6, r6, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c19      	lsrs	r1, r3, #16
 800059c:	000b      	movs	r3, r1
 800059e:	4373      	muls	r3, r6
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	437e      	muls	r6, r7
 80005a4:	9103      	str	r1, [sp, #12]
 80005a6:	4351      	muls	r1, r2
 80005a8:	437a      	muls	r2, r7
 80005aa:	0c1f      	lsrs	r7, r3, #16
 80005ac:	46bc      	mov	ip, r7
 80005ae:	1876      	adds	r6, r6, r1
 80005b0:	4466      	add	r6, ip
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	d903      	bls.n	80005be <__aeabi_ddiv+0x196>
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	468c      	mov	ip, r1
 80005bc:	4462      	add	r2, ip
 80005be:	0c31      	lsrs	r1, r6, #16
 80005c0:	188a      	adds	r2, r1, r2
 80005c2:	0431      	lsls	r1, r6, #16
 80005c4:	041e      	lsls	r6, r3, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	198e      	adds	r6, r1, r6
 80005ca:	4290      	cmp	r0, r2
 80005cc:	d302      	bcc.n	80005d4 <__aeabi_ddiv+0x1ac>
 80005ce:	d112      	bne.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	d210      	bcs.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d4:	4643      	mov	r3, r8
 80005d6:	1e59      	subs	r1, r3, #1
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	001f      	movs	r7, r3
 80005e0:	429d      	cmp	r5, r3
 80005e2:	419b      	sbcs	r3, r3
 80005e4:	425b      	negs	r3, r3
 80005e6:	191b      	adds	r3, r3, r4
 80005e8:	18c0      	adds	r0, r0, r3
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d200      	bcs.n	80005f0 <__aeabi_ddiv+0x1c8>
 80005ee:	e1a0      	b.n	8000932 <__aeabi_ddiv+0x50a>
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0x1cc>
 80005f2:	e19b      	b.n	800092c <__aeabi_ddiv+0x504>
 80005f4:	4688      	mov	r8, r1
 80005f6:	1bae      	subs	r6, r5, r6
 80005f8:	42b5      	cmp	r5, r6
 80005fa:	41ad      	sbcs	r5, r5
 80005fc:	1a80      	subs	r0, r0, r2
 80005fe:	426d      	negs	r5, r5
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1e0>
 8000606:	e1d5      	b.n	80009b4 <__aeabi_ddiv+0x58c>
 8000608:	4649      	mov	r1, r9
 800060a:	f7ff fdff 	bl	800020c <__aeabi_uidivmod>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	040b      	lsls	r3, r1, #16
 8000612:	4342      	muls	r2, r0
 8000614:	0c31      	lsrs	r1, r6, #16
 8000616:	0005      	movs	r5, r0
 8000618:	4319      	orrs	r1, r3
 800061a:	428a      	cmp	r2, r1
 800061c:	d900      	bls.n	8000620 <__aeabi_ddiv+0x1f8>
 800061e:	e16c      	b.n	80008fa <__aeabi_ddiv+0x4d2>
 8000620:	1a88      	subs	r0, r1, r2
 8000622:	4649      	mov	r1, r9
 8000624:	f7ff fdf2 	bl	800020c <__aeabi_uidivmod>
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	0436      	lsls	r6, r6, #16
 800062c:	4342      	muls	r2, r0
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	0c36      	lsrs	r6, r6, #16
 8000632:	0003      	movs	r3, r0
 8000634:	430e      	orrs	r6, r1
 8000636:	42b2      	cmp	r2, r6
 8000638:	d900      	bls.n	800063c <__aeabi_ddiv+0x214>
 800063a:	e153      	b.n	80008e4 <__aeabi_ddiv+0x4bc>
 800063c:	9803      	ldr	r0, [sp, #12]
 800063e:	1ab6      	subs	r6, r6, r2
 8000640:	0002      	movs	r2, r0
 8000642:	042d      	lsls	r5, r5, #16
 8000644:	431d      	orrs	r5, r3
 8000646:	9f02      	ldr	r7, [sp, #8]
 8000648:	042b      	lsls	r3, r5, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	435a      	muls	r2, r3
 800064e:	437b      	muls	r3, r7
 8000650:	469c      	mov	ip, r3
 8000652:	0c29      	lsrs	r1, r5, #16
 8000654:	4348      	muls	r0, r1
 8000656:	0c13      	lsrs	r3, r2, #16
 8000658:	4484      	add	ip, r0
 800065a:	4463      	add	r3, ip
 800065c:	4379      	muls	r1, r7
 800065e:	4298      	cmp	r0, r3
 8000660:	d903      	bls.n	800066a <__aeabi_ddiv+0x242>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0240      	lsls	r0, r0, #9
 8000666:	4684      	mov	ip, r0
 8000668:	4461      	add	r1, ip
 800066a:	0c18      	lsrs	r0, r3, #16
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	1841      	adds	r1, r0, r1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	428e      	cmp	r6, r1
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x254>
 800067a:	e0ff      	b.n	800087c <__aeabi_ddiv+0x454>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x258>
 800067e:	e0fa      	b.n	8000876 <__aeabi_ddiv+0x44e>
 8000680:	2301      	movs	r3, #1
 8000682:	431d      	orrs	r5, r3
 8000684:	4a49      	ldr	r2, [pc, #292]	; (80007ac <__aeabi_ddiv+0x384>)
 8000686:	445a      	add	r2, fp
 8000688:	2a00      	cmp	r2, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_ddiv+0x266>
 800068c:	e0aa      	b.n	80007e4 <__aeabi_ddiv+0x3bc>
 800068e:	076b      	lsls	r3, r5, #29
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0x26c>
 8000692:	e13d      	b.n	8000910 <__aeabi_ddiv+0x4e8>
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	4643      	mov	r3, r8
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	d506      	bpl.n	80006aa <__aeabi_ddiv+0x282>
 800069c:	4642      	mov	r2, r8
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <__aeabi_ddiv+0x388>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	4690      	mov	r8, r2
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	445a      	add	r2, fp
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <__aeabi_ddiv+0x38c>)
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_ddiv+0x28a>
 80006b0:	e71f      	b.n	80004f2 <__aeabi_ddiv+0xca>
 80006b2:	4643      	mov	r3, r8
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	431d      	orrs	r5, r3
 80006b8:	4643      	mov	r3, r8
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	025c      	lsls	r4, r3, #9
 80006be:	0b24      	lsrs	r4, r4, #12
 80006c0:	0d53      	lsrs	r3, r2, #21
 80006c2:	e708      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4322      	orrs	r2, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_ddiv+0x2a4>
 80006ca:	e07b      	b.n	80007c4 <__aeabi_ddiv+0x39c>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x2aa>
 80006d0:	e0fa      	b.n	80008c8 <__aeabi_ddiv+0x4a0>
 80006d2:	0020      	movs	r0, r4
 80006d4:	f001 f836 	bl	8001744 <__clzsi2>
 80006d8:	0002      	movs	r2, r0
 80006da:	3a0b      	subs	r2, #11
 80006dc:	231d      	movs	r3, #29
 80006de:	0001      	movs	r1, r0
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	4652      	mov	r2, sl
 80006e4:	3908      	subs	r1, #8
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	408c      	lsls	r4, r1
 80006ea:	4314      	orrs	r4, r2
 80006ec:	4652      	mov	r2, sl
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_ddiv+0x390>)
 80006f2:	4458      	add	r0, fp
 80006f4:	469b      	mov	fp, r3
 80006f6:	4483      	add	fp, r0
 80006f8:	2000      	movs	r0, #0
 80006fa:	e6d5      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80006fc:	464b      	mov	r3, r9
 80006fe:	4323      	orrs	r3, r4
 8000700:	4698      	mov	r8, r3
 8000702:	d044      	beq.n	800078e <__aeabi_ddiv+0x366>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_ddiv+0x2e2>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_ddiv+0x480>
 800070a:	0020      	movs	r0, r4
 800070c:	f001 f81a 	bl	8001744 <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	0002      	movs	r2, r0
 8000714:	390b      	subs	r1, #11
 8000716:	231d      	movs	r3, #29
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	4649      	mov	r1, r9
 800071c:	0010      	movs	r0, r2
 800071e:	40d9      	lsrs	r1, r3
 8000720:	3808      	subs	r0, #8
 8000722:	4084      	lsls	r4, r0
 8000724:	000b      	movs	r3, r1
 8000726:	464d      	mov	r5, r9
 8000728:	4323      	orrs	r3, r4
 800072a:	4698      	mov	r8, r3
 800072c:	4085      	lsls	r5, r0
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <__aeabi_ddiv+0x394>)
 8000730:	1a83      	subs	r3, r0, r2
 8000732:	469b      	mov	fp, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4699      	mov	r9, r3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	e69a      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800073c:	464b      	mov	r3, r9
 800073e:	4323      	orrs	r3, r4
 8000740:	4698      	mov	r8, r3
 8000742:	d11d      	bne.n	8000780 <__aeabi_ddiv+0x358>
 8000744:	2308      	movs	r3, #8
 8000746:	4699      	mov	r9, r3
 8000748:	3b06      	subs	r3, #6
 800074a:	2500      	movs	r5, #0
 800074c:	4683      	mov	fp, r0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e68f      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000752:	4652      	mov	r2, sl
 8000754:	4322      	orrs	r2, r4
 8000756:	d109      	bne.n	800076c <__aeabi_ddiv+0x344>
 8000758:	2302      	movs	r3, #2
 800075a:	4649      	mov	r1, r9
 800075c:	4319      	orrs	r1, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000760:	4689      	mov	r9, r1
 8000762:	469c      	mov	ip, r3
 8000764:	2400      	movs	r4, #0
 8000766:	2002      	movs	r0, #2
 8000768:	44e3      	add	fp, ip
 800076a:	e69d      	b.n	80004a8 <__aeabi_ddiv+0x80>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000774:	4691      	mov	r9, r2
 8000776:	469c      	mov	ip, r3
 8000778:	4652      	mov	r2, sl
 800077a:	2003      	movs	r0, #3
 800077c:	44e3      	add	fp, ip
 800077e:	e693      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	46a0      	mov	r8, r4
 8000788:	4683      	mov	fp, r0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e671      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800078e:	2304      	movs	r3, #4
 8000790:	4699      	mov	r9, r3
 8000792:	2300      	movs	r3, #0
 8000794:	469b      	mov	fp, r3
 8000796:	3301      	adds	r3, #1
 8000798:	2500      	movs	r5, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	e669      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	fffffc01 	.word	0xfffffc01
 80007a8:	08007cdc 	.word	0x08007cdc
 80007ac:	000003ff 	.word	0x000003ff
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	000007fe 	.word	0x000007fe
 80007b8:	000003f3 	.word	0x000003f3
 80007bc:	fffffc0d 	.word	0xfffffc0d
 80007c0:	fffff801 	.word	0xfffff801
 80007c4:	4649      	mov	r1, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4689      	mov	r9, r1
 80007cc:	2400      	movs	r4, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	e66a      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	469a      	mov	sl, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4b8a      	ldr	r3, [pc, #552]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80007dc:	0324      	lsls	r4, r4, #12
 80007de:	e67a      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80007e0:	2501      	movs	r5, #1
 80007e2:	426d      	negs	r5, r5
 80007e4:	2301      	movs	r3, #1
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2b38      	cmp	r3, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_ddiv+0x3c6>
 80007ec:	e670      	b.n	80004d0 <__aeabi_ddiv+0xa8>
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x3cc>
 80007f2:	e0bf      	b.n	8000974 <__aeabi_ddiv+0x54c>
 80007f4:	211f      	movs	r1, #31
 80007f6:	4249      	negs	r1, r1
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	4641      	mov	r1, r8
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	2b20      	cmp	r3, #32
 8000802:	d004      	beq.n	800080e <__aeabi_ddiv+0x3e6>
 8000804:	4641      	mov	r1, r8
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <__aeabi_ddiv+0x5e0>)
 8000808:	445b      	add	r3, fp
 800080a:	4099      	lsls	r1, r3
 800080c:	430d      	orrs	r5, r1
 800080e:	1e6b      	subs	r3, r5, #1
 8000810:	419d      	sbcs	r5, r3
 8000812:	2307      	movs	r3, #7
 8000814:	432a      	orrs	r2, r5
 8000816:	001d      	movs	r5, r3
 8000818:	2400      	movs	r4, #0
 800081a:	4015      	ands	r5, r2
 800081c:	4213      	tst	r3, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_ddiv+0x3fa>
 8000820:	e0d4      	b.n	80009cc <__aeabi_ddiv+0x5a4>
 8000822:	210f      	movs	r1, #15
 8000824:	2300      	movs	r3, #0
 8000826:	4011      	ands	r1, r2
 8000828:	2904      	cmp	r1, #4
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0x406>
 800082c:	e0cb      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 800082e:	1d11      	adds	r1, r2, #4
 8000830:	4291      	cmp	r1, r2
 8000832:	4192      	sbcs	r2, r2
 8000834:	4252      	negs	r2, r2
 8000836:	189b      	adds	r3, r3, r2
 8000838:	000a      	movs	r2, r1
 800083a:	0219      	lsls	r1, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_ddiv+0x418>
 800083e:	e0c2      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 8000840:	2301      	movs	r3, #1
 8000842:	2400      	movs	r4, #0
 8000844:	2500      	movs	r5, #0
 8000846:	e646      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	4641      	mov	r1, r8
 800084c:	031b      	lsls	r3, r3, #12
 800084e:	4219      	tst	r1, r3
 8000850:	d008      	beq.n	8000864 <__aeabi_ddiv+0x43c>
 8000852:	421c      	tst	r4, r3
 8000854:	d106      	bne.n	8000864 <__aeabi_ddiv+0x43c>
 8000856:	431c      	orrs	r4, r3
 8000858:	0324      	lsls	r4, r4, #12
 800085a:	46ba      	mov	sl, r7
 800085c:	0015      	movs	r5, r2
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000860:	0b24      	lsrs	r4, r4, #12
 8000862:	e638      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	4643      	mov	r3, r8
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	431c      	orrs	r4, r3
 800086c:	0324      	lsls	r4, r4, #12
 800086e:	46b2      	mov	sl, r6
 8000870:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000872:	0b24      	lsrs	r4, r4, #12
 8000874:	e62f      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <__aeabi_ddiv+0x454>
 800087a:	e703      	b.n	8000684 <__aeabi_ddiv+0x25c>
 800087c:	19a6      	adds	r6, r4, r6
 800087e:	1e68      	subs	r0, r5, #1
 8000880:	42a6      	cmp	r6, r4
 8000882:	d200      	bcs.n	8000886 <__aeabi_ddiv+0x45e>
 8000884:	e08d      	b.n	80009a2 <__aeabi_ddiv+0x57a>
 8000886:	428e      	cmp	r6, r1
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x464>
 800088a:	e0a3      	b.n	80009d4 <__aeabi_ddiv+0x5ac>
 800088c:	d100      	bne.n	8000890 <__aeabi_ddiv+0x468>
 800088e:	e0b3      	b.n	80009f8 <__aeabi_ddiv+0x5d0>
 8000890:	0005      	movs	r5, r0
 8000892:	e6f5      	b.n	8000680 <__aeabi_ddiv+0x258>
 8000894:	42aa      	cmp	r2, r5
 8000896:	d900      	bls.n	800089a <__aeabi_ddiv+0x472>
 8000898:	e639      	b.n	800050e <__aeabi_ddiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	07de      	lsls	r6, r3, #31
 800089e:	0858      	lsrs	r0, r3, #1
 80008a0:	086b      	lsrs	r3, r5, #1
 80008a2:	431e      	orrs	r6, r3
 80008a4:	07ed      	lsls	r5, r5, #31
 80008a6:	e639      	b.n	800051c <__aeabi_ddiv+0xf4>
 80008a8:	4648      	mov	r0, r9
 80008aa:	f000 ff4b 	bl	8001744 <__clzsi2>
 80008ae:	0001      	movs	r1, r0
 80008b0:	0002      	movs	r2, r0
 80008b2:	3115      	adds	r1, #21
 80008b4:	3220      	adds	r2, #32
 80008b6:	291c      	cmp	r1, #28
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_ddiv+0x494>
 80008ba:	e72c      	b.n	8000716 <__aeabi_ddiv+0x2ee>
 80008bc:	464b      	mov	r3, r9
 80008be:	3808      	subs	r0, #8
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2500      	movs	r5, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	e732      	b.n	800072e <__aeabi_ddiv+0x306>
 80008c8:	f000 ff3c 	bl	8001744 <__clzsi2>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	3215      	adds	r2, #21
 80008d2:	3020      	adds	r0, #32
 80008d4:	2a1c      	cmp	r2, #28
 80008d6:	dc00      	bgt.n	80008da <__aeabi_ddiv+0x4b2>
 80008d8:	e700      	b.n	80006dc <__aeabi_ddiv+0x2b4>
 80008da:	4654      	mov	r4, sl
 80008dc:	3b08      	subs	r3, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	409c      	lsls	r4, r3
 80008e2:	e705      	b.n	80006f0 <__aeabi_ddiv+0x2c8>
 80008e4:	1936      	adds	r6, r6, r4
 80008e6:	3b01      	subs	r3, #1
 80008e8:	42b4      	cmp	r4, r6
 80008ea:	d900      	bls.n	80008ee <__aeabi_ddiv+0x4c6>
 80008ec:	e6a6      	b.n	800063c <__aeabi_ddiv+0x214>
 80008ee:	42b2      	cmp	r2, r6
 80008f0:	d800      	bhi.n	80008f4 <__aeabi_ddiv+0x4cc>
 80008f2:	e6a3      	b.n	800063c <__aeabi_ddiv+0x214>
 80008f4:	1e83      	subs	r3, r0, #2
 80008f6:	1936      	adds	r6, r6, r4
 80008f8:	e6a0      	b.n	800063c <__aeabi_ddiv+0x214>
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	3d01      	subs	r5, #1
 80008fe:	428c      	cmp	r4, r1
 8000900:	d900      	bls.n	8000904 <__aeabi_ddiv+0x4dc>
 8000902:	e68d      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000904:	428a      	cmp	r2, r1
 8000906:	d800      	bhi.n	800090a <__aeabi_ddiv+0x4e2>
 8000908:	e68a      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 800090a:	1e85      	subs	r5, r0, #2
 800090c:	1909      	adds	r1, r1, r4
 800090e:	e687      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000910:	230f      	movs	r3, #15
 8000912:	402b      	ands	r3, r5
 8000914:	2b04      	cmp	r3, #4
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x4f2>
 8000918:	e6bc      	b.n	8000694 <__aeabi_ddiv+0x26c>
 800091a:	2305      	movs	r3, #5
 800091c:	425b      	negs	r3, r3
 800091e:	42ab      	cmp	r3, r5
 8000920:	419b      	sbcs	r3, r3
 8000922:	3504      	adds	r5, #4
 8000924:	425b      	negs	r3, r3
 8000926:	08ed      	lsrs	r5, r5, #3
 8000928:	4498      	add	r8, r3
 800092a:	e6b4      	b.n	8000696 <__aeabi_ddiv+0x26e>
 800092c:	42af      	cmp	r7, r5
 800092e:	d900      	bls.n	8000932 <__aeabi_ddiv+0x50a>
 8000930:	e660      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000932:	4282      	cmp	r2, r0
 8000934:	d804      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 8000936:	d000      	beq.n	800093a <__aeabi_ddiv+0x512>
 8000938:	e65c      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 800093a:	42ae      	cmp	r6, r5
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 800093e:	e659      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000940:	2302      	movs	r3, #2
 8000942:	425b      	negs	r3, r3
 8000944:	469c      	mov	ip, r3
 8000946:	9b00      	ldr	r3, [sp, #0]
 8000948:	44e0      	add	r8, ip
 800094a:	469c      	mov	ip, r3
 800094c:	4465      	add	r5, ip
 800094e:	429d      	cmp	r5, r3
 8000950:	419b      	sbcs	r3, r3
 8000952:	425b      	negs	r3, r3
 8000954:	191b      	adds	r3, r3, r4
 8000956:	18c0      	adds	r0, r0, r3
 8000958:	e64d      	b.n	80005f6 <__aeabi_ddiv+0x1ce>
 800095a:	428a      	cmp	r2, r1
 800095c:	d800      	bhi.n	8000960 <__aeabi_ddiv+0x538>
 800095e:	e60e      	b.n	800057e <__aeabi_ddiv+0x156>
 8000960:	1e83      	subs	r3, r0, #2
 8000962:	1909      	adds	r1, r1, r4
 8000964:	e60b      	b.n	800057e <__aeabi_ddiv+0x156>
 8000966:	428a      	cmp	r2, r1
 8000968:	d800      	bhi.n	800096c <__aeabi_ddiv+0x544>
 800096a:	e5f4      	b.n	8000556 <__aeabi_ddiv+0x12e>
 800096c:	1e83      	subs	r3, r0, #2
 800096e:	4698      	mov	r8, r3
 8000970:	1909      	adds	r1, r1, r4
 8000972:	e5f0      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000974:	4925      	ldr	r1, [pc, #148]	; (8000a0c <__aeabi_ddiv+0x5e4>)
 8000976:	0028      	movs	r0, r5
 8000978:	4459      	add	r1, fp
 800097a:	408d      	lsls	r5, r1
 800097c:	4642      	mov	r2, r8
 800097e:	408a      	lsls	r2, r1
 8000980:	1e69      	subs	r1, r5, #1
 8000982:	418d      	sbcs	r5, r1
 8000984:	4641      	mov	r1, r8
 8000986:	40d8      	lsrs	r0, r3
 8000988:	40d9      	lsrs	r1, r3
 800098a:	4302      	orrs	r2, r0
 800098c:	432a      	orrs	r2, r5
 800098e:	000b      	movs	r3, r1
 8000990:	0751      	lsls	r1, r2, #29
 8000992:	d100      	bne.n	8000996 <__aeabi_ddiv+0x56e>
 8000994:	e751      	b.n	800083a <__aeabi_ddiv+0x412>
 8000996:	210f      	movs	r1, #15
 8000998:	4011      	ands	r1, r2
 800099a:	2904      	cmp	r1, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0x578>
 800099e:	e746      	b.n	800082e <__aeabi_ddiv+0x406>
 80009a0:	e74b      	b.n	800083a <__aeabi_ddiv+0x412>
 80009a2:	0005      	movs	r5, r0
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x582>
 80009a8:	e66a      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009aa:	9a00      	ldr	r2, [sp, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d000      	beq.n	80009b2 <__aeabi_ddiv+0x58a>
 80009b0:	e666      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009b2:	e667      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <__aeabi_ddiv+0x5e8>)
 80009b6:	445a      	add	r2, fp
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_ddiv+0x596>
 80009bc:	e710      	b.n	80007e0 <__aeabi_ddiv+0x3b8>
 80009be:	2301      	movs	r3, #1
 80009c0:	2500      	movs	r5, #0
 80009c2:	4498      	add	r8, r3
 80009c4:	e667      	b.n	8000696 <__aeabi_ddiv+0x26e>
 80009c6:	075d      	lsls	r5, r3, #29
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	0b1c      	lsrs	r4, r3, #12
 80009cc:	08d2      	lsrs	r2, r2, #3
 80009ce:	2300      	movs	r3, #0
 80009d0:	4315      	orrs	r5, r2
 80009d2:	e580      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009d4:	9800      	ldr	r0, [sp, #0]
 80009d6:	3d02      	subs	r5, #2
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	4282      	cmp	r2, r0
 80009dc:	41bf      	sbcs	r7, r7
 80009de:	427f      	negs	r7, r7
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	1936      	adds	r6, r6, r4
 80009e4:	9200      	str	r2, [sp, #0]
 80009e6:	e7dd      	b.n	80009a4 <__aeabi_ddiv+0x57c>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	4643      	mov	r3, r8
 80009ec:	0324      	lsls	r4, r4, #12
 80009ee:	431c      	orrs	r4, r3
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80009f4:	0b24      	lsrs	r4, r4, #12
 80009f6:	e56e      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3ea      	bcc.n	80009d4 <__aeabi_ddiv+0x5ac>
 80009fe:	0005      	movs	r5, r0
 8000a00:	e7d3      	b.n	80009aa <__aeabi_ddiv+0x582>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	0000043e 	.word	0x0000043e
 8000a0c:	0000041e 	.word	0x0000041e
 8000a10:	000003ff 	.word	0x000003ff

08000a14 <__aeabi_dmul>:
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	4657      	mov	r7, sl
 8000a18:	464e      	mov	r6, r9
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	46de      	mov	lr, fp
 8000a1e:	b5e0      	push	{r5, r6, r7, lr}
 8000a20:	4698      	mov	r8, r3
 8000a22:	030c      	lsls	r4, r1, #12
 8000a24:	004b      	lsls	r3, r1, #1
 8000a26:	0006      	movs	r6, r0
 8000a28:	4692      	mov	sl, r2
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	0b24      	lsrs	r4, r4, #12
 8000a2e:	0d5b      	lsrs	r3, r3, #21
 8000a30:	0fcf      	lsrs	r7, r1, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dmul+0x24>
 8000a36:	e15c      	b.n	8000cf2 <__aeabi_dmul+0x2de>
 8000a38:	4ad9      	ldr	r2, [pc, #868]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dmul+0x2c>
 8000a3e:	e175      	b.n	8000d2c <__aeabi_dmul+0x318>
 8000a40:	0f42      	lsrs	r2, r0, #29
 8000a42:	00e4      	lsls	r4, r4, #3
 8000a44:	4314      	orrs	r4, r2
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0412      	lsls	r2, r2, #16
 8000a4a:	4314      	orrs	r4, r2
 8000a4c:	4ad5      	ldr	r2, [pc, #852]	; (8000da4 <__aeabi_dmul+0x390>)
 8000a4e:	00c5      	lsls	r5, r0, #3
 8000a50:	4694      	mov	ip, r2
 8000a52:	4463      	add	r3, ip
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2300      	movs	r3, #0
 8000a58:	4699      	mov	r9, r3
 8000a5a:	469b      	mov	fp, r3
 8000a5c:	4643      	mov	r3, r8
 8000a5e:	4642      	mov	r2, r8
 8000a60:	031e      	lsls	r6, r3, #12
 8000a62:	0fd2      	lsrs	r2, r2, #31
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4650      	mov	r0, sl
 8000a68:	4690      	mov	r8, r2
 8000a6a:	0b36      	lsrs	r6, r6, #12
 8000a6c:	0d5b      	lsrs	r3, r3, #21
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dmul+0x5e>
 8000a70:	e120      	b.n	8000cb4 <__aeabi_dmul+0x2a0>
 8000a72:	4acb      	ldr	r2, [pc, #812]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dmul+0x66>
 8000a78:	e162      	b.n	8000d40 <__aeabi_dmul+0x32c>
 8000a7a:	49ca      	ldr	r1, [pc, #808]	; (8000da4 <__aeabi_dmul+0x390>)
 8000a7c:	0f42      	lsrs	r2, r0, #29
 8000a7e:	468c      	mov	ip, r1
 8000a80:	9900      	ldr	r1, [sp, #0]
 8000a82:	4463      	add	r3, ip
 8000a84:	00f6      	lsls	r6, r6, #3
 8000a86:	468c      	mov	ip, r1
 8000a88:	4316      	orrs	r6, r2
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	449c      	add	ip, r3
 8000a8e:	0412      	lsls	r2, r2, #16
 8000a90:	4663      	mov	r3, ip
 8000a92:	4316      	orrs	r6, r2
 8000a94:	00c2      	lsls	r2, r0, #3
 8000a96:	2000      	movs	r0, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	9900      	ldr	r1, [sp, #0]
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	3101      	adds	r1, #1
 8000aa0:	468c      	mov	ip, r1
 8000aa2:	4649      	mov	r1, r9
 8000aa4:	407b      	eors	r3, r7
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	290f      	cmp	r1, #15
 8000aaa:	d826      	bhi.n	8000afa <__aeabi_dmul+0xe6>
 8000aac:	4bbe      	ldr	r3, [pc, #760]	; (8000da8 <__aeabi_dmul+0x394>)
 8000aae:	0089      	lsls	r1, r1, #2
 8000ab0:	5859      	ldr	r1, [r3, r1]
 8000ab2:	468f      	mov	pc, r1
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	0034      	movs	r4, r6
 8000aba:	0015      	movs	r5, r2
 8000abc:	4683      	mov	fp, r0
 8000abe:	465b      	mov	r3, fp
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d016      	beq.n	8000af2 <__aeabi_dmul+0xde>
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dmul+0xb6>
 8000ac8:	e203      	b.n	8000ed2 <__aeabi_dmul+0x4be>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dmul+0xbc>
 8000ace:	e0cd      	b.n	8000c6c <__aeabi_dmul+0x258>
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2500      	movs	r5, #0
 8000ad6:	9b01      	ldr	r3, [sp, #4]
 8000ad8:	0512      	lsls	r2, r2, #20
 8000ada:	4322      	orrs	r2, r4
 8000adc:	07db      	lsls	r3, r3, #31
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	0028      	movs	r0, r5
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	b007      	add	sp, #28
 8000ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae8:	46bb      	mov	fp, r7
 8000aea:	46b2      	mov	sl, r6
 8000aec:	46a9      	mov	r9, r5
 8000aee:	46a0      	mov	r8, r4
 8000af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af2:	2400      	movs	r4, #0
 8000af4:	2500      	movs	r5, #0
 8000af6:	4aaa      	ldr	r2, [pc, #680]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000af8:	e7ed      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000afa:	0c28      	lsrs	r0, r5, #16
 8000afc:	042d      	lsls	r5, r5, #16
 8000afe:	0c2d      	lsrs	r5, r5, #16
 8000b00:	002b      	movs	r3, r5
 8000b02:	0c11      	lsrs	r1, r2, #16
 8000b04:	0412      	lsls	r2, r2, #16
 8000b06:	0c12      	lsrs	r2, r2, #16
 8000b08:	4353      	muls	r3, r2
 8000b0a:	4698      	mov	r8, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	002f      	movs	r7, r5
 8000b10:	4343      	muls	r3, r0
 8000b12:	4699      	mov	r9, r3
 8000b14:	434f      	muls	r7, r1
 8000b16:	444f      	add	r7, r9
 8000b18:	46bb      	mov	fp, r7
 8000b1a:	4647      	mov	r7, r8
 8000b1c:	000b      	movs	r3, r1
 8000b1e:	0c3f      	lsrs	r7, r7, #16
 8000b20:	46ba      	mov	sl, r7
 8000b22:	4343      	muls	r3, r0
 8000b24:	44da      	add	sl, fp
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	45d1      	cmp	r9, sl
 8000b2a:	d904      	bls.n	8000b36 <__aeabi_dmul+0x122>
 8000b2c:	2780      	movs	r7, #128	; 0x80
 8000b2e:	027f      	lsls	r7, r7, #9
 8000b30:	46b9      	mov	r9, r7
 8000b32:	444b      	add	r3, r9
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	4653      	mov	r3, sl
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	469b      	mov	fp, r3
 8000b3c:	4653      	mov	r3, sl
 8000b3e:	041f      	lsls	r7, r3, #16
 8000b40:	4643      	mov	r3, r8
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	4698      	mov	r8, r3
 8000b48:	003b      	movs	r3, r7
 8000b4a:	4443      	add	r3, r8
 8000b4c:	9304      	str	r3, [sp, #16]
 8000b4e:	0c33      	lsrs	r3, r6, #16
 8000b50:	0436      	lsls	r6, r6, #16
 8000b52:	0c36      	lsrs	r6, r6, #16
 8000b54:	4698      	mov	r8, r3
 8000b56:	0033      	movs	r3, r6
 8000b58:	4343      	muls	r3, r0
 8000b5a:	4699      	mov	r9, r3
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	4343      	muls	r3, r0
 8000b60:	002f      	movs	r7, r5
 8000b62:	469a      	mov	sl, r3
 8000b64:	4643      	mov	r3, r8
 8000b66:	4377      	muls	r7, r6
 8000b68:	435d      	muls	r5, r3
 8000b6a:	0c38      	lsrs	r0, r7, #16
 8000b6c:	444d      	add	r5, r9
 8000b6e:	1945      	adds	r5, r0, r5
 8000b70:	45a9      	cmp	r9, r5
 8000b72:	d903      	bls.n	8000b7c <__aeabi_dmul+0x168>
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	025b      	lsls	r3, r3, #9
 8000b78:	4699      	mov	r9, r3
 8000b7a:	44ca      	add	sl, r9
 8000b7c:	043f      	lsls	r7, r7, #16
 8000b7e:	0c28      	lsrs	r0, r5, #16
 8000b80:	0c3f      	lsrs	r7, r7, #16
 8000b82:	042d      	lsls	r5, r5, #16
 8000b84:	19ed      	adds	r5, r5, r7
 8000b86:	0c27      	lsrs	r7, r4, #16
 8000b88:	0424      	lsls	r4, r4, #16
 8000b8a:	0c24      	lsrs	r4, r4, #16
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	0020      	movs	r0, r4
 8000b90:	4350      	muls	r0, r2
 8000b92:	437a      	muls	r2, r7
 8000b94:	4691      	mov	r9, r2
 8000b96:	003a      	movs	r2, r7
 8000b98:	4453      	add	r3, sl
 8000b9a:	9305      	str	r3, [sp, #20]
 8000b9c:	0c03      	lsrs	r3, r0, #16
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	434a      	muls	r2, r1
 8000ba2:	4361      	muls	r1, r4
 8000ba4:	4449      	add	r1, r9
 8000ba6:	4451      	add	r1, sl
 8000ba8:	44ab      	add	fp, r5
 8000baa:	4589      	cmp	r9, r1
 8000bac:	d903      	bls.n	8000bb6 <__aeabi_dmul+0x1a2>
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	025b      	lsls	r3, r3, #9
 8000bb2:	4699      	mov	r9, r3
 8000bb4:	444a      	add	r2, r9
 8000bb6:	0400      	lsls	r0, r0, #16
 8000bb8:	0c0b      	lsrs	r3, r1, #16
 8000bba:	0c00      	lsrs	r0, r0, #16
 8000bbc:	0409      	lsls	r1, r1, #16
 8000bbe:	1809      	adds	r1, r1, r0
 8000bc0:	0020      	movs	r0, r4
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	4370      	muls	r0, r6
 8000bc8:	435c      	muls	r4, r3
 8000bca:	437e      	muls	r6, r7
 8000bcc:	435f      	muls	r7, r3
 8000bce:	0c03      	lsrs	r3, r0, #16
 8000bd0:	4698      	mov	r8, r3
 8000bd2:	19a4      	adds	r4, r4, r6
 8000bd4:	4444      	add	r4, r8
 8000bd6:	444a      	add	r2, r9
 8000bd8:	9703      	str	r7, [sp, #12]
 8000bda:	42a6      	cmp	r6, r4
 8000bdc:	d904      	bls.n	8000be8 <__aeabi_dmul+0x1d4>
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	025b      	lsls	r3, r3, #9
 8000be2:	4698      	mov	r8, r3
 8000be4:	4447      	add	r7, r8
 8000be6:	9703      	str	r7, [sp, #12]
 8000be8:	0423      	lsls	r3, r4, #16
 8000bea:	9e02      	ldr	r6, [sp, #8]
 8000bec:	469a      	mov	sl, r3
 8000bee:	9b05      	ldr	r3, [sp, #20]
 8000bf0:	445e      	add	r6, fp
 8000bf2:	4698      	mov	r8, r3
 8000bf4:	42ae      	cmp	r6, r5
 8000bf6:	41ad      	sbcs	r5, r5
 8000bf8:	1876      	adds	r6, r6, r1
 8000bfa:	428e      	cmp	r6, r1
 8000bfc:	4189      	sbcs	r1, r1
 8000bfe:	0400      	lsls	r0, r0, #16
 8000c00:	0c00      	lsrs	r0, r0, #16
 8000c02:	4450      	add	r0, sl
 8000c04:	4440      	add	r0, r8
 8000c06:	426d      	negs	r5, r5
 8000c08:	1947      	adds	r7, r0, r5
 8000c0a:	46b8      	mov	r8, r7
 8000c0c:	4693      	mov	fp, r2
 8000c0e:	4249      	negs	r1, r1
 8000c10:	4689      	mov	r9, r1
 8000c12:	44c3      	add	fp, r8
 8000c14:	44d9      	add	r9, fp
 8000c16:	4298      	cmp	r0, r3
 8000c18:	4180      	sbcs	r0, r0
 8000c1a:	45a8      	cmp	r8, r5
 8000c1c:	41ad      	sbcs	r5, r5
 8000c1e:	4593      	cmp	fp, r2
 8000c20:	4192      	sbcs	r2, r2
 8000c22:	4589      	cmp	r9, r1
 8000c24:	4189      	sbcs	r1, r1
 8000c26:	426d      	negs	r5, r5
 8000c28:	4240      	negs	r0, r0
 8000c2a:	4328      	orrs	r0, r5
 8000c2c:	0c24      	lsrs	r4, r4, #16
 8000c2e:	4252      	negs	r2, r2
 8000c30:	4249      	negs	r1, r1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	1900      	adds	r0, r0, r4
 8000c38:	1880      	adds	r0, r0, r2
 8000c3a:	18c7      	adds	r7, r0, r3
 8000c3c:	464b      	mov	r3, r9
 8000c3e:	0ddc      	lsrs	r4, r3, #23
 8000c40:	9b04      	ldr	r3, [sp, #16]
 8000c42:	0275      	lsls	r5, r6, #9
 8000c44:	431d      	orrs	r5, r3
 8000c46:	1e6a      	subs	r2, r5, #1
 8000c48:	4195      	sbcs	r5, r2
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	0df6      	lsrs	r6, r6, #23
 8000c4e:	027f      	lsls	r7, r7, #9
 8000c50:	4335      	orrs	r5, r6
 8000c52:	025a      	lsls	r2, r3, #9
 8000c54:	433c      	orrs	r4, r7
 8000c56:	4315      	orrs	r5, r2
 8000c58:	01fb      	lsls	r3, r7, #7
 8000c5a:	d400      	bmi.n	8000c5e <__aeabi_dmul+0x24a>
 8000c5c:	e11c      	b.n	8000e98 <__aeabi_dmul+0x484>
 8000c5e:	2101      	movs	r1, #1
 8000c60:	086a      	lsrs	r2, r5, #1
 8000c62:	400d      	ands	r5, r1
 8000c64:	4315      	orrs	r5, r2
 8000c66:	07e2      	lsls	r2, r4, #31
 8000c68:	4315      	orrs	r5, r2
 8000c6a:	0864      	lsrs	r4, r4, #1
 8000c6c:	494f      	ldr	r1, [pc, #316]	; (8000dac <__aeabi_dmul+0x398>)
 8000c6e:	4461      	add	r1, ip
 8000c70:	2900      	cmp	r1, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_dmul+0x262>
 8000c74:	e0b0      	b.n	8000dd8 <__aeabi_dmul+0x3c4>
 8000c76:	076b      	lsls	r3, r5, #29
 8000c78:	d009      	beq.n	8000c8e <__aeabi_dmul+0x27a>
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	402a      	ands	r2, r5
 8000c7e:	2a04      	cmp	r2, #4
 8000c80:	d005      	beq.n	8000c8e <__aeabi_dmul+0x27a>
 8000c82:	1d2a      	adds	r2, r5, #4
 8000c84:	42aa      	cmp	r2, r5
 8000c86:	41ad      	sbcs	r5, r5
 8000c88:	426d      	negs	r5, r5
 8000c8a:	1964      	adds	r4, r4, r5
 8000c8c:	0015      	movs	r5, r2
 8000c8e:	01e3      	lsls	r3, r4, #7
 8000c90:	d504      	bpl.n	8000c9c <__aeabi_dmul+0x288>
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	4a46      	ldr	r2, [pc, #280]	; (8000db0 <__aeabi_dmul+0x39c>)
 8000c96:	00c9      	lsls	r1, r1, #3
 8000c98:	4014      	ands	r4, r2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <__aeabi_dmul+0x3a0>)
 8000c9e:	4291      	cmp	r1, r2
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dmul+0x290>
 8000ca2:	e726      	b.n	8000af2 <__aeabi_dmul+0xde>
 8000ca4:	0762      	lsls	r2, r4, #29
 8000ca6:	08ed      	lsrs	r5, r5, #3
 8000ca8:	0264      	lsls	r4, r4, #9
 8000caa:	0549      	lsls	r1, r1, #21
 8000cac:	4315      	orrs	r5, r2
 8000cae:	0b24      	lsrs	r4, r4, #12
 8000cb0:	0d4a      	lsrs	r2, r1, #21
 8000cb2:	e710      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000cb4:	4652      	mov	r2, sl
 8000cb6:	4332      	orrs	r2, r6
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dmul+0x2a8>
 8000cba:	e07f      	b.n	8000dbc <__aeabi_dmul+0x3a8>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_dmul+0x2ae>
 8000cc0:	e0dc      	b.n	8000e7c <__aeabi_dmul+0x468>
 8000cc2:	0030      	movs	r0, r6
 8000cc4:	f000 fd3e 	bl	8001744 <__clzsi2>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	3a0b      	subs	r2, #11
 8000ccc:	231d      	movs	r3, #29
 8000cce:	0001      	movs	r1, r0
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	3908      	subs	r1, #8
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	408e      	lsls	r6, r1
 8000cda:	4316      	orrs	r6, r2
 8000cdc:	4652      	mov	r2, sl
 8000cde:	408a      	lsls	r2, r1
 8000ce0:	9b00      	ldr	r3, [sp, #0]
 8000ce2:	4935      	ldr	r1, [pc, #212]	; (8000db8 <__aeabi_dmul+0x3a4>)
 8000ce4:	1a18      	subs	r0, r3, r0
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	468c      	mov	ip, r1
 8000cea:	4463      	add	r3, ip
 8000cec:	2000      	movs	r0, #0
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	e6d3      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000cf2:	0025      	movs	r5, r4
 8000cf4:	4305      	orrs	r5, r0
 8000cf6:	d04a      	beq.n	8000d8e <__aeabi_dmul+0x37a>
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_dmul+0x2ea>
 8000cfc:	e0b0      	b.n	8000e60 <__aeabi_dmul+0x44c>
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f000 fd20 	bl	8001744 <__clzsi2>
 8000d04:	0001      	movs	r1, r0
 8000d06:	0002      	movs	r2, r0
 8000d08:	390b      	subs	r1, #11
 8000d0a:	231d      	movs	r3, #29
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	0031      	movs	r1, r6
 8000d12:	0035      	movs	r5, r6
 8000d14:	3808      	subs	r0, #8
 8000d16:	4084      	lsls	r4, r0
 8000d18:	40d9      	lsrs	r1, r3
 8000d1a:	4085      	lsls	r5, r0
 8000d1c:	430c      	orrs	r4, r1
 8000d1e:	4826      	ldr	r0, [pc, #152]	; (8000db8 <__aeabi_dmul+0x3a4>)
 8000d20:	1a83      	subs	r3, r0, r2
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	4699      	mov	r9, r3
 8000d28:	469b      	mov	fp, r3
 8000d2a:	e697      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d2c:	0005      	movs	r5, r0
 8000d2e:	4325      	orrs	r5, r4
 8000d30:	d126      	bne.n	8000d80 <__aeabi_dmul+0x36c>
 8000d32:	2208      	movs	r2, #8
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	2302      	movs	r3, #2
 8000d38:	2400      	movs	r4, #0
 8000d3a:	4691      	mov	r9, r2
 8000d3c:	469b      	mov	fp, r3
 8000d3e:	e68d      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d40:	4652      	mov	r2, sl
 8000d42:	9b00      	ldr	r3, [sp, #0]
 8000d44:	4332      	orrs	r2, r6
 8000d46:	d110      	bne.n	8000d6a <__aeabi_dmul+0x356>
 8000d48:	4915      	ldr	r1, [pc, #84]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	4463      	add	r3, ip
 8000d50:	4649      	mov	r1, r9
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2302      	movs	r3, #2
 8000d56:	4319      	orrs	r1, r3
 8000d58:	4689      	mov	r9, r1
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	e69d      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000d5e:	465b      	mov	r3, fp
 8000d60:	9701      	str	r7, [sp, #4]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d000      	beq.n	8000d68 <__aeabi_dmul+0x354>
 8000d66:	e6ad      	b.n	8000ac4 <__aeabi_dmul+0xb0>
 8000d68:	e6c3      	b.n	8000af2 <__aeabi_dmul+0xde>
 8000d6a:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <__aeabi_dmul+0x38c>)
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	4694      	mov	ip, r2
 8000d70:	4463      	add	r3, ip
 8000d72:	464a      	mov	r2, r9
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2303      	movs	r3, #3
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	4691      	mov	r9, r2
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	e68c      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000d80:	220c      	movs	r2, #12
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2303      	movs	r3, #3
 8000d86:	0005      	movs	r5, r0
 8000d88:	4691      	mov	r9, r2
 8000d8a:	469b      	mov	fp, r3
 8000d8c:	e666      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	4699      	mov	r9, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	2400      	movs	r4, #0
 8000d9a:	469b      	mov	fp, r3
 8000d9c:	e65e      	b.n	8000a5c <__aeabi_dmul+0x48>
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	fffffc01 	.word	0xfffffc01
 8000da8:	08007d1c 	.word	0x08007d1c
 8000dac:	000003ff 	.word	0x000003ff
 8000db0:	feffffff 	.word	0xfeffffff
 8000db4:	000007fe 	.word	0x000007fe
 8000db8:	fffffc0d 	.word	0xfffffc0d
 8000dbc:	4649      	mov	r1, r9
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	4319      	orrs	r1, r3
 8000dc2:	4689      	mov	r9, r1
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e667      	b.n	8000a9a <__aeabi_dmul+0x86>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2480      	movs	r4, #128	; 0x80
 8000dce:	2500      	movs	r5, #0
 8000dd0:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	0324      	lsls	r4, r4, #12
 8000dd6:	e67e      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	1a40      	subs	r0, r0, r1
 8000ddc:	2838      	cmp	r0, #56	; 0x38
 8000dde:	dd00      	ble.n	8000de2 <__aeabi_dmul+0x3ce>
 8000de0:	e676      	b.n	8000ad0 <__aeabi_dmul+0xbc>
 8000de2:	281f      	cmp	r0, #31
 8000de4:	dd5b      	ble.n	8000e9e <__aeabi_dmul+0x48a>
 8000de6:	221f      	movs	r2, #31
 8000de8:	0023      	movs	r3, r4
 8000dea:	4252      	negs	r2, r2
 8000dec:	1a51      	subs	r1, r2, r1
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	0019      	movs	r1, r3
 8000df2:	2820      	cmp	r0, #32
 8000df4:	d003      	beq.n	8000dfe <__aeabi_dmul+0x3ea>
 8000df6:	4a3b      	ldr	r2, [pc, #236]	; (8000ee4 <__aeabi_dmul+0x4d0>)
 8000df8:	4462      	add	r2, ip
 8000dfa:	4094      	lsls	r4, r2
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	1e6a      	subs	r2, r5, #1
 8000e00:	4195      	sbcs	r5, r2
 8000e02:	002a      	movs	r2, r5
 8000e04:	430a      	orrs	r2, r1
 8000e06:	2107      	movs	r1, #7
 8000e08:	000d      	movs	r5, r1
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	4015      	ands	r5, r2
 8000e0e:	4211      	tst	r1, r2
 8000e10:	d05b      	beq.n	8000eca <__aeabi_dmul+0x4b6>
 8000e12:	210f      	movs	r1, #15
 8000e14:	2400      	movs	r4, #0
 8000e16:	4011      	ands	r1, r2
 8000e18:	2904      	cmp	r1, #4
 8000e1a:	d053      	beq.n	8000ec4 <__aeabi_dmul+0x4b0>
 8000e1c:	1d11      	adds	r1, r2, #4
 8000e1e:	4291      	cmp	r1, r2
 8000e20:	4192      	sbcs	r2, r2
 8000e22:	4252      	negs	r2, r2
 8000e24:	18a4      	adds	r4, r4, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	0223      	lsls	r3, r4, #8
 8000e2a:	d54b      	bpl.n	8000ec4 <__aeabi_dmul+0x4b0>
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2400      	movs	r4, #0
 8000e30:	2500      	movs	r5, #0
 8000e32:	e650      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	031b      	lsls	r3, r3, #12
 8000e38:	421c      	tst	r4, r3
 8000e3a:	d009      	beq.n	8000e50 <__aeabi_dmul+0x43c>
 8000e3c:	421e      	tst	r6, r3
 8000e3e:	d107      	bne.n	8000e50 <__aeabi_dmul+0x43c>
 8000e40:	4333      	orrs	r3, r6
 8000e42:	031c      	lsls	r4, r3, #12
 8000e44:	4643      	mov	r3, r8
 8000e46:	0015      	movs	r5, r2
 8000e48:	0b24      	lsrs	r4, r4, #12
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	e642      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0312      	lsls	r2, r2, #12
 8000e54:	4314      	orrs	r4, r2
 8000e56:	0324      	lsls	r4, r4, #12
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000e5a:	0b24      	lsrs	r4, r4, #12
 8000e5c:	9701      	str	r7, [sp, #4]
 8000e5e:	e63a      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000e60:	f000 fc70 	bl	8001744 <__clzsi2>
 8000e64:	0001      	movs	r1, r0
 8000e66:	0002      	movs	r2, r0
 8000e68:	3115      	adds	r1, #21
 8000e6a:	3220      	adds	r2, #32
 8000e6c:	291c      	cmp	r1, #28
 8000e6e:	dc00      	bgt.n	8000e72 <__aeabi_dmul+0x45e>
 8000e70:	e74b      	b.n	8000d0a <__aeabi_dmul+0x2f6>
 8000e72:	0034      	movs	r4, r6
 8000e74:	3808      	subs	r0, #8
 8000e76:	2500      	movs	r5, #0
 8000e78:	4084      	lsls	r4, r0
 8000e7a:	e750      	b.n	8000d1e <__aeabi_dmul+0x30a>
 8000e7c:	f000 fc62 	bl	8001744 <__clzsi2>
 8000e80:	0003      	movs	r3, r0
 8000e82:	001a      	movs	r2, r3
 8000e84:	3215      	adds	r2, #21
 8000e86:	3020      	adds	r0, #32
 8000e88:	2a1c      	cmp	r2, #28
 8000e8a:	dc00      	bgt.n	8000e8e <__aeabi_dmul+0x47a>
 8000e8c:	e71e      	b.n	8000ccc <__aeabi_dmul+0x2b8>
 8000e8e:	4656      	mov	r6, sl
 8000e90:	3b08      	subs	r3, #8
 8000e92:	2200      	movs	r2, #0
 8000e94:	409e      	lsls	r6, r3
 8000e96:	e723      	b.n	8000ce0 <__aeabi_dmul+0x2cc>
 8000e98:	9b00      	ldr	r3, [sp, #0]
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	e6e6      	b.n	8000c6c <__aeabi_dmul+0x258>
 8000e9e:	4912      	ldr	r1, [pc, #72]	; (8000ee8 <__aeabi_dmul+0x4d4>)
 8000ea0:	0022      	movs	r2, r4
 8000ea2:	4461      	add	r1, ip
 8000ea4:	002e      	movs	r6, r5
 8000ea6:	408d      	lsls	r5, r1
 8000ea8:	408a      	lsls	r2, r1
 8000eaa:	40c6      	lsrs	r6, r0
 8000eac:	1e69      	subs	r1, r5, #1
 8000eae:	418d      	sbcs	r5, r1
 8000eb0:	4332      	orrs	r2, r6
 8000eb2:	432a      	orrs	r2, r5
 8000eb4:	40c4      	lsrs	r4, r0
 8000eb6:	0753      	lsls	r3, r2, #29
 8000eb8:	d0b6      	beq.n	8000e28 <__aeabi_dmul+0x414>
 8000eba:	210f      	movs	r1, #15
 8000ebc:	4011      	ands	r1, r2
 8000ebe:	2904      	cmp	r1, #4
 8000ec0:	d1ac      	bne.n	8000e1c <__aeabi_dmul+0x408>
 8000ec2:	e7b1      	b.n	8000e28 <__aeabi_dmul+0x414>
 8000ec4:	0765      	lsls	r5, r4, #29
 8000ec6:	0264      	lsls	r4, r4, #9
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	08d2      	lsrs	r2, r2, #3
 8000ecc:	4315      	orrs	r5, r2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	e601      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	0312      	lsls	r2, r2, #12
 8000ed6:	4314      	orrs	r4, r2
 8000ed8:	0324      	lsls	r4, r4, #12
 8000eda:	4a01      	ldr	r2, [pc, #4]	; (8000ee0 <__aeabi_dmul+0x4cc>)
 8000edc:	0b24      	lsrs	r4, r4, #12
 8000ede:	e5fa      	b.n	8000ad6 <__aeabi_dmul+0xc2>
 8000ee0:	000007ff 	.word	0x000007ff
 8000ee4:	0000043e 	.word	0x0000043e
 8000ee8:	0000041e 	.word	0x0000041e

08000eec <__aeabi_dsub>:
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	4657      	mov	r7, sl
 8000ef0:	464e      	mov	r6, r9
 8000ef2:	4645      	mov	r5, r8
 8000ef4:	46de      	mov	lr, fp
 8000ef6:	b5e0      	push	{r5, r6, r7, lr}
 8000ef8:	001e      	movs	r6, r3
 8000efa:	0017      	movs	r7, r2
 8000efc:	004a      	lsls	r2, r1, #1
 8000efe:	030b      	lsls	r3, r1, #12
 8000f00:	0d52      	lsrs	r2, r2, #21
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	4690      	mov	r8, r2
 8000f06:	0f42      	lsrs	r2, r0, #29
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	0fcd      	lsrs	r5, r1, #31
 8000f0c:	4ccd      	ldr	r4, [pc, #820]	; (8001244 <__aeabi_dsub+0x358>)
 8000f0e:	0331      	lsls	r1, r6, #12
 8000f10:	00c3      	lsls	r3, r0, #3
 8000f12:	4694      	mov	ip, r2
 8000f14:	0070      	lsls	r0, r6, #1
 8000f16:	0f7a      	lsrs	r2, r7, #29
 8000f18:	0a49      	lsrs	r1, r1, #9
 8000f1a:	00ff      	lsls	r7, r7, #3
 8000f1c:	469a      	mov	sl, r3
 8000f1e:	46b9      	mov	r9, r7
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0ff6      	lsrs	r6, r6, #31
 8000f24:	4311      	orrs	r1, r2
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dsub+0x40>
 8000f2a:	e0b1      	b.n	8001090 <__aeabi_dsub+0x1a4>
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4056      	eors	r6, r2
 8000f30:	46b3      	mov	fp, r6
 8000f32:	42b5      	cmp	r5, r6
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dsub+0x4c>
 8000f36:	e088      	b.n	800104a <__aeabi_dsub+0x15e>
 8000f38:	4642      	mov	r2, r8
 8000f3a:	1a12      	subs	r2, r2, r0
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	dc00      	bgt.n	8000f42 <__aeabi_dsub+0x56>
 8000f40:	e0ae      	b.n	80010a0 <__aeabi_dsub+0x1b4>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dsub+0x5c>
 8000f46:	e0c1      	b.n	80010cc <__aeabi_dsub+0x1e0>
 8000f48:	48be      	ldr	r0, [pc, #760]	; (8001244 <__aeabi_dsub+0x358>)
 8000f4a:	4580      	cmp	r8, r0
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dsub+0x64>
 8000f4e:	e151      	b.n	80011f4 <__aeabi_dsub+0x308>
 8000f50:	2080      	movs	r0, #128	; 0x80
 8000f52:	0400      	lsls	r0, r0, #16
 8000f54:	4301      	orrs	r1, r0
 8000f56:	2a38      	cmp	r2, #56	; 0x38
 8000f58:	dd00      	ble.n	8000f5c <__aeabi_dsub+0x70>
 8000f5a:	e17b      	b.n	8001254 <__aeabi_dsub+0x368>
 8000f5c:	2a1f      	cmp	r2, #31
 8000f5e:	dd00      	ble.n	8000f62 <__aeabi_dsub+0x76>
 8000f60:	e1ee      	b.n	8001340 <__aeabi_dsub+0x454>
 8000f62:	2020      	movs	r0, #32
 8000f64:	003e      	movs	r6, r7
 8000f66:	1a80      	subs	r0, r0, r2
 8000f68:	000c      	movs	r4, r1
 8000f6a:	40d6      	lsrs	r6, r2
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	4087      	lsls	r7, r0
 8000f70:	4662      	mov	r2, ip
 8000f72:	4084      	lsls	r4, r0
 8000f74:	1a52      	subs	r2, r2, r1
 8000f76:	1e78      	subs	r0, r7, #1
 8000f78:	4187      	sbcs	r7, r0
 8000f7a:	4694      	mov	ip, r2
 8000f7c:	4334      	orrs	r4, r6
 8000f7e:	4327      	orrs	r7, r4
 8000f80:	1bdc      	subs	r4, r3, r7
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	419b      	sbcs	r3, r3
 8000f86:	4662      	mov	r2, ip
 8000f88:	425b      	negs	r3, r3
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4699      	mov	r9, r3
 8000f8e:	464b      	mov	r3, r9
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	d400      	bmi.n	8000f96 <__aeabi_dsub+0xaa>
 8000f94:	e118      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8000f96:	464b      	mov	r3, r9
 8000f98:	0258      	lsls	r0, r3, #9
 8000f9a:	0a43      	lsrs	r3, r0, #9
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_dsub+0xba>
 8000fa4:	e137      	b.n	8001216 <__aeabi_dsub+0x32a>
 8000fa6:	4648      	mov	r0, r9
 8000fa8:	f000 fbcc 	bl	8001744 <__clzsi2>
 8000fac:	0001      	movs	r1, r0
 8000fae:	3908      	subs	r1, #8
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	4648      	mov	r0, r9
 8000fb6:	1a5b      	subs	r3, r3, r1
 8000fb8:	40da      	lsrs	r2, r3
 8000fba:	4088      	lsls	r0, r1
 8000fbc:	408c      	lsls	r4, r1
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	4310      	orrs	r0, r2
 8000fc2:	4588      	cmp	r8, r1
 8000fc4:	dd00      	ble.n	8000fc8 <__aeabi_dsub+0xdc>
 8000fc6:	e136      	b.n	8001236 <__aeabi_dsub+0x34a>
 8000fc8:	1ac9      	subs	r1, r1, r3
 8000fca:	1c4b      	adds	r3, r1, #1
 8000fcc:	2b1f      	cmp	r3, #31
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_dsub+0xe6>
 8000fd0:	e0ea      	b.n	80011a8 <__aeabi_dsub+0x2bc>
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	0026      	movs	r6, r4
 8000fd6:	1ad2      	subs	r2, r2, r3
 8000fd8:	0001      	movs	r1, r0
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	40de      	lsrs	r6, r3
 8000fde:	40d8      	lsrs	r0, r3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	4681      	mov	r9, r0
 8000fea:	4698      	mov	r8, r3
 8000fec:	4331      	orrs	r1, r6
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	0763      	lsls	r3, r4, #29
 8000ff2:	d009      	beq.n	8001008 <__aeabi_dsub+0x11c>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <__aeabi_dsub+0x11c>
 8000ffc:	1d23      	adds	r3, r4, #4
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	41a4      	sbcs	r4, r4
 8001002:	4264      	negs	r4, r4
 8001004:	44a1      	add	r9, r4
 8001006:	001c      	movs	r4, r3
 8001008:	464b      	mov	r3, r9
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	d400      	bmi.n	8001010 <__aeabi_dsub+0x124>
 800100e:	e0de      	b.n	80011ce <__aeabi_dsub+0x2e2>
 8001010:	4641      	mov	r1, r8
 8001012:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <__aeabi_dsub+0x358>)
 8001014:	3101      	adds	r1, #1
 8001016:	4299      	cmp	r1, r3
 8001018:	d100      	bne.n	800101c <__aeabi_dsub+0x130>
 800101a:	e0e7      	b.n	80011ec <__aeabi_dsub+0x300>
 800101c:	464b      	mov	r3, r9
 800101e:	488a      	ldr	r0, [pc, #552]	; (8001248 <__aeabi_dsub+0x35c>)
 8001020:	08e4      	lsrs	r4, r4, #3
 8001022:	4003      	ands	r3, r0
 8001024:	0018      	movs	r0, r3
 8001026:	0549      	lsls	r1, r1, #21
 8001028:	075b      	lsls	r3, r3, #29
 800102a:	0240      	lsls	r0, r0, #9
 800102c:	4323      	orrs	r3, r4
 800102e:	0d4a      	lsrs	r2, r1, #21
 8001030:	0b04      	lsrs	r4, r0, #12
 8001032:	0512      	lsls	r2, r2, #20
 8001034:	07ed      	lsls	r5, r5, #31
 8001036:	4322      	orrs	r2, r4
 8001038:	432a      	orrs	r2, r5
 800103a:	0018      	movs	r0, r3
 800103c:	0011      	movs	r1, r2
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
 8001040:	46bb      	mov	fp, r7
 8001042:	46b2      	mov	sl, r6
 8001044:	46a9      	mov	r9, r5
 8001046:	46a0      	mov	r8, r4
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104a:	4642      	mov	r2, r8
 800104c:	1a12      	subs	r2, r2, r0
 800104e:	2a00      	cmp	r2, #0
 8001050:	dd52      	ble.n	80010f8 <__aeabi_dsub+0x20c>
 8001052:	2800      	cmp	r0, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_dsub+0x16c>
 8001056:	e09c      	b.n	8001192 <__aeabi_dsub+0x2a6>
 8001058:	45a0      	cmp	r8, r4
 800105a:	d100      	bne.n	800105e <__aeabi_dsub+0x172>
 800105c:	e0ca      	b.n	80011f4 <__aeabi_dsub+0x308>
 800105e:	2080      	movs	r0, #128	; 0x80
 8001060:	0400      	lsls	r0, r0, #16
 8001062:	4301      	orrs	r1, r0
 8001064:	2a38      	cmp	r2, #56	; 0x38
 8001066:	dd00      	ble.n	800106a <__aeabi_dsub+0x17e>
 8001068:	e149      	b.n	80012fe <__aeabi_dsub+0x412>
 800106a:	2a1f      	cmp	r2, #31
 800106c:	dc00      	bgt.n	8001070 <__aeabi_dsub+0x184>
 800106e:	e197      	b.n	80013a0 <__aeabi_dsub+0x4b4>
 8001070:	0010      	movs	r0, r2
 8001072:	000e      	movs	r6, r1
 8001074:	3820      	subs	r0, #32
 8001076:	40c6      	lsrs	r6, r0
 8001078:	2a20      	cmp	r2, #32
 800107a:	d004      	beq.n	8001086 <__aeabi_dsub+0x19a>
 800107c:	2040      	movs	r0, #64	; 0x40
 800107e:	1a82      	subs	r2, r0, r2
 8001080:	4091      	lsls	r1, r2
 8001082:	430f      	orrs	r7, r1
 8001084:	46b9      	mov	r9, r7
 8001086:	464c      	mov	r4, r9
 8001088:	1e62      	subs	r2, r4, #1
 800108a:	4194      	sbcs	r4, r2
 800108c:	4334      	orrs	r4, r6
 800108e:	e13a      	b.n	8001306 <__aeabi_dsub+0x41a>
 8001090:	000a      	movs	r2, r1
 8001092:	433a      	orrs	r2, r7
 8001094:	d028      	beq.n	80010e8 <__aeabi_dsub+0x1fc>
 8001096:	46b3      	mov	fp, r6
 8001098:	42b5      	cmp	r5, r6
 800109a:	d02b      	beq.n	80010f4 <__aeabi_dsub+0x208>
 800109c:	4a6b      	ldr	r2, [pc, #428]	; (800124c <__aeabi_dsub+0x360>)
 800109e:	4442      	add	r2, r8
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d05d      	beq.n	8001160 <__aeabi_dsub+0x274>
 80010a4:	4642      	mov	r2, r8
 80010a6:	4644      	mov	r4, r8
 80010a8:	1a82      	subs	r2, r0, r2
 80010aa:	2c00      	cmp	r4, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_dsub+0x1c4>
 80010ae:	e0f5      	b.n	800129c <__aeabi_dsub+0x3b0>
 80010b0:	4665      	mov	r5, ip
 80010b2:	431d      	orrs	r5, r3
 80010b4:	d100      	bne.n	80010b8 <__aeabi_dsub+0x1cc>
 80010b6:	e19c      	b.n	80013f2 <__aeabi_dsub+0x506>
 80010b8:	1e55      	subs	r5, r2, #1
 80010ba:	2a01      	cmp	r2, #1
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x1d4>
 80010be:	e1fb      	b.n	80014b8 <__aeabi_dsub+0x5cc>
 80010c0:	4c60      	ldr	r4, [pc, #384]	; (8001244 <__aeabi_dsub+0x358>)
 80010c2:	42a2      	cmp	r2, r4
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dsub+0x1dc>
 80010c6:	e1bd      	b.n	8001444 <__aeabi_dsub+0x558>
 80010c8:	002a      	movs	r2, r5
 80010ca:	e0f0      	b.n	80012ae <__aeabi_dsub+0x3c2>
 80010cc:	0008      	movs	r0, r1
 80010ce:	4338      	orrs	r0, r7
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dsub+0x1e8>
 80010d2:	e0c3      	b.n	800125c <__aeabi_dsub+0x370>
 80010d4:	1e50      	subs	r0, r2, #1
 80010d6:	2a01      	cmp	r2, #1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dsub+0x1f0>
 80010da:	e1a8      	b.n	800142e <__aeabi_dsub+0x542>
 80010dc:	4c59      	ldr	r4, [pc, #356]	; (8001244 <__aeabi_dsub+0x358>)
 80010de:	42a2      	cmp	r2, r4
 80010e0:	d100      	bne.n	80010e4 <__aeabi_dsub+0x1f8>
 80010e2:	e087      	b.n	80011f4 <__aeabi_dsub+0x308>
 80010e4:	0002      	movs	r2, r0
 80010e6:	e736      	b.n	8000f56 <__aeabi_dsub+0x6a>
 80010e8:	2201      	movs	r2, #1
 80010ea:	4056      	eors	r6, r2
 80010ec:	46b3      	mov	fp, r6
 80010ee:	42b5      	cmp	r5, r6
 80010f0:	d000      	beq.n	80010f4 <__aeabi_dsub+0x208>
 80010f2:	e721      	b.n	8000f38 <__aeabi_dsub+0x4c>
 80010f4:	4a55      	ldr	r2, [pc, #340]	; (800124c <__aeabi_dsub+0x360>)
 80010f6:	4442      	add	r2, r8
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_dsub+0x212>
 80010fc:	e0b5      	b.n	800126a <__aeabi_dsub+0x37e>
 80010fe:	4642      	mov	r2, r8
 8001100:	4644      	mov	r4, r8
 8001102:	1a82      	subs	r2, r0, r2
 8001104:	2c00      	cmp	r4, #0
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x21e>
 8001108:	e138      	b.n	800137c <__aeabi_dsub+0x490>
 800110a:	4e4e      	ldr	r6, [pc, #312]	; (8001244 <__aeabi_dsub+0x358>)
 800110c:	42b0      	cmp	r0, r6
 800110e:	d100      	bne.n	8001112 <__aeabi_dsub+0x226>
 8001110:	e1de      	b.n	80014d0 <__aeabi_dsub+0x5e4>
 8001112:	2680      	movs	r6, #128	; 0x80
 8001114:	4664      	mov	r4, ip
 8001116:	0436      	lsls	r6, r6, #16
 8001118:	4334      	orrs	r4, r6
 800111a:	46a4      	mov	ip, r4
 800111c:	2a38      	cmp	r2, #56	; 0x38
 800111e:	dd00      	ble.n	8001122 <__aeabi_dsub+0x236>
 8001120:	e196      	b.n	8001450 <__aeabi_dsub+0x564>
 8001122:	2a1f      	cmp	r2, #31
 8001124:	dd00      	ble.n	8001128 <__aeabi_dsub+0x23c>
 8001126:	e224      	b.n	8001572 <__aeabi_dsub+0x686>
 8001128:	2620      	movs	r6, #32
 800112a:	1ab4      	subs	r4, r6, r2
 800112c:	46a2      	mov	sl, r4
 800112e:	4664      	mov	r4, ip
 8001130:	4656      	mov	r6, sl
 8001132:	40b4      	lsls	r4, r6
 8001134:	46a1      	mov	r9, r4
 8001136:	001c      	movs	r4, r3
 8001138:	464e      	mov	r6, r9
 800113a:	40d4      	lsrs	r4, r2
 800113c:	4326      	orrs	r6, r4
 800113e:	0034      	movs	r4, r6
 8001140:	4656      	mov	r6, sl
 8001142:	40b3      	lsls	r3, r6
 8001144:	1e5e      	subs	r6, r3, #1
 8001146:	41b3      	sbcs	r3, r6
 8001148:	431c      	orrs	r4, r3
 800114a:	4663      	mov	r3, ip
 800114c:	40d3      	lsrs	r3, r2
 800114e:	18c9      	adds	r1, r1, r3
 8001150:	19e4      	adds	r4, r4, r7
 8001152:	42bc      	cmp	r4, r7
 8001154:	41bf      	sbcs	r7, r7
 8001156:	427f      	negs	r7, r7
 8001158:	46b9      	mov	r9, r7
 800115a:	4680      	mov	r8, r0
 800115c:	4489      	add	r9, r1
 800115e:	e0d8      	b.n	8001312 <__aeabi_dsub+0x426>
 8001160:	4640      	mov	r0, r8
 8001162:	4c3b      	ldr	r4, [pc, #236]	; (8001250 <__aeabi_dsub+0x364>)
 8001164:	3001      	adds	r0, #1
 8001166:	4220      	tst	r0, r4
 8001168:	d000      	beq.n	800116c <__aeabi_dsub+0x280>
 800116a:	e0b4      	b.n	80012d6 <__aeabi_dsub+0x3ea>
 800116c:	4640      	mov	r0, r8
 800116e:	2800      	cmp	r0, #0
 8001170:	d000      	beq.n	8001174 <__aeabi_dsub+0x288>
 8001172:	e144      	b.n	80013fe <__aeabi_dsub+0x512>
 8001174:	4660      	mov	r0, ip
 8001176:	4318      	orrs	r0, r3
 8001178:	d100      	bne.n	800117c <__aeabi_dsub+0x290>
 800117a:	e190      	b.n	800149e <__aeabi_dsub+0x5b2>
 800117c:	0008      	movs	r0, r1
 800117e:	4338      	orrs	r0, r7
 8001180:	d000      	beq.n	8001184 <__aeabi_dsub+0x298>
 8001182:	e1aa      	b.n	80014da <__aeabi_dsub+0x5ee>
 8001184:	4661      	mov	r1, ip
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	0749      	lsls	r1, r1, #29
 800118a:	430b      	orrs	r3, r1
 800118c:	4661      	mov	r1, ip
 800118e:	08cc      	lsrs	r4, r1, #3
 8001190:	e027      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 8001192:	0008      	movs	r0, r1
 8001194:	4338      	orrs	r0, r7
 8001196:	d061      	beq.n	800125c <__aeabi_dsub+0x370>
 8001198:	1e50      	subs	r0, r2, #1
 800119a:	2a01      	cmp	r2, #1
 800119c:	d100      	bne.n	80011a0 <__aeabi_dsub+0x2b4>
 800119e:	e139      	b.n	8001414 <__aeabi_dsub+0x528>
 80011a0:	42a2      	cmp	r2, r4
 80011a2:	d027      	beq.n	80011f4 <__aeabi_dsub+0x308>
 80011a4:	0002      	movs	r2, r0
 80011a6:	e75d      	b.n	8001064 <__aeabi_dsub+0x178>
 80011a8:	0002      	movs	r2, r0
 80011aa:	391f      	subs	r1, #31
 80011ac:	40ca      	lsrs	r2, r1
 80011ae:	0011      	movs	r1, r2
 80011b0:	2b20      	cmp	r3, #32
 80011b2:	d003      	beq.n	80011bc <__aeabi_dsub+0x2d0>
 80011b4:	2240      	movs	r2, #64	; 0x40
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4098      	lsls	r0, r3
 80011ba:	4304      	orrs	r4, r0
 80011bc:	1e63      	subs	r3, r4, #1
 80011be:	419c      	sbcs	r4, r3
 80011c0:	2300      	movs	r3, #0
 80011c2:	4699      	mov	r9, r3
 80011c4:	4698      	mov	r8, r3
 80011c6:	430c      	orrs	r4, r1
 80011c8:	0763      	lsls	r3, r4, #29
 80011ca:	d000      	beq.n	80011ce <__aeabi_dsub+0x2e2>
 80011cc:	e712      	b.n	8000ff4 <__aeabi_dsub+0x108>
 80011ce:	464b      	mov	r3, r9
 80011d0:	464a      	mov	r2, r9
 80011d2:	08e4      	lsrs	r4, r4, #3
 80011d4:	075b      	lsls	r3, r3, #29
 80011d6:	4323      	orrs	r3, r4
 80011d8:	08d4      	lsrs	r4, r2, #3
 80011da:	4642      	mov	r2, r8
 80011dc:	4919      	ldr	r1, [pc, #100]	; (8001244 <__aeabi_dsub+0x358>)
 80011de:	428a      	cmp	r2, r1
 80011e0:	d00e      	beq.n	8001200 <__aeabi_dsub+0x314>
 80011e2:	0324      	lsls	r4, r4, #12
 80011e4:	0552      	lsls	r2, r2, #21
 80011e6:	0b24      	lsrs	r4, r4, #12
 80011e8:	0d52      	lsrs	r2, r2, #21
 80011ea:	e722      	b.n	8001032 <__aeabi_dsub+0x146>
 80011ec:	000a      	movs	r2, r1
 80011ee:	2400      	movs	r4, #0
 80011f0:	2300      	movs	r3, #0
 80011f2:	e71e      	b.n	8001032 <__aeabi_dsub+0x146>
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	4662      	mov	r2, ip
 80011f8:	0752      	lsls	r2, r2, #29
 80011fa:	4313      	orrs	r3, r2
 80011fc:	4662      	mov	r2, ip
 80011fe:	08d4      	lsrs	r4, r2, #3
 8001200:	001a      	movs	r2, r3
 8001202:	4322      	orrs	r2, r4
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x31c>
 8001206:	e1fc      	b.n	8001602 <__aeabi_dsub+0x716>
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	0312      	lsls	r2, r2, #12
 800120c:	4314      	orrs	r4, r2
 800120e:	0324      	lsls	r4, r4, #12
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <__aeabi_dsub+0x358>)
 8001212:	0b24      	lsrs	r4, r4, #12
 8001214:	e70d      	b.n	8001032 <__aeabi_dsub+0x146>
 8001216:	0020      	movs	r0, r4
 8001218:	f000 fa94 	bl	8001744 <__clzsi2>
 800121c:	0001      	movs	r1, r0
 800121e:	3118      	adds	r1, #24
 8001220:	291f      	cmp	r1, #31
 8001222:	dc00      	bgt.n	8001226 <__aeabi_dsub+0x33a>
 8001224:	e6c4      	b.n	8000fb0 <__aeabi_dsub+0xc4>
 8001226:	3808      	subs	r0, #8
 8001228:	4084      	lsls	r4, r0
 800122a:	4643      	mov	r3, r8
 800122c:	0020      	movs	r0, r4
 800122e:	2400      	movs	r4, #0
 8001230:	4588      	cmp	r8, r1
 8001232:	dc00      	bgt.n	8001236 <__aeabi_dsub+0x34a>
 8001234:	e6c8      	b.n	8000fc8 <__aeabi_dsub+0xdc>
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__aeabi_dsub+0x35c>)
 8001238:	1a5b      	subs	r3, r3, r1
 800123a:	4010      	ands	r0, r2
 800123c:	4698      	mov	r8, r3
 800123e:	4681      	mov	r9, r0
 8001240:	e6d6      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	000007ff 	.word	0x000007ff
 8001248:	ff7fffff 	.word	0xff7fffff
 800124c:	fffff801 	.word	0xfffff801
 8001250:	000007fe 	.word	0x000007fe
 8001254:	430f      	orrs	r7, r1
 8001256:	1e7a      	subs	r2, r7, #1
 8001258:	4197      	sbcs	r7, r2
 800125a:	e691      	b.n	8000f80 <__aeabi_dsub+0x94>
 800125c:	4661      	mov	r1, ip
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	0749      	lsls	r1, r1, #29
 8001262:	430b      	orrs	r3, r1
 8001264:	4661      	mov	r1, ip
 8001266:	08cc      	lsrs	r4, r1, #3
 8001268:	e7b8      	b.n	80011dc <__aeabi_dsub+0x2f0>
 800126a:	4640      	mov	r0, r8
 800126c:	4cd3      	ldr	r4, [pc, #844]	; (80015bc <__aeabi_dsub+0x6d0>)
 800126e:	3001      	adds	r0, #1
 8001270:	4220      	tst	r0, r4
 8001272:	d000      	beq.n	8001276 <__aeabi_dsub+0x38a>
 8001274:	e0a2      	b.n	80013bc <__aeabi_dsub+0x4d0>
 8001276:	4640      	mov	r0, r8
 8001278:	2800      	cmp	r0, #0
 800127a:	d000      	beq.n	800127e <__aeabi_dsub+0x392>
 800127c:	e101      	b.n	8001482 <__aeabi_dsub+0x596>
 800127e:	4660      	mov	r0, ip
 8001280:	4318      	orrs	r0, r3
 8001282:	d100      	bne.n	8001286 <__aeabi_dsub+0x39a>
 8001284:	e15e      	b.n	8001544 <__aeabi_dsub+0x658>
 8001286:	0008      	movs	r0, r1
 8001288:	4338      	orrs	r0, r7
 800128a:	d000      	beq.n	800128e <__aeabi_dsub+0x3a2>
 800128c:	e15f      	b.n	800154e <__aeabi_dsub+0x662>
 800128e:	4661      	mov	r1, ip
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	0749      	lsls	r1, r1, #29
 8001294:	430b      	orrs	r3, r1
 8001296:	4661      	mov	r1, ip
 8001298:	08cc      	lsrs	r4, r1, #3
 800129a:	e7a2      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 800129c:	4dc8      	ldr	r5, [pc, #800]	; (80015c0 <__aeabi_dsub+0x6d4>)
 800129e:	42a8      	cmp	r0, r5
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x3b8>
 80012a2:	e0cf      	b.n	8001444 <__aeabi_dsub+0x558>
 80012a4:	2580      	movs	r5, #128	; 0x80
 80012a6:	4664      	mov	r4, ip
 80012a8:	042d      	lsls	r5, r5, #16
 80012aa:	432c      	orrs	r4, r5
 80012ac:	46a4      	mov	ip, r4
 80012ae:	2a38      	cmp	r2, #56	; 0x38
 80012b0:	dc56      	bgt.n	8001360 <__aeabi_dsub+0x474>
 80012b2:	2a1f      	cmp	r2, #31
 80012b4:	dd00      	ble.n	80012b8 <__aeabi_dsub+0x3cc>
 80012b6:	e0d1      	b.n	800145c <__aeabi_dsub+0x570>
 80012b8:	2520      	movs	r5, #32
 80012ba:	001e      	movs	r6, r3
 80012bc:	1aad      	subs	r5, r5, r2
 80012be:	4664      	mov	r4, ip
 80012c0:	40ab      	lsls	r3, r5
 80012c2:	40ac      	lsls	r4, r5
 80012c4:	40d6      	lsrs	r6, r2
 80012c6:	1e5d      	subs	r5, r3, #1
 80012c8:	41ab      	sbcs	r3, r5
 80012ca:	4334      	orrs	r4, r6
 80012cc:	4323      	orrs	r3, r4
 80012ce:	4664      	mov	r4, ip
 80012d0:	40d4      	lsrs	r4, r2
 80012d2:	1b09      	subs	r1, r1, r4
 80012d4:	e049      	b.n	800136a <__aeabi_dsub+0x47e>
 80012d6:	4660      	mov	r0, ip
 80012d8:	1bdc      	subs	r4, r3, r7
 80012da:	1a46      	subs	r6, r0, r1
 80012dc:	42a3      	cmp	r3, r4
 80012de:	4180      	sbcs	r0, r0
 80012e0:	4240      	negs	r0, r0
 80012e2:	4681      	mov	r9, r0
 80012e4:	0030      	movs	r0, r6
 80012e6:	464e      	mov	r6, r9
 80012e8:	1b80      	subs	r0, r0, r6
 80012ea:	4681      	mov	r9, r0
 80012ec:	0200      	lsls	r0, r0, #8
 80012ee:	d476      	bmi.n	80013de <__aeabi_dsub+0x4f2>
 80012f0:	464b      	mov	r3, r9
 80012f2:	4323      	orrs	r3, r4
 80012f4:	d000      	beq.n	80012f8 <__aeabi_dsub+0x40c>
 80012f6:	e652      	b.n	8000f9e <__aeabi_dsub+0xb2>
 80012f8:	2400      	movs	r4, #0
 80012fa:	2500      	movs	r5, #0
 80012fc:	e771      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 80012fe:	4339      	orrs	r1, r7
 8001300:	000c      	movs	r4, r1
 8001302:	1e62      	subs	r2, r4, #1
 8001304:	4194      	sbcs	r4, r2
 8001306:	18e4      	adds	r4, r4, r3
 8001308:	429c      	cmp	r4, r3
 800130a:	419b      	sbcs	r3, r3
 800130c:	425b      	negs	r3, r3
 800130e:	4463      	add	r3, ip
 8001310:	4699      	mov	r9, r3
 8001312:	464b      	mov	r3, r9
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	d400      	bmi.n	800131a <__aeabi_dsub+0x42e>
 8001318:	e756      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 800131a:	2301      	movs	r3, #1
 800131c:	469c      	mov	ip, r3
 800131e:	4ba8      	ldr	r3, [pc, #672]	; (80015c0 <__aeabi_dsub+0x6d4>)
 8001320:	44e0      	add	r8, ip
 8001322:	4598      	cmp	r8, r3
 8001324:	d038      	beq.n	8001398 <__aeabi_dsub+0x4ac>
 8001326:	464b      	mov	r3, r9
 8001328:	48a6      	ldr	r0, [pc, #664]	; (80015c4 <__aeabi_dsub+0x6d8>)
 800132a:	2201      	movs	r2, #1
 800132c:	4003      	ands	r3, r0
 800132e:	0018      	movs	r0, r3
 8001330:	0863      	lsrs	r3, r4, #1
 8001332:	4014      	ands	r4, r2
 8001334:	431c      	orrs	r4, r3
 8001336:	07c3      	lsls	r3, r0, #31
 8001338:	431c      	orrs	r4, r3
 800133a:	0843      	lsrs	r3, r0, #1
 800133c:	4699      	mov	r9, r3
 800133e:	e657      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001340:	0010      	movs	r0, r2
 8001342:	000e      	movs	r6, r1
 8001344:	3820      	subs	r0, #32
 8001346:	40c6      	lsrs	r6, r0
 8001348:	2a20      	cmp	r2, #32
 800134a:	d004      	beq.n	8001356 <__aeabi_dsub+0x46a>
 800134c:	2040      	movs	r0, #64	; 0x40
 800134e:	1a82      	subs	r2, r0, r2
 8001350:	4091      	lsls	r1, r2
 8001352:	430f      	orrs	r7, r1
 8001354:	46b9      	mov	r9, r7
 8001356:	464f      	mov	r7, r9
 8001358:	1e7a      	subs	r2, r7, #1
 800135a:	4197      	sbcs	r7, r2
 800135c:	4337      	orrs	r7, r6
 800135e:	e60f      	b.n	8000f80 <__aeabi_dsub+0x94>
 8001360:	4662      	mov	r2, ip
 8001362:	431a      	orrs	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	1e5a      	subs	r2, r3, #1
 8001368:	4193      	sbcs	r3, r2
 800136a:	1afc      	subs	r4, r7, r3
 800136c:	42a7      	cmp	r7, r4
 800136e:	41bf      	sbcs	r7, r7
 8001370:	427f      	negs	r7, r7
 8001372:	1bcb      	subs	r3, r1, r7
 8001374:	4699      	mov	r9, r3
 8001376:	465d      	mov	r5, fp
 8001378:	4680      	mov	r8, r0
 800137a:	e608      	b.n	8000f8e <__aeabi_dsub+0xa2>
 800137c:	4666      	mov	r6, ip
 800137e:	431e      	orrs	r6, r3
 8001380:	d100      	bne.n	8001384 <__aeabi_dsub+0x498>
 8001382:	e0be      	b.n	8001502 <__aeabi_dsub+0x616>
 8001384:	1e56      	subs	r6, r2, #1
 8001386:	2a01      	cmp	r2, #1
 8001388:	d100      	bne.n	800138c <__aeabi_dsub+0x4a0>
 800138a:	e109      	b.n	80015a0 <__aeabi_dsub+0x6b4>
 800138c:	4c8c      	ldr	r4, [pc, #560]	; (80015c0 <__aeabi_dsub+0x6d4>)
 800138e:	42a2      	cmp	r2, r4
 8001390:	d100      	bne.n	8001394 <__aeabi_dsub+0x4a8>
 8001392:	e119      	b.n	80015c8 <__aeabi_dsub+0x6dc>
 8001394:	0032      	movs	r2, r6
 8001396:	e6c1      	b.n	800111c <__aeabi_dsub+0x230>
 8001398:	4642      	mov	r2, r8
 800139a:	2400      	movs	r4, #0
 800139c:	2300      	movs	r3, #0
 800139e:	e648      	b.n	8001032 <__aeabi_dsub+0x146>
 80013a0:	2020      	movs	r0, #32
 80013a2:	000c      	movs	r4, r1
 80013a4:	1a80      	subs	r0, r0, r2
 80013a6:	003e      	movs	r6, r7
 80013a8:	4087      	lsls	r7, r0
 80013aa:	4084      	lsls	r4, r0
 80013ac:	40d6      	lsrs	r6, r2
 80013ae:	1e78      	subs	r0, r7, #1
 80013b0:	4187      	sbcs	r7, r0
 80013b2:	40d1      	lsrs	r1, r2
 80013b4:	4334      	orrs	r4, r6
 80013b6:	433c      	orrs	r4, r7
 80013b8:	448c      	add	ip, r1
 80013ba:	e7a4      	b.n	8001306 <__aeabi_dsub+0x41a>
 80013bc:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <__aeabi_dsub+0x6d4>)
 80013be:	4290      	cmp	r0, r2
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dsub+0x4d8>
 80013c2:	e0e9      	b.n	8001598 <__aeabi_dsub+0x6ac>
 80013c4:	19df      	adds	r7, r3, r7
 80013c6:	429f      	cmp	r7, r3
 80013c8:	419b      	sbcs	r3, r3
 80013ca:	4461      	add	r1, ip
 80013cc:	425b      	negs	r3, r3
 80013ce:	18c9      	adds	r1, r1, r3
 80013d0:	07cc      	lsls	r4, r1, #31
 80013d2:	087f      	lsrs	r7, r7, #1
 80013d4:	084b      	lsrs	r3, r1, #1
 80013d6:	4699      	mov	r9, r3
 80013d8:	4680      	mov	r8, r0
 80013da:	433c      	orrs	r4, r7
 80013dc:	e6f4      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 80013de:	1afc      	subs	r4, r7, r3
 80013e0:	42a7      	cmp	r7, r4
 80013e2:	41bf      	sbcs	r7, r7
 80013e4:	4663      	mov	r3, ip
 80013e6:	427f      	negs	r7, r7
 80013e8:	1ac9      	subs	r1, r1, r3
 80013ea:	1bcb      	subs	r3, r1, r7
 80013ec:	4699      	mov	r9, r3
 80013ee:	465d      	mov	r5, fp
 80013f0:	e5d5      	b.n	8000f9e <__aeabi_dsub+0xb2>
 80013f2:	08ff      	lsrs	r7, r7, #3
 80013f4:	074b      	lsls	r3, r1, #29
 80013f6:	465d      	mov	r5, fp
 80013f8:	433b      	orrs	r3, r7
 80013fa:	08cc      	lsrs	r4, r1, #3
 80013fc:	e6ee      	b.n	80011dc <__aeabi_dsub+0x2f0>
 80013fe:	4662      	mov	r2, ip
 8001400:	431a      	orrs	r2, r3
 8001402:	d000      	beq.n	8001406 <__aeabi_dsub+0x51a>
 8001404:	e082      	b.n	800150c <__aeabi_dsub+0x620>
 8001406:	000b      	movs	r3, r1
 8001408:	433b      	orrs	r3, r7
 800140a:	d11b      	bne.n	8001444 <__aeabi_dsub+0x558>
 800140c:	2480      	movs	r4, #128	; 0x80
 800140e:	2500      	movs	r5, #0
 8001410:	0324      	lsls	r4, r4, #12
 8001412:	e6f9      	b.n	8001208 <__aeabi_dsub+0x31c>
 8001414:	19dc      	adds	r4, r3, r7
 8001416:	429c      	cmp	r4, r3
 8001418:	419b      	sbcs	r3, r3
 800141a:	4461      	add	r1, ip
 800141c:	4689      	mov	r9, r1
 800141e:	425b      	negs	r3, r3
 8001420:	4499      	add	r9, r3
 8001422:	464b      	mov	r3, r9
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	d444      	bmi.n	80014b2 <__aeabi_dsub+0x5c6>
 8001428:	2301      	movs	r3, #1
 800142a:	4698      	mov	r8, r3
 800142c:	e6cc      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 800142e:	1bdc      	subs	r4, r3, r7
 8001430:	4662      	mov	r2, ip
 8001432:	42a3      	cmp	r3, r4
 8001434:	419b      	sbcs	r3, r3
 8001436:	1a51      	subs	r1, r2, r1
 8001438:	425b      	negs	r3, r3
 800143a:	1acb      	subs	r3, r1, r3
 800143c:	4699      	mov	r9, r3
 800143e:	2301      	movs	r3, #1
 8001440:	4698      	mov	r8, r3
 8001442:	e5a4      	b.n	8000f8e <__aeabi_dsub+0xa2>
 8001444:	08ff      	lsrs	r7, r7, #3
 8001446:	074b      	lsls	r3, r1, #29
 8001448:	465d      	mov	r5, fp
 800144a:	433b      	orrs	r3, r7
 800144c:	08cc      	lsrs	r4, r1, #3
 800144e:	e6d7      	b.n	8001200 <__aeabi_dsub+0x314>
 8001450:	4662      	mov	r2, ip
 8001452:	431a      	orrs	r2, r3
 8001454:	0014      	movs	r4, r2
 8001456:	1e63      	subs	r3, r4, #1
 8001458:	419c      	sbcs	r4, r3
 800145a:	e679      	b.n	8001150 <__aeabi_dsub+0x264>
 800145c:	0015      	movs	r5, r2
 800145e:	4664      	mov	r4, ip
 8001460:	3d20      	subs	r5, #32
 8001462:	40ec      	lsrs	r4, r5
 8001464:	46a0      	mov	r8, r4
 8001466:	2a20      	cmp	r2, #32
 8001468:	d005      	beq.n	8001476 <__aeabi_dsub+0x58a>
 800146a:	2540      	movs	r5, #64	; 0x40
 800146c:	4664      	mov	r4, ip
 800146e:	1aaa      	subs	r2, r5, r2
 8001470:	4094      	lsls	r4, r2
 8001472:	4323      	orrs	r3, r4
 8001474:	469a      	mov	sl, r3
 8001476:	4654      	mov	r4, sl
 8001478:	1e63      	subs	r3, r4, #1
 800147a:	419c      	sbcs	r4, r3
 800147c:	4643      	mov	r3, r8
 800147e:	4323      	orrs	r3, r4
 8001480:	e773      	b.n	800136a <__aeabi_dsub+0x47e>
 8001482:	4662      	mov	r2, ip
 8001484:	431a      	orrs	r2, r3
 8001486:	d023      	beq.n	80014d0 <__aeabi_dsub+0x5e4>
 8001488:	000a      	movs	r2, r1
 800148a:	433a      	orrs	r2, r7
 800148c:	d000      	beq.n	8001490 <__aeabi_dsub+0x5a4>
 800148e:	e0a0      	b.n	80015d2 <__aeabi_dsub+0x6e6>
 8001490:	4662      	mov	r2, ip
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	0752      	lsls	r2, r2, #29
 8001496:	4313      	orrs	r3, r2
 8001498:	4662      	mov	r2, ip
 800149a:	08d4      	lsrs	r4, r2, #3
 800149c:	e6b0      	b.n	8001200 <__aeabi_dsub+0x314>
 800149e:	000b      	movs	r3, r1
 80014a0:	433b      	orrs	r3, r7
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dsub+0x5ba>
 80014a4:	e728      	b.n	80012f8 <__aeabi_dsub+0x40c>
 80014a6:	08ff      	lsrs	r7, r7, #3
 80014a8:	074b      	lsls	r3, r1, #29
 80014aa:	465d      	mov	r5, fp
 80014ac:	433b      	orrs	r3, r7
 80014ae:	08cc      	lsrs	r4, r1, #3
 80014b0:	e697      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 80014b2:	2302      	movs	r3, #2
 80014b4:	4698      	mov	r8, r3
 80014b6:	e736      	b.n	8001326 <__aeabi_dsub+0x43a>
 80014b8:	1afc      	subs	r4, r7, r3
 80014ba:	42a7      	cmp	r7, r4
 80014bc:	41bf      	sbcs	r7, r7
 80014be:	4663      	mov	r3, ip
 80014c0:	427f      	negs	r7, r7
 80014c2:	1ac9      	subs	r1, r1, r3
 80014c4:	1bcb      	subs	r3, r1, r7
 80014c6:	4699      	mov	r9, r3
 80014c8:	2301      	movs	r3, #1
 80014ca:	465d      	mov	r5, fp
 80014cc:	4698      	mov	r8, r3
 80014ce:	e55e      	b.n	8000f8e <__aeabi_dsub+0xa2>
 80014d0:	074b      	lsls	r3, r1, #29
 80014d2:	08ff      	lsrs	r7, r7, #3
 80014d4:	433b      	orrs	r3, r7
 80014d6:	08cc      	lsrs	r4, r1, #3
 80014d8:	e692      	b.n	8001200 <__aeabi_dsub+0x314>
 80014da:	1bdc      	subs	r4, r3, r7
 80014dc:	4660      	mov	r0, ip
 80014de:	42a3      	cmp	r3, r4
 80014e0:	41b6      	sbcs	r6, r6
 80014e2:	1a40      	subs	r0, r0, r1
 80014e4:	4276      	negs	r6, r6
 80014e6:	1b80      	subs	r0, r0, r6
 80014e8:	4681      	mov	r9, r0
 80014ea:	0200      	lsls	r0, r0, #8
 80014ec:	d560      	bpl.n	80015b0 <__aeabi_dsub+0x6c4>
 80014ee:	1afc      	subs	r4, r7, r3
 80014f0:	42a7      	cmp	r7, r4
 80014f2:	41bf      	sbcs	r7, r7
 80014f4:	4663      	mov	r3, ip
 80014f6:	427f      	negs	r7, r7
 80014f8:	1ac9      	subs	r1, r1, r3
 80014fa:	1bcb      	subs	r3, r1, r7
 80014fc:	4699      	mov	r9, r3
 80014fe:	465d      	mov	r5, fp
 8001500:	e576      	b.n	8000ff0 <__aeabi_dsub+0x104>
 8001502:	08ff      	lsrs	r7, r7, #3
 8001504:	074b      	lsls	r3, r1, #29
 8001506:	433b      	orrs	r3, r7
 8001508:	08cc      	lsrs	r4, r1, #3
 800150a:	e667      	b.n	80011dc <__aeabi_dsub+0x2f0>
 800150c:	000a      	movs	r2, r1
 800150e:	08db      	lsrs	r3, r3, #3
 8001510:	433a      	orrs	r2, r7
 8001512:	d100      	bne.n	8001516 <__aeabi_dsub+0x62a>
 8001514:	e66f      	b.n	80011f6 <__aeabi_dsub+0x30a>
 8001516:	4662      	mov	r2, ip
 8001518:	0752      	lsls	r2, r2, #29
 800151a:	4313      	orrs	r3, r2
 800151c:	4662      	mov	r2, ip
 800151e:	08d4      	lsrs	r4, r2, #3
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0312      	lsls	r2, r2, #12
 8001524:	4214      	tst	r4, r2
 8001526:	d007      	beq.n	8001538 <__aeabi_dsub+0x64c>
 8001528:	08c8      	lsrs	r0, r1, #3
 800152a:	4210      	tst	r0, r2
 800152c:	d104      	bne.n	8001538 <__aeabi_dsub+0x64c>
 800152e:	465d      	mov	r5, fp
 8001530:	0004      	movs	r4, r0
 8001532:	08fb      	lsrs	r3, r7, #3
 8001534:	0749      	lsls	r1, r1, #29
 8001536:	430b      	orrs	r3, r1
 8001538:	0f5a      	lsrs	r2, r3, #29
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	08db      	lsrs	r3, r3, #3
 800153e:	0752      	lsls	r2, r2, #29
 8001540:	4313      	orrs	r3, r2
 8001542:	e65d      	b.n	8001200 <__aeabi_dsub+0x314>
 8001544:	074b      	lsls	r3, r1, #29
 8001546:	08ff      	lsrs	r7, r7, #3
 8001548:	433b      	orrs	r3, r7
 800154a:	08cc      	lsrs	r4, r1, #3
 800154c:	e649      	b.n	80011e2 <__aeabi_dsub+0x2f6>
 800154e:	19dc      	adds	r4, r3, r7
 8001550:	429c      	cmp	r4, r3
 8001552:	419b      	sbcs	r3, r3
 8001554:	4461      	add	r1, ip
 8001556:	4689      	mov	r9, r1
 8001558:	425b      	negs	r3, r3
 800155a:	4499      	add	r9, r3
 800155c:	464b      	mov	r3, r9
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	d400      	bmi.n	8001564 <__aeabi_dsub+0x678>
 8001562:	e631      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8001564:	464a      	mov	r2, r9
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <__aeabi_dsub+0x6d8>)
 8001568:	401a      	ands	r2, r3
 800156a:	2301      	movs	r3, #1
 800156c:	4691      	mov	r9, r2
 800156e:	4698      	mov	r8, r3
 8001570:	e62a      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 8001572:	0016      	movs	r6, r2
 8001574:	4664      	mov	r4, ip
 8001576:	3e20      	subs	r6, #32
 8001578:	40f4      	lsrs	r4, r6
 800157a:	46a0      	mov	r8, r4
 800157c:	2a20      	cmp	r2, #32
 800157e:	d005      	beq.n	800158c <__aeabi_dsub+0x6a0>
 8001580:	2640      	movs	r6, #64	; 0x40
 8001582:	4664      	mov	r4, ip
 8001584:	1ab2      	subs	r2, r6, r2
 8001586:	4094      	lsls	r4, r2
 8001588:	4323      	orrs	r3, r4
 800158a:	469a      	mov	sl, r3
 800158c:	4654      	mov	r4, sl
 800158e:	1e63      	subs	r3, r4, #1
 8001590:	419c      	sbcs	r4, r3
 8001592:	4643      	mov	r3, r8
 8001594:	431c      	orrs	r4, r3
 8001596:	e5db      	b.n	8001150 <__aeabi_dsub+0x264>
 8001598:	0002      	movs	r2, r0
 800159a:	2400      	movs	r4, #0
 800159c:	2300      	movs	r3, #0
 800159e:	e548      	b.n	8001032 <__aeabi_dsub+0x146>
 80015a0:	19dc      	adds	r4, r3, r7
 80015a2:	42bc      	cmp	r4, r7
 80015a4:	41bf      	sbcs	r7, r7
 80015a6:	4461      	add	r1, ip
 80015a8:	4689      	mov	r9, r1
 80015aa:	427f      	negs	r7, r7
 80015ac:	44b9      	add	r9, r7
 80015ae:	e738      	b.n	8001422 <__aeabi_dsub+0x536>
 80015b0:	464b      	mov	r3, r9
 80015b2:	4323      	orrs	r3, r4
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x6cc>
 80015b6:	e69f      	b.n	80012f8 <__aeabi_dsub+0x40c>
 80015b8:	e606      	b.n	80011c8 <__aeabi_dsub+0x2dc>
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	000007fe 	.word	0x000007fe
 80015c0:	000007ff 	.word	0x000007ff
 80015c4:	ff7fffff 	.word	0xff7fffff
 80015c8:	08ff      	lsrs	r7, r7, #3
 80015ca:	074b      	lsls	r3, r1, #29
 80015cc:	433b      	orrs	r3, r7
 80015ce:	08cc      	lsrs	r4, r1, #3
 80015d0:	e616      	b.n	8001200 <__aeabi_dsub+0x314>
 80015d2:	4662      	mov	r2, ip
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	0752      	lsls	r2, r2, #29
 80015d8:	4313      	orrs	r3, r2
 80015da:	4662      	mov	r2, ip
 80015dc:	08d4      	lsrs	r4, r2, #3
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	0312      	lsls	r2, r2, #12
 80015e2:	4214      	tst	r4, r2
 80015e4:	d007      	beq.n	80015f6 <__aeabi_dsub+0x70a>
 80015e6:	08c8      	lsrs	r0, r1, #3
 80015e8:	4210      	tst	r0, r2
 80015ea:	d104      	bne.n	80015f6 <__aeabi_dsub+0x70a>
 80015ec:	465d      	mov	r5, fp
 80015ee:	0004      	movs	r4, r0
 80015f0:	08fb      	lsrs	r3, r7, #3
 80015f2:	0749      	lsls	r1, r1, #29
 80015f4:	430b      	orrs	r3, r1
 80015f6:	0f5a      	lsrs	r2, r3, #29
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	0752      	lsls	r2, r2, #29
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	4313      	orrs	r3, r2
 8001600:	e5fe      	b.n	8001200 <__aeabi_dsub+0x314>
 8001602:	2300      	movs	r3, #0
 8001604:	4a01      	ldr	r2, [pc, #4]	; (800160c <__aeabi_dsub+0x720>)
 8001606:	001c      	movs	r4, r3
 8001608:	e513      	b.n	8001032 <__aeabi_dsub+0x146>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_d2iz>:
 8001610:	000a      	movs	r2, r1
 8001612:	b530      	push	{r4, r5, lr}
 8001614:	4c13      	ldr	r4, [pc, #76]	; (8001664 <__aeabi_d2iz+0x54>)
 8001616:	0053      	lsls	r3, r2, #1
 8001618:	0309      	lsls	r1, r1, #12
 800161a:	0005      	movs	r5, r0
 800161c:	0b09      	lsrs	r1, r1, #12
 800161e:	2000      	movs	r0, #0
 8001620:	0d5b      	lsrs	r3, r3, #21
 8001622:	0fd2      	lsrs	r2, r2, #31
 8001624:	42a3      	cmp	r3, r4
 8001626:	dd04      	ble.n	8001632 <__aeabi_d2iz+0x22>
 8001628:	480f      	ldr	r0, [pc, #60]	; (8001668 <__aeabi_d2iz+0x58>)
 800162a:	4283      	cmp	r3, r0
 800162c:	dd02      	ble.n	8001634 <__aeabi_d2iz+0x24>
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <__aeabi_d2iz+0x5c>)
 8001630:	18d0      	adds	r0, r2, r3
 8001632:	bd30      	pop	{r4, r5, pc}
 8001634:	2080      	movs	r0, #128	; 0x80
 8001636:	0340      	lsls	r0, r0, #13
 8001638:	4301      	orrs	r1, r0
 800163a:	480d      	ldr	r0, [pc, #52]	; (8001670 <__aeabi_d2iz+0x60>)
 800163c:	1ac0      	subs	r0, r0, r3
 800163e:	281f      	cmp	r0, #31
 8001640:	dd08      	ble.n	8001654 <__aeabi_d2iz+0x44>
 8001642:	480c      	ldr	r0, [pc, #48]	; (8001674 <__aeabi_d2iz+0x64>)
 8001644:	1ac3      	subs	r3, r0, r3
 8001646:	40d9      	lsrs	r1, r3
 8001648:	000b      	movs	r3, r1
 800164a:	4258      	negs	r0, r3
 800164c:	2a00      	cmp	r2, #0
 800164e:	d1f0      	bne.n	8001632 <__aeabi_d2iz+0x22>
 8001650:	0018      	movs	r0, r3
 8001652:	e7ee      	b.n	8001632 <__aeabi_d2iz+0x22>
 8001654:	4c08      	ldr	r4, [pc, #32]	; (8001678 <__aeabi_d2iz+0x68>)
 8001656:	40c5      	lsrs	r5, r0
 8001658:	46a4      	mov	ip, r4
 800165a:	4463      	add	r3, ip
 800165c:	4099      	lsls	r1, r3
 800165e:	000b      	movs	r3, r1
 8001660:	432b      	orrs	r3, r5
 8001662:	e7f2      	b.n	800164a <__aeabi_d2iz+0x3a>
 8001664:	000003fe 	.word	0x000003fe
 8001668:	0000041d 	.word	0x0000041d
 800166c:	7fffffff 	.word	0x7fffffff
 8001670:	00000433 	.word	0x00000433
 8001674:	00000413 	.word	0x00000413
 8001678:	fffffbed 	.word	0xfffffbed

0800167c <__aeabi_ui2d>:
 800167c:	b510      	push	{r4, lr}
 800167e:	1e04      	subs	r4, r0, #0
 8001680:	d010      	beq.n	80016a4 <__aeabi_ui2d+0x28>
 8001682:	f000 f85f 	bl	8001744 <__clzsi2>
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <__aeabi_ui2d+0x48>)
 8001688:	1a1b      	subs	r3, r3, r0
 800168a:	280a      	cmp	r0, #10
 800168c:	dc11      	bgt.n	80016b2 <__aeabi_ui2d+0x36>
 800168e:	220b      	movs	r2, #11
 8001690:	0021      	movs	r1, r4
 8001692:	1a12      	subs	r2, r2, r0
 8001694:	40d1      	lsrs	r1, r2
 8001696:	3015      	adds	r0, #21
 8001698:	030a      	lsls	r2, r1, #12
 800169a:	055b      	lsls	r3, r3, #21
 800169c:	4084      	lsls	r4, r0
 800169e:	0b12      	lsrs	r2, r2, #12
 80016a0:	0d5b      	lsrs	r3, r3, #21
 80016a2:	e001      	b.n	80016a8 <__aeabi_ui2d+0x2c>
 80016a4:	2300      	movs	r3, #0
 80016a6:	2200      	movs	r2, #0
 80016a8:	051b      	lsls	r3, r3, #20
 80016aa:	4313      	orrs	r3, r2
 80016ac:	0020      	movs	r0, r4
 80016ae:	0019      	movs	r1, r3
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	0022      	movs	r2, r4
 80016b4:	380b      	subs	r0, #11
 80016b6:	4082      	lsls	r2, r0
 80016b8:	055b      	lsls	r3, r3, #21
 80016ba:	0312      	lsls	r2, r2, #12
 80016bc:	2400      	movs	r4, #0
 80016be:	0b12      	lsrs	r2, r2, #12
 80016c0:	0d5b      	lsrs	r3, r3, #21
 80016c2:	e7f1      	b.n	80016a8 <__aeabi_ui2d+0x2c>
 80016c4:	0000041e 	.word	0x0000041e

080016c8 <__aeabi_cdrcmple>:
 80016c8:	4684      	mov	ip, r0
 80016ca:	0010      	movs	r0, r2
 80016cc:	4662      	mov	r2, ip
 80016ce:	468c      	mov	ip, r1
 80016d0:	0019      	movs	r1, r3
 80016d2:	4663      	mov	r3, ip
 80016d4:	e000      	b.n	80016d8 <__aeabi_cdcmpeq>
 80016d6:	46c0      	nop			; (mov r8, r8)

080016d8 <__aeabi_cdcmpeq>:
 80016d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80016da:	f000 f8f9 	bl	80018d0 <__ledf2>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d401      	bmi.n	80016e6 <__aeabi_cdcmpeq+0xe>
 80016e2:	2100      	movs	r1, #0
 80016e4:	42c8      	cmn	r0, r1
 80016e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016e8 <__aeabi_dcmpeq>:
 80016e8:	b510      	push	{r4, lr}
 80016ea:	f000 f849 	bl	8001780 <__eqdf2>
 80016ee:	4240      	negs	r0, r0
 80016f0:	3001      	adds	r0, #1
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <__aeabi_dcmplt>:
 80016f4:	b510      	push	{r4, lr}
 80016f6:	f000 f8eb 	bl	80018d0 <__ledf2>
 80016fa:	2800      	cmp	r0, #0
 80016fc:	db01      	blt.n	8001702 <__aeabi_dcmplt+0xe>
 80016fe:	2000      	movs	r0, #0
 8001700:	bd10      	pop	{r4, pc}
 8001702:	2001      	movs	r0, #1
 8001704:	bd10      	pop	{r4, pc}
 8001706:	46c0      	nop			; (mov r8, r8)

08001708 <__aeabi_dcmple>:
 8001708:	b510      	push	{r4, lr}
 800170a:	f000 f8e1 	bl	80018d0 <__ledf2>
 800170e:	2800      	cmp	r0, #0
 8001710:	dd01      	ble.n	8001716 <__aeabi_dcmple+0xe>
 8001712:	2000      	movs	r0, #0
 8001714:	bd10      	pop	{r4, pc}
 8001716:	2001      	movs	r0, #1
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			; (mov r8, r8)

0800171c <__aeabi_dcmpgt>:
 800171c:	b510      	push	{r4, lr}
 800171e:	f000 f871 	bl	8001804 <__gedf2>
 8001722:	2800      	cmp	r0, #0
 8001724:	dc01      	bgt.n	800172a <__aeabi_dcmpgt+0xe>
 8001726:	2000      	movs	r0, #0
 8001728:	bd10      	pop	{r4, pc}
 800172a:	2001      	movs	r0, #1
 800172c:	bd10      	pop	{r4, pc}
 800172e:	46c0      	nop			; (mov r8, r8)

08001730 <__aeabi_dcmpge>:
 8001730:	b510      	push	{r4, lr}
 8001732:	f000 f867 	bl	8001804 <__gedf2>
 8001736:	2800      	cmp	r0, #0
 8001738:	da01      	bge.n	800173e <__aeabi_dcmpge+0xe>
 800173a:	2000      	movs	r0, #0
 800173c:	bd10      	pop	{r4, pc}
 800173e:	2001      	movs	r0, #1
 8001740:	bd10      	pop	{r4, pc}
 8001742:	46c0      	nop			; (mov r8, r8)

08001744 <__clzsi2>:
 8001744:	211c      	movs	r1, #28
 8001746:	2301      	movs	r3, #1
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	4298      	cmp	r0, r3
 800174c:	d301      	bcc.n	8001752 <__clzsi2+0xe>
 800174e:	0c00      	lsrs	r0, r0, #16
 8001750:	3910      	subs	r1, #16
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	4298      	cmp	r0, r3
 8001756:	d301      	bcc.n	800175c <__clzsi2+0x18>
 8001758:	0a00      	lsrs	r0, r0, #8
 800175a:	3908      	subs	r1, #8
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	4298      	cmp	r0, r3
 8001760:	d301      	bcc.n	8001766 <__clzsi2+0x22>
 8001762:	0900      	lsrs	r0, r0, #4
 8001764:	3904      	subs	r1, #4
 8001766:	a202      	add	r2, pc, #8	; (adr r2, 8001770 <__clzsi2+0x2c>)
 8001768:	5c10      	ldrb	r0, [r2, r0]
 800176a:	1840      	adds	r0, r0, r1
 800176c:	4770      	bx	lr
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	02020304 	.word	0x02020304
 8001774:	01010101 	.word	0x01010101
	...

08001780 <__eqdf2>:
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	464e      	mov	r6, r9
 8001784:	4645      	mov	r5, r8
 8001786:	46de      	mov	lr, fp
 8001788:	4657      	mov	r7, sl
 800178a:	4690      	mov	r8, r2
 800178c:	b5e0      	push	{r5, r6, r7, lr}
 800178e:	0017      	movs	r7, r2
 8001790:	031a      	lsls	r2, r3, #12
 8001792:	0b12      	lsrs	r2, r2, #12
 8001794:	0005      	movs	r5, r0
 8001796:	4684      	mov	ip, r0
 8001798:	4819      	ldr	r0, [pc, #100]	; (8001800 <__eqdf2+0x80>)
 800179a:	030e      	lsls	r6, r1, #12
 800179c:	004c      	lsls	r4, r1, #1
 800179e:	4691      	mov	r9, r2
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	0fdb      	lsrs	r3, r3, #31
 80017a4:	469b      	mov	fp, r3
 80017a6:	0b36      	lsrs	r6, r6, #12
 80017a8:	0d64      	lsrs	r4, r4, #21
 80017aa:	0fc9      	lsrs	r1, r1, #31
 80017ac:	0d52      	lsrs	r2, r2, #21
 80017ae:	4284      	cmp	r4, r0
 80017b0:	d019      	beq.n	80017e6 <__eqdf2+0x66>
 80017b2:	4282      	cmp	r2, r0
 80017b4:	d010      	beq.n	80017d8 <__eqdf2+0x58>
 80017b6:	2001      	movs	r0, #1
 80017b8:	4294      	cmp	r4, r2
 80017ba:	d10e      	bne.n	80017da <__eqdf2+0x5a>
 80017bc:	454e      	cmp	r6, r9
 80017be:	d10c      	bne.n	80017da <__eqdf2+0x5a>
 80017c0:	2001      	movs	r0, #1
 80017c2:	45c4      	cmp	ip, r8
 80017c4:	d109      	bne.n	80017da <__eqdf2+0x5a>
 80017c6:	4559      	cmp	r1, fp
 80017c8:	d017      	beq.n	80017fa <__eqdf2+0x7a>
 80017ca:	2c00      	cmp	r4, #0
 80017cc:	d105      	bne.n	80017da <__eqdf2+0x5a>
 80017ce:	0030      	movs	r0, r6
 80017d0:	4328      	orrs	r0, r5
 80017d2:	1e43      	subs	r3, r0, #1
 80017d4:	4198      	sbcs	r0, r3
 80017d6:	e000      	b.n	80017da <__eqdf2+0x5a>
 80017d8:	2001      	movs	r0, #1
 80017da:	bcf0      	pop	{r4, r5, r6, r7}
 80017dc:	46bb      	mov	fp, r7
 80017de:	46b2      	mov	sl, r6
 80017e0:	46a9      	mov	r9, r5
 80017e2:	46a0      	mov	r8, r4
 80017e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e6:	0033      	movs	r3, r6
 80017e8:	2001      	movs	r0, #1
 80017ea:	432b      	orrs	r3, r5
 80017ec:	d1f5      	bne.n	80017da <__eqdf2+0x5a>
 80017ee:	42a2      	cmp	r2, r4
 80017f0:	d1f3      	bne.n	80017da <__eqdf2+0x5a>
 80017f2:	464b      	mov	r3, r9
 80017f4:	433b      	orrs	r3, r7
 80017f6:	d1f0      	bne.n	80017da <__eqdf2+0x5a>
 80017f8:	e7e2      	b.n	80017c0 <__eqdf2+0x40>
 80017fa:	2000      	movs	r0, #0
 80017fc:	e7ed      	b.n	80017da <__eqdf2+0x5a>
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	000007ff 	.word	0x000007ff

08001804 <__gedf2>:
 8001804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001806:	4647      	mov	r7, r8
 8001808:	46ce      	mov	lr, r9
 800180a:	0004      	movs	r4, r0
 800180c:	0018      	movs	r0, r3
 800180e:	0016      	movs	r6, r2
 8001810:	031b      	lsls	r3, r3, #12
 8001812:	0b1b      	lsrs	r3, r3, #12
 8001814:	4d2d      	ldr	r5, [pc, #180]	; (80018cc <__gedf2+0xc8>)
 8001816:	004a      	lsls	r2, r1, #1
 8001818:	4699      	mov	r9, r3
 800181a:	b580      	push	{r7, lr}
 800181c:	0043      	lsls	r3, r0, #1
 800181e:	030f      	lsls	r7, r1, #12
 8001820:	46a4      	mov	ip, r4
 8001822:	46b0      	mov	r8, r6
 8001824:	0b3f      	lsrs	r7, r7, #12
 8001826:	0d52      	lsrs	r2, r2, #21
 8001828:	0fc9      	lsrs	r1, r1, #31
 800182a:	0d5b      	lsrs	r3, r3, #21
 800182c:	0fc0      	lsrs	r0, r0, #31
 800182e:	42aa      	cmp	r2, r5
 8001830:	d021      	beq.n	8001876 <__gedf2+0x72>
 8001832:	42ab      	cmp	r3, r5
 8001834:	d013      	beq.n	800185e <__gedf2+0x5a>
 8001836:	2a00      	cmp	r2, #0
 8001838:	d122      	bne.n	8001880 <__gedf2+0x7c>
 800183a:	433c      	orrs	r4, r7
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <__gedf2+0x42>
 8001840:	464d      	mov	r5, r9
 8001842:	432e      	orrs	r6, r5
 8001844:	d022      	beq.n	800188c <__gedf2+0x88>
 8001846:	2c00      	cmp	r4, #0
 8001848:	d010      	beq.n	800186c <__gedf2+0x68>
 800184a:	4281      	cmp	r1, r0
 800184c:	d022      	beq.n	8001894 <__gedf2+0x90>
 800184e:	2002      	movs	r0, #2
 8001850:	3901      	subs	r1, #1
 8001852:	4008      	ands	r0, r1
 8001854:	3801      	subs	r0, #1
 8001856:	bcc0      	pop	{r6, r7}
 8001858:	46b9      	mov	r9, r7
 800185a:	46b0      	mov	r8, r6
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185e:	464d      	mov	r5, r9
 8001860:	432e      	orrs	r6, r5
 8001862:	d129      	bne.n	80018b8 <__gedf2+0xb4>
 8001864:	2a00      	cmp	r2, #0
 8001866:	d1f0      	bne.n	800184a <__gedf2+0x46>
 8001868:	433c      	orrs	r4, r7
 800186a:	d1ee      	bne.n	800184a <__gedf2+0x46>
 800186c:	2800      	cmp	r0, #0
 800186e:	d1f2      	bne.n	8001856 <__gedf2+0x52>
 8001870:	2001      	movs	r0, #1
 8001872:	4240      	negs	r0, r0
 8001874:	e7ef      	b.n	8001856 <__gedf2+0x52>
 8001876:	003d      	movs	r5, r7
 8001878:	4325      	orrs	r5, r4
 800187a:	d11d      	bne.n	80018b8 <__gedf2+0xb4>
 800187c:	4293      	cmp	r3, r2
 800187e:	d0ee      	beq.n	800185e <__gedf2+0x5a>
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1e2      	bne.n	800184a <__gedf2+0x46>
 8001884:	464c      	mov	r4, r9
 8001886:	4326      	orrs	r6, r4
 8001888:	d1df      	bne.n	800184a <__gedf2+0x46>
 800188a:	e7e0      	b.n	800184e <__gedf2+0x4a>
 800188c:	2000      	movs	r0, #0
 800188e:	2c00      	cmp	r4, #0
 8001890:	d0e1      	beq.n	8001856 <__gedf2+0x52>
 8001892:	e7dc      	b.n	800184e <__gedf2+0x4a>
 8001894:	429a      	cmp	r2, r3
 8001896:	dc0a      	bgt.n	80018ae <__gedf2+0xaa>
 8001898:	dbe8      	blt.n	800186c <__gedf2+0x68>
 800189a:	454f      	cmp	r7, r9
 800189c:	d8d7      	bhi.n	800184e <__gedf2+0x4a>
 800189e:	d00e      	beq.n	80018be <__gedf2+0xba>
 80018a0:	2000      	movs	r0, #0
 80018a2:	454f      	cmp	r7, r9
 80018a4:	d2d7      	bcs.n	8001856 <__gedf2+0x52>
 80018a6:	2900      	cmp	r1, #0
 80018a8:	d0e2      	beq.n	8001870 <__gedf2+0x6c>
 80018aa:	0008      	movs	r0, r1
 80018ac:	e7d3      	b.n	8001856 <__gedf2+0x52>
 80018ae:	4243      	negs	r3, r0
 80018b0:	4158      	adcs	r0, r3
 80018b2:	0040      	lsls	r0, r0, #1
 80018b4:	3801      	subs	r0, #1
 80018b6:	e7ce      	b.n	8001856 <__gedf2+0x52>
 80018b8:	2002      	movs	r0, #2
 80018ba:	4240      	negs	r0, r0
 80018bc:	e7cb      	b.n	8001856 <__gedf2+0x52>
 80018be:	45c4      	cmp	ip, r8
 80018c0:	d8c5      	bhi.n	800184e <__gedf2+0x4a>
 80018c2:	2000      	movs	r0, #0
 80018c4:	45c4      	cmp	ip, r8
 80018c6:	d2c6      	bcs.n	8001856 <__gedf2+0x52>
 80018c8:	e7ed      	b.n	80018a6 <__gedf2+0xa2>
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	000007ff 	.word	0x000007ff

080018d0 <__ledf2>:
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	4647      	mov	r7, r8
 80018d4:	46ce      	mov	lr, r9
 80018d6:	0004      	movs	r4, r0
 80018d8:	0018      	movs	r0, r3
 80018da:	0016      	movs	r6, r2
 80018dc:	031b      	lsls	r3, r3, #12
 80018de:	0b1b      	lsrs	r3, r3, #12
 80018e0:	4d2c      	ldr	r5, [pc, #176]	; (8001994 <__ledf2+0xc4>)
 80018e2:	004a      	lsls	r2, r1, #1
 80018e4:	4699      	mov	r9, r3
 80018e6:	b580      	push	{r7, lr}
 80018e8:	0043      	lsls	r3, r0, #1
 80018ea:	030f      	lsls	r7, r1, #12
 80018ec:	46a4      	mov	ip, r4
 80018ee:	46b0      	mov	r8, r6
 80018f0:	0b3f      	lsrs	r7, r7, #12
 80018f2:	0d52      	lsrs	r2, r2, #21
 80018f4:	0fc9      	lsrs	r1, r1, #31
 80018f6:	0d5b      	lsrs	r3, r3, #21
 80018f8:	0fc0      	lsrs	r0, r0, #31
 80018fa:	42aa      	cmp	r2, r5
 80018fc:	d00d      	beq.n	800191a <__ledf2+0x4a>
 80018fe:	42ab      	cmp	r3, r5
 8001900:	d010      	beq.n	8001924 <__ledf2+0x54>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d127      	bne.n	8001956 <__ledf2+0x86>
 8001906:	433c      	orrs	r4, r7
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <__ledf2+0x60>
 800190c:	464d      	mov	r5, r9
 800190e:	432e      	orrs	r6, r5
 8001910:	d10e      	bne.n	8001930 <__ledf2+0x60>
 8001912:	2000      	movs	r0, #0
 8001914:	2c00      	cmp	r4, #0
 8001916:	d015      	beq.n	8001944 <__ledf2+0x74>
 8001918:	e00e      	b.n	8001938 <__ledf2+0x68>
 800191a:	003d      	movs	r5, r7
 800191c:	4325      	orrs	r5, r4
 800191e:	d110      	bne.n	8001942 <__ledf2+0x72>
 8001920:	4293      	cmp	r3, r2
 8001922:	d118      	bne.n	8001956 <__ledf2+0x86>
 8001924:	464d      	mov	r5, r9
 8001926:	432e      	orrs	r6, r5
 8001928:	d10b      	bne.n	8001942 <__ledf2+0x72>
 800192a:	2a00      	cmp	r2, #0
 800192c:	d102      	bne.n	8001934 <__ledf2+0x64>
 800192e:	433c      	orrs	r4, r7
 8001930:	2c00      	cmp	r4, #0
 8001932:	d00b      	beq.n	800194c <__ledf2+0x7c>
 8001934:	4281      	cmp	r1, r0
 8001936:	d014      	beq.n	8001962 <__ledf2+0x92>
 8001938:	2002      	movs	r0, #2
 800193a:	3901      	subs	r1, #1
 800193c:	4008      	ands	r0, r1
 800193e:	3801      	subs	r0, #1
 8001940:	e000      	b.n	8001944 <__ledf2+0x74>
 8001942:	2002      	movs	r0, #2
 8001944:	bcc0      	pop	{r6, r7}
 8001946:	46b9      	mov	r9, r7
 8001948:	46b0      	mov	r8, r6
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194c:	2800      	cmp	r0, #0
 800194e:	d1f9      	bne.n	8001944 <__ledf2+0x74>
 8001950:	2001      	movs	r0, #1
 8001952:	4240      	negs	r0, r0
 8001954:	e7f6      	b.n	8001944 <__ledf2+0x74>
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ec      	bne.n	8001934 <__ledf2+0x64>
 800195a:	464c      	mov	r4, r9
 800195c:	4326      	orrs	r6, r4
 800195e:	d1e9      	bne.n	8001934 <__ledf2+0x64>
 8001960:	e7ea      	b.n	8001938 <__ledf2+0x68>
 8001962:	429a      	cmp	r2, r3
 8001964:	dd04      	ble.n	8001970 <__ledf2+0xa0>
 8001966:	4243      	negs	r3, r0
 8001968:	4158      	adcs	r0, r3
 800196a:	0040      	lsls	r0, r0, #1
 800196c:	3801      	subs	r0, #1
 800196e:	e7e9      	b.n	8001944 <__ledf2+0x74>
 8001970:	429a      	cmp	r2, r3
 8001972:	dbeb      	blt.n	800194c <__ledf2+0x7c>
 8001974:	454f      	cmp	r7, r9
 8001976:	d8df      	bhi.n	8001938 <__ledf2+0x68>
 8001978:	d006      	beq.n	8001988 <__ledf2+0xb8>
 800197a:	2000      	movs	r0, #0
 800197c:	454f      	cmp	r7, r9
 800197e:	d2e1      	bcs.n	8001944 <__ledf2+0x74>
 8001980:	2900      	cmp	r1, #0
 8001982:	d0e5      	beq.n	8001950 <__ledf2+0x80>
 8001984:	0008      	movs	r0, r1
 8001986:	e7dd      	b.n	8001944 <__ledf2+0x74>
 8001988:	45c4      	cmp	ip, r8
 800198a:	d8d5      	bhi.n	8001938 <__ledf2+0x68>
 800198c:	2000      	movs	r0, #0
 800198e:	45c4      	cmp	ip, r8
 8001990:	d2d8      	bcs.n	8001944 <__ledf2+0x74>
 8001992:	e7f5      	b.n	8001980 <__ledf2+0xb0>
 8001994:	000007ff 	.word	0x000007ff

08001998 <delay_in_us>:

// USART variables
HAL_StatusTypeDef USART_State = HAL_ERROR;

void delay_in_us(uint16_t time)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	0002      	movs	r2, r0
 80019a0:	1dbb      	adds	r3, r7, #6
 80019a2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <delay_in_us+0x30>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <delay_in_us+0x30>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b4:	1dbb      	adds	r3, r7, #6
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3f8      	bcc.n	80019ae <delay_in_us+0x16>
}
 80019bc:	46c0      	nop			; (mov r8, r8)
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	20000034 	.word	0x20000034

080019cc <HAL_TIM_IC_CaptureCallback>:
**********************************************************************************/
//uint8_t dist_tx_buff[3];

// Timer Interrupt Callback for HC-SR04
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // CHECK WHETHER THE PWM STUFF GETS IN HERE
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
#if HCSR1_EN
	// if the interrupt source is channel 1 (for the first HCSR04 distance sensor)
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f1b      	ldrb	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d000      	beq.n	80019de <HAL_TIM_IC_CaptureCallback+0x12>
 80019dc:	e07d      	b.n	8001ada <HAL_TIM_IC_CaptureCallback+0x10e>
	{
		if (Is_First_Captured_1==0) // if the first value is not captured
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x220>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d11b      	bne.n	8001a1e <HAL_TIM_IC_CaptureCallback+0x52>
		{
			IC_VAL1_HCSR1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2100      	movs	r1, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f003 fc62 	bl	80052b4 <HAL_TIM_ReadCapturedValue>
 80019f0:	0002      	movs	r2, r0
 80019f2:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x224>)
 80019f4:	601a      	str	r2, [r3, #0]
			Is_First_Captured_1 = 1;  // set the first captured as true
 80019f6:	4b7d      	ldr	r3, [pc, #500]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x220>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a1a      	ldr	r2, [r3, #32]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	210a      	movs	r1, #10
 8001a08:	438a      	bics	r2, r1
 8001a0a:	621a      	str	r2, [r3, #32]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2102      	movs	r1, #2
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	621a      	str	r2, [r3, #32]
 8001a1c:	e05d      	b.n	8001ada <HAL_TIM_IC_CaptureCallback+0x10e>
		}

		else if (Is_First_Captured_1==1)   // if the first is already captured
 8001a1e:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x220>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d159      	bne.n	8001ada <HAL_TIM_IC_CaptureCallback+0x10e>
		{
			IC_VAL2_HCSR1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2100      	movs	r1, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f003 fc42 	bl	80052b4 <HAL_TIM_ReadCapturedValue>
 8001a30:	0002      	movs	r2, r0
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a34:	601a      	str	r2, [r3, #0]
//			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter

			if (IC_VAL2_HCSR1 > IC_VAL1_HCSR1)
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b6d      	ldr	r3, [pc, #436]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d907      	bls.n	8001a52 <HAL_TIM_IC_CaptureCallback+0x86>
			{
				Difference_1 = IC_VAL2_HCSR1-IC_VAL1_HCSR1;
 8001a42:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1ad2      	subs	r2, r2, r3
 8001a4c:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e00e      	b.n	8001a70 <HAL_TIM_IC_CaptureCallback+0xa4>
			}

			else if (IC_VAL1_HCSR1 > IC_VAL2_HCSR1)
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d908      	bls.n	8001a70 <HAL_TIM_IC_CaptureCallback+0xa4>
			{
				Difference_1 = (0xffff - IC_VAL1_HCSR1) + IC_VAL2_HCSR1;
 8001a5e:	4b65      	ldr	r3, [pc, #404]	; (8001bf4 <HAL_TIM_IC_CaptureCallback+0x228>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <HAL_TIM_IC_CaptureCallback+0x224>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4a64      	ldr	r2, [pc, #400]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0x230>)
 8001a6a:	189a      	adds	r2, r3, r2
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001a6e:	601a      	str	r2, [r3, #0]
			}

			HCSR_Distance_1 = Difference_1 * .034/2;
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff fe01 	bl	800167c <__aeabi_ui2d>
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001a7c:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001a7e:	f7fe ffc9 	bl	8000a14 <__aeabi_dmul>
 8001a82:	0002      	movs	r2, r0
 8001a84:	000b      	movs	r3, r1
 8001a86:	0010      	movs	r0, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	05db      	lsls	r3, r3, #23
 8001a90:	f7fe fcca 	bl	8000428 <__aeabi_ddiv>
 8001a94:	0002      	movs	r2, r0
 8001a96:	000b      	movs	r3, r1
 8001a98:	0010      	movs	r0, r2
 8001a9a:	0019      	movs	r1, r3
 8001a9c:	f7fe fca6 	bl	80003ec <__aeabi_d2uiz>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8001aa6:	801a      	strh	r2, [r3, #0]
			Is_First_Captured_1 = 0; // set it back to false
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_TIM_IC_CaptureCallback+0x220>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//			else
//				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	210a      	movs	r1, #10
 8001aba:	438a      	bics	r2, r1
 8001abc:	621a      	str	r2, [r3, #32]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a12      	ldr	r2, [r2, #32]
 8001ac8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1); // Disable the interrupt after the distance calculation is done
 8001aca:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	60da      	str	r2, [r3, #12]
#if HCSR2_EN
	// if the interrupt source is channel 3 (for the second HCSR04 distance sensor)
	// NOTE TO SELF: DUPLICATING THIS WON'T WORK. JUST ASSUME THE FIRST CAPTURES VALUE IS WHERE THEY BOTH START.
	// FOR THE FALLING EDGE, DO IT SO THAT THE TIMER INPUT CHANNEL POLATIRY is changed to rising after the second
	// falling edge occurs. This way you capture both falling edges in different channels.
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7f1b      	ldrb	r3, [r3, #28]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d000      	beq.n	8001ae4 <HAL_TIM_IC_CaptureCallback+0x118>
 8001ae2:	e07e      	b.n	8001be2 <HAL_TIM_IC_CaptureCallback+0x216>
	{
		if (Is_First_Captured_2==0) // if the first value is not captured
 8001ae4:	4b4a      	ldr	r3, [pc, #296]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11c      	bne.n	8001b26 <HAL_TIM_IC_CaptureCallback+0x15a>
		{
			IC_VAL1_HCSR2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2108      	movs	r1, #8
 8001af0:	0018      	movs	r0, r3
 8001af2:	f003 fbdf 	bl	80052b4 <HAL_TIM_ReadCapturedValue>
 8001af6:	0002      	movs	r2, r0
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001afa:	601a      	str	r2, [r3, #0]
			Is_First_Captured_2 = 1;  // set the first captured as true
 8001afc:	4b44      	ldr	r3, [pc, #272]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6a1a      	ldr	r2, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4942      	ldr	r1, [pc, #264]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	621a      	str	r2, [r3, #32]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0089      	lsls	r1, r1, #2
 8001b20:	430a      	orrs	r2, r1
 8001b22:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3); // Disable the interrupt after the distance calculation is done
		}
	}
#endif // HCSR2_EN
}
 8001b24:	e05d      	b.n	8001be2 <HAL_TIM_IC_CaptureCallback+0x216>
		else if (Is_First_Captured_2==1)   // if the first is already captured
 8001b26:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d159      	bne.n	8001be2 <HAL_TIM_IC_CaptureCallback+0x216>
			IC_VAL2_HCSR2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2108      	movs	r1, #8
 8001b32:	0018      	movs	r0, r3
 8001b34:	f003 fbbe 	bl	80052b4 <HAL_TIM_ReadCapturedValue>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001b3c:	601a      	str	r2, [r3, #0]
			if (IC_VAL2_HCSR2 > IC_VAL1_HCSR2)
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d907      	bls.n	8001b5a <HAL_TIM_IC_CaptureCallback+0x18e>
				Difference_2 = IC_VAL2_HCSR2 - IC_VAL1_HCSR2;
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	1ad2      	subs	r2, r2, r3
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e00e      	b.n	8001b78 <HAL_TIM_IC_CaptureCallback+0x1ac>
			else if (IC_VAL1_HCSR2 > IC_VAL2_HCSR2)
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d908      	bls.n	8001b78 <HAL_TIM_IC_CaptureCallback+0x1ac>
				Difference_2 = (0xffff - IC_VAL1_HCSR2) + IC_VAL2_HCSR2;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_TIM_IC_CaptureCallback+0x230>)
 8001b72:	189a      	adds	r2, r3, r2
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001b76:	601a      	str	r2, [r3, #0]
			HCSR_Distance_2 = Difference_2 * .034/2;
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff fd7d 	bl	800167c <__aeabi_ui2d>
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_TIM_IC_CaptureCallback+0x234>)
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_TIM_IC_CaptureCallback+0x238>)
 8001b86:	f7fe ff45 	bl	8000a14 <__aeabi_dmul>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	000b      	movs	r3, r1
 8001b8e:	0010      	movs	r0, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	05db      	lsls	r3, r3, #23
 8001b98:	f7fe fc46 	bl	8000428 <__aeabi_ddiv>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	000b      	movs	r3, r1
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	f7fe fc22 	bl	80003ec <__aeabi_d2uiz>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001bae:	801a      	strh	r2, [r3, #0]
			Is_First_Captured_2 = 0; // set it back to false
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4915      	ldr	r1, [pc, #84]	; (8001c18 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	621a      	str	r2, [r3, #32]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6a12      	ldr	r2, [r2, #32]
 8001bd0:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3); // Disable the interrupt after the distance calculation is done
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2108      	movs	r1, #8
 8001bde:	438a      	bics	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	200002d0 	.word	0x200002d0
 8001bf0:	200002b8 	.word	0x200002b8
 8001bf4:	200002bc 	.word	0x200002bc
 8001bf8:	200002c8 	.word	0x200002c8
 8001bfc:	0000ffff 	.word	0x0000ffff
 8001c00:	b020c49c 	.word	0xb020c49c
 8001c04:	3fa16872 	.word	0x3fa16872
 8001c08:	20000006 	.word	0x20000006
 8001c0c:	20000034 	.word	0x20000034
 8001c10:	200002d1 	.word	0x200002d1
 8001c14:	200002c0 	.word	0x200002c0
 8001c18:	fffff5ff 	.word	0xfffff5ff
 8001c1c:	200002c4 	.word	0x200002c4
 8001c20:	200002cc 	.word	0x200002cc
 8001c24:	20000008 	.word	0x20000008

08001c28 <HCSR04_Read>:

// Pulls the trigger pin high for 10us to start the calculation
void HCSR04_Read (void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	0099      	lsls	r1, r3, #2
 8001c30:	23a0      	movs	r3, #160	; 0xa0
 8001c32:	05db      	lsls	r3, r3, #23
 8001c34:	2201      	movs	r2, #1
 8001c36:	0018      	movs	r0, r3
 8001c38:	f001 fe12 	bl	8003860 <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f7ff feab 	bl	8001998 <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	0099      	lsls	r1, r3, #2
 8001c46:	23a0      	movs	r3, #160	; 0xa0
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f001 fe07 	bl	8003860 <HAL_GPIO_WritePin>

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
#if HCSR1_EN
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HCSR04_Read+0x50>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HCSR04_Read+0x50>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
#endif
#if HCSR2_EN
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HCSR04_Read+0x50>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HCSR04_Read+0x50>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]
#endif
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000034 	.word	0x20000034

08001c7c <HAL_UART_TxCpltCallback>:
						Interrupt Callbacks (ISR) Begin
**********************************************************************************/

// UART transmit callback: gets called as soon as STM32 transmits through UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
   // do nothing here
}
 8001c84:	46c0      	nop			; (mov r8, r8)
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b002      	add	sp, #8
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_UART_RxCpltCallback>:
uint8_t angle_buff_index = 0;
int16_t temp_angle;

// UART receive callback: gets called as soon as STM32 receives through UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	// parse distance of tag from the antenna board (3rd byte)
//	AOA_Distance = rx[2];

	// parse angle from rx buffer
	temp_angle = ((int16_t *)rx)[0];
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_UART_RxCpltCallback+0x60>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	5e9a      	ldrsh	r2, [r3, r2]
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_UART_RxCpltCallback+0x64>)
 8001c9c:	801a      	strh	r2, [r3, #0]
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//	else
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

	// If the angle is valid, then assign it to the global variable
	if (IS_VALID_ANGLE(temp_angle))
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_UART_RxCpltCallback+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	5e9b      	ldrsh	r3, [r3, r2]
 8001ca4:	33b3      	adds	r3, #179	; 0xb3
 8001ca6:	db0a      	blt.n	8001cbe <HAL_UART_RxCpltCallback+0x32>
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_UART_RxCpltCallback+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	5e9b      	ldrsh	r3, [r3, r2]
 8001cae:	2bb3      	cmp	r3, #179	; 0xb3
 8001cb0:	dc05      	bgt.n	8001cbe <HAL_UART_RxCpltCallback+0x32>
	{
		angle = temp_angle;
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_UART_RxCpltCallback+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	5e9a      	ldrsh	r2, [r3, r2]
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_UART_RxCpltCallback+0x68>)
 8001cba:	801a      	strh	r2, [r3, #0]
 8001cbc:	e008      	b.n	8001cd0 <HAL_UART_RxCpltCallback+0x44>
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
	else // Else, stop the motors and stop the turning and set the global variable so that DOLL-E thinks it is facing the user.
	{
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		stop = 1;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_UART_RxCpltCallback+0x6c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
		turn = 0;
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_UART_RxCpltCallback+0x70>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
		angle = 179;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_UART_RxCpltCallback+0x68>)
 8001ccc:	22b3      	movs	r2, #179	; 0xb3
 8001cce:	801a      	strh	r2, [r3, #0]
//	HAL_UART_Transmit_IT(&huart1, &rx, 1);
 *
***************************************************************************/

	// call the interrupt function again to keep the interrupts going
	USART_State = HAL_UART_Receive_IT(&huart1, rx, 2);
 8001cd0:	4906      	ldr	r1, [pc, #24]	; (8001cec <HAL_UART_RxCpltCallback+0x60>)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_UART_RxCpltCallback+0x74>)
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f004 f968 	bl	8005fac <HAL_UART_Receive_IT>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	001a      	movs	r2, r3
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_UART_RxCpltCallback+0x78>)
 8001ce2:	701a      	strb	r2, [r3, #0]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200002b0 	.word	0x200002b0
 8001cf0:	200002d2 	.word	0x200002d2
 8001cf4:	20000002 	.word	0x20000002
 8001cf8:	20000004 	.word	0x20000004
 8001cfc:	200002b2 	.word	0x200002b2
 8001d00:	200000cc 	.word	0x200000cc
 8001d04:	2000000a 	.word	0x2000000a

08001d08 <HAL_TIM_PeriodElapsedCallback>:

// Distance sensor reading every 0.5 seconds
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
//	else
//	{
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
//		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
//	}
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <speed>:
		set_r = 0;
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, set_r);
}

void speed(int l, int r) // range from -250 to 250
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	int set_l = (l) + 750;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <speed+0x4c>)
 8001d26:	4694      	mov	ip, r2
 8001d28:	4463      	add	r3, ip
 8001d2a:	60fb      	str	r3, [r7, #12]
	if (l == 0)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <speed+0x1e>
		set_l = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]

	int set_r = (r) + 750;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <speed+0x4c>)
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	4463      	add	r3, ip
 8001d3e:	60bb      	str	r3, [r7, #8]
	if (r == 0)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <speed+0x32>
		set_r = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, set_l);
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <speed+0x50>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, set_r);
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <speed+0x50>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	000002ee 	.word	0x000002ee
 8001d68:	20000080 	.word	0x20000080

08001d6c <turnLeft>:

// Input: Left wheel absolute speed
void turnLeft(int speed_val)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	// Less than 20 is there because the friction on the left wheel is more.
	if (speed_val < 20 || speed_val > 250)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b13      	cmp	r3, #19
 8001d78:	dd02      	ble.n	8001d80 <turnLeft+0x14>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2bfa      	cmp	r3, #250	; 0xfa
 8001d7e:	dd04      	ble.n	8001d8a <turnLeft+0x1e>
	{
		speed(0, 0);
 8001d80:	2100      	movs	r1, #0
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff ffc8 	bl	8001d18 <speed>
		return;
 8001d88:	e013      	b.n	8001db2 <turnLeft+0x46>
	}

	turningLeft = 1;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <turnLeft+0x4c>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <turnLeft+0x50>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <turnLeft+0x54>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
	movingStraight = 0;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <turnLeft+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
	speed(-speed_val, speed_val - 20);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	425a      	negs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3b14      	subs	r3, #20
 8001daa:	0019      	movs	r1, r3
 8001dac:	0010      	movs	r0, r2
 8001dae:	f7ff ffb3 	bl	8001d18 <speed>
}
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200002ac 	.word	0x200002ac
 8001dbc:	200002ad 	.word	0x200002ad
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	200002ae 	.word	0x200002ae

08001dc8 <turnRight>:

// Input: Left wheel absolute speed (since left wheel has the larger absolute value at all times)
void turnRight(int speed_val)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	// Less than 20 is there because the friction on the left wheel is more.
	if (speed_val < 20 || speed_val > 250)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b13      	cmp	r3, #19
 8001dd4:	dd02      	ble.n	8001ddc <turnRight+0x14>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2bfa      	cmp	r3, #250	; 0xfa
 8001dda:	dd04      	ble.n	8001de6 <turnRight+0x1e>
	{
		speed(0, 0);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff ff9a 	bl	8001d18 <speed>
		return;
 8001de4:	e013      	b.n	8001e0e <turnRight+0x46>
	}

	turningRight = 1;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <turnRight+0x4c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
	turningLeft = 0;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <turnRight+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8001df2:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <turnRight+0x54>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
	movingStraight = 0;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <turnRight+0x58>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
	speed(speed_val, -(speed_val - 20));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2214      	movs	r2, #20
 8001e02:	1ad2      	subs	r2, r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff ff85 	bl	8001d18 <speed>
}
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200002ad 	.word	0x200002ad
 8001e18:	200002ac 	.word	0x200002ac
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	200002ae 	.word	0x200002ae

08001e24 <goStraight>:

// Input: Left wheel absolute speed
void goStraight(int speed_val)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	// Less than 20 is there because the friction on the left wheel is more.
	if (speed_val <= 20 || speed_val > 250)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b14      	cmp	r3, #20
 8001e30:	dd02      	ble.n	8001e38 <goStraight+0x14>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2bfa      	cmp	r3, #250	; 0xfa
 8001e36:	dd04      	ble.n	8001e42 <goStraight+0x1e>
	{
		speed(0, 0);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff ff6c 	bl	8001d18 <speed>
		return;
 8001e40:	e012      	b.n	8001e68 <goStraight+0x44>
	}

	turningLeft = 0;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <goStraight+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <goStraight+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <goStraight+0x54>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
	movingStraight = 1;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <goStraight+0x58>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
	speed(speed_val, speed_val - 5);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	1f5a      	subs	r2, r3, #5
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0011      	movs	r1, r2
 8001e62:	0018      	movs	r0, r3
 8001e64:	f7ff ff58 	bl	8001d18 <speed>
}
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	200002ac 	.word	0x200002ac
 8001e74:	200002ad 	.word	0x200002ad
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	200002ae 	.word	0x200002ae

08001e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e84:	f000 fe2e 	bl	8002ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e88:	f000 f90a 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e8c:	f000 fb0a 	bl	80024a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e90:	f000 fae2 	bl	8002458 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e94:	f000 fa92 	bl	80023bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001e98:	f000 fa42 	bl	8002320 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001e9c:	f000 f948 	bl	8002130 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ea0:	f000 f9b4 	bl	800220c <MX_TIM3_Init>


  // ********** Timer Interrupts Start for HC-SR04 Distance Sensor **********
//  HAL_TIM_Base_Start_IT(&htim14); // Start the timer interrupt (called every 0.1 seconds) for distance sensor
#if HCSR1_EN
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Start the input capture for TIM1 Channel 1 interrupt for HC-SR04
 8001ea4:	4b6d      	ldr	r3, [pc, #436]	; (800205c <main+0x1dc>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f002 fd25 	bl	80048f8 <HAL_TIM_IC_Start_IT>
#endif
#if HCSR2_EN
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3); // Start the input capture for TIM1 Channel 3 interrupt for HC-SR04
 8001eae:	4b6b      	ldr	r3, [pc, #428]	; (800205c <main+0x1dc>)
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f002 fd20 	bl	80048f8 <HAL_TIM_IC_Start_IT>
#endif

  // ********** PWM Start for Controlling the Motors **********
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start the PWM for left motor
 8001eb8:	4b69      	ldr	r3, [pc, #420]	; (8002060 <main+0x1e0>)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f002 fbdf 	bl	8004680 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // Start the PWM for right motor
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <main+0x1e0>)
 8001ec4:	2104      	movs	r1, #4
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f002 fbda 	bl	8004680 <HAL_TIM_PWM_Start>

  // ********** UART Rx Interrupt Start for Receiving Angles from Raspberry Pi **********
  USART_State = HAL_UART_Receive_IT(&huart1, rx, 2); // UYGAR_LOG: call the interrupt function for UART communication with Pi
 8001ecc:	4965      	ldr	r1, [pc, #404]	; (8002064 <main+0x1e4>)
 8001ece:	4b66      	ldr	r3, [pc, #408]	; (8002068 <main+0x1e8>)
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f004 f86a 	bl	8005fac <HAL_UART_Receive_IT>
 8001ed8:	0003      	movs	r3, r0
 8001eda:	001a      	movs	r2, r3
 8001edc:	4b63      	ldr	r3, [pc, #396]	; (800206c <main+0x1ec>)
 8001ede:	701a      	strb	r2, [r3, #0]
//  HAL_StatusTypeDef HAL_stat = HAL_ERROR;
//  HAL_StatusTypeDef send_stat = HAL_ERROR;
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
//  		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
  speed(0, 0);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff ff18 	bl	8001d18 <speed>
  HAL_Delay(5000);
 8001ee8:	4b61      	ldr	r3, [pc, #388]	; (8002070 <main+0x1f0>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 fe80 	bl	8002bf0 <HAL_Delay>
//
//	  printf("Dist 1: %u, Dist 2: %u\n", HCSR_Distance_1, HCSR_Distance_2);
//
//	  HAL_Delay(1000);

	  HCSR04_Read();
 8001ef0:	f7ff fe9a 	bl	8001c28 <HCSR04_Read>
	  stop = ISSTOP(HCSR_Distance_1, HCSR_Distance_2); // (HCSR_Distance_2 < STOP_RANGE_HCSR);
 8001ef4:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <main+0x1f4>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	2b45      	cmp	r3, #69	; 0x45
 8001efa:	d903      	bls.n	8001f04 <main+0x84>
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <main+0x1f8>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	2b45      	cmp	r3, #69	; 0x45
 8001f02:	d801      	bhi.n	8001f08 <main+0x88>
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <main+0x8a>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b5b      	ldr	r3, [pc, #364]	; (800207c <main+0x1fc>)
 8001f0e:	701a      	strb	r2, [r3, #0]
	  // Every 100ms or so (could be 200 or so), update the speed based on angle
	  if (ISTURN(angle))
 8001f10:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <main+0x200>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	5e9b      	ldrsh	r3, [r3, r2]
 8001f16:	3390      	adds	r3, #144	; 0x90
 8001f18:	db28      	blt.n	8001f6c <main+0xec>
 8001f1a:	4b59      	ldr	r3, [pc, #356]	; (8002080 <main+0x200>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	5e9b      	ldrsh	r3, [r3, r2]
 8001f20:	2b90      	cmp	r3, #144	; 0x90
 8001f22:	dc23      	bgt.n	8001f6c <main+0xec>
	  {
		  if (ISLEFT(angle) && !turningLeft)
 8001f24:	4b56      	ldr	r3, [pc, #344]	; (8002080 <main+0x200>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	5e9b      	ldrsh	r3, [r3, r2]
 8001f2a:	3390      	adds	r3, #144	; 0x90
 8001f2c:	db0c      	blt.n	8001f48 <main+0xc8>
 8001f2e:	4b54      	ldr	r3, [pc, #336]	; (8002080 <main+0x200>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	5e9b      	ldrsh	r3, [r3, r2]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	da07      	bge.n	8001f48 <main+0xc8>
 8001f38:	4b52      	ldr	r3, [pc, #328]	; (8002084 <main+0x204>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d103      	bne.n	8001f48 <main+0xc8>
		  {
			  turnLeft(50);
 8001f40:	2032      	movs	r0, #50	; 0x32
 8001f42:	f7ff ff13 	bl	8001d6c <turnLeft>
		  if (ISLEFT(angle) && !turningLeft)
 8001f46:	e036      	b.n	8001fb6 <main+0x136>
//			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
		  }
		  else if (ISRIGHT(angle) && !turningRight)
 8001f48:	4b4d      	ldr	r3, [pc, #308]	; (8002080 <main+0x200>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	5e9b      	ldrsh	r3, [r3, r2]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db31      	blt.n	8001fb6 <main+0x136>
 8001f52:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <main+0x200>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	5e9b      	ldrsh	r3, [r3, r2]
 8001f58:	2b90      	cmp	r3, #144	; 0x90
 8001f5a:	dc2c      	bgt.n	8001fb6 <main+0x136>
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <main+0x208>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d128      	bne.n	8001fb6 <main+0x136>
		  {
			  turnRight(50);
 8001f64:	2032      	movs	r0, #50	; 0x32
 8001f66:	f7ff ff2f 	bl	8001dc8 <turnRight>
		  if (ISLEFT(angle) && !turningLeft)
 8001f6a:	e024      	b.n	8001fb6 <main+0x136>
//			  turningRight = 0;
//			  stopped = 1;
//			  movingStraight = 0;
//		  }
	  }
	  else if (stop && !stopped)
 8001f6c:	4b43      	ldr	r3, [pc, #268]	; (800207c <main+0x1fc>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d014      	beq.n	8001f9e <main+0x11e>
 8001f74:	4b45      	ldr	r3, [pc, #276]	; (800208c <main+0x20c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d110      	bne.n	8001f9e <main+0x11e>
	  {
		  speed(0, 0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff feca 	bl	8001d18 <speed>
		  turningLeft = 0;
 8001f84:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <main+0x204>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		  turningRight = 0;
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <main+0x208>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
		  stopped = 1;
 8001f90:	4b3e      	ldr	r3, [pc, #248]	; (800208c <main+0x20c>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
		  movingStraight = 0;
 8001f96:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <main+0x210>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e00c      	b.n	8001fb8 <main+0x138>
	  }
	  else if (!stop && !movingStraight)
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <main+0x1fc>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <main+0x138>
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <main+0x210>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <main+0x138>
	  {
		  goStraight(50);
 8001fae:	2032      	movs	r0, #50	; 0x32
 8001fb0:	f7ff ff38 	bl	8001e24 <goStraight>
 8001fb4:	e000      	b.n	8001fb8 <main+0x138>
		  if (ISLEFT(angle) && !turningLeft)
 8001fb6:	46c0      	nop			; (mov r8, r8)
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//	  }
//	  else
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

	  HAL_Delay(40);
 8001fb8:	2028      	movs	r0, #40	; 0x28
 8001fba:	f000 fe19 	bl	8002bf0 <HAL_Delay>

	  // count how many times we went through the while loop without angle being updated
	  if (prevAngle == angle)
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <main+0x214>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	5e9a      	ldrsh	r2, [r3, r2]
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <main+0x200>)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	5e5b      	ldrsh	r3, [r3, r1]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d10d      	bne.n	8001fea <main+0x16a>
	  {
		  angleCounter++;
 8001fce:	4b32      	ldr	r3, [pc, #200]	; (8002098 <main+0x218>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b30      	ldr	r3, [pc, #192]	; (8002098 <main+0x218>)
 8001fd8:	701a      	strb	r2, [r3, #0]
		  if (angleCounter == 0)
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <main+0x218>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <main+0x170>
			  angleCounter = 255;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <main+0x218>)
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e002      	b.n	8001ff0 <main+0x170>
	  }
	  else
	  {
		  angleCounter = 0;
 8001fea:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <main+0x218>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
	  }

	  prevAngle = angle;
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <main+0x200>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	5e9a      	ldrsh	r2, [r3, r2]
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <main+0x214>)
 8001ff8:	801a      	strh	r2, [r3, #0]
	  // ************* THE FOLLOWING CODE SOLVES YOUR PROBLEM!!!!!!!!! **************
	  // If the angle counter is larger than a certain threshold or the temp_angle is not within valid range,
	  // then there is a problem with UART IT. Turn the LED on and start UART IT again.
	  // I believe the problem might be the fact that UART callback of pi might be interrupted by the callback of
	  // the HCSR distance sensors. And maybe it never returns since the function times out or something.
	  if (angleCounter >= ANGLE_SAMPLING_HALTED_COUNT) //|| !IS_VALID_ANGLE(temp_angle))
 8001ffa:	4b27      	ldr	r3, [pc, #156]	; (8002098 <main+0x218>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d909      	bls.n	8002016 <main+0x196>
	  {
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
		  // No issues calling this frequently even though it is called in the callback.
		  // Will just return HAL_BUSY when not available.
		  USART_State = HAL_UART_Receive_IT(&huart1, rx, 2);
 8002002:	4918      	ldr	r1, [pc, #96]	; (8002064 <main+0x1e4>)
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <main+0x1e8>)
 8002006:	2202      	movs	r2, #2
 8002008:	0018      	movs	r0, r3
 800200a:	f003 ffcf 	bl	8005fac <HAL_UART_Receive_IT>
 800200e:	0003      	movs	r3, r0
 8002010:	001a      	movs	r2, r3
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <main+0x1ec>)
 8002014:	701a      	strb	r2, [r3, #0]
	  }

	  // NOTE: In the bug where temp_angle is way out of the valid range constantly, find a function to disable and enable the UART
	  // interrupt!!! Maybe the following code will work:
	  // UPDATE: Tried this and it didn't work. Once deinitialized, the angle never gets sampled again.
	   if (!IS_VALID_ANGLE(temp_angle))
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <main+0x21c>)
 8002018:	2200      	movs	r2, #0
 800201a:	5e9b      	ldrsh	r3, [r3, r2]
 800201c:	33b3      	adds	r3, #179	; 0xb3
 800201e:	db05      	blt.n	800202c <main+0x1ac>
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <main+0x21c>)
 8002022:	2200      	movs	r2, #0
 8002024:	5e9b      	ldrsh	r3, [r3, r2]
 8002026:	2bb3      	cmp	r3, #179	; 0xb3
 8002028:	dc00      	bgt.n	800202c <main+0x1ac>
 800202a:	e761      	b.n	8001ef0 <main+0x70>
	   {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800202c:	23a0      	movs	r3, #160	; 0xa0
 800202e:	05db      	lsls	r3, r3, #23
 8002030:	2201      	movs	r2, #1
 8002032:	2120      	movs	r1, #32
 8002034:	0018      	movs	r0, r3
 8002036:	f001 fc13 	bl	8003860 <HAL_GPIO_WritePin>
	  	  HAL_UART_DeInit(&huart1); // Deinitialize USART 1 (Pi UART)
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <main+0x1e8>)
 800203c:	0018      	movs	r0, r3
 800203e:	f003 ff75 	bl	8005f2c <HAL_UART_DeInit>
	  	  MX_USART1_UART_Init();    // Reinitialize USART 1
 8002042:	f000 f96d 	bl	8002320 <MX_USART1_UART_Init>
	  	  USART_State = HAL_UART_Receive_IT(&huart1, rx, 2);
 8002046:	4907      	ldr	r1, [pc, #28]	; (8002064 <main+0x1e4>)
 8002048:	4b07      	ldr	r3, [pc, #28]	; (8002068 <main+0x1e8>)
 800204a:	2202      	movs	r2, #2
 800204c:	0018      	movs	r0, r3
 800204e:	f003 ffad 	bl	8005fac <HAL_UART_Receive_IT>
 8002052:	0003      	movs	r3, r0
 8002054:	001a      	movs	r2, r3
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <main+0x1ec>)
 8002058:	701a      	strb	r2, [r3, #0]
	  HCSR04_Read();
 800205a:	e749      	b.n	8001ef0 <main+0x70>
 800205c:	20000034 	.word	0x20000034
 8002060:	20000080 	.word	0x20000080
 8002064:	200002b0 	.word	0x200002b0
 8002068:	200000cc 	.word	0x200000cc
 800206c:	2000000a 	.word	0x2000000a
 8002070:	00001388 	.word	0x00001388
 8002074:	20000006 	.word	0x20000006
 8002078:	20000008 	.word	0x20000008
 800207c:	20000004 	.word	0x20000004
 8002080:	20000002 	.word	0x20000002
 8002084:	200002ac 	.word	0x200002ac
 8002088:	200002ad 	.word	0x200002ad
 800208c:	20000000 	.word	0x20000000
 8002090:	200002ae 	.word	0x200002ae
 8002094:	200002b4 	.word	0x200002b4
 8002098:	200002b3 	.word	0x200002b3
 800209c:	200002d2 	.word	0x200002d2

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b093      	sub	sp, #76	; 0x4c
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	2414      	movs	r4, #20
 80020a8:	193b      	adds	r3, r7, r4
 80020aa:	0018      	movs	r0, r3
 80020ac:	2334      	movs	r3, #52	; 0x34
 80020ae:	001a      	movs	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	f005 fdff 	bl	8007cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	0018      	movs	r0, r3
 80020ba:	2310      	movs	r3, #16
 80020bc:	001a      	movs	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f005 fdf8 	bl	8007cb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f001 fbe7 	bl	800389c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	2202      	movs	r2, #2
 80020d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d4:	193b      	adds	r3, r7, r4
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	0052      	lsls	r2, r2, #1
 80020da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	0018      	movs	r0, r3
 80020f2:	f001 fc1f 	bl	8003934 <HAL_RCC_OscConfig>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80020fa:	f000 fa39 	bl	8002570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002110:	1d3b      	adds	r3, r7, #4
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2100      	movs	r1, #0
 800211a:	0018      	movs	r0, r3
 800211c:	f001 ff1a 	bl	8003f54 <HAL_RCC_ClockConfig>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d001      	beq.n	8002128 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002124:	f000 fa24 	bl	8002570 <Error_Handler>
  }
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b013      	add	sp, #76	; 0x4c
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002136:	2314      	movs	r3, #20
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	0018      	movs	r0, r3
 800213c:	230c      	movs	r3, #12
 800213e:	001a      	movs	r2, r3
 8002140:	2100      	movs	r1, #0
 8002142:	f005 fdb7 	bl	8007cb4 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	0018      	movs	r0, r3
 800214a:	2310      	movs	r3, #16
 800214c:	001a      	movs	r2, r3
 800214e:	2100      	movs	r1, #0
 8002150:	f005 fdb0 	bl	8007cb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <MX_TIM1_Init+0xd0>)
 8002156:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <MX_TIM1_Init+0xd4>)
 8002158:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <MX_TIM1_Init+0xd0>)
 800215c:	220f      	movs	r2, #15
 800215e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <MX_TIM1_Init+0xd0>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <MX_TIM1_Init+0xd0>)
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <MX_TIM1_Init+0xd8>)
 800216a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <MX_TIM1_Init+0xd0>)
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <MX_TIM1_Init+0xd0>)
 8002174:	2200      	movs	r2, #0
 8002176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MX_TIM1_Init+0xd0>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <MX_TIM1_Init+0xd0>)
 8002180:	0018      	movs	r0, r3
 8002182:	f002 fb61 	bl	8004848 <HAL_TIM_IC_Init>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d001      	beq.n	800218e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800218a:	f000 f9f1 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2114      	movs	r1, #20
 8002190:	187b      	adds	r3, r7, r1
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002196:	187b      	adds	r3, r7, r1
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021a2:	187a      	adds	r2, r7, r1
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM1_Init+0xd0>)
 80021a6:	0011      	movs	r1, r2
 80021a8:	0018      	movs	r0, r3
 80021aa:	f003 fde9 	bl	8005d80 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80021b2:	f000 f9dd 	bl	8002570 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2201      	movs	r2, #1
 80021c0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80021ce:	1d39      	adds	r1, r7, #4
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_TIM1_Init+0xd0>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	0018      	movs	r0, r3
 80021d6:	f002 fdf3 	bl	8004dc0 <HAL_TIM_IC_ConfigChannel>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80021de:	f000 f9c7 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80021e2:	1d39      	adds	r1, r7, #4
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_TIM1_Init+0xd0>)
 80021e6:	2208      	movs	r2, #8
 80021e8:	0018      	movs	r0, r3
 80021ea:	f002 fde9 	bl	8004dc0 <HAL_TIM_IC_ConfigChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80021f2:	f000 f9bd 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b008      	add	sp, #32
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	20000034 	.word	0x20000034
 8002204:	40012c00 	.word	0x40012c00
 8002208:	0000ffff 	.word	0x0000ffff

0800220c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	; 0x38
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002212:	2328      	movs	r3, #40	; 0x28
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	0018      	movs	r0, r3
 8002218:	2310      	movs	r3, #16
 800221a:	001a      	movs	r2, r3
 800221c:	2100      	movs	r1, #0
 800221e:	f005 fd49 	bl	8007cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002222:	231c      	movs	r3, #28
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	0018      	movs	r0, r3
 8002228:	230c      	movs	r3, #12
 800222a:	001a      	movs	r2, r3
 800222c:	2100      	movs	r1, #0
 800222e:	f005 fd41 	bl	8007cb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002232:	003b      	movs	r3, r7
 8002234:	0018      	movs	r0, r3
 8002236:	231c      	movs	r3, #28
 8002238:	001a      	movs	r2, r3
 800223a:	2100      	movs	r1, #0
 800223c:	f005 fd3a 	bl	8007cb4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <MX_TIM3_Init+0x108>)
 8002242:	4a35      	ldr	r2, [pc, #212]	; (8002318 <MX_TIM3_Init+0x10c>)
 8002244:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <MX_TIM3_Init+0x108>)
 8002248:	2220      	movs	r2, #32
 800224a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <MX_TIM3_Init+0x108>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <MX_TIM3_Init+0x108>)
 8002254:	4a31      	ldr	r2, [pc, #196]	; (800231c <MX_TIM3_Init+0x110>)
 8002256:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <MX_TIM3_Init+0x108>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <MX_TIM3_Init+0x108>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <MX_TIM3_Init+0x108>)
 8002266:	0018      	movs	r0, r3
 8002268:	f002 f952 	bl	8004510 <HAL_TIM_Base_Init>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002270:	f000 f97e 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002274:	2128      	movs	r1, #40	; 0x28
 8002276:	187b      	adds	r3, r7, r1
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	0152      	lsls	r2, r2, #5
 800227c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800227e:	187a      	adds	r2, r7, r1
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <MX_TIM3_Init+0x108>)
 8002282:	0011      	movs	r1, r2
 8002284:	0018      	movs	r0, r3
 8002286:	f002 ff3f 	bl	8005108 <HAL_TIM_ConfigClockSource>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800228e:	f000 f96f 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <MX_TIM3_Init+0x108>)
 8002294:	0018      	movs	r0, r3
 8002296:	f002 f993 	bl	80045c0 <HAL_TIM_PWM_Init>
 800229a:	1e03      	subs	r3, r0, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800229e:	f000 f967 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	211c      	movs	r1, #28
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022b0:	187a      	adds	r2, r7, r1
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <MX_TIM3_Init+0x108>)
 80022b4:	0011      	movs	r1, r2
 80022b6:	0018      	movs	r0, r3
 80022b8:	f003 fd62 	bl	8005d80 <HAL_TIMEx_MasterConfigSynchronization>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80022c0:	f000 f956 	bl	8002570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022c4:	003b      	movs	r3, r7
 80022c6:	2260      	movs	r2, #96	; 0x60
 80022c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80022ca:	003b      	movs	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d0:	003b      	movs	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d6:	003b      	movs	r3, r7
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022dc:	0039      	movs	r1, r7
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <MX_TIM3_Init+0x108>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	0018      	movs	r0, r3
 80022e4:	f002 fe10 	bl	8004f08 <HAL_TIM_PWM_ConfigChannel>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80022ec:	f000 f940 	bl	8002570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022f0:	0039      	movs	r1, r7
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <MX_TIM3_Init+0x108>)
 80022f4:	2204      	movs	r2, #4
 80022f6:	0018      	movs	r0, r3
 80022f8:	f002 fe06 	bl	8004f08 <HAL_TIM_PWM_ConfigChannel>
 80022fc:	1e03      	subs	r3, r0, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002300:	f000 f936 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <MX_TIM3_Init+0x108>)
 8002306:	0018      	movs	r0, r3
 8002308:	f000 f9ce 	bl	80026a8 <HAL_TIM_MspPostInit>

}
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b00e      	add	sp, #56	; 0x38
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000080 	.word	0x20000080
 8002318:	40000400 	.word	0x40000400
 800231c:	0000270f 	.word	0x0000270f

08002320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002326:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <MX_USART1_UART_Init+0x98>)
 8002328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800232a:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800232c:	22e1      	movs	r2, #225	; 0xe1
 800232e:	0252      	lsls	r2, r2, #9
 8002330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002344:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002346:	220c      	movs	r2, #12
 8002348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234a:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800235c:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 8002364:	2200      	movs	r2, #0
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800236a:	0018      	movs	r0, r3
 800236c:	f003 fd88 	bl	8005e80 <HAL_UART_Init>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002374:	f000 f8fc 	bl	8002570 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800237a:	2100      	movs	r1, #0
 800237c:	0018      	movs	r0, r3
 800237e:	f005 fb95 	bl	8007aac <HAL_UARTEx_SetTxFifoThreshold>
 8002382:	1e03      	subs	r3, r0, #0
 8002384:	d001      	beq.n	800238a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002386:	f000 f8f3 	bl	8002570 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800238c:	2100      	movs	r1, #0
 800238e:	0018      	movs	r0, r3
 8002390:	f005 fbcc 	bl	8007b2c <HAL_UARTEx_SetRxFifoThreshold>
 8002394:	1e03      	subs	r3, r0, #0
 8002396:	d001      	beq.n	800239c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002398:	f000 f8ea 	bl	8002570 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <MX_USART1_UART_Init+0x94>)
 800239e:	0018      	movs	r0, r3
 80023a0:	f005 fb4a 	bl	8007a38 <HAL_UARTEx_DisableFifoMode>
 80023a4:	1e03      	subs	r3, r0, #0
 80023a6:	d001      	beq.n	80023ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023a8:	f000 f8e2 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	200000cc 	.word	0x200000cc
 80023b8:	40013800 	.word	0x40013800

080023bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <MX_USART2_UART_Init+0x98>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023c8:	22e1      	movs	r2, #225	; 0xe1
 80023ca:	0252      	lsls	r2, r2, #9
 80023cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023e2:	220c      	movs	r2, #12
 80023e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f2:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <MX_USART2_UART_Init+0x94>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <MX_USART2_UART_Init+0x94>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <MX_USART2_UART_Init+0x94>)
 8002406:	0018      	movs	r0, r3
 8002408:	f003 fd3a 	bl	8005e80 <HAL_UART_Init>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d001      	beq.n	8002414 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002410:	f000 f8ae 	bl	8002570 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART2_UART_Init+0x94>)
 8002416:	2100      	movs	r1, #0
 8002418:	0018      	movs	r0, r3
 800241a:	f005 fb47 	bl	8007aac <HAL_UARTEx_SetTxFifoThreshold>
 800241e:	1e03      	subs	r3, r0, #0
 8002420:	d001      	beq.n	8002426 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002422:	f000 f8a5 	bl	8002570 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <MX_USART2_UART_Init+0x94>)
 8002428:	2100      	movs	r1, #0
 800242a:	0018      	movs	r0, r3
 800242c:	f005 fb7e 	bl	8007b2c <HAL_UARTEx_SetRxFifoThreshold>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d001      	beq.n	8002438 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002434:	f000 f89c 	bl	8002570 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <MX_USART2_UART_Init+0x94>)
 800243a:	0018      	movs	r0, r3
 800243c:	f005 fafc 	bl	8007a38 <HAL_UARTEx_DisableFifoMode>
 8002440:	1e03      	subs	r3, r0, #0
 8002442:	d001      	beq.n	8002448 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002444:	f000 f894 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	20000160 	.word	0x20000160
 8002454:	40004400 	.word	0x40004400

08002458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_DMA_Init+0x48>)
 8002460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002462:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_DMA_Init+0x48>)
 8002464:	2101      	movs	r1, #1
 8002466:	430a      	orrs	r2, r1
 8002468:	639a      	str	r2, [r3, #56]	; 0x38
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <MX_DMA_Init+0x48>)
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	2201      	movs	r2, #1
 8002470:	4013      	ands	r3, r2
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002476:	2200      	movs	r2, #0
 8002478:	2100      	movs	r1, #0
 800247a:	2009      	movs	r0, #9
 800247c:	f000 fcaa 	bl	8002dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002480:	2009      	movs	r0, #9
 8002482:	f000 fcbc 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	200a      	movs	r0, #10
 800248c:	f000 fca2 	bl	8002dd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002490:	200a      	movs	r0, #10
 8002492:	f000 fcb4 	bl	8002dfe <HAL_NVIC_EnableIRQ>

}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	40021000 	.word	0x40021000

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024aa:	240c      	movs	r4, #12
 80024ac:	193b      	adds	r3, r7, r4
 80024ae:	0018      	movs	r0, r3
 80024b0:	2314      	movs	r3, #20
 80024b2:	001a      	movs	r2, r3
 80024b4:	2100      	movs	r1, #0
 80024b6:	f005 fbfd 	bl	8007cb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ba:	4b2c      	ldr	r3, [pc, #176]	; (800256c <MX_GPIO_Init+0xc8>)
 80024bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <MX_GPIO_Init+0xc8>)
 80024c0:	2104      	movs	r1, #4
 80024c2:	430a      	orrs	r2, r1
 80024c4:	635a      	str	r2, [r3, #52]	; 0x34
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <MX_GPIO_Init+0xc8>)
 80024c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ca:	2204      	movs	r2, #4
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d2:	4b26      	ldr	r3, [pc, #152]	; (800256c <MX_GPIO_Init+0xc8>)
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <MX_GPIO_Init+0xc8>)
 80024d8:	2120      	movs	r1, #32
 80024da:	430a      	orrs	r2, r1
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <MX_GPIO_Init+0xc8>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	2220      	movs	r2, #32
 80024e4:	4013      	ands	r3, r2
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b20      	ldr	r3, [pc, #128]	; (800256c <MX_GPIO_Init+0xc8>)
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	4b1f      	ldr	r3, [pc, #124]	; (800256c <MX_GPIO_Init+0xc8>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <MX_GPIO_Init+0xc8>)
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_OUTPUT_HCSRx_TRIG_Pin, GPIO_PIN_RESET);
 8002502:	2388      	movs	r3, #136	; 0x88
 8002504:	0099      	lsls	r1, r3, #2
 8002506:	23a0      	movs	r3, #160	; 0xa0
 8002508:	05db      	lsls	r3, r3, #23
 800250a:	2200      	movs	r2, #0
 800250c:	0018      	movs	r0, r3
 800250e:	f001 f9a7 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8002512:	193b      	adds	r3, r7, r4
 8002514:	2220      	movs	r2, #32
 8002516:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002518:	193b      	adds	r3, r7, r4
 800251a:	2201      	movs	r2, #1
 800251c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	193b      	adds	r3, r7, r4
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002524:	193b      	adds	r3, r7, r4
 8002526:	2202      	movs	r2, #2
 8002528:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800252a:	193a      	adds	r2, r7, r4
 800252c:	23a0      	movs	r3, #160	; 0xa0
 800252e:	05db      	lsls	r3, r3, #23
 8002530:	0011      	movs	r1, r2
 8002532:	0018      	movs	r0, r3
 8002534:	f000 ff60 	bl	80033f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_OUTPUT_HCSRx_TRIG_Pin */
  GPIO_InitStruct.Pin = GPIO_OUTPUT_HCSRx_TRIG_Pin;
 8002538:	0021      	movs	r1, r4
 800253a:	187b      	adds	r3, r7, r1
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002542:	187b      	adds	r3, r7, r1
 8002544:	2201      	movs	r2, #1
 8002546:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_OUTPUT_HCSRx_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002554:	187a      	adds	r2, r7, r1
 8002556:	23a0      	movs	r3, #160	; 0xa0
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	0011      	movs	r1, r2
 800255c:	0018      	movs	r0, r3
 800255e:	f000 ff4b 	bl	80033f8 <HAL_GPIO_Init>

}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	46bd      	mov	sp, r7
 8002566:	b009      	add	sp, #36	; 0x24
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40021000 	.word	0x40021000

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002574:	b672      	cpsid	i
}
 8002576:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002578:	e7fe      	b.n	8002578 <Error_Handler+0x8>
	...

0800257c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_MspInit+0x44>)
 8002584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_MspInit+0x44>)
 8002588:	2101      	movs	r1, #1
 800258a:	430a      	orrs	r2, r1
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_MspInit+0x44>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_MspInit+0x44>)
 800259c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800259e:	4b08      	ldr	r3, [pc, #32]	; (80025c0 <HAL_MspInit+0x44>)
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	0549      	lsls	r1, r1, #21
 80025a4:	430a      	orrs	r2, r1
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_MspInit+0x44>)
 80025aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	055b      	lsls	r3, r3, #21
 80025b0:	4013      	ands	r3, r2
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b002      	add	sp, #8
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	40021000 	.word	0x40021000

080025c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b08b      	sub	sp, #44	; 0x2c
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	2414      	movs	r4, #20
 80025ce:	193b      	adds	r3, r7, r4
 80025d0:	0018      	movs	r0, r3
 80025d2:	2314      	movs	r3, #20
 80025d4:	001a      	movs	r2, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	f005 fb6c 	bl	8007cb4 <memset>
  if(htim_ic->Instance==TIM1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a20      	ldr	r2, [pc, #128]	; (8002664 <HAL_TIM_IC_MspInit+0xa0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d139      	bne.n	800265a <HAL_TIM_IC_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e6:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_TIM_IC_MspInit+0xa4>)
 80025e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ea:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_TIM_IC_MspInit+0xa4>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0109      	lsls	r1, r1, #4
 80025f0:	430a      	orrs	r2, r1
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_TIM_IC_MspInit+0xa4>)
 80025f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_TIM_IC_MspInit+0xa4>)
 8002604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <HAL_TIM_IC_MspInit+0xa4>)
 8002608:	2101      	movs	r1, #1
 800260a:	430a      	orrs	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_TIM_IC_MspInit+0xa4>)
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2201      	movs	r2, #1
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = TIM1_CH1_HCSR1_ECHO_Pin|TIM1_CH3_HCSR2_ECHO_Pin;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	22a0      	movs	r2, #160	; 0xa0
 800261e:	00d2      	lsls	r2, r2, #3
 8002620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	0021      	movs	r1, r4
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2202      	movs	r2, #2
 8002628:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2202      	movs	r2, #2
 800263a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263c:	187a      	adds	r2, r7, r1
 800263e:	23a0      	movs	r3, #160	; 0xa0
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	0011      	movs	r1, r2
 8002644:	0018      	movs	r0, r3
 8002646:	f000 fed7 	bl	80033f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	200e      	movs	r0, #14
 8002650:	f000 fbc0 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002654:	200e      	movs	r0, #14
 8002656:	f000 fbd2 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	46bd      	mov	sp, r7
 800265e:	b00b      	add	sp, #44	; 0x2c
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_TIM_Base_MspInit+0x34>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10b      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_TIM_Base_MspInit+0x38>)
 8002680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_TIM_Base_MspInit+0x38>)
 8002684:	2102      	movs	r1, #2
 8002686:	430a      	orrs	r2, r1
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_TIM_Base_MspInit+0x38>)
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b004      	add	sp, #16
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	240c      	movs	r4, #12
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	0018      	movs	r0, r3
 80026b6:	2314      	movs	r3, #20
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f005 fafa 	bl	8007cb4 <memset>
  if(htim->Instance==TIM3)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <HAL_TIM_MspPostInit+0x70>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b14      	ldr	r3, [pc, #80]	; (800271c <HAL_TIM_MspPostInit+0x74>)
 80026cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_TIM_MspPostInit+0x74>)
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_TIM_MspPostInit+0x74>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Left_Motor_PWM_Pin|TIM3_CH2_Right_Motor_PWM_Pin;
 80026e2:	0021      	movs	r1, r4
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	22c0      	movs	r2, #192	; 0xc0
 80026e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2202      	movs	r2, #2
 80026ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2201      	movs	r2, #1
 8002700:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	187a      	adds	r2, r7, r1
 8002704:	23a0      	movs	r3, #160	; 0xa0
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	0011      	movs	r1, r2
 800270a:	0018      	movs	r0, r3
 800270c:	f000 fe74 	bl	80033f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b009      	add	sp, #36	; 0x24
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	40000400 	.word	0x40000400
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b093      	sub	sp, #76	; 0x4c
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	2334      	movs	r3, #52	; 0x34
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	0018      	movs	r0, r3
 800272e:	2314      	movs	r3, #20
 8002730:	001a      	movs	r2, r3
 8002732:	2100      	movs	r1, #0
 8002734:	f005 fabe 	bl	8007cb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002738:	2418      	movs	r4, #24
 800273a:	193b      	adds	r3, r7, r4
 800273c:	0018      	movs	r0, r3
 800273e:	231c      	movs	r3, #28
 8002740:	001a      	movs	r2, r3
 8002742:	2100      	movs	r1, #0
 8002744:	f005 fab6 	bl	8007cb4 <memset>
  if(huart->Instance==USART1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_UART_MspInit+0x20c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d170      	bne.n	8002834 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275e:	193b      	adds	r3, r7, r4
 8002760:	0018      	movs	r0, r3
 8002762:	f001 fda1 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800276a:	f7ff ff01 	bl	8002570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800276e:	4b70      	ldr	r3, [pc, #448]	; (8002930 <HAL_UART_MspInit+0x210>)
 8002770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002772:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <HAL_UART_MspInit+0x210>)
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	01c9      	lsls	r1, r1, #7
 8002778:	430a      	orrs	r2, r1
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
 800277c:	4b6c      	ldr	r3, [pc, #432]	; (8002930 <HAL_UART_MspInit+0x210>)
 800277e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	01db      	lsls	r3, r3, #7
 8002784:	4013      	ands	r3, r2
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	4b69      	ldr	r3, [pc, #420]	; (8002930 <HAL_UART_MspInit+0x210>)
 800278c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278e:	4b68      	ldr	r3, [pc, #416]	; (8002930 <HAL_UART_MspInit+0x210>)
 8002790:	2104      	movs	r1, #4
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	4b66      	ldr	r3, [pc, #408]	; (8002930 <HAL_UART_MspInit+0x210>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2204      	movs	r2, #4
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027a2:	2134      	movs	r1, #52	; 0x34
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2230      	movs	r2, #48	; 0x30
 80027a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2202      	movs	r2, #2
 80027ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2201      	movs	r2, #1
 80027c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	4a5b      	ldr	r2, [pc, #364]	; (8002934 <HAL_UART_MspInit+0x214>)
 80027c6:	0019      	movs	r1, r3
 80027c8:	0010      	movs	r0, r2
 80027ca:	f000 fe15 	bl	80033f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80027ce:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027d0:	4a5a      	ldr	r2, [pc, #360]	; (800293c <HAL_UART_MspInit+0x21c>)
 80027d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80027d4:	4b58      	ldr	r3, [pc, #352]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027d6:	2232      	movs	r2, #50	; 0x32
 80027d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027da:	4b57      	ldr	r3, [pc, #348]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027e6:	4b54      	ldr	r3, [pc, #336]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ec:	4b52      	ldr	r3, [pc, #328]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f2:	4b51      	ldr	r3, [pc, #324]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80027f8:	4b4f      	ldr	r3, [pc, #316]	; (8002938 <HAL_UART_MspInit+0x218>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027fe:	4b4e      	ldr	r3, [pc, #312]	; (8002938 <HAL_UART_MspInit+0x218>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002804:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_UART_MspInit+0x218>)
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fb26 	bl	8002e58 <HAL_DMA_Init>
 800280c:	1e03      	subs	r3, r0, #0
 800280e:	d001      	beq.n	8002814 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8002810:	f7ff feae 	bl	8002570 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	4a47      	ldr	r2, [pc, #284]	; (8002938 <HAL_UART_MspInit+0x218>)
 800281a:	505a      	str	r2, [r3, r1]
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_UART_MspInit+0x218>)
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2100      	movs	r1, #0
 8002826:	201b      	movs	r0, #27
 8002828:	f000 fad4 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800282c:	201b      	movs	r0, #27
 800282e:	f000 fae6 	bl	8002dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002832:	e076      	b.n	8002922 <HAL_UART_MspInit+0x202>
  else if(huart->Instance==USART2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a41      	ldr	r2, [pc, #260]	; (8002940 <HAL_UART_MspInit+0x220>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d171      	bne.n	8002922 <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800283e:	2118      	movs	r1, #24
 8002840:	187b      	adds	r3, r7, r1
 8002842:	2202      	movs	r2, #2
 8002844:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002846:	187b      	adds	r3, r7, r1
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800284c:	187b      	adds	r3, r7, r1
 800284e:	0018      	movs	r0, r3
 8002850:	f001 fd2a 	bl	80042a8 <HAL_RCCEx_PeriphCLKConfig>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002858:	f7ff fe8a 	bl	8002570 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <HAL_UART_MspInit+0x210>)
 800285e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002860:	4b33      	ldr	r3, [pc, #204]	; (8002930 <HAL_UART_MspInit+0x210>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0289      	lsls	r1, r1, #10
 8002866:	430a      	orrs	r2, r1
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_UART_MspInit+0x210>)
 800286c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002878:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_UART_MspInit+0x210>)
 800287a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_UART_MspInit+0x210>)
 800287e:	2101      	movs	r1, #1
 8002880:	430a      	orrs	r2, r1
 8002882:	635a      	str	r2, [r3, #52]	; 0x34
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <HAL_UART_MspInit+0x210>)
 8002886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002888:	2201      	movs	r2, #1
 800288a:	4013      	ands	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002890:	2134      	movs	r1, #52	; 0x34
 8002892:	187b      	adds	r3, r7, r1
 8002894:	220c      	movs	r2, #12
 8002896:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2202      	movs	r2, #2
 800289c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2201      	movs	r2, #1
 80028a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2201      	movs	r2, #1
 80028ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	187a      	adds	r2, r7, r1
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fd9d 	bl	80033f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028c0:	4a21      	ldr	r2, [pc, #132]	; (8002948 <HAL_UART_MspInit+0x228>)
 80028c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028c6:	2234      	movs	r2, #52	; 0x34
 80028c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80028e8:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028f4:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_UART_MspInit+0x224>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 faae 	bl	8002e58 <HAL_DMA_Init>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8002900:	f7ff fe36 	bl	8002570 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	4a0e      	ldr	r2, [pc, #56]	; (8002944 <HAL_UART_MspInit+0x224>)
 800290a:	505a      	str	r2, [r3, r1]
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_UART_MspInit+0x224>)
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	201c      	movs	r0, #28
 8002918:	f000 fa5c 	bl	8002dd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800291c:	201c      	movs	r0, #28
 800291e:	f000 fa6e 	bl	8002dfe <HAL_NVIC_EnableIRQ>
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b013      	add	sp, #76	; 0x4c
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	40013800 	.word	0x40013800
 8002930:	40021000 	.word	0x40021000
 8002934:	50000800 	.word	0x50000800
 8002938:	200001f4 	.word	0x200001f4
 800293c:	4002001c 	.word	0x4002001c
 8002940:	40004400 	.word	0x40004400
 8002944:	20000250 	.word	0x20000250
 8002948:	40020008 	.word	0x40020008

0800294c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_UART_MspDeInit+0x78>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d114      	bne.n	8002988 <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_UART_MspDeInit+0x7c>)
 8002960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_UART_MspDeInit+0x7c>)
 8002964:	4919      	ldr	r1, [pc, #100]	; (80029cc <HAL_UART_MspDeInit+0x80>)
 8002966:	400a      	ands	r2, r1
 8002968:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <HAL_UART_MspDeInit+0x84>)
 800296c:	2130      	movs	r1, #48	; 0x30
 800296e:	0018      	movs	r0, r3
 8002970:	f000 fea6 	bl	80036c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	589b      	ldr	r3, [r3, r2]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 faf6 	bl	8002f6c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002980:	201b      	movs	r0, #27
 8002982:	f000 fa4c 	bl	8002e1e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002986:	e019      	b.n	80029bc <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <HAL_UART_MspDeInit+0x88>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d114      	bne.n	80029bc <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <HAL_UART_MspDeInit+0x7c>)
 8002994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_UART_MspDeInit+0x7c>)
 8002998:	490f      	ldr	r1, [pc, #60]	; (80029d8 <HAL_UART_MspDeInit+0x8c>)
 800299a:	400a      	ands	r2, r1
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800299e:	23a0      	movs	r3, #160	; 0xa0
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	210c      	movs	r1, #12
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 fe8b 	bl	80036c0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	589b      	ldr	r3, [r3, r2]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 fadb 	bl	8002f6c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80029b6:	201c      	movs	r0, #28
 80029b8:	f000 fa31 	bl	8002e1e <HAL_NVIC_DisableIRQ>
}
 80029bc:	46c0      	nop			; (mov r8, r8)
 80029be:	46bd      	mov	sp, r7
 80029c0:	b002      	add	sp, #8
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40021000 	.word	0x40021000
 80029cc:	ffffbfff 	.word	0xffffbfff
 80029d0:	50000800 	.word	0x50000800
 80029d4:	40004400 	.word	0x40004400
 80029d8:	fffdffff 	.word	0xfffdffff

080029dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <NMI_Handler+0x4>

080029e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e6:	e7fe      	b.n	80029e6 <HardFault_Handler+0x4>

080029e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a00:	f000 f8da 	bl	8002bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <DMA1_Channel1_IRQHandler+0x14>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 fbee 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a18:	46c0      	nop			; (mov r8, r8)
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	20000250 	.word	0x20000250

08002a24 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 fbe2 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	200001f4 	.word	0x200001f4

08002a3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <TIM1_CC_IRQHandler+0x14>)
 8002a42:	0018      	movs	r0, r3
 8002a44:	f002 f88a 	bl	8004b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	20000034 	.word	0x20000034

08002a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <USART1_IRQHandler+0x14>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f003 fafe 	bl	800605c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	200000cc 	.word	0x200000cc

08002a6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a70:	4b03      	ldr	r3, [pc, #12]	; (8002a80 <USART2_IRQHandler+0x14>)
 8002a72:	0018      	movs	r0, r3
 8002a74:	f003 faf2 	bl	800605c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	20000160 	.word	0x20000160

08002a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a90:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a94:	f7ff fff6 	bl	8002a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a98:	480c      	ldr	r0, [pc, #48]	; (8002acc <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9a:	490d      	ldr	r1, [pc, #52]	; (8002ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ad4 <LoopForever+0xe>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab0:	4c0a      	ldr	r4, [pc, #40]	; (8002adc <LoopForever+0x16>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002abe:	f005 f8d5 	bl	8007c6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002ac2:	f7ff f9dd 	bl	8001e80 <main>

08002ac6 <LoopForever>:

LoopForever:
  b LoopForever
 8002ac6:	e7fe      	b.n	8002ac6 <LoopForever>
  ldr   r0, =_estack
 8002ac8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002ad4:	08007e40 	.word	0x08007e40
  ldr r2, =_sbss
 8002ad8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002adc:	200002d8 	.word	0x200002d8

08002ae0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ae0:	e7fe      	b.n	8002ae0 <ADC1_IRQHandler>
	...

08002ae4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aea:	1dfb      	adds	r3, r7, #7
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_Init+0x3c>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_Init+0x3c>)
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	0049      	lsls	r1, r1, #1
 8002afa:	430a      	orrs	r2, r1
 8002afc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 f810 	bl	8002b24 <HAL_InitTick>
 8002b04:	1e03      	subs	r3, r0, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e001      	b.n	8002b14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002b10:	f7ff fd34 	bl	800257c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b14:	1dfb      	adds	r3, r7, #7
 8002b16:	781b      	ldrb	r3, [r3, #0]
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40022000 	.word	0x40022000

08002b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b2c:	230f      	movs	r3, #15
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_InitTick+0x88>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d02b      	beq.n	8002b94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_InitTick+0x8c>)
 8002b3e:	681c      	ldr	r4, [r3, #0]
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_InitTick+0x88>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	0019      	movs	r1, r3
 8002b46:	23fa      	movs	r3, #250	; 0xfa
 8002b48:	0098      	lsls	r0, r3, #2
 8002b4a:	f7fd fad9 	bl	8000100 <__udivsi3>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	0019      	movs	r1, r3
 8002b52:	0020      	movs	r0, r4
 8002b54:	f7fd fad4 	bl	8000100 <__udivsi3>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f96f 	bl	8002e3e <HAL_SYSTICK_Config>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d112      	bne.n	8002b8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d80a      	bhi.n	8002b80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	425b      	negs	r3, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	0018      	movs	r0, r3
 8002b74:	f000 f92e 	bl	8002dd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_InitTick+0x90>)
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00d      	b.n	8002b9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b80:	230f      	movs	r3, #15
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e008      	b.n	8002b9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b8a:	230f      	movs	r3, #15
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e003      	b.n	8002b9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b94:	230f      	movs	r3, #15
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b9c:	230f      	movs	r3, #15
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b005      	add	sp, #20
 8002ba8:	bd90      	pop	{r4, r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	20000014 	.word	0x20000014
 8002bb0:	2000000c 	.word	0x2000000c
 8002bb4:	20000010 	.word	0x20000010

08002bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_IncTick+0x1c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_IncTick+0x20>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	18d2      	adds	r2, r2, r3
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <HAL_IncTick+0x20>)
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	20000014 	.word	0x20000014
 8002bd8:	200002d4 	.word	0x200002d4

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <HAL_GetTick+0x10>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	200002d4 	.word	0x200002d4

08002bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3301      	adds	r3, #1
 8002c08:	d005      	beq.n	8002c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_Delay+0x44>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	001a      	movs	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	f7ff ffe0 	bl	8002bdc <HAL_GetTick>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8f7      	bhi.n	8002c18 <HAL_Delay+0x28>
  {
  }
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	20000014 	.word	0x20000014

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	0002      	movs	r2, r0
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4a:	d809      	bhi.n	8002c60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	001a      	movs	r2, r3
 8002c52:	231f      	movs	r3, #31
 8002c54:	401a      	ands	r2, r3
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <__NVIC_EnableIRQ+0x30>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4091      	lsls	r1, r2
 8002c5c:	000a      	movs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	0002      	movs	r2, r0
 8002c74:	1dfb      	adds	r3, r7, #7
 8002c76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	1dfb      	adds	r3, r7, #7
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7e:	d810      	bhi.n	8002ca2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c80:	1dfb      	adds	r3, r7, #7
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	001a      	movs	r2, r3
 8002c86:	231f      	movs	r3, #31
 8002c88:	4013      	ands	r3, r2
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_DisableIRQ+0x40>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	0013      	movs	r3, r2
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c96:	f3bf 8f4f 	dsb	sy
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002c9c:	f3bf 8f6f 	isb	sy
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	e000e100 	.word	0xe000e100

08002cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	6039      	str	r1, [r7, #0]
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc4:	d828      	bhi.n	8002d18 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cc6:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <__NVIC_SetPriority+0xd4>)
 8002cc8:	1dfb      	adds	r3, r7, #7
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	33c0      	adds	r3, #192	; 0xc0
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	589b      	ldr	r3, [r3, r2]
 8002cd6:	1dfa      	adds	r2, r7, #7
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	0011      	movs	r1, r2
 8002cdc:	2203      	movs	r2, #3
 8002cde:	400a      	ands	r2, r1
 8002ce0:	00d2      	lsls	r2, r2, #3
 8002ce2:	21ff      	movs	r1, #255	; 0xff
 8002ce4:	4091      	lsls	r1, r2
 8002ce6:	000a      	movs	r2, r1
 8002ce8:	43d2      	mvns	r2, r2
 8002cea:	401a      	ands	r2, r3
 8002cec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	019b      	lsls	r3, r3, #6
 8002cf2:	22ff      	movs	r2, #255	; 0xff
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	4003      	ands	r3, r0
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d04:	481f      	ldr	r0, [pc, #124]	; (8002d84 <__NVIC_SetPriority+0xd4>)
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b25b      	sxtb	r3, r3
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	33c0      	adds	r3, #192	; 0xc0
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d16:	e031      	b.n	8002d7c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d18:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <__NVIC_SetPriority+0xd8>)
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	0019      	movs	r1, r3
 8002d20:	230f      	movs	r3, #15
 8002d22:	400b      	ands	r3, r1
 8002d24:	3b08      	subs	r3, #8
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3306      	adds	r3, #6
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	18d3      	adds	r3, r2, r3
 8002d2e:	3304      	adds	r3, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	1dfa      	adds	r2, r7, #7
 8002d34:	7812      	ldrb	r2, [r2, #0]
 8002d36:	0011      	movs	r1, r2
 8002d38:	2203      	movs	r2, #3
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	00d2      	lsls	r2, r2, #3
 8002d3e:	21ff      	movs	r1, #255	; 0xff
 8002d40:	4091      	lsls	r1, r2
 8002d42:	000a      	movs	r2, r1
 8002d44:	43d2      	mvns	r2, r2
 8002d46:	401a      	ands	r2, r3
 8002d48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	401a      	ands	r2, r3
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	0018      	movs	r0, r3
 8002d58:	2303      	movs	r3, #3
 8002d5a:	4003      	ands	r3, r0
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d60:	4809      	ldr	r0, [pc, #36]	; (8002d88 <__NVIC_SetPriority+0xd8>)
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	001c      	movs	r4, r3
 8002d68:	230f      	movs	r3, #15
 8002d6a:	4023      	ands	r3, r4
 8002d6c:	3b08      	subs	r3, #8
 8002d6e:	089b      	lsrs	r3, r3, #2
 8002d70:	430a      	orrs	r2, r1
 8002d72:	3306      	adds	r3, #6
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	18c3      	adds	r3, r0, r3
 8002d78:	3304      	adds	r3, #4
 8002d7a:	601a      	str	r2, [r3, #0]
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b003      	add	sp, #12
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	e000e100 	.word	0xe000e100
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1e5a      	subs	r2, r3, #1
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	045b      	lsls	r3, r3, #17
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d301      	bcc.n	8002da4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da0:	2301      	movs	r3, #1
 8002da2:	e010      	b.n	8002dc6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <SysTick_Config+0x44>)
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	3a01      	subs	r2, #1
 8002daa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dac:	2301      	movs	r3, #1
 8002dae:	425b      	negs	r3, r3
 8002db0:	2103      	movs	r1, #3
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff ff7c 	bl	8002cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <SysTick_Config+0x44>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SysTick_Config+0x44>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	210f      	movs	r1, #15
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	1c02      	adds	r2, r0, #0
 8002de4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	187b      	adds	r3, r7, r1
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f7ff ff5d 	bl	8002cb0 <__NVIC_SetPriority>
}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	0002      	movs	r2, r0
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0a:	1dfb      	adds	r3, r7, #7
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7ff ff11 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b002      	add	sp, #8
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	0002      	movs	r2, r0
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff ff1b 	bl	8002c6c <__NVIC_DisableIRQ>
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7ff ff9f 	bl	8002d8c <SysTick_Config>
 8002e4e:	0003      	movs	r3, r0
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e077      	b.n	8002f5a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3d      	ldr	r2, [pc, #244]	; (8002f64 <HAL_DMA_Init+0x10c>)
 8002e70:	4694      	mov	ip, r2
 8002e72:	4463      	add	r3, ip
 8002e74:	2114      	movs	r1, #20
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7fd f942 	bl	8000100 <__udivsi3>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2225      	movs	r2, #37	; 0x25
 8002e88:	2102      	movs	r1, #2
 8002e8a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4934      	ldr	r1, [pc, #208]	; (8002f68 <HAL_DMA_Init+0x110>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f000 fa3f 	bl	8003358 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	01db      	lsls	r3, r3, #7
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d102      	bne.n	8002eec <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	213f      	movs	r1, #63	; 0x3f
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002f02:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d011      	beq.n	8002f30 <HAL_DMA_Init+0xd8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d80d      	bhi.n	8002f30 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fa4a 	bl	80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	e008      	b.n	8002f42 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2225      	movs	r2, #37	; 0x25
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	; 0x24
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	bffdfff8 	.word	0xbffdfff8
 8002f68:	ffff800f 	.word	0xffff800f

08002f6c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e066      	b.n	800304c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_DMA_DeInit+0xe8>)
 8002f94:	4694      	mov	ip, r2
 8002f96:	4463      	add	r3, ip
 8002f98:	2114      	movs	r1, #20
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f8b0 	bl	8000100 <__udivsi3>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002fb0:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_DMA_DeInit+0xec>)
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	221c      	movs	r2, #28
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	4b25      	ldr	r3, [pc, #148]	; (8003058 <HAL_DMA_DeInit+0xec>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 f9c5 	bl	8003358 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fde:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d010      	beq.n	800300a <HAL_DMA_DeInit+0x9e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d80c      	bhi.n	800300a <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f000 f9dc 	bl	80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003008:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2225      	movs	r2, #37	; 0x25
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2224      	movs	r2, #36	; 0x24
 8003046:	2100      	movs	r1, #0
 8003048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}
 8003054:	bffdfff8 	.word	0xbffdfff8
 8003058:	40020000 	.word	0x40020000

0800305c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e050      	b.n	8003110 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2225      	movs	r2, #37	; 0x25
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d008      	beq.n	800308c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2204      	movs	r2, #4
 800307e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e041      	b.n	8003110 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	210e      	movs	r1, #14
 8003098:	438a      	bics	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	491c      	ldr	r1, [pc, #112]	; (8003118 <HAL_DMA_Abort+0xbc>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	438a      	bics	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80030bc:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_DMA_Abort+0xc0>)
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	221c      	movs	r2, #28
 80030c6:	4013      	ands	r3, r2
 80030c8:	2201      	movs	r2, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	4b13      	ldr	r3, [pc, #76]	; (800311c <HAL_DMA_Abort+0xc0>)
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80030da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_DMA_Abort+0xbc>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80030fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2225      	movs	r2, #37	; 0x25
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2224      	movs	r2, #36	; 0x24
 800310a:	2100      	movs	r1, #0
 800310c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	fffffeff 	.word	0xfffffeff
 800311c:	40020000 	.word	0x40020000

08003120 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003128:	210f      	movs	r1, #15
 800312a:	187b      	adds	r3, r7, r1
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2225      	movs	r2, #37	; 0x25
 8003134:	5c9b      	ldrb	r3, [r3, r2]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d006      	beq.n	800314a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2204      	movs	r2, #4
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e049      	b.n	80031de <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	210e      	movs	r1, #14
 8003156:	438a      	bics	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	438a      	bics	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	491d      	ldr	r1, [pc, #116]	; (80031ec <HAL_DMA_Abort_IT+0xcc>)
 8003176:	400a      	ands	r2, r1
 8003178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_DMA_Abort_IT+0xd0>)
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	221c      	movs	r2, #28
 8003184:	4013      	ands	r3, r2
 8003186:	2201      	movs	r2, #1
 8003188:	409a      	lsls	r2, r3
 800318a:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_DMA_Abort_IT+0xd0>)
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003198:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	490f      	ldr	r1, [pc, #60]	; (80031ec <HAL_DMA_Abort_IT+0xcc>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2225      	movs	r2, #37	; 0x25
 80031c0:	2101      	movs	r1, #1
 80031c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2224      	movs	r2, #36	; 0x24
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	0010      	movs	r0, r2
 80031dc:	4798      	blx	r3
    }
  }
  return status;
 80031de:	230f      	movs	r3, #15
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffffeff 	.word	0xfffffeff
 80031f0:	40020000 	.word	0x40020000

080031f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80031fc:	4b55      	ldr	r3, [pc, #340]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	221c      	movs	r2, #28
 8003210:	4013      	ands	r3, r2
 8003212:	2204      	movs	r2, #4
 8003214:	409a      	lsls	r2, r3
 8003216:	0013      	movs	r3, r2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	4013      	ands	r3, r2
 800321c:	d027      	beq.n	800326e <HAL_DMA_IRQHandler+0x7a>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d023      	beq.n	800326e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2220      	movs	r2, #32
 800322e:	4013      	ands	r3, r2
 8003230:	d107      	bne.n	8003242 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2104      	movs	r1, #4
 800323e:	438a      	bics	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003242:	4b44      	ldr	r3, [pc, #272]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	221c      	movs	r2, #28
 800324c:	4013      	ands	r3, r2
 800324e:	2204      	movs	r2, #4
 8003250:	409a      	lsls	r2, r3
 8003252:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	2b00      	cmp	r3, #0
 800325e:	d100      	bne.n	8003262 <HAL_DMA_IRQHandler+0x6e>
 8003260:	e073      	b.n	800334a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	0010      	movs	r0, r2
 800326a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800326c:	e06d      	b.n	800334a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	221c      	movs	r2, #28
 8003274:	4013      	ands	r3, r2
 8003276:	2202      	movs	r2, #2
 8003278:	409a      	lsls	r2, r3
 800327a:	0013      	movs	r3, r2
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4013      	ands	r3, r2
 8003280:	d02e      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xec>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2202      	movs	r2, #2
 8003286:	4013      	ands	r3, r2
 8003288:	d02a      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2220      	movs	r2, #32
 8003292:	4013      	ands	r3, r2
 8003294:	d10b      	bne.n	80032ae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	210a      	movs	r1, #10
 80032a2:	438a      	bics	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2225      	movs	r2, #37	; 0x25
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80032ae:	4b29      	ldr	r3, [pc, #164]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	221c      	movs	r2, #28
 80032b8:	4013      	ands	r3, r2
 80032ba:	2202      	movs	r2, #2
 80032bc:	409a      	lsls	r2, r3
 80032be:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2224      	movs	r2, #36	; 0x24
 80032c8:	2100      	movs	r1, #0
 80032ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d03a      	beq.n	800334a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	0010      	movs	r0, r2
 80032dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80032de:	e034      	b.n	800334a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	221c      	movs	r2, #28
 80032e6:	4013      	ands	r3, r2
 80032e8:	2208      	movs	r2, #8
 80032ea:	409a      	lsls	r2, r3
 80032ec:	0013      	movs	r3, r2
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	d02b      	beq.n	800334c <HAL_DMA_IRQHandler+0x158>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2208      	movs	r2, #8
 80032f8:	4013      	ands	r3, r2
 80032fa:	d027      	beq.n	800334c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	210e      	movs	r1, #14
 8003308:	438a      	bics	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800330c:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	221c      	movs	r2, #28
 8003316:	4013      	ands	r3, r2
 8003318:	2201      	movs	r2, #1
 800331a:	409a      	lsls	r2, r3
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_DMA_IRQHandler+0x160>)
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2225      	movs	r2, #37	; 0x25
 800332c:	2101      	movs	r1, #1
 800332e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	2100      	movs	r1, #0
 8003336:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	0010      	movs	r0, r2
 8003348:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46c0      	nop			; (mov r8, r8)
}
 800334e:	46bd      	mov	sp, r7
 8003350:	b004      	add	sp, #16
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40020000 	.word	0x40020000

08003358 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003368:	4694      	mov	ip, r2
 800336a:	4463      	add	r3, ip
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	001a      	movs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	001a      	movs	r2, r3
 800337a:	23ff      	movs	r3, #255	; 0xff
 800337c:	4013      	ands	r3, r2
 800337e:	3b08      	subs	r3, #8
 8003380:	2114      	movs	r1, #20
 8003382:	0018      	movs	r0, r3
 8003384:	f7fc febc 	bl	8000100 <__udivsi3>
 8003388:	0003      	movs	r3, r0
 800338a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a07      	ldr	r2, [pc, #28]	; (80033ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003390:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	221f      	movs	r2, #31
 8003396:	4013      	ands	r3, r2
 8003398:	2201      	movs	r2, #1
 800339a:	409a      	lsls	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b004      	add	sp, #16
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	10008200 	.word	0x10008200
 80033ac:	40020880 	.word	0x40020880

080033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	223f      	movs	r2, #63	; 0x3f
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033c6:	4694      	mov	ip, r2
 80033c8:	4463      	add	r3, ip
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	001a      	movs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3b01      	subs	r3, #1
 80033dc:	2203      	movs	r2, #3
 80033de:	4013      	ands	r3, r2
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b004      	add	sp, #16
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	1000823f 	.word	0x1000823f
 80033f4:	40020940 	.word	0x40020940

080033f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	e147      	b.n	8003698 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4091      	lsls	r1, r2
 8003412:	000a      	movs	r2, r1
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d100      	bne.n	8003420 <HAL_GPIO_Init+0x28>
 800341e:	e138      	b.n	8003692 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2203      	movs	r2, #3
 8003426:	4013      	ands	r3, r2
 8003428:	2b01      	cmp	r3, #1
 800342a:	d005      	beq.n	8003438 <HAL_GPIO_Init+0x40>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2203      	movs	r2, #3
 8003432:	4013      	ands	r3, r2
 8003434:	2b02      	cmp	r3, #2
 8003436:	d130      	bne.n	800349a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	409a      	lsls	r2, r3
 8003446:	0013      	movs	r3, r2
 8003448:	43da      	mvns	r2, r3
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4013      	ands	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	409a      	lsls	r2, r3
 800345a:	0013      	movs	r3, r2
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800346e:	2201      	movs	r2, #1
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
 8003474:	0013      	movs	r3, r2
 8003476:	43da      	mvns	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	2201      	movs	r2, #1
 8003486:	401a      	ands	r2, r3
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	409a      	lsls	r2, r3
 800348c:	0013      	movs	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d017      	beq.n	80034d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	2203      	movs	r2, #3
 80034b2:	409a      	lsls	r2, r3
 80034b4:	0013      	movs	r3, r2
 80034b6:	43da      	mvns	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	409a      	lsls	r2, r3
 80034c8:	0013      	movs	r3, r2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2203      	movs	r2, #3
 80034dc:	4013      	ands	r3, r2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d123      	bne.n	800352a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	08da      	lsrs	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3208      	adds	r2, #8
 80034ea:	0092      	lsls	r2, r2, #2
 80034ec:	58d3      	ldr	r3, [r2, r3]
 80034ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2207      	movs	r2, #7
 80034f4:	4013      	ands	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	220f      	movs	r2, #15
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2107      	movs	r1, #7
 800350e:	400b      	ands	r3, r1
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	08da      	lsrs	r2, r3, #3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3208      	adds	r2, #8
 8003524:	0092      	lsls	r2, r2, #2
 8003526:	6939      	ldr	r1, [r7, #16]
 8003528:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	409a      	lsls	r2, r3
 8003538:	0013      	movs	r3, r2
 800353a:	43da      	mvns	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2203      	movs	r2, #3
 8003548:	401a      	ands	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	23c0      	movs	r3, #192	; 0xc0
 8003564:	029b      	lsls	r3, r3, #10
 8003566:	4013      	ands	r3, r2
 8003568:	d100      	bne.n	800356c <HAL_GPIO_Init+0x174>
 800356a:	e092      	b.n	8003692 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800356c:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	3318      	adds	r3, #24
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	589b      	ldr	r3, [r3, r2]
 8003578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2203      	movs	r2, #3
 800357e:	4013      	ands	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	220f      	movs	r2, #15
 8003584:	409a      	lsls	r2, r3
 8003586:	0013      	movs	r3, r2
 8003588:	43da      	mvns	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	23a0      	movs	r3, #160	; 0xa0
 8003594:	05db      	lsls	r3, r3, #23
 8003596:	429a      	cmp	r2, r3
 8003598:	d013      	beq.n	80035c2 <HAL_GPIO_Init+0x1ca>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a45      	ldr	r2, [pc, #276]	; (80036b4 <HAL_GPIO_Init+0x2bc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00d      	beq.n	80035be <HAL_GPIO_Init+0x1c6>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a44      	ldr	r2, [pc, #272]	; (80036b8 <HAL_GPIO_Init+0x2c0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <HAL_GPIO_Init+0x1c2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a43      	ldr	r2, [pc, #268]	; (80036bc <HAL_GPIO_Init+0x2c4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d101      	bne.n	80035b6 <HAL_GPIO_Init+0x1be>
 80035b2:	2303      	movs	r3, #3
 80035b4:	e006      	b.n	80035c4 <HAL_GPIO_Init+0x1cc>
 80035b6:	2305      	movs	r3, #5
 80035b8:	e004      	b.n	80035c4 <HAL_GPIO_Init+0x1cc>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_Init+0x1cc>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_GPIO_Init+0x1cc>
 80035c2:	2300      	movs	r3, #0
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	2103      	movs	r1, #3
 80035c8:	400a      	ands	r2, r1
 80035ca:	00d2      	lsls	r2, r2, #3
 80035cc:	4093      	lsls	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80035d4:	4936      	ldr	r1, [pc, #216]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3318      	adds	r3, #24
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035e2:	4b33      	ldr	r3, [pc, #204]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4013      	ands	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	035b      	lsls	r3, r3, #13
 80035fa:	4013      	ands	r3, r2
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43da      	mvns	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	039b      	lsls	r3, r3, #14
 8003624:	4013      	ands	r3, r2
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003630:	4b1f      	ldr	r3, [pc, #124]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 8003638:	2384      	movs	r3, #132	; 0x84
 800363a:	58d3      	ldr	r3, [r2, r3]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	43da      	mvns	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	4013      	ands	r3, r2
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800365c:	4914      	ldr	r1, [pc, #80]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 800365e:	2284      	movs	r2, #132	; 0x84
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003664:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	58d3      	ldr	r3, [r2, r3]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43da      	mvns	r2, r3
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	025b      	lsls	r3, r3, #9
 800367e:	4013      	ands	r3, r2
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800368a:	4909      	ldr	r1, [pc, #36]	; (80036b0 <HAL_GPIO_Init+0x2b8>)
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3301      	adds	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	40da      	lsrs	r2, r3
 80036a0:	1e13      	subs	r3, r2, #0
 80036a2:	d000      	beq.n	80036a6 <HAL_GPIO_Init+0x2ae>
 80036a4:	e6b0      	b.n	8003408 <HAL_GPIO_Init+0x10>
  }
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b006      	add	sp, #24
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021800 	.word	0x40021800
 80036b4:	50000400 	.word	0x50000400
 80036b8:	50000800 	.word	0x50000800
 80036bc:	50000c00 	.word	0x50000c00

080036c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80036ce:	e0b4      	b.n	800383a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80036d0:	2201      	movs	r2, #1
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	409a      	lsls	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d100      	bne.n	80036e4 <HAL_GPIO_DeInit+0x24>
 80036e2:	e0a7      	b.n	8003834 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80036e4:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3318      	adds	r3, #24
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	589b      	ldr	r3, [r3, r2]
 80036f0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2203      	movs	r2, #3
 80036f6:	4013      	ands	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	220f      	movs	r2, #15
 80036fc:	409a      	lsls	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	23a0      	movs	r3, #160	; 0xa0
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	429a      	cmp	r2, r3
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_DeInit+0x76>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a50      	ldr	r2, [pc, #320]	; (8003854 <HAL_GPIO_DeInit+0x194>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_DeInit+0x72>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4f      	ldr	r2, [pc, #316]	; (8003858 <HAL_GPIO_DeInit+0x198>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_DeInit+0x6e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4e      	ldr	r2, [pc, #312]	; (800385c <HAL_GPIO_DeInit+0x19c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_DeInit+0x6a>
 8003726:	2303      	movs	r3, #3
 8003728:	e006      	b.n	8003738 <HAL_GPIO_DeInit+0x78>
 800372a:	2305      	movs	r3, #5
 800372c:	e004      	b.n	8003738 <HAL_GPIO_DeInit+0x78>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_DeInit+0x78>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_DeInit+0x78>
 8003736:	2300      	movs	r3, #0
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	2103      	movs	r1, #3
 800373c:	400a      	ands	r2, r1
 800373e:	00d2      	lsls	r2, r2, #3
 8003740:	4093      	lsls	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d136      	bne.n	80037b6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003748:	4a41      	ldr	r2, [pc, #260]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	58d3      	ldr	r3, [r2, r3]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	43d2      	mvns	r2, r2
 8003752:	493f      	ldr	r1, [pc, #252]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 8003754:	4013      	ands	r3, r2
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800375a:	4a3d      	ldr	r2, [pc, #244]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 800375c:	2384      	movs	r3, #132	; 0x84
 800375e:	58d3      	ldr	r3, [r2, r3]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	43d2      	mvns	r2, r2
 8003764:	493a      	ldr	r1, [pc, #232]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 8003766:	4013      	ands	r3, r2
 8003768:	2284      	movs	r2, #132	; 0x84
 800376a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800376c:	4b38      	ldr	r3, [pc, #224]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	43d9      	mvns	r1, r3
 8003774:	4b36      	ldr	r3, [pc, #216]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 8003776:	400a      	ands	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800377a:	4b35      	ldr	r3, [pc, #212]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43d9      	mvns	r1, r3
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 8003784:	400a      	ands	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2203      	movs	r2, #3
 800378c:	4013      	ands	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	220f      	movs	r2, #15
 8003792:	409a      	lsls	r2, r3
 8003794:	0013      	movs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003798:	4a2d      	ldr	r2, [pc, #180]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3318      	adds	r3, #24
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	589a      	ldr	r2, [r3, r2]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	4829      	ldr	r0, [pc, #164]	; (8003850 <HAL_GPIO_DeInit+0x190>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	400a      	ands	r2, r1
 80037b0:	3318      	adds	r3, #24
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	2103      	movs	r1, #3
 80037c0:	4099      	lsls	r1, r3
 80037c2:	000b      	movs	r3, r1
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	08da      	lsrs	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3208      	adds	r2, #8
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	58d3      	ldr	r3, [r2, r3]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	2107      	movs	r1, #7
 80037da:	400a      	ands	r2, r1
 80037dc:	0092      	lsls	r2, r2, #2
 80037de:	210f      	movs	r1, #15
 80037e0:	4091      	lsls	r1, r2
 80037e2:	000a      	movs	r2, r1
 80037e4:	43d1      	mvns	r1, r2
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	08d2      	lsrs	r2, r2, #3
 80037ea:	4019      	ands	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3208      	adds	r2, #8
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	0052      	lsls	r2, r2, #1
 80037fc:	2103      	movs	r1, #3
 80037fe:	4091      	lsls	r1, r2
 8003800:	000a      	movs	r2, r1
 8003802:	43d2      	mvns	r2, r2
 8003804:	401a      	ands	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2101      	movs	r1, #1
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	4091      	lsls	r1, r2
 8003814:	000a      	movs	r2, r1
 8003816:	43d2      	mvns	r2, r2
 8003818:	401a      	ands	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	0052      	lsls	r2, r2, #1
 8003826:	2103      	movs	r1, #3
 8003828:	4091      	lsls	r1, r2
 800382a:	000a      	movs	r2, r1
 800382c:	43d2      	mvns	r2, r2
 800382e:	401a      	ands	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	40da      	lsrs	r2, r3
 8003840:	1e13      	subs	r3, r2, #0
 8003842:	d000      	beq.n	8003846 <HAL_GPIO_DeInit+0x186>
 8003844:	e744      	b.n	80036d0 <HAL_GPIO_DeInit+0x10>
  }
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b006      	add	sp, #24
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021800 	.word	0x40021800
 8003854:	50000400 	.word	0x50000400
 8003858:	50000800 	.word	0x50000800
 800385c:	50000c00 	.word	0x50000c00

08003860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	0008      	movs	r0, r1
 800386a:	0011      	movs	r1, r2
 800386c:	1cbb      	adds	r3, r7, #2
 800386e:	1c02      	adds	r2, r0, #0
 8003870:	801a      	strh	r2, [r3, #0]
 8003872:	1c7b      	adds	r3, r7, #1
 8003874:	1c0a      	adds	r2, r1, #0
 8003876:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003878:	1c7b      	adds	r3, r7, #1
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d004      	beq.n	800388a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003880:	1cbb      	adds	r3, r7, #2
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e003      	b.n	8003892 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	1cbb      	adds	r3, r7, #2
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	b002      	add	sp, #8
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d11f      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	0013      	movs	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	189b      	adds	r3, r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4912      	ldr	r1, [pc, #72]	; (8003918 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fc fc16 	bl	8000100 <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	3301      	adds	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038da:	e008      	b.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e001      	b.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e009      	b.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	401a      	ands	r2, r3
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0ed      	beq.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	40007000 	.word	0x40007000
 8003910:	fffff9ff 	.word	0xfffff9ff
 8003914:	2000000c 	.word	0x2000000c
 8003918:	000f4240 	.word	0x000f4240

0800391c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	23e0      	movs	r3, #224	; 0xe0
 8003926:	01db      	lsls	r3, r3, #7
 8003928:	4013      	ands	r3, r2
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000

08003934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e2f3      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2201      	movs	r2, #1
 800394c:	4013      	ands	r3, r2
 800394e:	d100      	bne.n	8003952 <HAL_RCC_OscConfig+0x1e>
 8003950:	e07c      	b.n	8003a4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003952:	4bc3      	ldr	r3, [pc, #780]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2238      	movs	r2, #56	; 0x38
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800395c:	4bc0      	ldr	r3, [pc, #768]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2203      	movs	r2, #3
 8003962:	4013      	ands	r3, r2
 8003964:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	2b10      	cmp	r3, #16
 800396a:	d102      	bne.n	8003972 <HAL_RCC_OscConfig+0x3e>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d002      	beq.n	8003978 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d10b      	bne.n	8003990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	4bb9      	ldr	r3, [pc, #740]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	4013      	ands	r3, r2
 8003982:	d062      	beq.n	8003a4a <HAL_RCC_OscConfig+0x116>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d15e      	bne.n	8003a4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e2ce      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	025b      	lsls	r3, r3, #9
 8003998:	429a      	cmp	r2, r3
 800399a:	d107      	bne.n	80039ac <HAL_RCC_OscConfig+0x78>
 800399c:	4bb0      	ldr	r3, [pc, #704]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4baf      	ldr	r3, [pc, #700]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	0249      	lsls	r1, r1, #9
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e020      	b.n	80039ee <HAL_RCC_OscConfig+0xba>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	23a0      	movs	r3, #160	; 0xa0
 80039b2:	02db      	lsls	r3, r3, #11
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d10e      	bne.n	80039d6 <HAL_RCC_OscConfig+0xa2>
 80039b8:	4ba9      	ldr	r3, [pc, #676]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4ba8      	ldr	r3, [pc, #672]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	02c9      	lsls	r1, r1, #11
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	4ba6      	ldr	r3, [pc, #664]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4ba5      	ldr	r3, [pc, #660]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	0249      	lsls	r1, r1, #9
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e00b      	b.n	80039ee <HAL_RCC_OscConfig+0xba>
 80039d6:	4ba2      	ldr	r3, [pc, #648]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4ba1      	ldr	r3, [pc, #644]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039dc:	49a1      	ldr	r1, [pc, #644]	; (8003c64 <HAL_RCC_OscConfig+0x330>)
 80039de:	400a      	ands	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	4b9f      	ldr	r3, [pc, #636]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b9e      	ldr	r3, [pc, #632]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 80039e8:	499f      	ldr	r1, [pc, #636]	; (8003c68 <HAL_RCC_OscConfig+0x334>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d014      	beq.n	8003a20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7ff f8f1 	bl	8002bdc <HAL_GetTick>
 80039fa:	0003      	movs	r3, r0
 80039fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a00:	f7ff f8ec 	bl	8002bdc <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b64      	cmp	r3, #100	; 0x64
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e28d      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a12:	4b93      	ldr	r3, [pc, #588]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	029b      	lsls	r3, r3, #10
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0xcc>
 8003a1e:	e015      	b.n	8003a4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f8dc 	bl	8002bdc <HAL_GetTick>
 8003a24:	0003      	movs	r3, r0
 8003a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2a:	f7ff f8d7 	bl	8002bdc <HAL_GetTick>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	; 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e278      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2380      	movs	r3, #128	; 0x80
 8003a42:	029b      	lsls	r3, r3, #10
 8003a44:	4013      	ands	r3, r2
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0xf6>
 8003a48:	e000      	b.n	8003a4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2202      	movs	r2, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	d100      	bne.n	8003a58 <HAL_RCC_OscConfig+0x124>
 8003a56:	e099      	b.n	8003b8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a58:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2238      	movs	r2, #56	; 0x38
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a62:	4b7f      	ldr	r3, [pc, #508]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2203      	movs	r2, #3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b10      	cmp	r3, #16
 8003a70:	d102      	bne.n	8003a78 <HAL_RCC_OscConfig+0x144>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d002      	beq.n	8003a7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d135      	bne.n	8003aea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7e:	4b78      	ldr	r3, [pc, #480]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4013      	ands	r3, r2
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x162>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e24b      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b72      	ldr	r3, [pc, #456]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a74      	ldr	r2, [pc, #464]	; (8003c6c <HAL_RCC_OscConfig+0x338>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	021a      	lsls	r2, r3, #8
 8003aa6:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d112      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ab2:	4b6b      	ldr	r3, [pc, #428]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a6e      	ldr	r2, [pc, #440]	; (8003c70 <HAL_RCC_OscConfig+0x33c>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ac6:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	0adb      	lsrs	r3, r3, #11
 8003acc:	2207      	movs	r2, #7
 8003ace:	4013      	ands	r3, r2
 8003ad0:	4a68      	ldr	r2, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x340>)
 8003ad2:	40da      	lsrs	r2, r3
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_OscConfig+0x344>)
 8003ad6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_OscConfig+0x348>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff f821 	bl	8002b24 <HAL_InitTick>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d051      	beq.n	8003b8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e221      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d030      	beq.n	8003b54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a5e      	ldr	r2, [pc, #376]	; (8003c70 <HAL_RCC_OscConfig+0x33c>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	4b57      	ldr	r3, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b06:	4b56      	ldr	r3, [pc, #344]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0049      	lsls	r1, r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b14:	f7ff f862 	bl	8002bdc <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1e:	f7ff f85d 	bl	8002bdc <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1fe      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b30:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b3c:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <HAL_RCC_OscConfig+0x338>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	021a      	lsls	r2, r3, #8
 8003b4c:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	e01b      	b.n	8003b8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b54:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b41      	ldr	r3, [pc, #260]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	4949      	ldr	r1, [pc, #292]	; (8003c80 <HAL_RCC_OscConfig+0x34c>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b60:	f7ff f83c 	bl	8002bdc <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6a:	f7ff f837 	bl	8002bdc <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1d8      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b7c:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4013      	ands	r3, r2
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x236>
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	4013      	ands	r3, r2
 8003b94:	d047      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b96:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2238      	movs	r2, #56	; 0x38
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b18      	cmp	r3, #24
 8003ba0:	d10a      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d03c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d138      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e1ba      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d019      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003bc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7ff f806 	bl	8002bdc <HAL_GetTick>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7ff f801 	bl	8002bdc <HAL_GetTick>
 8003bda:	0002      	movs	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e1a2      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003be8:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	2202      	movs	r2, #2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d0f1      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x2a2>
 8003bf2:	e018      	b.n	8003c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003bf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fe ffec 	bl	8002bdc <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fe ffe7 	bl	8002bdc <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e188      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c1c:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d1f1      	bne.n	8003c0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d100      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2fe>
 8003c30:	e0c6      	b.n	8003dc0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	231f      	movs	r3, #31
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c3a:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2238      	movs	r2, #56	; 0x38
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b20      	cmp	r3, #32
 8003c44:	d11e      	bne.n	8003c84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x32c>)
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <HAL_RCC_OscConfig+0x31e>
 8003c50:	e0b6      	b.n	8003dc0 <HAL_RCC_OscConfig+0x48c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d000      	beq.n	8003c5c <HAL_RCC_OscConfig+0x328>
 8003c5a:	e0b1      	b.n	8003dc0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e166      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
 8003c60:	40021000 	.word	0x40021000
 8003c64:	fffeffff 	.word	0xfffeffff
 8003c68:	fffbffff 	.word	0xfffbffff
 8003c6c:	ffff80ff 	.word	0xffff80ff
 8003c70:	ffffc7ff 	.word	0xffffc7ff
 8003c74:	00f42400 	.word	0x00f42400
 8003c78:	2000000c 	.word	0x2000000c
 8003c7c:	20000010 	.word	0x20000010
 8003c80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c84:	4bac      	ldr	r3, [pc, #688]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	055b      	lsls	r3, r3, #21
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_OscConfig+0x360>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x362>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c9a:	4ba7      	ldr	r3, [pc, #668]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9e:	4ba6      	ldr	r3, [pc, #664]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0549      	lsls	r1, r1, #21
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ca8:	4ba3      	ldr	r3, [pc, #652]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	055b      	lsls	r3, r3, #21
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003cb6:	231f      	movs	r3, #31
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cbe:	4b9f      	ldr	r3, [pc, #636]	; (8003f3c <HAL_RCC_OscConfig+0x608>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d11a      	bne.n	8003d00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cca:	4b9c      	ldr	r3, [pc, #624]	; (8003f3c <HAL_RCC_OscConfig+0x608>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b9b      	ldr	r3, [pc, #620]	; (8003f3c <HAL_RCC_OscConfig+0x608>)
 8003cd0:	2180      	movs	r1, #128	; 0x80
 8003cd2:	0049      	lsls	r1, r1, #1
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003cd8:	f7fe ff80 	bl	8002bdc <HAL_GetTick>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce2:	f7fe ff7b 	bl	8002bdc <HAL_GetTick>
 8003ce6:	0002      	movs	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e11c      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cf4:	4b91      	ldr	r3, [pc, #580]	; (8003f3c <HAL_RCC_OscConfig+0x608>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d0f0      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d106      	bne.n	8003d16 <HAL_RCC_OscConfig+0x3e2>
 8003d08:	4b8b      	ldr	r3, [pc, #556]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d0c:	4b8a      	ldr	r3, [pc, #552]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d0e:	2101      	movs	r1, #1
 8003d10:	430a      	orrs	r2, r1
 8003d12:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d14:	e01c      	b.n	8003d50 <HAL_RCC_OscConfig+0x41c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d10c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x404>
 8003d1e:	4b86      	ldr	r3, [pc, #536]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d22:	4b85      	ldr	r3, [pc, #532]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d24:	2104      	movs	r1, #4
 8003d26:	430a      	orrs	r2, r1
 8003d28:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d2a:	4b83      	ldr	r3, [pc, #524]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d2e:	4b82      	ldr	r3, [pc, #520]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d30:	2101      	movs	r1, #1
 8003d32:	430a      	orrs	r2, r1
 8003d34:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x41c>
 8003d38:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d3c:	4b7e      	ldr	r3, [pc, #504]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d3e:	2101      	movs	r1, #1
 8003d40:	438a      	bics	r2, r1
 8003d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d44:	4b7c      	ldr	r3, [pc, #496]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d48:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	438a      	bics	r2, r1
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d014      	beq.n	8003d82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fe ff40 	bl	8002bdc <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d60:	e009      	b.n	8003d76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe ff3b 	bl	8002bdc <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4a74      	ldr	r2, [pc, #464]	; (8003f40 <HAL_RCC_OscConfig+0x60c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e0db      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d76:	4b70      	ldr	r3, [pc, #448]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x42e>
 8003d80:	e013      	b.n	8003daa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fe ff2b 	bl	8002bdc <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d8a:	e009      	b.n	8003da0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8c:	f7fe ff26 	bl	8002bdc <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	4a6a      	ldr	r2, [pc, #424]	; (8003f40 <HAL_RCC_OscConfig+0x60c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e0c6      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da0:	4b65      	ldr	r3, [pc, #404]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003daa:	231f      	movs	r3, #31
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003db4:	4b60      	ldr	r3, [pc, #384]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db8:	4b5f      	ldr	r3, [pc, #380]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003dba:	4962      	ldr	r1, [pc, #392]	; (8003f44 <HAL_RCC_OscConfig+0x610>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d100      	bne.n	8003dca <HAL_RCC_OscConfig+0x496>
 8003dc8:	e0b0      	b.n	8003f2c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dca:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2238      	movs	r2, #56	; 0x38
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d100      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4a4>
 8003dd6:	e078      	b.n	8003eca <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d153      	bne.n	8003e88 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de0:	4b55      	ldr	r3, [pc, #340]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b54      	ldr	r3, [pc, #336]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003de6:	4958      	ldr	r1, [pc, #352]	; (8003f48 <HAL_RCC_OscConfig+0x614>)
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fef6 	bl	8002bdc <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fe fef1 	bl	8002bdc <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e092      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	049b      	lsls	r3, r3, #18
 8003e10:	4013      	ands	r3, r2
 8003e12:	d1f0      	bne.n	8003df6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e14:	4b48      	ldr	r3, [pc, #288]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4a4c      	ldr	r2, [pc, #304]	; (8003f4c <HAL_RCC_OscConfig+0x618>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e42:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0449      	lsls	r1, r1, #17
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	0549      	lsls	r1, r1, #21
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fe febd 	bl	8002bdc <HAL_GetTick>
 8003e62:	0003      	movs	r3, r0
 8003e64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe feb8 	bl	8002bdc <HAL_GetTick>
 8003e6c:	0002      	movs	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e059      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	049b      	lsls	r3, r3, #18
 8003e82:	4013      	ands	r3, r2
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x534>
 8003e86:	e051      	b.n	8003f2c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003e8e:	492e      	ldr	r1, [pc, #184]	; (8003f48 <HAL_RCC_OscConfig+0x614>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe fea2 	bl	8002bdc <HAL_GetTick>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fe fe9d 	bl	8002bdc <HAL_GetTick>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e03e      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	049b      	lsls	r3, r3, #18
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003ec2:	4923      	ldr	r1, [pc, #140]	; (8003f50 <HAL_RCC_OscConfig+0x61c>)
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e030      	b.n	8003f2c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e02b      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ed6:	4b18      	ldr	r3, [pc, #96]	; (8003f38 <HAL_RCC_OscConfig+0x604>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d11e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2270      	movs	r2, #112	; 0x70
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d117      	bne.n	8003f28 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	23fe      	movs	r3, #254	; 0xfe
 8003efc:	01db      	lsls	r3, r3, #7
 8003efe:	401a      	ands	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d10e      	bne.n	8003f28 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	23f8      	movs	r3, #248	; 0xf8
 8003f0e:	039b      	lsls	r3, r3, #14
 8003f10:	401a      	ands	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d106      	bne.n	8003f28 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	0f5b      	lsrs	r3, r3, #29
 8003f1e:	075a      	lsls	r2, r3, #29
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	0018      	movs	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b008      	add	sp, #32
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	00001388 	.word	0x00001388
 8003f44:	efffffff 	.word	0xefffffff
 8003f48:	feffffff 	.word	0xfeffffff
 8003f4c:	1fc1808c 	.word	0x1fc1808c
 8003f50:	effefffc 	.word	0xeffefffc

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0e9      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b76      	ldr	r3, [pc, #472]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2207      	movs	r2, #7
 8003f6e:	4013      	ands	r3, r2
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d91e      	bls.n	8003fb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b73      	ldr	r3, [pc, #460]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	4393      	bics	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	4b70      	ldr	r3, [pc, #448]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f88:	f7fe fe28 	bl	8002bdc <HAL_GetTick>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f90:	e009      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f92:	f7fe fe23 	bl	8002bdc <HAL_GetTick>
 8003f96:	0002      	movs	r2, r0
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	4a6a      	ldr	r2, [pc, #424]	; (8004148 <HAL_RCC_ClockConfig+0x1f4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0ca      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fa6:	4b67      	ldr	r3, [pc, #412]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2207      	movs	r2, #7
 8003fac:	4013      	ands	r3, r2
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1ee      	bne.n	8003f92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d015      	beq.n	8003fea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d006      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fc8:	4b60      	ldr	r3, [pc, #384]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8003fce:	21e0      	movs	r1, #224	; 0xe0
 8003fd0:	01c9      	lsls	r1, r1, #7
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd6:	4b5d      	ldr	r3, [pc, #372]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4a5d      	ldr	r2, [pc, #372]	; (8004150 <HAL_RCC_ClockConfig+0x1fc>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d057      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	4013      	ands	r3, r2
 8004006:	d12b      	bne.n	8004060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e097      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004014:	4b4d      	ldr	r3, [pc, #308]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	049b      	lsls	r3, r3, #18
 800401c:	4013      	ands	r3, r2
 800401e:	d11f      	bne.n	8004060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e08b      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d107      	bne.n	800403c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800402c:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	4013      	ands	r3, r2
 8004036:	d113      	bne.n	8004060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e07f      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d106      	bne.n	8004052 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004044:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004048:	2202      	movs	r2, #2
 800404a:	4013      	ands	r3, r2
 800404c:	d108      	bne.n	8004060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e074      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004056:	2202      	movs	r2, #2
 8004058:	4013      	ands	r3, r2
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e06d      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004060:	4b3a      	ldr	r3, [pc, #232]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2207      	movs	r2, #7
 8004066:	4393      	bics	r3, r2
 8004068:	0019      	movs	r1, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004074:	f7fe fdb2 	bl	8002bdc <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407c:	e009      	b.n	8004092 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800407e:	f7fe fdad 	bl	8002bdc <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <HAL_RCC_ClockConfig+0x1f4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e054      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2238      	movs	r2, #56	; 0x38
 8004098:	401a      	ands	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d1ec      	bne.n	800407e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2207      	movs	r2, #7
 80040aa:	4013      	ands	r3, r2
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d21e      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b2:	4b24      	ldr	r3, [pc, #144]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2207      	movs	r2, #7
 80040b8:	4393      	bics	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040c4:	f7fe fd8a 	bl	8002bdc <HAL_GetTick>
 80040c8:	0003      	movs	r3, r0
 80040ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040cc:	e009      	b.n	80040e2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ce:	f7fe fd85 	bl	8002bdc <HAL_GetTick>
 80040d2:	0002      	movs	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_RCC_ClockConfig+0x1f4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e02c      	b.n	800413c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2207      	movs	r2, #7
 80040e8:	4013      	ands	r3, r2
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1ee      	bne.n	80040ce <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2204      	movs	r2, #4
 80040f6:	4013      	ands	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4a15      	ldr	r2, [pc, #84]	; (8004154 <HAL_RCC_ClockConfig+0x200>)
 8004100:	4013      	ands	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800410e:	f000 f829 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8004112:	0001      	movs	r1, r0
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	220f      	movs	r2, #15
 800411c:	401a      	ands	r2, r3
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <HAL_RCC_ClockConfig+0x204>)
 8004120:	0092      	lsls	r2, r2, #2
 8004122:	58d3      	ldr	r3, [r2, r3]
 8004124:	221f      	movs	r2, #31
 8004126:	4013      	ands	r3, r2
 8004128:	000a      	movs	r2, r1
 800412a:	40da      	lsrs	r2, r3
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_ClockConfig+0x208>)
 800412e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004130:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <HAL_RCC_ClockConfig+0x20c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0018      	movs	r0, r3
 8004136:	f7fe fcf5 	bl	8002b24 <HAL_InitTick>
 800413a:	0003      	movs	r3, r0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40022000 	.word	0x40022000
 8004148:	00001388 	.word	0x00001388
 800414c:	40021000 	.word	0x40021000
 8004150:	fffff0ff 	.word	0xfffff0ff
 8004154:	ffff8fff 	.word	0xffff8fff
 8004158:	08007d5c 	.word	0x08007d5c
 800415c:	2000000c 	.word	0x2000000c
 8004160:	20000010 	.word	0x20000010

08004164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800416a:	4b3c      	ldr	r3, [pc, #240]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2238      	movs	r2, #56	; 0x38
 8004170:	4013      	ands	r3, r2
 8004172:	d10f      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004174:	4b39      	ldr	r3, [pc, #228]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0adb      	lsrs	r3, r3, #11
 800417a:	2207      	movs	r2, #7
 800417c:	4013      	ands	r3, r2
 800417e:	2201      	movs	r2, #1
 8004180:	409a      	lsls	r2, r3
 8004182:	0013      	movs	r3, r2
 8004184:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	4835      	ldr	r0, [pc, #212]	; (8004260 <HAL_RCC_GetSysClockFreq+0xfc>)
 800418a:	f7fb ffb9 	bl	8000100 <__udivsi3>
 800418e:	0003      	movs	r3, r0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e05d      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2238      	movs	r2, #56	; 0x38
 800419a:	4013      	ands	r3, r2
 800419c:	2b08      	cmp	r3, #8
 800419e:	d102      	bne.n	80041a6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_RCC_GetSysClockFreq+0x100>)
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	e054      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a6:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2238      	movs	r2, #56	; 0x38
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d138      	bne.n	8004224 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2203      	movs	r2, #3
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041bc:	4b27      	ldr	r3, [pc, #156]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	2207      	movs	r2, #7
 80041c4:	4013      	ands	r3, r2
 80041c6:	3301      	adds	r3, #1
 80041c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d10d      	bne.n	80041ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	4824      	ldr	r0, [pc, #144]	; (8004264 <HAL_RCC_GetSysClockFreq+0x100>)
 80041d4:	f7fb ff94 	bl	8000100 <__udivsi3>
 80041d8:	0003      	movs	r3, r0
 80041da:	0019      	movs	r1, r3
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	0a1b      	lsrs	r3, r3, #8
 80041e2:	227f      	movs	r2, #127	; 0x7f
 80041e4:	4013      	ands	r3, r2
 80041e6:	434b      	muls	r3, r1
 80041e8:	617b      	str	r3, [r7, #20]
        break;
 80041ea:	e00d      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	481c      	ldr	r0, [pc, #112]	; (8004260 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041f0:	f7fb ff86 	bl	8000100 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	0019      	movs	r1, r3
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	227f      	movs	r2, #127	; 0x7f
 8004200:	4013      	ands	r3, r2
 8004202:	434b      	muls	r3, r1
 8004204:	617b      	str	r3, [r7, #20]
        break;
 8004206:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004208:	4b14      	ldr	r3, [pc, #80]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0f5b      	lsrs	r3, r3, #29
 800420e:	2207      	movs	r2, #7
 8004210:	4013      	ands	r3, r2
 8004212:	3301      	adds	r3, #1
 8004214:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	6978      	ldr	r0, [r7, #20]
 800421a:	f7fb ff71 	bl	8000100 <__udivsi3>
 800421e:	0003      	movs	r3, r0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e015      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004224:	4b0d      	ldr	r3, [pc, #52]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2238      	movs	r2, #56	; 0x38
 800422a:	4013      	ands	r3, r2
 800422c:	2b20      	cmp	r3, #32
 800422e:	d103      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_RCC_GetSysClockFreq+0xf8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2238      	movs	r2, #56	; 0x38
 800423e:	4013      	ands	r3, r2
 8004240:	2b18      	cmp	r3, #24
 8004242:	d103      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004244:	23fa      	movs	r3, #250	; 0xfa
 8004246:	01db      	lsls	r3, r3, #7
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	e001      	b.n	8004250 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004250:	693b      	ldr	r3, [r7, #16]
}
 8004252:	0018      	movs	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	b006      	add	sp, #24
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	40021000 	.word	0x40021000
 8004260:	00f42400 	.word	0x00f42400
 8004264:	007a1200 	.word	0x007a1200

08004268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b02      	ldr	r3, [pc, #8]	; (8004278 <HAL_RCC_GetHCLKFreq+0x10>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	2000000c 	.word	0x2000000c

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004280:	f7ff fff2 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004284:	0004      	movs	r4, r0
 8004286:	f7ff fb49 	bl	800391c <LL_RCC_GetAPB1Prescaler>
 800428a:	0003      	movs	r3, r0
 800428c:	0b1a      	lsrs	r2, r3, #12
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004290:	0092      	lsls	r2, r2, #2
 8004292:	58d3      	ldr	r3, [r2, r3]
 8004294:	221f      	movs	r2, #31
 8004296:	4013      	ands	r3, r2
 8004298:	40dc      	lsrs	r4, r3
 800429a:	0023      	movs	r3, r4
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	bdb0      	pop	{r4, r5, r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	08007d9c 	.word	0x08007d9c

080042a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042b0:	2313      	movs	r3, #19
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042b8:	2312      	movs	r3, #18
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	2200      	movs	r2, #0
 80042be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4013      	ands	r3, r2
 80042ca:	d100      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042cc:	e0a3      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	2011      	movs	r0, #17
 80042d0:	183b      	adds	r3, r7, r0
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b86      	ldr	r3, [pc, #536]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042da:	2380      	movs	r3, #128	; 0x80
 80042dc:	055b      	lsls	r3, r3, #21
 80042de:	4013      	ands	r3, r2
 80042e0:	d110      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	4b83      	ldr	r3, [pc, #524]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e6:	4b82      	ldr	r3, [pc, #520]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	0549      	lsls	r1, r1, #21
 80042ec:	430a      	orrs	r2, r1
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80042f0:	4b7f      	ldr	r3, [pc, #508]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80042f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	055b      	lsls	r3, r3, #21
 80042f8:	4013      	ands	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004304:	4b7b      	ldr	r3, [pc, #492]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	4b7a      	ldr	r3, [pc, #488]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	0049      	lsls	r1, r1, #1
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004312:	f7fe fc63 	bl	8002bdc <HAL_GetTick>
 8004316:	0003      	movs	r3, r0
 8004318:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800431a:	e00b      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fe fc5e 	bl	8002bdc <HAL_GetTick>
 8004320:	0002      	movs	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d904      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800432a:	2313      	movs	r3, #19
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2203      	movs	r2, #3
 8004330:	701a      	strb	r2, [r3, #0]
        break;
 8004332:	e005      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004334:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4013      	ands	r3, r2
 800433e:	d0ed      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004340:	2313      	movs	r3, #19
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d154      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800434a:	4b69      	ldr	r3, [pc, #420]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800434c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800434e:	23c0      	movs	r3, #192	; 0xc0
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4013      	ands	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d019      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d014      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004366:	4b62      	ldr	r3, [pc, #392]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	4a63      	ldr	r2, [pc, #396]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800436c:	4013      	ands	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004370:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004374:	4b5e      	ldr	r3, [pc, #376]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004376:	2180      	movs	r1, #128	; 0x80
 8004378:	0249      	lsls	r1, r1, #9
 800437a:	430a      	orrs	r2, r1
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004380:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004382:	4b5b      	ldr	r3, [pc, #364]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004384:	495d      	ldr	r1, [pc, #372]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004386:	400a      	ands	r2, r1
 8004388:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800438a:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2201      	movs	r2, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d016      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe fc20 	bl	8002bdc <HAL_GetTick>
 800439c:	0003      	movs	r3, r0
 800439e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a0:	e00c      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe fc1b 	bl	8002bdc <HAL_GetTick>
 80043a6:	0002      	movs	r2, r0
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	4a54      	ldr	r2, [pc, #336]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d904      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043b2:	2313      	movs	r3, #19
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2203      	movs	r2, #3
 80043b8:	701a      	strb	r2, [r3, #0]
            break;
 80043ba:	e004      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043bc:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	2202      	movs	r2, #2
 80043c2:	4013      	ands	r3, r2
 80043c4:	d0ed      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80043c6:	2313      	movs	r3, #19
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10a      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d0:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	4a48      	ldr	r2, [pc, #288]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	4b44      	ldr	r3, [pc, #272]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043e0:	430a      	orrs	r2, r1
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80043e4:	e00c      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043e6:	2312      	movs	r3, #18
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	2213      	movs	r2, #19
 80043ec:	18ba      	adds	r2, r7, r2
 80043ee:	7812      	ldrb	r2, [r2, #0]
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e005      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f4:	2312      	movs	r3, #18
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2213      	movs	r2, #19
 80043fa:	18ba      	adds	r2, r7, r2
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004400:	2311      	movs	r3, #17
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d105      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440a:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800440c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004410:	493c      	ldr	r1, [pc, #240]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004412:	400a      	ands	r2, r1
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	4013      	ands	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004424:	2203      	movs	r2, #3
 8004426:	4393      	bics	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004430:	430a      	orrs	r2, r1
 8004432:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2202      	movs	r2, #2
 800443a:	4013      	ands	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	220c      	movs	r2, #12
 8004444:	4393      	bics	r3, r2
 8004446:	0019      	movs	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	4b28      	ldr	r3, [pc, #160]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800444e:	430a      	orrs	r2, r1
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2220      	movs	r2, #32
 8004458:	4013      	ands	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800445c:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	4a29      	ldr	r2, [pc, #164]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800446c:	430a      	orrs	r2, r1
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	4013      	ands	r3, r2
 800447a:	d015      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800447c:	4b1c      	ldr	r3, [pc, #112]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	0899      	lsrs	r1, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800448a:	430a      	orrs	r2, r1
 800448c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	429a      	cmp	r2, r3
 8004498:	d106      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044a0:	2180      	movs	r1, #128	; 0x80
 80044a2:	0249      	lsls	r1, r1, #9
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	4013      	ands	r3, r2
 80044b2:	d016      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80044b4:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	0019      	movs	r1, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044c4:	430a      	orrs	r2, r1
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	2380      	movs	r3, #128	; 0x80
 80044ce:	01db      	lsls	r3, r3, #7
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d106      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044d4:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	0249      	lsls	r1, r1, #9
 80044de:	430a      	orrs	r2, r1
 80044e0:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044e2:	2312      	movs	r3, #18
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b006      	add	sp, #24
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
 80044f8:	fffffcff 	.word	0xfffffcff
 80044fc:	fffeffff 	.word	0xfffeffff
 8004500:	00001388 	.word	0x00001388
 8004504:	efffffff 	.word	0xefffffff
 8004508:	ffffcfff 	.word	0xffffcfff
 800450c:	ffff3fff 	.word	0xffff3fff

08004510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e04a      	b.n	80045b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	223d      	movs	r2, #61	; 0x3d
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d107      	bne.n	800453e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	223c      	movs	r2, #60	; 0x3c
 8004532:	2100      	movs	r1, #0
 8004534:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f7fe f897 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	223d      	movs	r2, #61	; 0x3d
 8004542:	2102      	movs	r1, #2
 8004544:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	3304      	adds	r3, #4
 800454e:	0019      	movs	r1, r3
 8004550:	0010      	movs	r0, r2
 8004552:	f000 fefb 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2248      	movs	r2, #72	; 0x48
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	223e      	movs	r2, #62	; 0x3e
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	223f      	movs	r2, #63	; 0x3f
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2240      	movs	r2, #64	; 0x40
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2241      	movs	r2, #65	; 0x41
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2242      	movs	r2, #66	; 0x42
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2243      	movs	r2, #67	; 0x43
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2244      	movs	r2, #68	; 0x44
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2245      	movs	r2, #69	; 0x45
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2246      	movs	r2, #70	; 0x46
 80045a2:	2101      	movs	r1, #1
 80045a4:	5499      	strb	r1, [r3, r2]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2247      	movs	r2, #71	; 0x47
 80045aa:	2101      	movs	r1, #1
 80045ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	223d      	movs	r2, #61	; 0x3d
 80045b2:	2101      	movs	r1, #1
 80045b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b002      	add	sp, #8
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e04a      	b.n	8004668 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	223d      	movs	r2, #61	; 0x3d
 80045d6:	5c9b      	ldrb	r3, [r3, r2]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d107      	bne.n	80045ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	223c      	movs	r2, #60	; 0x3c
 80045e2:	2100      	movs	r1, #0
 80045e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f841 	bl	8004670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	223d      	movs	r2, #61	; 0x3d
 80045f2:	2102      	movs	r1, #2
 80045f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	0019      	movs	r1, r3
 8004600:	0010      	movs	r0, r2
 8004602:	f000 fea3 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2248      	movs	r2, #72	; 0x48
 800460a:	2101      	movs	r1, #1
 800460c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	223e      	movs	r2, #62	; 0x3e
 8004612:	2101      	movs	r1, #1
 8004614:	5499      	strb	r1, [r3, r2]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	223f      	movs	r2, #63	; 0x3f
 800461a:	2101      	movs	r1, #1
 800461c:	5499      	strb	r1, [r3, r2]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2240      	movs	r2, #64	; 0x40
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2241      	movs	r2, #65	; 0x41
 800462a:	2101      	movs	r1, #1
 800462c:	5499      	strb	r1, [r3, r2]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2242      	movs	r2, #66	; 0x42
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2243      	movs	r2, #67	; 0x43
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2244      	movs	r2, #68	; 0x44
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2245      	movs	r2, #69	; 0x45
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2246      	movs	r2, #70	; 0x46
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2247      	movs	r2, #71	; 0x47
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	223d      	movs	r2, #61	; 0x3d
 8004662:	2101      	movs	r1, #1
 8004664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <HAL_TIM_PWM_Start+0x22>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	223e      	movs	r2, #62	; 0x3e
 8004694:	5c9b      	ldrb	r3, [r3, r2]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	1e5a      	subs	r2, r3, #1
 800469c:	4193      	sbcs	r3, r2
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	e037      	b.n	8004712 <HAL_TIM_PWM_Start+0x92>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d108      	bne.n	80046ba <HAL_TIM_PWM_Start+0x3a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	223f      	movs	r2, #63	; 0x3f
 80046ac:	5c9b      	ldrb	r3, [r3, r2]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	4193      	sbcs	r3, r2
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	e02b      	b.n	8004712 <HAL_TIM_PWM_Start+0x92>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d108      	bne.n	80046d2 <HAL_TIM_PWM_Start+0x52>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	5c9b      	ldrb	r3, [r3, r2]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	1e5a      	subs	r2, r3, #1
 80046cc:	4193      	sbcs	r3, r2
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	e01f      	b.n	8004712 <HAL_TIM_PWM_Start+0x92>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d108      	bne.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2241      	movs	r2, #65	; 0x41
 80046dc:	5c9b      	ldrb	r3, [r3, r2]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	1e5a      	subs	r2, r3, #1
 80046e4:	4193      	sbcs	r3, r2
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e013      	b.n	8004712 <HAL_TIM_PWM_Start+0x92>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d108      	bne.n	8004702 <HAL_TIM_PWM_Start+0x82>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2242      	movs	r2, #66	; 0x42
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	1e5a      	subs	r2, r3, #1
 80046fc:	4193      	sbcs	r3, r2
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	e007      	b.n	8004712 <HAL_TIM_PWM_Start+0x92>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2243      	movs	r2, #67	; 0x43
 8004706:	5c9b      	ldrb	r3, [r3, r2]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	1e5a      	subs	r2, r3, #1
 800470e:	4193      	sbcs	r3, r2
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e085      	b.n	8004826 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	223e      	movs	r2, #62	; 0x3e
 8004724:	2102      	movs	r1, #2
 8004726:	5499      	strb	r1, [r3, r2]
 8004728:	e023      	b.n	8004772 <HAL_TIM_PWM_Start+0xf2>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d104      	bne.n	800473a <HAL_TIM_PWM_Start+0xba>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	223f      	movs	r2, #63	; 0x3f
 8004734:	2102      	movs	r1, #2
 8004736:	5499      	strb	r1, [r3, r2]
 8004738:	e01b      	b.n	8004772 <HAL_TIM_PWM_Start+0xf2>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d104      	bne.n	800474a <HAL_TIM_PWM_Start+0xca>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	2102      	movs	r1, #2
 8004746:	5499      	strb	r1, [r3, r2]
 8004748:	e013      	b.n	8004772 <HAL_TIM_PWM_Start+0xf2>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d104      	bne.n	800475a <HAL_TIM_PWM_Start+0xda>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	; 0x41
 8004754:	2102      	movs	r1, #2
 8004756:	5499      	strb	r1, [r3, r2]
 8004758:	e00b      	b.n	8004772 <HAL_TIM_PWM_Start+0xf2>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b10      	cmp	r3, #16
 800475e:	d104      	bne.n	800476a <HAL_TIM_PWM_Start+0xea>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2242      	movs	r2, #66	; 0x42
 8004764:	2102      	movs	r1, #2
 8004766:	5499      	strb	r1, [r3, r2]
 8004768:	e003      	b.n	8004772 <HAL_TIM_PWM_Start+0xf2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2243      	movs	r2, #67	; 0x43
 800476e:	2102      	movs	r1, #2
 8004770:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	0018      	movs	r0, r3
 800477c:	f001 fadc 	bl	8005d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <HAL_TIM_PWM_Start+0x1b0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x128>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a29      	ldr	r2, [pc, #164]	; (8004834 <HAL_TIM_PWM_Start+0x1b4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x128>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a27      	ldr	r2, [pc, #156]	; (8004838 <HAL_TIM_PWM_Start+0x1b8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_TIM_PWM_Start+0x128>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a26      	ldr	r2, [pc, #152]	; (800483c <HAL_TIM_PWM_Start+0x1bc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d101      	bne.n	80047ac <HAL_TIM_PWM_Start+0x12c>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_TIM_PWM_Start+0x12e>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2180      	movs	r1, #128	; 0x80
 80047be:	0209      	lsls	r1, r1, #8
 80047c0:	430a      	orrs	r2, r1
 80047c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_TIM_PWM_Start+0x1b0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d009      	beq.n	80047e2 <HAL_TIM_PWM_Start+0x162>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <HAL_TIM_PWM_Start+0x1c0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d004      	beq.n	80047e2 <HAL_TIM_PWM_Start+0x162>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a15      	ldr	r2, [pc, #84]	; (8004834 <HAL_TIM_PWM_Start+0x1b4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d116      	bne.n	8004810 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIM_PWM_Start+0x1c4>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d016      	beq.n	8004822 <HAL_TIM_PWM_Start+0x1a2>
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	025b      	lsls	r3, r3, #9
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d011      	beq.n	8004822 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2101      	movs	r1, #1
 800480a:	430a      	orrs	r2, r1
 800480c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480e:	e008      	b.n	8004822 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2101      	movs	r1, #1
 800481c:	430a      	orrs	r2, r1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e000      	b.n	8004824 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004822:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	0018      	movs	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	b004      	add	sp, #16
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800
 8004840:	40000400 	.word	0x40000400
 8004844:	00010007 	.word	0x00010007

08004848 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e04a      	b.n	80048f0 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	223d      	movs	r2, #61	; 0x3d
 800485e:	5c9b      	ldrb	r3, [r3, r2]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d107      	bne.n	8004876 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	223c      	movs	r2, #60	; 0x3c
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f7fd fea7 	bl	80025c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	223d      	movs	r2, #61	; 0x3d
 800487a:	2102      	movs	r1, #2
 800487c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	0019      	movs	r1, r3
 8004888:	0010      	movs	r0, r2
 800488a:	f000 fd5f 	bl	800534c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2248      	movs	r2, #72	; 0x48
 8004892:	2101      	movs	r1, #1
 8004894:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	223e      	movs	r2, #62	; 0x3e
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	223f      	movs	r2, #63	; 0x3f
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	2101      	movs	r1, #1
 80048ac:	5499      	strb	r1, [r3, r2]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2241      	movs	r2, #65	; 0x41
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2242      	movs	r2, #66	; 0x42
 80048ba:	2101      	movs	r1, #1
 80048bc:	5499      	strb	r1, [r3, r2]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2243      	movs	r2, #67	; 0x43
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2244      	movs	r2, #68	; 0x44
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2245      	movs	r2, #69	; 0x45
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2246      	movs	r2, #70	; 0x46
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2247      	movs	r2, #71	; 0x47
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	223d      	movs	r2, #61	; 0x3d
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	0018      	movs	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	230f      	movs	r3, #15
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_TIM_IC_Start_IT+0x22>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	223e      	movs	r2, #62	; 0x3e
 8004914:	5c9b      	ldrb	r3, [r3, r2]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e023      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x6a>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d104      	bne.n	800492a <HAL_TIM_IC_Start_IT+0x32>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	223f      	movs	r2, #63	; 0x3f
 8004924:	5c9b      	ldrb	r3, [r3, r2]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e01b      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x6a>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d104      	bne.n	800493a <HAL_TIM_IC_Start_IT+0x42>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	5c9b      	ldrb	r3, [r3, r2]
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e013      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x6a>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d104      	bne.n	800494a <HAL_TIM_IC_Start_IT+0x52>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2241      	movs	r2, #65	; 0x41
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	e00b      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x6a>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b10      	cmp	r3, #16
 800494e:	d104      	bne.n	800495a <HAL_TIM_IC_Start_IT+0x62>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2242      	movs	r2, #66	; 0x42
 8004954:	5c9b      	ldrb	r3, [r3, r2]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e003      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x6a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2243      	movs	r2, #67	; 0x43
 800495e:	5c9b      	ldrb	r3, [r3, r2]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	220e      	movs	r2, #14
 8004964:	18ba      	adds	r2, r7, r2
 8004966:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <HAL_TIM_IC_Start_IT+0x80>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2244      	movs	r2, #68	; 0x44
 8004972:	5c9b      	ldrb	r3, [r3, r2]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e013      	b.n	80049a0 <HAL_TIM_IC_Start_IT+0xa8>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d104      	bne.n	8004988 <HAL_TIM_IC_Start_IT+0x90>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2245      	movs	r2, #69	; 0x45
 8004982:	5c9b      	ldrb	r3, [r3, r2]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e00b      	b.n	80049a0 <HAL_TIM_IC_Start_IT+0xa8>
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b08      	cmp	r3, #8
 800498c:	d104      	bne.n	8004998 <HAL_TIM_IC_Start_IT+0xa0>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2246      	movs	r2, #70	; 0x46
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	e003      	b.n	80049a0 <HAL_TIM_IC_Start_IT+0xa8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2247      	movs	r2, #71	; 0x47
 800499c:	5c9b      	ldrb	r3, [r3, r2]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	210d      	movs	r1, #13
 80049a2:	187a      	adds	r2, r7, r1
 80049a4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a6:	230e      	movs	r3, #14
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d103      	bne.n	80049b8 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b0:	187b      	adds	r3, r7, r1
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0c2      	b.n	8004b42 <HAL_TIM_IC_Start_IT+0x24a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_TIM_IC_Start_IT+0xd4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	223e      	movs	r2, #62	; 0x3e
 80049c6:	2102      	movs	r1, #2
 80049c8:	5499      	strb	r1, [r3, r2]
 80049ca:	e023      	b.n	8004a14 <HAL_TIM_IC_Start_IT+0x11c>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d104      	bne.n	80049dc <HAL_TIM_IC_Start_IT+0xe4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	223f      	movs	r2, #63	; 0x3f
 80049d6:	2102      	movs	r1, #2
 80049d8:	5499      	strb	r1, [r3, r2]
 80049da:	e01b      	b.n	8004a14 <HAL_TIM_IC_Start_IT+0x11c>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d104      	bne.n	80049ec <HAL_TIM_IC_Start_IT+0xf4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	2102      	movs	r1, #2
 80049e8:	5499      	strb	r1, [r3, r2]
 80049ea:	e013      	b.n	8004a14 <HAL_TIM_IC_Start_IT+0x11c>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	2b0c      	cmp	r3, #12
 80049f0:	d104      	bne.n	80049fc <HAL_TIM_IC_Start_IT+0x104>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2241      	movs	r2, #65	; 0x41
 80049f6:	2102      	movs	r1, #2
 80049f8:	5499      	strb	r1, [r3, r2]
 80049fa:	e00b      	b.n	8004a14 <HAL_TIM_IC_Start_IT+0x11c>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d104      	bne.n	8004a0c <HAL_TIM_IC_Start_IT+0x114>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2242      	movs	r2, #66	; 0x42
 8004a06:	2102      	movs	r1, #2
 8004a08:	5499      	strb	r1, [r3, r2]
 8004a0a:	e003      	b.n	8004a14 <HAL_TIM_IC_Start_IT+0x11c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2243      	movs	r2, #67	; 0x43
 8004a10:	2102      	movs	r1, #2
 8004a12:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <HAL_TIM_IC_Start_IT+0x12c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2244      	movs	r2, #68	; 0x44
 8004a1e:	2102      	movs	r1, #2
 8004a20:	5499      	strb	r1, [r3, r2]
 8004a22:	e013      	b.n	8004a4c <HAL_TIM_IC_Start_IT+0x154>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d104      	bne.n	8004a34 <HAL_TIM_IC_Start_IT+0x13c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2245      	movs	r2, #69	; 0x45
 8004a2e:	2102      	movs	r1, #2
 8004a30:	5499      	strb	r1, [r3, r2]
 8004a32:	e00b      	b.n	8004a4c <HAL_TIM_IC_Start_IT+0x154>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d104      	bne.n	8004a44 <HAL_TIM_IC_Start_IT+0x14c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2246      	movs	r2, #70	; 0x46
 8004a3e:	2102      	movs	r1, #2
 8004a40:	5499      	strb	r1, [r3, r2]
 8004a42:	e003      	b.n	8004a4c <HAL_TIM_IC_Start_IT+0x154>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2247      	movs	r2, #71	; 0x47
 8004a48:	2102      	movs	r1, #2
 8004a4a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d02a      	beq.n	8004aa8 <HAL_TIM_IC_Start_IT+0x1b0>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b0c      	cmp	r3, #12
 8004a56:	d830      	bhi.n	8004aba <HAL_TIM_IC_Start_IT+0x1c2>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d01b      	beq.n	8004a96 <HAL_TIM_IC_Start_IT+0x19e>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d82a      	bhi.n	8004aba <HAL_TIM_IC_Start_IT+0x1c2>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IC_Start_IT+0x17a>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d009      	beq.n	8004a84 <HAL_TIM_IC_Start_IT+0x18c>
 8004a70:	e023      	b.n	8004aba <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]
      break;
 8004a82:	e01f      	b.n	8004ac4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2104      	movs	r1, #4
 8004a90:	430a      	orrs	r2, r1
 8004a92:	60da      	str	r2, [r3, #12]
      break;
 8004a94:	e016      	b.n	8004ac4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2108      	movs	r1, #8
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	60da      	str	r2, [r3, #12]
      break;
 8004aa6:	e00d      	b.n	8004ac4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2110      	movs	r1, #16
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	60da      	str	r2, [r3, #12]
      break;
 8004ab8:	e004      	b.n	8004ac4 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8004aba:	230f      	movs	r3, #15
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
      break;
 8004ac2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004ac4:	230f      	movs	r3, #15
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d136      	bne.n	8004b3c <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f001 f92e 	bl	8005d38 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <HAL_TIM_IC_Start_IT+0x254>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x202>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_TIM_IC_Start_IT+0x258>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_TIM_IC_Start_IT+0x202>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a17      	ldr	r2, [pc, #92]	; (8004b54 <HAL_TIM_IC_Start_IT+0x25c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d116      	bne.n	8004b28 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a15      	ldr	r2, [pc, #84]	; (8004b58 <HAL_TIM_IC_Start_IT+0x260>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d016      	beq.n	8004b3a <HAL_TIM_IC_Start_IT+0x242>
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	2380      	movs	r3, #128	; 0x80
 8004b10:	025b      	lsls	r3, r3, #9
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d011      	beq.n	8004b3a <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	e008      	b.n	8004b3a <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2101      	movs	r1, #1
 8004b34:	430a      	orrs	r2, r1
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e000      	b.n	8004b3c <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3a:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004b3c:	230f      	movs	r3, #15
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	781b      	ldrb	r3, [r3, #0]
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b004      	add	sp, #16
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	00010007 	.word	0x00010007

08004b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d124      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d11d      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2203      	movs	r2, #3
 8004b86:	4252      	negs	r2, r2
 8004b88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2203      	movs	r2, #3
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fc ff14 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e007      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 fbb7 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 fbbb 	bl	800532c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d125      	bne.n	8004c16 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d11e      	bne.n	8004c16 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2205      	movs	r2, #5
 8004bde:	4252      	negs	r2, r2
 8004be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	23c0      	movs	r3, #192	; 0xc0
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f7fc fee7 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004bfe:	e007      	b.n	8004c10 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	0018      	movs	r0, r3
 8004c04:	f000 fb8a 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fb8e 	bl	800532c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d124      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d11d      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2209      	movs	r2, #9
 8004c38:	4252      	negs	r2, r2
 8004c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2203      	movs	r2, #3
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7fc febb 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004c56:	e007      	b.n	8004c68 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fb5e 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fb62 	bl	800532c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2210      	movs	r2, #16
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d125      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2210      	movs	r2, #16
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d11e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2211      	movs	r2, #17
 8004c90:	4252      	negs	r2, r2
 8004c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2208      	movs	r2, #8
 8004c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	23c0      	movs	r3, #192	; 0xc0
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7fc fe8e 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e007      	b.n	8004cc2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f000 fb31 	bl	800531c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fb35 	bl	800532c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10f      	bne.n	8004cf6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d108      	bne.n	8004cf6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	4252      	negs	r2, r2
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7fd f809 	bl	8001d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d10f      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2280      	movs	r2, #128	; 0x80
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d108      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2281      	movs	r2, #129	; 0x81
 8004d18:	4252      	negs	r2, r2
 8004d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f001 f89e 	bl	8005e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	401a      	ands	r2, r3
 8004d30:	2380      	movs	r3, #128	; 0x80
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d10e      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2280      	movs	r2, #128	; 0x80
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d107      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_TIM_IRQHandler+0x260>)
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f001 f88d 	bl	8005e70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2240      	movs	r2, #64	; 0x40
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d10f      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d108      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2241      	movs	r2, #65	; 0x41
 8004d78:	4252      	negs	r2, r2
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f000 fadc 	bl	800533c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d10f      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d108      	bne.n	8004db2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	4252      	negs	r2, r2
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f001 f84f 	bl	8005e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	46bd      	mov	sp, r7
 8004db6:	b002      	add	sp, #8
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	fffffeff 	.word	0xfffffeff

08004dc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2317      	movs	r3, #23
 8004dce:	18fb      	adds	r3, r7, r3
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	223c      	movs	r2, #60	; 0x3c
 8004dd8:	5c9b      	ldrb	r3, [r3, r2]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_IC_ConfigChannel+0x22>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e08c      	b.n	8004efc <HAL_TIM_IC_ConfigChannel+0x13c>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	223c      	movs	r2, #60	; 0x3c
 8004de6:	2101      	movs	r1, #1
 8004de8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11b      	bne.n	8004e28 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f000 fdde 	bl	80059c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	210c      	movs	r1, #12
 8004e10:	438a      	bics	r2, r1
 8004e12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6999      	ldr	r1, [r3, #24]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	619a      	str	r2, [r3, #24]
 8004e26:	e062      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d11c      	bne.n	8004e68 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6819      	ldr	r1, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f000 fe45 	bl	8005acc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699a      	ldr	r2, [r3, #24]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	492d      	ldr	r1, [pc, #180]	; (8004f04 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004e4e:	400a      	ands	r2, r1
 8004e50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6999      	ldr	r1, [r3, #24]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
 8004e66:	e042      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d11b      	bne.n	8004ea6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6818      	ldr	r0, [r3, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6819      	ldr	r1, [r3, #0]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f000 fe99 	bl	8005bb4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	210c      	movs	r1, #12
 8004e8e:	438a      	bics	r2, r1
 8004e90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
 8004ea4:	e023      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d11c      	bne.n	8004ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f000 feba 	bl	8005c34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	490e      	ldr	r1, [pc, #56]	; (8004f04 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004ecc:	400a      	ands	r2, r1
 8004ece:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	69d9      	ldr	r1, [r3, #28]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	021a      	lsls	r2, r3, #8
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	61da      	str	r2, [r3, #28]
 8004ee4:	e003      	b.n	8004eee <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004ee6:	2317      	movs	r3, #23
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2201      	movs	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	223c      	movs	r2, #60	; 0x3c
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	5499      	strb	r1, [r3, r2]

  return status;
 8004ef6:	2317      	movs	r3, #23
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	781b      	ldrb	r3, [r3, #0]
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b006      	add	sp, #24
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	fffff3ff 	.word	0xfffff3ff

08004f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2317      	movs	r3, #23
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	223c      	movs	r2, #60	; 0x3c
 8004f20:	5c9b      	ldrb	r3, [r3, r2]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0e5      	b.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	223c      	movs	r2, #60	; 0x3c
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b14      	cmp	r3, #20
 8004f36:	d900      	bls.n	8004f3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004f38:	e0d1      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	009a      	lsls	r2, r3, #2
 8004f3e:	4b70      	ldr	r3, [pc, #448]	; (8005100 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004f40:	18d3      	adds	r3, r2, r3
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	0011      	movs	r1, r2
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 fa72 	bl	8005438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2108      	movs	r1, #8
 8004f60:	430a      	orrs	r2, r1
 8004f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2104      	movs	r1, #4
 8004f70:	438a      	bics	r2, r1
 8004f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6999      	ldr	r1, [r3, #24]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	619a      	str	r2, [r3, #24]
      break;
 8004f86:	e0af      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	0011      	movs	r1, r2
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 fadb 	bl	800554c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	0109      	lsls	r1, r1, #4
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4954      	ldr	r1, [pc, #336]	; (8005104 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6999      	ldr	r1, [r3, #24]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	021a      	lsls	r2, r3, #8
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	619a      	str	r2, [r3, #24]
      break;
 8004fcc:	e08c      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	0011      	movs	r1, r2
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 fb3c 	bl	8005654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2108      	movs	r1, #8
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2104      	movs	r1, #4
 8004ff8:	438a      	bics	r2, r1
 8004ffa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69d9      	ldr	r1, [r3, #28]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	61da      	str	r2, [r3, #28]
      break;
 800500e:	e06b      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	0011      	movs	r1, r2
 8005018:	0018      	movs	r0, r3
 800501a:	f000 fba3 	bl	8005764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	0109      	lsls	r1, r1, #4
 800502c:	430a      	orrs	r2, r1
 800502e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4932      	ldr	r1, [pc, #200]	; (8005104 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800503c:	400a      	ands	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69d9      	ldr	r1, [r3, #28]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	021a      	lsls	r2, r3, #8
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	61da      	str	r2, [r3, #28]
      break;
 8005054:	e048      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	0011      	movs	r1, r2
 800505e:	0018      	movs	r0, r3
 8005060:	f000 fbea 	bl	8005838 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2108      	movs	r1, #8
 8005070:	430a      	orrs	r2, r1
 8005072:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2104      	movs	r1, #4
 8005080:	438a      	bics	r2, r1
 8005082:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005096:	e027      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	0011      	movs	r1, r2
 80050a0:	0018      	movs	r0, r3
 80050a2:	f000 fc29 	bl	80058f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	0109      	lsls	r1, r1, #4
 80050b4:	430a      	orrs	r2, r1
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4910      	ldr	r1, [pc, #64]	; (8005104 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80050c4:	400a      	ands	r2, r1
 80050c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050dc:	e004      	b.n	80050e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80050de:	2317      	movs	r3, #23
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	2201      	movs	r2, #1
 80050e4:	701a      	strb	r2, [r3, #0]
      break;
 80050e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	223c      	movs	r2, #60	; 0x3c
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

  return status;
 80050f0:	2317      	movs	r3, #23
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	781b      	ldrb	r3, [r3, #0]
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b006      	add	sp, #24
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	08007dbc 	.word	0x08007dbc
 8005104:	fffffbff 	.word	0xfffffbff

08005108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	230f      	movs	r3, #15
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	223c      	movs	r2, #60	; 0x3c
 800511e:	5c9b      	ldrb	r3, [r3, r2]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_TIM_ConfigClockSource+0x20>
 8005124:	2302      	movs	r3, #2
 8005126:	e0bc      	b.n	80052a2 <HAL_TIM_ConfigClockSource+0x19a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	223c      	movs	r2, #60	; 0x3c
 800512c:	2101      	movs	r1, #1
 800512e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	223d      	movs	r2, #61	; 0x3d
 8005134:	2102      	movs	r1, #2
 8005136:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <HAL_TIM_ConfigClockSource+0x1a4>)
 8005144:	4013      	ands	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4a59      	ldr	r2, [pc, #356]	; (80052b0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	0192      	lsls	r2, r2, #6
 8005160:	4293      	cmp	r3, r2
 8005162:	d040      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0xde>
 8005164:	2280      	movs	r2, #128	; 0x80
 8005166:	0192      	lsls	r2, r2, #6
 8005168:	4293      	cmp	r3, r2
 800516a:	d900      	bls.n	800516e <HAL_TIM_ConfigClockSource+0x66>
 800516c:	e088      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 800516e:	2280      	movs	r2, #128	; 0x80
 8005170:	0152      	lsls	r2, r2, #5
 8005172:	4293      	cmp	r3, r2
 8005174:	d100      	bne.n	8005178 <HAL_TIM_ConfigClockSource+0x70>
 8005176:	e088      	b.n	800528a <HAL_TIM_ConfigClockSource+0x182>
 8005178:	2280      	movs	r2, #128	; 0x80
 800517a:	0152      	lsls	r2, r2, #5
 800517c:	4293      	cmp	r3, r2
 800517e:	d900      	bls.n	8005182 <HAL_TIM_ConfigClockSource+0x7a>
 8005180:	e07e      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 8005182:	2b70      	cmp	r3, #112	; 0x70
 8005184:	d018      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xb0>
 8005186:	d900      	bls.n	800518a <HAL_TIM_ConfigClockSource+0x82>
 8005188:	e07a      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 800518a:	2b60      	cmp	r3, #96	; 0x60
 800518c:	d04f      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x126>
 800518e:	d900      	bls.n	8005192 <HAL_TIM_ConfigClockSource+0x8a>
 8005190:	e076      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 8005192:	2b50      	cmp	r3, #80	; 0x50
 8005194:	d03b      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x106>
 8005196:	d900      	bls.n	800519a <HAL_TIM_ConfigClockSource+0x92>
 8005198:	e072      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d057      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x146>
 800519e:	d900      	bls.n	80051a2 <HAL_TIM_ConfigClockSource+0x9a>
 80051a0:	e06e      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 80051a2:	2b30      	cmp	r3, #48	; 0x30
 80051a4:	d063      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051a6:	d86b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d060      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051ac:	d868      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d05d      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d05b      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x166>
 80051b6:	e063      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f000 fd96 	bl	8005cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2277      	movs	r2, #119	; 0x77
 80051d8:	4313      	orrs	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	609a      	str	r2, [r3, #8]
      break;
 80051e4:	e052      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6899      	ldr	r1, [r3, #8]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f000 fd7f 	bl	8005cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	01c9      	lsls	r1, r1, #7
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
      break;
 800520c:	e03e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	001a      	movs	r2, r3
 800521c:	f000 fc28 	bl	8005a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2150      	movs	r1, #80	; 0x50
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fd4a 	bl	8005cc0 <TIM_ITRx_SetConfig>
      break;
 800522c:	e02e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	001a      	movs	r2, r3
 800523c:	f000 fc88 	bl	8005b50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2160      	movs	r1, #96	; 0x60
 8005246:	0018      	movs	r0, r3
 8005248:	f000 fd3a 	bl	8005cc0 <TIM_ITRx_SetConfig>
      break;
 800524c:	e01e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	001a      	movs	r2, r3
 800525c:	f000 fc08 	bl	8005a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	0018      	movs	r0, r3
 8005268:	f000 fd2a 	bl	8005cc0 <TIM_ITRx_SetConfig>
      break;
 800526c:	e00e      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	0019      	movs	r1, r3
 8005278:	0010      	movs	r0, r2
 800527a:	f000 fd21 	bl	8005cc0 <TIM_ITRx_SetConfig>
      break;
 800527e:	e005      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005280:	230f      	movs	r3, #15
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
      break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800528a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	223d      	movs	r2, #61	; 0x3d
 8005290:	2101      	movs	r1, #1
 8005292:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	223c      	movs	r2, #60	; 0x3c
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]

  return status;
 800529c:	230f      	movs	r3, #15
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	781b      	ldrb	r3, [r3, #0]
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	ffceff88 	.word	0xffceff88
 80052b0:	ffff00ff 	.word	0xffff00ff

080052b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d01e      	beq.n	8005306 <HAL_TIM_ReadCapturedValue+0x52>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b0c      	cmp	r3, #12
 80052cc:	d820      	bhi.n	8005310 <HAL_TIM_ReadCapturedValue+0x5c>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d013      	beq.n	80052fc <HAL_TIM_ReadCapturedValue+0x48>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d81a      	bhi.n	8005310 <HAL_TIM_ReadCapturedValue+0x5c>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_TIM_ReadCapturedValue+0x34>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d005      	beq.n	80052f2 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80052e6:	e013      	b.n	8005310 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	60fb      	str	r3, [r7, #12]
      break;
 80052f0:	e00f      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	60fb      	str	r3, [r7, #12]
      break;
 80052fa:	e00a      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	60fb      	str	r3, [r7, #12]
      break;
 8005304:	e005      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	60fb      	str	r3, [r7, #12]
      break;
 800530e:	e000      	b.n	8005312 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005310:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	0018      	movs	r0, r3
 8005316:	46bd      	mov	sp, r7
 8005318:	b004      	add	sp, #16
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005324:	46c0      	nop			; (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}

0800534c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a2f      	ldr	r2, [pc, #188]	; (800541c <TIM_Base_SetConfig+0xd0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_Base_SetConfig+0x20>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a2e      	ldr	r2, [pc, #184]	; (8005420 <TIM_Base_SetConfig+0xd4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d108      	bne.n	800537e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2270      	movs	r2, #112	; 0x70
 8005370:	4393      	bics	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a26      	ldr	r2, [pc, #152]	; (800541c <TIM_Base_SetConfig+0xd0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <TIM_Base_SetConfig+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a25      	ldr	r2, [pc, #148]	; (8005420 <TIM_Base_SetConfig+0xd4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00f      	beq.n	80053ae <TIM_Base_SetConfig+0x62>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a24      	ldr	r2, [pc, #144]	; (8005424 <TIM_Base_SetConfig+0xd8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00b      	beq.n	80053ae <TIM_Base_SetConfig+0x62>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a23      	ldr	r2, [pc, #140]	; (8005428 <TIM_Base_SetConfig+0xdc>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <TIM_Base_SetConfig+0x62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a22      	ldr	r2, [pc, #136]	; (800542c <TIM_Base_SetConfig+0xe0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_Base_SetConfig+0x62>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a21      	ldr	r2, [pc, #132]	; (8005430 <TIM_Base_SetConfig+0xe4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d108      	bne.n	80053c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a20      	ldr	r2, [pc, #128]	; (8005434 <TIM_Base_SetConfig+0xe8>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2280      	movs	r2, #128	; 0x80
 80053c4:	4393      	bics	r3, r2
 80053c6:	001a      	movs	r2, r3
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a0c      	ldr	r2, [pc, #48]	; (800541c <TIM_Base_SetConfig+0xd0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_Base_SetConfig+0xba>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a0d      	ldr	r2, [pc, #52]	; (8005428 <TIM_Base_SetConfig+0xdc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_Base_SetConfig+0xba>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a0c      	ldr	r2, [pc, #48]	; (800542c <TIM_Base_SetConfig+0xe0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_Base_SetConfig+0xba>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <TIM_Base_SetConfig+0xe4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d103      	bne.n	800540e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	615a      	str	r2, [r3, #20]
}
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	46bd      	mov	sp, r7
 8005418:	b004      	add	sp, #16
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40012c00 	.word	0x40012c00
 8005420:	40000400 	.word	0x40000400
 8005424:	40002000 	.word	0x40002000
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	fffffcff 	.word	0xfffffcff

08005438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	2201      	movs	r2, #1
 8005448:	4393      	bics	r3, r2
 800544a:	001a      	movs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4a32      	ldr	r2, [pc, #200]	; (8005530 <TIM_OC1_SetConfig+0xf8>)
 8005466:	4013      	ands	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2203      	movs	r2, #3
 800546e:	4393      	bics	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2202      	movs	r2, #2
 8005480:	4393      	bics	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a28      	ldr	r2, [pc, #160]	; (8005534 <TIM_OC1_SetConfig+0xfc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00b      	beq.n	80054ae <TIM_OC1_SetConfig+0x76>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a27      	ldr	r2, [pc, #156]	; (8005538 <TIM_OC1_SetConfig+0x100>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <TIM_OC1_SetConfig+0x76>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a26      	ldr	r2, [pc, #152]	; (800553c <TIM_OC1_SetConfig+0x104>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_OC1_SetConfig+0x76>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a25      	ldr	r2, [pc, #148]	; (8005540 <TIM_OC1_SetConfig+0x108>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d10c      	bne.n	80054c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2208      	movs	r2, #8
 80054b2:	4393      	bics	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2204      	movs	r2, #4
 80054c4:	4393      	bics	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1a      	ldr	r2, [pc, #104]	; (8005534 <TIM_OC1_SetConfig+0xfc>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_OC1_SetConfig+0xb0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a19      	ldr	r2, [pc, #100]	; (8005538 <TIM_OC1_SetConfig+0x100>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <TIM_OC1_SetConfig+0xb0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <TIM_OC1_SetConfig+0x104>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_OC1_SetConfig+0xb0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a17      	ldr	r2, [pc, #92]	; (8005540 <TIM_OC1_SetConfig+0x108>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d111      	bne.n	800550c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4a16      	ldr	r2, [pc, #88]	; (8005544 <TIM_OC1_SetConfig+0x10c>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <TIM_OC1_SetConfig+0x110>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b006      	add	sp, #24
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	fffeff8f 	.word	0xfffeff8f
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	fffffeff 	.word	0xfffffeff
 8005548:	fffffdff 	.word	0xfffffdff

0800554c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	2210      	movs	r2, #16
 800555c:	4393      	bics	r3, r2
 800555e:	001a      	movs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a2e      	ldr	r2, [pc, #184]	; (8005634 <TIM_OC2_SetConfig+0xe8>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a2d      	ldr	r2, [pc, #180]	; (8005638 <TIM_OC2_SetConfig+0xec>)
 8005582:	4013      	ands	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2220      	movs	r2, #32
 8005596:	4393      	bics	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a24      	ldr	r2, [pc, #144]	; (800563c <TIM_OC2_SetConfig+0xf0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10d      	bne.n	80055ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2280      	movs	r2, #128	; 0x80
 80055b2:	4393      	bics	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2240      	movs	r2, #64	; 0x40
 80055c6:	4393      	bics	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1b      	ldr	r2, [pc, #108]	; (800563c <TIM_OC2_SetConfig+0xf0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00b      	beq.n	80055ea <TIM_OC2_SetConfig+0x9e>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <TIM_OC2_SetConfig+0xf4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d007      	beq.n	80055ea <TIM_OC2_SetConfig+0x9e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <TIM_OC2_SetConfig+0xf8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d003      	beq.n	80055ea <TIM_OC2_SetConfig+0x9e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a18      	ldr	r2, [pc, #96]	; (8005648 <TIM_OC2_SetConfig+0xfc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d113      	bne.n	8005612 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4a17      	ldr	r2, [pc, #92]	; (800564c <TIM_OC2_SetConfig+0x100>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4a16      	ldr	r2, [pc, #88]	; (8005650 <TIM_OC2_SetConfig+0x104>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b006      	add	sp, #24
 8005632:	bd80      	pop	{r7, pc}
 8005634:	feff8fff 	.word	0xfeff8fff
 8005638:	fffffcff 	.word	0xfffffcff
 800563c:	40012c00 	.word	0x40012c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800
 800564c:	fffffbff 	.word	0xfffffbff
 8005650:	fffff7ff 	.word	0xfffff7ff

08005654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4a35      	ldr	r2, [pc, #212]	; (8005738 <TIM_OC3_SetConfig+0xe4>)
 8005664:	401a      	ands	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a2f      	ldr	r2, [pc, #188]	; (800573c <TIM_OC3_SetConfig+0xe8>)
 8005680:	4013      	ands	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2203      	movs	r2, #3
 8005688:	4393      	bics	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4a29      	ldr	r2, [pc, #164]	; (8005740 <TIM_OC3_SetConfig+0xec>)
 800569a:	4013      	ands	r3, r2
 800569c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a25      	ldr	r2, [pc, #148]	; (8005744 <TIM_OC3_SetConfig+0xf0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10d      	bne.n	80056ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4a24      	ldr	r2, [pc, #144]	; (8005748 <TIM_OC3_SetConfig+0xf4>)
 80056b6:	4013      	ands	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4a20      	ldr	r2, [pc, #128]	; (800574c <TIM_OC3_SetConfig+0xf8>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <TIM_OC3_SetConfig+0xf0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_OC3_SetConfig+0x9a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <TIM_OC3_SetConfig+0xfc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_OC3_SetConfig+0x9a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <TIM_OC3_SetConfig+0x100>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC3_SetConfig+0x9a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <TIM_OC3_SetConfig+0x104>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d113      	bne.n	8005716 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	4a1a      	ldr	r2, [pc, #104]	; (800575c <TIM_OC3_SetConfig+0x108>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4a19      	ldr	r2, [pc, #100]	; (8005760 <TIM_OC3_SetConfig+0x10c>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b006      	add	sp, #24
 8005736:	bd80      	pop	{r7, pc}
 8005738:	fffffeff 	.word	0xfffffeff
 800573c:	fffeff8f 	.word	0xfffeff8f
 8005740:	fffffdff 	.word	0xfffffdff
 8005744:	40012c00 	.word	0x40012c00
 8005748:	fffff7ff 	.word	0xfffff7ff
 800574c:	fffffbff 	.word	0xfffffbff
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800
 800575c:	ffffefff 	.word	0xffffefff
 8005760:	ffffdfff 	.word	0xffffdfff

08005764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	4a28      	ldr	r2, [pc, #160]	; (8005814 <TIM_OC4_SetConfig+0xb0>)
 8005774:	401a      	ands	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a22      	ldr	r2, [pc, #136]	; (8005818 <TIM_OC4_SetConfig+0xb4>)
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a21      	ldr	r2, [pc, #132]	; (800581c <TIM_OC4_SetConfig+0xb8>)
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <TIM_OC4_SetConfig+0xbc>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	031b      	lsls	r3, r3, #12
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a19      	ldr	r2, [pc, #100]	; (8005824 <TIM_OC4_SetConfig+0xc0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_OC4_SetConfig+0x78>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a18      	ldr	r2, [pc, #96]	; (8005828 <TIM_OC4_SetConfig+0xc4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_OC4_SetConfig+0x78>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a17      	ldr	r2, [pc, #92]	; (800582c <TIM_OC4_SetConfig+0xc8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC4_SetConfig+0x78>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a16      	ldr	r2, [pc, #88]	; (8005830 <TIM_OC4_SetConfig+0xcc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d109      	bne.n	80057f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <TIM_OC4_SetConfig+0xd0>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	019b      	lsls	r3, r3, #6
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	46bd      	mov	sp, r7
 800580e:	b006      	add	sp, #24
 8005810:	bd80      	pop	{r7, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	ffffefff 	.word	0xffffefff
 8005818:	feff8fff 	.word	0xfeff8fff
 800581c:	fffffcff 	.word	0xfffffcff
 8005820:	ffffdfff 	.word	0xffffdfff
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40014000 	.word	0x40014000
 800582c:	40014400 	.word	0x40014400
 8005830:	40014800 	.word	0x40014800
 8005834:	ffffbfff 	.word	0xffffbfff

08005838 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	4a25      	ldr	r2, [pc, #148]	; (80058dc <TIM_OC5_SetConfig+0xa4>)
 8005848:	401a      	ands	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <TIM_OC5_SetConfig+0xa8>)
 8005864:	4013      	ands	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4a1b      	ldr	r2, [pc, #108]	; (80058e4 <TIM_OC5_SetConfig+0xac>)
 8005876:	4013      	ands	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <TIM_OC5_SetConfig+0xb0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_OC5_SetConfig+0x6e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a16      	ldr	r2, [pc, #88]	; (80058ec <TIM_OC5_SetConfig+0xb4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_OC5_SetConfig+0x6e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <TIM_OC5_SetConfig+0xb8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC5_SetConfig+0x6e>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <TIM_OC5_SetConfig+0xbc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d109      	bne.n	80058ba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <TIM_OC5_SetConfig+0xa4>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b006      	add	sp, #24
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	fffeffff 	.word	0xfffeffff
 80058e0:	fffeff8f 	.word	0xfffeff8f
 80058e4:	fffdffff 	.word	0xfffdffff
 80058e8:	40012c00 	.word	0x40012c00
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800

080058f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <TIM_OC6_SetConfig+0xa8>)
 8005908:	401a      	ands	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <TIM_OC6_SetConfig+0xac>)
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <TIM_OC6_SetConfig+0xb0>)
 8005938:	4013      	ands	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	051b      	lsls	r3, r3, #20
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a18      	ldr	r2, [pc, #96]	; (80059ac <TIM_OC6_SetConfig+0xb4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00b      	beq.n	8005968 <TIM_OC6_SetConfig+0x70>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a17      	ldr	r2, [pc, #92]	; (80059b0 <TIM_OC6_SetConfig+0xb8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d007      	beq.n	8005968 <TIM_OC6_SetConfig+0x70>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <TIM_OC6_SetConfig+0xbc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC6_SetConfig+0x70>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a15      	ldr	r2, [pc, #84]	; (80059b8 <TIM_OC6_SetConfig+0xc0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d109      	bne.n	800597c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4a14      	ldr	r2, [pc, #80]	; (80059bc <TIM_OC6_SetConfig+0xc4>)
 800596c:	4013      	ands	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	029b      	lsls	r3, r3, #10
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	46bd      	mov	sp, r7
 800599a:	b006      	add	sp, #24
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	ffefffff 	.word	0xffefffff
 80059a4:	feff8fff 	.word	0xfeff8fff
 80059a8:	ffdfffff 	.word	0xffdfffff
 80059ac:	40012c00 	.word	0x40012c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800
 80059bc:	fffbffff 	.word	0xfffbffff

080059c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	2201      	movs	r2, #1
 80059d4:	4393      	bics	r3, r2
 80059d6:	001a      	movs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <TIM_TI1_SetConfig+0xa4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_TI1_SetConfig+0x40>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <TIM_TI1_SetConfig+0xa8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_TI1_SetConfig+0x40>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <TIM_TI1_SetConfig+0xac>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d101      	bne.n	8005a04 <TIM_TI1_SetConfig+0x44>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <TIM_TI1_SetConfig+0x46>
 8005a04:	2300      	movs	r3, #0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d008      	beq.n	8005a1c <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	4393      	bics	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	e003      	b.n	8005a24 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	22f0      	movs	r2, #240	; 0xf0
 8005a28:	4393      	bics	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	22ff      	movs	r2, #255	; 0xff
 8005a32:	4013      	ands	r3, r2
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	220a      	movs	r2, #10
 8005a3e:	4393      	bics	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	220a      	movs	r2, #10
 8005a46:	4013      	ands	r3, r2
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b006      	add	sp, #24
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40014000 	.word	0x40014000

08005a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	2201      	movs	r2, #1
 8005a88:	4393      	bics	r3, r2
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	22f0      	movs	r2, #240	; 0xf0
 8005a9a:	4393      	bics	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	220a      	movs	r2, #10
 8005aac:	4393      	bics	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	621a      	str	r2, [r3, #32]
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b006      	add	sp, #24
 8005aca:	bd80      	pop	{r7, pc}

08005acc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	2210      	movs	r2, #16
 8005ae0:	4393      	bics	r3, r2
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <TIM_TI2_SetConfig+0x7c>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4a10      	ldr	r2, [pc, #64]	; (8005b4c <TIM_TI2_SetConfig+0x80>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	031b      	lsls	r3, r3, #12
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	22a0      	movs	r2, #160	; 0xa0
 8005b20:	4393      	bics	r3, r2
 8005b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	22a0      	movs	r2, #160	; 0xa0
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b006      	add	sp, #24
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	fffffcff 	.word	0xfffffcff
 8005b4c:	ffff0fff 	.word	0xffff0fff

08005b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	2210      	movs	r2, #16
 8005b62:	4393      	bics	r3, r2
 8005b64:	001a      	movs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <TIM_TI2_ConfigInputStage+0x60>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	22a0      	movs	r2, #160	; 0xa0
 8005b8c:	4393      	bics	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	011b      	lsls	r3, r3, #4
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b006      	add	sp, #24
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	ffff0fff 	.word	0xffff0fff

08005bb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <TIM_TI3_SetConfig+0x78>)
 8005bc8:	401a      	ands	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2203      	movs	r2, #3
 8005bde:	4393      	bics	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	22f0      	movs	r2, #240	; 0xf0
 8005bee:	4393      	bics	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4a0b      	ldr	r2, [pc, #44]	; (8005c30 <TIM_TI3_SetConfig+0x7c>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	021a      	lsls	r2, r3, #8
 8005c0c:	23a0      	movs	r3, #160	; 0xa0
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	4013      	ands	r3, r2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	621a      	str	r2, [r3, #32]
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b006      	add	sp, #24
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	fffffeff 	.word	0xfffffeff
 8005c30:	fffff5ff 	.word	0xfffff5ff

08005c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <TIM_TI4_SetConfig+0x7c>)
 8005c48:	401a      	ands	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <TIM_TI4_SetConfig+0x80>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <TIM_TI4_SetConfig+0x84>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	031b      	lsls	r3, r3, #12
 8005c78:	041b      	lsls	r3, r3, #16
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <TIM_TI4_SetConfig+0x88>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	031a      	lsls	r2, r3, #12
 8005c8e:	23a0      	movs	r3, #160	; 0xa0
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	4013      	ands	r3, r2
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	b006      	add	sp, #24
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	ffffefff 	.word	0xffffefff
 8005cb4:	fffffcff 	.word	0xfffffcff
 8005cb8:	ffff0fff 	.word	0xffff0fff
 8005cbc:	ffff5fff 	.word	0xffff5fff

08005cc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a08      	ldr	r2, [pc, #32]	; (8005cf4 <TIM_ITRx_SetConfig+0x34>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	2207      	movs	r2, #7
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	609a      	str	r2, [r3, #8]
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b004      	add	sp, #16
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	ffcfff8f 	.word	0xffcfff8f

08005cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <TIM_ETR_SetConfig+0x3c>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	021a      	lsls	r2, r3, #8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b006      	add	sp, #24
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	ffff00ff 	.word	0xffff00ff

08005d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	221f      	movs	r2, #31
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	0013      	movs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	43d2      	mvns	r2, r2
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	211f      	movs	r1, #31
 8005d68:	400b      	ands	r3, r1
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4099      	lsls	r1, r3
 8005d6e:	000b      	movs	r3, r1
 8005d70:	431a      	orrs	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b006      	add	sp, #24
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	223c      	movs	r2, #60	; 0x3c
 8005d8e:	5c9b      	ldrb	r3, [r3, r2]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e04f      	b.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	223c      	movs	r2, #60	; 0x3c
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	223d      	movs	r2, #61	; 0x3d
 8005da4:	2102      	movs	r1, #2
 8005da6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d108      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2270      	movs	r2, #112	; 0x70
 8005dd8:	4393      	bics	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a12      	ldr	r2, [pc, #72]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a11      	ldr	r2, [pc, #68]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d10c      	bne.n	8005e26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	4393      	bics	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	223d      	movs	r2, #61	; 0x3d
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	223c      	movs	r2, #60	; 0x3c
 8005e32:	2100      	movs	r1, #0
 8005e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b004      	add	sp, #16
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	ff0fffff 	.word	0xff0fffff
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40014000 	.word	0x40014000

08005e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b002      	add	sp, #8
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e046      	b.n	8005f20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2288      	movs	r2, #136	; 0x88
 8005e96:	589b      	ldr	r3, [r3, r2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d107      	bne.n	8005eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2284      	movs	r2, #132	; 0x84
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	0018      	movs	r0, r3
 8005ea8:	f7fc fc3a 	bl	8002720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2288      	movs	r2, #136	; 0x88
 8005eb0:	2124      	movs	r1, #36	; 0x24
 8005eb2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	438a      	bics	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f000 fc02 	bl	80066d0 <UART_SetConfig>
 8005ecc:	0003      	movs	r3, r0
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e024      	b.n	8005f20 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f000 fd99 	bl	8006a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	490d      	ldr	r1, [pc, #52]	; (8005f28 <HAL_UART_Init+0xa8>)
 8005ef2:	400a      	ands	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	212a      	movs	r1, #42	; 0x2a
 8005f02:	438a      	bics	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2101      	movs	r1, #1
 8005f12:	430a      	orrs	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f000 fe31 	bl	8006b80 <UART_CheckIdleState>
 8005f1e:	0003      	movs	r3, r0
}
 8005f20:	0018      	movs	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b002      	add	sp, #8
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	ffffb7ff 	.word	0xffffb7ff

08005f2c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e032      	b.n	8005fa4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2288      	movs	r2, #136	; 0x88
 8005f42:	2124      	movs	r1, #36	; 0x24
 8005f44:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2101      	movs	r1, #1
 8005f52:	438a      	bics	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7fc fceb 	bl	800294c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2290      	movs	r2, #144	; 0x90
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2288      	movs	r2, #136	; 0x88
 8005f82:	2100      	movs	r1, #0
 8005f84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	228c      	movs	r2, #140	; 0x8c
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2284      	movs	r2, #132	; 0x84
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	1dbb      	adds	r3, r7, #6
 8005fb8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	228c      	movs	r2, #140	; 0x8c
 8005fbe:	589b      	ldr	r3, [r3, r2]
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d145      	bne.n	8006050 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_UART_Receive_IT+0x26>
 8005fca:	1dbb      	adds	r3, r7, #6
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e03d      	b.n	8006052 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	2380      	movs	r3, #128	; 0x80
 8005fdc:	015b      	lsls	r3, r3, #5
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d109      	bne.n	8005ff6 <HAL_UART_Receive_IT+0x4a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d105      	bne.n	8005ff6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2201      	movs	r2, #1
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d001      	beq.n	8005ff6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e02d      	b.n	8006052 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	4013      	ands	r3, r2
 8006008:	d019      	beq.n	800603e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800600a:	f3ef 8310 	mrs	r3, PRIMASK
 800600e:	613b      	str	r3, [r7, #16]
  return(result);
 8006010:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	2301      	movs	r3, #1
 8006016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f383 8810 	msr	PRIMASK, r3
}
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2180      	movs	r1, #128	; 0x80
 800602c:	04c9      	lsls	r1, r1, #19
 800602e:	430a      	orrs	r2, r1
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f383 8810 	msr	PRIMASK, r3
}
 800603c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800603e:	1dbb      	adds	r3, r7, #6
 8006040:	881a      	ldrh	r2, [r3, #0]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	0018      	movs	r0, r3
 8006048:	f000 feb0 	bl	8006dac <UART_Start_Receive_IT>
 800604c:	0003      	movs	r3, r0
 800604e:	e000      	b.n	8006052 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006050:	2302      	movs	r3, #2
  }
}
 8006052:	0018      	movs	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	b008      	add	sp, #32
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800605c:	b5b0      	push	{r4, r5, r7, lr}
 800605e:	b0aa      	sub	sp, #168	; 0xa8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	22a4      	movs	r2, #164	; 0xa4
 800606c:	18b9      	adds	r1, r7, r2
 800606e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	20a0      	movs	r0, #160	; 0xa0
 8006078:	1839      	adds	r1, r7, r0
 800607a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	249c      	movs	r4, #156	; 0x9c
 8006084:	1939      	adds	r1, r7, r4
 8006086:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006088:	0011      	movs	r1, r2
 800608a:	18bb      	adds	r3, r7, r2
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4aa2      	ldr	r2, [pc, #648]	; (8006318 <HAL_UART_IRQHandler+0x2bc>)
 8006090:	4013      	ands	r3, r2
 8006092:	2298      	movs	r2, #152	; 0x98
 8006094:	18bd      	adds	r5, r7, r2
 8006096:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006098:	18bb      	adds	r3, r7, r2
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d11a      	bne.n	80060d6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060a0:	187b      	adds	r3, r7, r1
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2220      	movs	r2, #32
 80060a6:	4013      	ands	r3, r2
 80060a8:	d015      	beq.n	80060d6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060aa:	183b      	adds	r3, r7, r0
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2220      	movs	r2, #32
 80060b0:	4013      	ands	r3, r2
 80060b2:	d105      	bne.n	80060c0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060b4:	193b      	adds	r3, r7, r4
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	055b      	lsls	r3, r3, #21
 80060bc:	4013      	ands	r3, r2
 80060be:	d00a      	beq.n	80060d6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d100      	bne.n	80060ca <HAL_UART_IRQHandler+0x6e>
 80060c8:	e2dc      	b.n	8006684 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	0010      	movs	r0, r2
 80060d2:	4798      	blx	r3
      }
      return;
 80060d4:	e2d6      	b.n	8006684 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060d6:	2398      	movs	r3, #152	; 0x98
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d100      	bne.n	80060e2 <HAL_UART_IRQHandler+0x86>
 80060e0:	e122      	b.n	8006328 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060e2:	239c      	movs	r3, #156	; 0x9c
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a8c      	ldr	r2, [pc, #560]	; (800631c <HAL_UART_IRQHandler+0x2c0>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	d106      	bne.n	80060fc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060ee:	23a0      	movs	r3, #160	; 0xa0
 80060f0:	18fb      	adds	r3, r7, r3
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a8a      	ldr	r2, [pc, #552]	; (8006320 <HAL_UART_IRQHandler+0x2c4>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	d100      	bne.n	80060fc <HAL_UART_IRQHandler+0xa0>
 80060fa:	e115      	b.n	8006328 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060fc:	23a4      	movs	r3, #164	; 0xa4
 80060fe:	18fb      	adds	r3, r7, r3
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2201      	movs	r2, #1
 8006104:	4013      	ands	r3, r2
 8006106:	d012      	beq.n	800612e <HAL_UART_IRQHandler+0xd2>
 8006108:	23a0      	movs	r3, #160	; 0xa0
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	4013      	ands	r3, r2
 8006114:	d00b      	beq.n	800612e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2201      	movs	r2, #1
 800611c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2290      	movs	r2, #144	; 0x90
 8006122:	589b      	ldr	r3, [r3, r2]
 8006124:	2201      	movs	r2, #1
 8006126:	431a      	orrs	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2190      	movs	r1, #144	; 0x90
 800612c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800612e:	23a4      	movs	r3, #164	; 0xa4
 8006130:	18fb      	adds	r3, r7, r3
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2202      	movs	r2, #2
 8006136:	4013      	ands	r3, r2
 8006138:	d011      	beq.n	800615e <HAL_UART_IRQHandler+0x102>
 800613a:	239c      	movs	r3, #156	; 0x9c
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2201      	movs	r2, #1
 8006142:	4013      	ands	r3, r2
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2202      	movs	r2, #2
 800614c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2290      	movs	r2, #144	; 0x90
 8006152:	589b      	ldr	r3, [r3, r2]
 8006154:	2204      	movs	r2, #4
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2190      	movs	r1, #144	; 0x90
 800615c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800615e:	23a4      	movs	r3, #164	; 0xa4
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2204      	movs	r2, #4
 8006166:	4013      	ands	r3, r2
 8006168:	d011      	beq.n	800618e <HAL_UART_IRQHandler+0x132>
 800616a:	239c      	movs	r3, #156	; 0x9c
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	4013      	ands	r3, r2
 8006174:	d00b      	beq.n	800618e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2204      	movs	r2, #4
 800617c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2290      	movs	r2, #144	; 0x90
 8006182:	589b      	ldr	r3, [r3, r2]
 8006184:	2202      	movs	r2, #2
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2190      	movs	r1, #144	; 0x90
 800618c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800618e:	23a4      	movs	r3, #164	; 0xa4
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2208      	movs	r2, #8
 8006196:	4013      	ands	r3, r2
 8006198:	d017      	beq.n	80061ca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800619a:	23a0      	movs	r3, #160	; 0xa0
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2220      	movs	r2, #32
 80061a2:	4013      	ands	r3, r2
 80061a4:	d105      	bne.n	80061b2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80061a6:	239c      	movs	r3, #156	; 0x9c
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_UART_IRQHandler+0x2c0>)
 80061ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80061b0:	d00b      	beq.n	80061ca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2208      	movs	r2, #8
 80061b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2290      	movs	r2, #144	; 0x90
 80061be:	589b      	ldr	r3, [r3, r2]
 80061c0:	2208      	movs	r2, #8
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2190      	movs	r1, #144	; 0x90
 80061c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061ca:	23a4      	movs	r3, #164	; 0xa4
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	4013      	ands	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_UART_IRQHandler+0x1a4>
 80061d8:	23a0      	movs	r3, #160	; 0xa0
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	2380      	movs	r3, #128	; 0x80
 80061e0:	04db      	lsls	r3, r3, #19
 80061e2:	4013      	ands	r3, r2
 80061e4:	d00c      	beq.n	8006200 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2280      	movs	r2, #128	; 0x80
 80061ec:	0112      	lsls	r2, r2, #4
 80061ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2290      	movs	r2, #144	; 0x90
 80061f4:	589b      	ldr	r3, [r3, r2]
 80061f6:	2220      	movs	r2, #32
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2190      	movs	r1, #144	; 0x90
 80061fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2290      	movs	r2, #144	; 0x90
 8006204:	589b      	ldr	r3, [r3, r2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d100      	bne.n	800620c <HAL_UART_IRQHandler+0x1b0>
 800620a:	e23d      	b.n	8006688 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800620c:	23a4      	movs	r3, #164	; 0xa4
 800620e:	18fb      	adds	r3, r7, r3
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2220      	movs	r2, #32
 8006214:	4013      	ands	r3, r2
 8006216:	d015      	beq.n	8006244 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006218:	23a0      	movs	r3, #160	; 0xa0
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2220      	movs	r2, #32
 8006220:	4013      	ands	r3, r2
 8006222:	d106      	bne.n	8006232 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006224:	239c      	movs	r3, #156	; 0x9c
 8006226:	18fb      	adds	r3, r7, r3
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	2380      	movs	r3, #128	; 0x80
 800622c:	055b      	lsls	r3, r3, #21
 800622e:	4013      	ands	r3, r2
 8006230:	d008      	beq.n	8006244 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	0010      	movs	r0, r2
 8006242:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2290      	movs	r2, #144	; 0x90
 8006248:	589b      	ldr	r3, [r3, r2]
 800624a:	2194      	movs	r1, #148	; 0x94
 800624c:	187a      	adds	r2, r7, r1
 800624e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	4013      	ands	r3, r2
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d004      	beq.n	8006268 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800625e:	187b      	adds	r3, r7, r1
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2228      	movs	r2, #40	; 0x28
 8006264:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006266:	d04c      	beq.n	8006302 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	0018      	movs	r0, r3
 800626c:	f000 fec2 	bl	8006ff4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	4013      	ands	r3, r2
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d13c      	bne.n	80062f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627e:	f3ef 8310 	mrs	r3, PRIMASK
 8006282:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	2090      	movs	r0, #144	; 0x90
 8006288:	183a      	adds	r2, r7, r0
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	2301      	movs	r3, #1
 800628e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006292:	f383 8810 	msr	PRIMASK, r3
}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2140      	movs	r1, #64	; 0x40
 80062a4:	438a      	bics	r2, r1
 80062a6:	609a      	str	r2, [r3, #8]
 80062a8:	183b      	adds	r3, r7, r0
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	589b      	ldr	r3, [r3, r2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d016      	beq.n	80062ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2280      	movs	r2, #128	; 0x80
 80062c4:	589b      	ldr	r3, [r3, r2]
 80062c6:	4a17      	ldr	r2, [pc, #92]	; (8006324 <HAL_UART_IRQHandler+0x2c8>)
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2280      	movs	r2, #128	; 0x80
 80062ce:	589b      	ldr	r3, [r3, r2]
 80062d0:	0018      	movs	r0, r3
 80062d2:	f7fc ff25 	bl	8003120 <HAL_DMA_Abort_IT>
 80062d6:	1e03      	subs	r3, r0, #0
 80062d8:	d01c      	beq.n	8006314 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2280      	movs	r2, #128	; 0x80
 80062de:	589b      	ldr	r3, [r3, r2]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	5852      	ldr	r2, [r2, r1]
 80062e8:	0010      	movs	r0, r2
 80062ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	e012      	b.n	8006314 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 f9d9 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	e00d      	b.n	8006314 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f000 f9d4 	bl	80066a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	e008      	b.n	8006314 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	0018      	movs	r0, r3
 8006306:	f000 f9cf 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2290      	movs	r2, #144	; 0x90
 800630e:	2100      	movs	r1, #0
 8006310:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006312:	e1b9      	b.n	8006688 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006314:	46c0      	nop			; (mov r8, r8)
    return;
 8006316:	e1b7      	b.n	8006688 <HAL_UART_IRQHandler+0x62c>
 8006318:	0000080f 	.word	0x0000080f
 800631c:	10000001 	.word	0x10000001
 8006320:	04000120 	.word	0x04000120
 8006324:	080070c1 	.word	0x080070c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d000      	beq.n	8006332 <HAL_UART_IRQHandler+0x2d6>
 8006330:	e13e      	b.n	80065b0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006332:	23a4      	movs	r3, #164	; 0xa4
 8006334:	18fb      	adds	r3, r7, r3
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2210      	movs	r2, #16
 800633a:	4013      	ands	r3, r2
 800633c:	d100      	bne.n	8006340 <HAL_UART_IRQHandler+0x2e4>
 800633e:	e137      	b.n	80065b0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006340:	23a0      	movs	r3, #160	; 0xa0
 8006342:	18fb      	adds	r3, r7, r3
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2210      	movs	r2, #16
 8006348:	4013      	ands	r3, r2
 800634a:	d100      	bne.n	800634e <HAL_UART_IRQHandler+0x2f2>
 800634c:	e130      	b.n	80065b0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2210      	movs	r2, #16
 8006354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2240      	movs	r2, #64	; 0x40
 800635e:	4013      	ands	r3, r2
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d000      	beq.n	8006366 <HAL_UART_IRQHandler+0x30a>
 8006364:	e0a4      	b.n	80064b0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2280      	movs	r2, #128	; 0x80
 800636a:	589b      	ldr	r3, [r3, r2]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	217e      	movs	r1, #126	; 0x7e
 8006372:	187b      	adds	r3, r7, r1
 8006374:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006376:	187b      	adds	r3, r7, r1
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d100      	bne.n	8006380 <HAL_UART_IRQHandler+0x324>
 800637e:	e185      	b.n	800668c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	225c      	movs	r2, #92	; 0x5c
 8006384:	5a9b      	ldrh	r3, [r3, r2]
 8006386:	187a      	adds	r2, r7, r1
 8006388:	8812      	ldrh	r2, [r2, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d300      	bcc.n	8006390 <HAL_UART_IRQHandler+0x334>
 800638e:	e17d      	b.n	800668c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	187a      	adds	r2, r7, r1
 8006394:	215e      	movs	r1, #94	; 0x5e
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2280      	movs	r2, #128	; 0x80
 800639e:	589b      	ldr	r3, [r3, r2]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2220      	movs	r2, #32
 80063a6:	4013      	ands	r3, r2
 80063a8:	d170      	bne.n	800648c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063aa:	f3ef 8310 	mrs	r3, PRIMASK
 80063ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80063b4:	2301      	movs	r3, #1
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	f383 8810 	msr	PRIMASK, r3
}
 80063be:	46c0      	nop			; (mov r8, r8)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	49b4      	ldr	r1, [pc, #720]	; (800669c <HAL_UART_IRQHandler+0x640>)
 80063cc:	400a      	ands	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d6:	f383 8810 	msr	PRIMASK, r3
}
 80063da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063dc:	f3ef 8310 	mrs	r3, PRIMASK
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e4:	677b      	str	r3, [r7, #116]	; 0x74
 80063e6:	2301      	movs	r3, #1
 80063e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ec:	f383 8810 	msr	PRIMASK, r3
}
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2101      	movs	r1, #1
 80063fe:	438a      	bics	r2, r1
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006404:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006408:	f383 8810 	msr	PRIMASK, r3
}
 800640c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640e:	f3ef 8310 	mrs	r3, PRIMASK
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006414:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	673b      	str	r3, [r7, #112]	; 0x70
 8006418:	2301      	movs	r3, #1
 800641a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641e:	f383 8810 	msr	PRIMASK, r3
}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2140      	movs	r1, #64	; 0x40
 8006430:	438a      	bics	r2, r1
 8006432:	609a      	str	r2, [r3, #8]
 8006434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006436:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800643a:	f383 8810 	msr	PRIMASK, r3
}
 800643e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	228c      	movs	r2, #140	; 0x8c
 8006444:	2120      	movs	r1, #32
 8006446:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644e:	f3ef 8310 	mrs	r3, PRIMASK
 8006452:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006454:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006458:	2301      	movs	r3, #1
 800645a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800645e:	f383 8810 	msr	PRIMASK, r3
}
 8006462:	46c0      	nop			; (mov r8, r8)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2110      	movs	r1, #16
 8006470:	438a      	bics	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	f383 8810 	msr	PRIMASK, r3
}
 800647e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2280      	movs	r2, #128	; 0x80
 8006484:	589b      	ldr	r3, [r3, r2]
 8006486:	0018      	movs	r0, r3
 8006488:	f7fc fde8 	bl	800305c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	225c      	movs	r2, #92	; 0x5c
 8006496:	5a9a      	ldrh	r2, [r3, r2]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	215e      	movs	r1, #94	; 0x5e
 800649c:	5a5b      	ldrh	r3, [r3, r1]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0011      	movs	r1, r2
 80064a8:	0018      	movs	r0, r3
 80064aa:	f000 f905 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064ae:	e0ed      	b.n	800668c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	225c      	movs	r2, #92	; 0x5c
 80064b4:	5a99      	ldrh	r1, [r3, r2]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	225e      	movs	r2, #94	; 0x5e
 80064ba:	5a9b      	ldrh	r3, [r3, r2]
 80064bc:	b29a      	uxth	r2, r3
 80064be:	208e      	movs	r0, #142	; 0x8e
 80064c0:	183b      	adds	r3, r7, r0
 80064c2:	1a8a      	subs	r2, r1, r2
 80064c4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	225e      	movs	r2, #94	; 0x5e
 80064ca:	5a9b      	ldrh	r3, [r3, r2]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d100      	bne.n	80064d4 <HAL_UART_IRQHandler+0x478>
 80064d2:	e0dd      	b.n	8006690 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80064d4:	183b      	adds	r3, r7, r0
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d100      	bne.n	80064de <HAL_UART_IRQHandler+0x482>
 80064dc:	e0d8      	b.n	8006690 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064de:	f3ef 8310 	mrs	r3, PRIMASK
 80064e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80064e4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064e6:	2488      	movs	r4, #136	; 0x88
 80064e8:	193a      	adds	r2, r7, r4
 80064ea:	6013      	str	r3, [r2, #0]
 80064ec:	2301      	movs	r3, #1
 80064ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f383 8810 	msr	PRIMASK, r3
}
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4967      	ldr	r1, [pc, #412]	; (80066a0 <HAL_UART_IRQHandler+0x644>)
 8006504:	400a      	ands	r2, r1
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	193b      	adds	r3, r7, r4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f383 8810 	msr	PRIMASK, r3
}
 8006514:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006516:	f3ef 8310 	mrs	r3, PRIMASK
 800651a:	61bb      	str	r3, [r7, #24]
  return(result);
 800651c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800651e:	2484      	movs	r4, #132	; 0x84
 8006520:	193a      	adds	r2, r7, r4
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	2301      	movs	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f383 8810 	msr	PRIMASK, r3
}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	495a      	ldr	r1, [pc, #360]	; (80066a4 <HAL_UART_IRQHandler+0x648>)
 800653c:	400a      	ands	r2, r1
 800653e:	609a      	str	r2, [r3, #8]
 8006540:	193b      	adds	r3, r7, r4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	f383 8810 	msr	PRIMASK, r3
}
 800654c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	228c      	movs	r2, #140	; 0x8c
 8006552:	2120      	movs	r1, #32
 8006554:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006562:	f3ef 8310 	mrs	r3, PRIMASK
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656a:	2480      	movs	r4, #128	; 0x80
 800656c:	193a      	adds	r2, r7, r4
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	2301      	movs	r3, #1
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2110      	movs	r1, #16
 8006588:	438a      	bics	r2, r1
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	193b      	adds	r3, r7, r4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065a0:	183b      	adds	r3, r7, r0
 80065a2:	881a      	ldrh	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	0011      	movs	r1, r2
 80065a8:	0018      	movs	r0, r3
 80065aa:	f000 f885 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065ae:	e06f      	b.n	8006690 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065b0:	23a4      	movs	r3, #164	; 0xa4
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	035b      	lsls	r3, r3, #13
 80065ba:	4013      	ands	r3, r2
 80065bc:	d010      	beq.n	80065e0 <HAL_UART_IRQHandler+0x584>
 80065be:	239c      	movs	r3, #156	; 0x9c
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	2380      	movs	r3, #128	; 0x80
 80065c6:	03db      	lsls	r3, r3, #15
 80065c8:	4013      	ands	r3, r2
 80065ca:	d009      	beq.n	80065e0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2280      	movs	r2, #128	; 0x80
 80065d2:	0352      	lsls	r2, r2, #13
 80065d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	0018      	movs	r0, r3
 80065da:	f001 fa15 	bl	8007a08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065de:	e05a      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065e0:	23a4      	movs	r3, #164	; 0xa4
 80065e2:	18fb      	adds	r3, r7, r3
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2280      	movs	r2, #128	; 0x80
 80065e8:	4013      	ands	r3, r2
 80065ea:	d016      	beq.n	800661a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065ec:	23a0      	movs	r3, #160	; 0xa0
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	4013      	ands	r3, r2
 80065f6:	d106      	bne.n	8006606 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065f8:	239c      	movs	r3, #156	; 0x9c
 80065fa:	18fb      	adds	r3, r7, r3
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	4013      	ands	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800660a:	2b00      	cmp	r3, #0
 800660c:	d042      	beq.n	8006694 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	0010      	movs	r0, r2
 8006616:	4798      	blx	r3
    }
    return;
 8006618:	e03c      	b.n	8006694 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800661a:	23a4      	movs	r3, #164	; 0xa4
 800661c:	18fb      	adds	r3, r7, r3
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2240      	movs	r2, #64	; 0x40
 8006622:	4013      	ands	r3, r2
 8006624:	d00a      	beq.n	800663c <HAL_UART_IRQHandler+0x5e0>
 8006626:	23a0      	movs	r3, #160	; 0xa0
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2240      	movs	r2, #64	; 0x40
 800662e:	4013      	ands	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0018      	movs	r0, r3
 8006636:	f000 fd5a 	bl	80070ee <UART_EndTransmit_IT>
    return;
 800663a:	e02c      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800663c:	23a4      	movs	r3, #164	; 0xa4
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	041b      	lsls	r3, r3, #16
 8006646:	4013      	ands	r3, r2
 8006648:	d00b      	beq.n	8006662 <HAL_UART_IRQHandler+0x606>
 800664a:	23a0      	movs	r3, #160	; 0xa0
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	2380      	movs	r3, #128	; 0x80
 8006652:	05db      	lsls	r3, r3, #23
 8006654:	4013      	ands	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f001 f9e4 	bl	8007a28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006660:	e019      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006662:	23a4      	movs	r3, #164	; 0xa4
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	045b      	lsls	r3, r3, #17
 800666c:	4013      	ands	r3, r2
 800666e:	d012      	beq.n	8006696 <HAL_UART_IRQHandler+0x63a>
 8006670:	23a0      	movs	r3, #160	; 0xa0
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da0d      	bge.n	8006696 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0018      	movs	r0, r3
 800667e:	f001 f9cb 	bl	8007a18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006682:	e008      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
      return;
 8006684:	46c0      	nop			; (mov r8, r8)
 8006686:	e006      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
    return;
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	e004      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
      return;
 800668c:	46c0      	nop			; (mov r8, r8)
 800668e:	e002      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
      return;
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	e000      	b.n	8006696 <HAL_UART_IRQHandler+0x63a>
    return;
 8006694:	46c0      	nop			; (mov r8, r8)
  }
}
 8006696:	46bd      	mov	sp, r7
 8006698:	b02a      	add	sp, #168	; 0xa8
 800669a:	bdb0      	pop	{r4, r5, r7, pc}
 800669c:	fffffeff 	.word	0xfffffeff
 80066a0:	fffffedf 	.word	0xfffffedf
 80066a4:	effffffe 	.word	0xeffffffe

080066a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066b0:	46c0      	nop			; (mov r8, r8)
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b002      	add	sp, #8
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	000a      	movs	r2, r1
 80066c2:	1cbb      	adds	r3, r7, #2
 80066c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066c6:	46c0      	nop			; (mov r8, r8)
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b002      	add	sp, #8
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066d8:	231a      	movs	r3, #26
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	431a      	orrs	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4abc      	ldr	r2, [pc, #752]	; (80069f0 <UART_SetConfig+0x320>)
 8006700:	4013      	ands	r3, r2
 8006702:	0019      	movs	r1, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	430a      	orrs	r2, r1
 800670c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	4ab7      	ldr	r2, [pc, #732]	; (80069f4 <UART_SetConfig+0x324>)
 8006716:	4013      	ands	r3, r2
 8006718:	0019      	movs	r1, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	4313      	orrs	r3, r2
 8006734:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	4aae      	ldr	r2, [pc, #696]	; (80069f8 <UART_SetConfig+0x328>)
 800673e:	4013      	ands	r3, r2
 8006740:	0019      	movs	r1, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	430a      	orrs	r2, r1
 800674a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	220f      	movs	r2, #15
 8006754:	4393      	bics	r3, r2
 8006756:	0019      	movs	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4aa4      	ldr	r2, [pc, #656]	; (80069fc <UART_SetConfig+0x32c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d127      	bne.n	80067be <UART_SetConfig+0xee>
 800676e:	4ba4      	ldr	r3, [pc, #656]	; (8006a00 <UART_SetConfig+0x330>)
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	2203      	movs	r2, #3
 8006774:	4013      	ands	r3, r2
 8006776:	2b03      	cmp	r3, #3
 8006778:	d017      	beq.n	80067aa <UART_SetConfig+0xda>
 800677a:	d81b      	bhi.n	80067b4 <UART_SetConfig+0xe4>
 800677c:	2b02      	cmp	r3, #2
 800677e:	d00a      	beq.n	8006796 <UART_SetConfig+0xc6>
 8006780:	d818      	bhi.n	80067b4 <UART_SetConfig+0xe4>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <UART_SetConfig+0xbc>
 8006786:	2b01      	cmp	r3, #1
 8006788:	d00a      	beq.n	80067a0 <UART_SetConfig+0xd0>
 800678a:	e013      	b.n	80067b4 <UART_SetConfig+0xe4>
 800678c:	231b      	movs	r3, #27
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2200      	movs	r2, #0
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e058      	b.n	8006848 <UART_SetConfig+0x178>
 8006796:	231b      	movs	r3, #27
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2202      	movs	r2, #2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e053      	b.n	8006848 <UART_SetConfig+0x178>
 80067a0:	231b      	movs	r3, #27
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	2204      	movs	r2, #4
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e04e      	b.n	8006848 <UART_SetConfig+0x178>
 80067aa:	231b      	movs	r3, #27
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	2208      	movs	r2, #8
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e049      	b.n	8006848 <UART_SetConfig+0x178>
 80067b4:	231b      	movs	r3, #27
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	2210      	movs	r2, #16
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e044      	b.n	8006848 <UART_SetConfig+0x178>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a90      	ldr	r2, [pc, #576]	; (8006a04 <UART_SetConfig+0x334>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d127      	bne.n	8006818 <UART_SetConfig+0x148>
 80067c8:	4b8d      	ldr	r3, [pc, #564]	; (8006a00 <UART_SetConfig+0x330>)
 80067ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067cc:	220c      	movs	r2, #12
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b0c      	cmp	r3, #12
 80067d2:	d017      	beq.n	8006804 <UART_SetConfig+0x134>
 80067d4:	d81b      	bhi.n	800680e <UART_SetConfig+0x13e>
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d00a      	beq.n	80067f0 <UART_SetConfig+0x120>
 80067da:	d818      	bhi.n	800680e <UART_SetConfig+0x13e>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <UART_SetConfig+0x116>
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d00a      	beq.n	80067fa <UART_SetConfig+0x12a>
 80067e4:	e013      	b.n	800680e <UART_SetConfig+0x13e>
 80067e6:	231b      	movs	r3, #27
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2200      	movs	r2, #0
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e02b      	b.n	8006848 <UART_SetConfig+0x178>
 80067f0:	231b      	movs	r3, #27
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	2202      	movs	r2, #2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e026      	b.n	8006848 <UART_SetConfig+0x178>
 80067fa:	231b      	movs	r3, #27
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	2204      	movs	r2, #4
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e021      	b.n	8006848 <UART_SetConfig+0x178>
 8006804:	231b      	movs	r3, #27
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	2208      	movs	r2, #8
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	e01c      	b.n	8006848 <UART_SetConfig+0x178>
 800680e:	231b      	movs	r3, #27
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2210      	movs	r2, #16
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e017      	b.n	8006848 <UART_SetConfig+0x178>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a7a      	ldr	r2, [pc, #488]	; (8006a08 <UART_SetConfig+0x338>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d104      	bne.n	800682c <UART_SetConfig+0x15c>
 8006822:	231b      	movs	r3, #27
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e00d      	b.n	8006848 <UART_SetConfig+0x178>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a76      	ldr	r2, [pc, #472]	; (8006a0c <UART_SetConfig+0x33c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d104      	bne.n	8006840 <UART_SetConfig+0x170>
 8006836:	231b      	movs	r3, #27
 8006838:	18fb      	adds	r3, r7, r3
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e003      	b.n	8006848 <UART_SetConfig+0x178>
 8006840:	231b      	movs	r3, #27
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	2210      	movs	r2, #16
 8006846:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	429a      	cmp	r2, r3
 8006852:	d000      	beq.n	8006856 <UART_SetConfig+0x186>
 8006854:	e065      	b.n	8006922 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006856:	231b      	movs	r3, #27
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b08      	cmp	r3, #8
 800685e:	d015      	beq.n	800688c <UART_SetConfig+0x1bc>
 8006860:	dc18      	bgt.n	8006894 <UART_SetConfig+0x1c4>
 8006862:	2b04      	cmp	r3, #4
 8006864:	d00d      	beq.n	8006882 <UART_SetConfig+0x1b2>
 8006866:	dc15      	bgt.n	8006894 <UART_SetConfig+0x1c4>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <UART_SetConfig+0x1a2>
 800686c:	2b02      	cmp	r3, #2
 800686e:	d005      	beq.n	800687c <UART_SetConfig+0x1ac>
 8006870:	e010      	b.n	8006894 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006872:	f7fd fd03 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8006876:	0003      	movs	r3, r0
 8006878:	617b      	str	r3, [r7, #20]
        break;
 800687a:	e012      	b.n	80068a2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4b64      	ldr	r3, [pc, #400]	; (8006a10 <UART_SetConfig+0x340>)
 800687e:	617b      	str	r3, [r7, #20]
        break;
 8006880:	e00f      	b.n	80068a2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006882:	f7fd fc6f 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8006886:	0003      	movs	r3, r0
 8006888:	617b      	str	r3, [r7, #20]
        break;
 800688a:	e00a      	b.n	80068a2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688c:	2380      	movs	r3, #128	; 0x80
 800688e:	021b      	lsls	r3, r3, #8
 8006890:	617b      	str	r3, [r7, #20]
        break;
 8006892:	e006      	b.n	80068a2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006898:	231a      	movs	r3, #26
 800689a:	18fb      	adds	r3, r7, r3
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
        break;
 80068a0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d100      	bne.n	80068aa <UART_SetConfig+0x1da>
 80068a8:	e08d      	b.n	80069c6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ae:	4b59      	ldr	r3, [pc, #356]	; (8006a14 <UART_SetConfig+0x344>)
 80068b0:	0052      	lsls	r2, r2, #1
 80068b2:	5ad3      	ldrh	r3, [r2, r3]
 80068b4:	0019      	movs	r1, r3
 80068b6:	6978      	ldr	r0, [r7, #20]
 80068b8:	f7f9 fc22 	bl	8000100 <__udivsi3>
 80068bc:	0003      	movs	r3, r0
 80068be:	005a      	lsls	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	18d2      	adds	r2, r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	0019      	movs	r1, r3
 80068ce:	0010      	movs	r0, r2
 80068d0:	f7f9 fc16 	bl	8000100 <__udivsi3>
 80068d4:	0003      	movs	r3, r0
 80068d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d91c      	bls.n	8006918 <UART_SetConfig+0x248>
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	025b      	lsls	r3, r3, #9
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d217      	bcs.n	8006918 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	200e      	movs	r0, #14
 80068ee:	183b      	adds	r3, r7, r0
 80068f0:	210f      	movs	r1, #15
 80068f2:	438a      	bics	r2, r1
 80068f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2207      	movs	r2, #7
 80068fe:	4013      	ands	r3, r2
 8006900:	b299      	uxth	r1, r3
 8006902:	183b      	adds	r3, r7, r0
 8006904:	183a      	adds	r2, r7, r0
 8006906:	8812      	ldrh	r2, [r2, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	183a      	adds	r2, r7, r0
 8006912:	8812      	ldrh	r2, [r2, #0]
 8006914:	60da      	str	r2, [r3, #12]
 8006916:	e056      	b.n	80069c6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006918:	231a      	movs	r3, #26
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	2201      	movs	r2, #1
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	e051      	b.n	80069c6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006922:	231b      	movs	r3, #27
 8006924:	18fb      	adds	r3, r7, r3
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b08      	cmp	r3, #8
 800692a:	d015      	beq.n	8006958 <UART_SetConfig+0x288>
 800692c:	dc18      	bgt.n	8006960 <UART_SetConfig+0x290>
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00d      	beq.n	800694e <UART_SetConfig+0x27e>
 8006932:	dc15      	bgt.n	8006960 <UART_SetConfig+0x290>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <UART_SetConfig+0x26e>
 8006938:	2b02      	cmp	r3, #2
 800693a:	d005      	beq.n	8006948 <UART_SetConfig+0x278>
 800693c:	e010      	b.n	8006960 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800693e:	f7fd fc9d 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8006942:	0003      	movs	r3, r0
 8006944:	617b      	str	r3, [r7, #20]
        break;
 8006946:	e012      	b.n	800696e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006948:	4b31      	ldr	r3, [pc, #196]	; (8006a10 <UART_SetConfig+0x340>)
 800694a:	617b      	str	r3, [r7, #20]
        break;
 800694c:	e00f      	b.n	800696e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800694e:	f7fd fc09 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 8006952:	0003      	movs	r3, r0
 8006954:	617b      	str	r3, [r7, #20]
        break;
 8006956:	e00a      	b.n	800696e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	617b      	str	r3, [r7, #20]
        break;
 800695e:	e006      	b.n	800696e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006964:	231a      	movs	r3, #26
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
        break;
 800696c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d028      	beq.n	80069c6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006978:	4b26      	ldr	r3, [pc, #152]	; (8006a14 <UART_SetConfig+0x344>)
 800697a:	0052      	lsls	r2, r2, #1
 800697c:	5ad3      	ldrh	r3, [r2, r3]
 800697e:	0019      	movs	r1, r3
 8006980:	6978      	ldr	r0, [r7, #20]
 8006982:	f7f9 fbbd 	bl	8000100 <__udivsi3>
 8006986:	0003      	movs	r3, r0
 8006988:	001a      	movs	r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	18d2      	adds	r2, r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	0019      	movs	r1, r3
 8006998:	0010      	movs	r0, r2
 800699a:	f7f9 fbb1 	bl	8000100 <__udivsi3>
 800699e:	0003      	movs	r3, r0
 80069a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b0f      	cmp	r3, #15
 80069a6:	d90a      	bls.n	80069be <UART_SetConfig+0x2ee>
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	2380      	movs	r3, #128	; 0x80
 80069ac:	025b      	lsls	r3, r3, #9
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d205      	bcs.n	80069be <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60da      	str	r2, [r3, #12]
 80069bc:	e003      	b.n	80069c6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80069be:	231a      	movs	r3, #26
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2201      	movs	r2, #1
 80069c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	226a      	movs	r2, #106	; 0x6a
 80069ca:	2101      	movs	r1, #1
 80069cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2268      	movs	r2, #104	; 0x68
 80069d2:	2101      	movs	r1, #1
 80069d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80069e2:	231a      	movs	r3, #26
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	781b      	ldrb	r3, [r3, #0]
}
 80069e8:	0018      	movs	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b008      	add	sp, #32
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	cfff69f3 	.word	0xcfff69f3
 80069f4:	ffffcfff 	.word	0xffffcfff
 80069f8:	11fff4ff 	.word	0x11fff4ff
 80069fc:	40013800 	.word	0x40013800
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40004400 	.word	0x40004400
 8006a08:	40004800 	.word	0x40004800
 8006a0c:	40004c00 	.word	0x40004c00
 8006a10:	00f42400 	.word	0x00f42400
 8006a14:	08007e10 	.word	0x08007e10

08006a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	2201      	movs	r2, #1
 8006a26:	4013      	ands	r3, r2
 8006a28:	d00b      	beq.n	8006a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4a4a      	ldr	r2, [pc, #296]	; (8006b5c <UART_AdvFeatureConfig+0x144>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	0019      	movs	r1, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	2202      	movs	r2, #2
 8006a48:	4013      	ands	r3, r2
 8006a4a:	d00b      	beq.n	8006a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	4a43      	ldr	r2, [pc, #268]	; (8006b60 <UART_AdvFeatureConfig+0x148>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	0019      	movs	r1, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	2204      	movs	r2, #4
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	d00b      	beq.n	8006a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4a3b      	ldr	r2, [pc, #236]	; (8006b64 <UART_AdvFeatureConfig+0x14c>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	0019      	movs	r1, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	2208      	movs	r2, #8
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	d00b      	beq.n	8006aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	4a34      	ldr	r2, [pc, #208]	; (8006b68 <UART_AdvFeatureConfig+0x150>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	0019      	movs	r1, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	2210      	movs	r2, #16
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d00b      	beq.n	8006aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a2c      	ldr	r2, [pc, #176]	; (8006b6c <UART_AdvFeatureConfig+0x154>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	0019      	movs	r1, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ace:	2220      	movs	r2, #32
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d00b      	beq.n	8006aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	4a25      	ldr	r2, [pc, #148]	; (8006b70 <UART_AdvFeatureConfig+0x158>)
 8006adc:	4013      	ands	r3, r2
 8006ade:	0019      	movs	r1, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af0:	2240      	movs	r2, #64	; 0x40
 8006af2:	4013      	ands	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <UART_AdvFeatureConfig+0x15c>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	0019      	movs	r1, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b12:	2380      	movs	r3, #128	; 0x80
 8006b14:	035b      	lsls	r3, r3, #13
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d10b      	bne.n	8006b32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <UART_AdvFeatureConfig+0x160>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	0019      	movs	r1, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4a0e      	ldr	r2, [pc, #56]	; (8006b7c <UART_AdvFeatureConfig+0x164>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	0019      	movs	r1, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	605a      	str	r2, [r3, #4]
  }
}
 8006b54:	46c0      	nop			; (mov r8, r8)
 8006b56:	46bd      	mov	sp, r7
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	fffdffff 	.word	0xfffdffff
 8006b60:	fffeffff 	.word	0xfffeffff
 8006b64:	fffbffff 	.word	0xfffbffff
 8006b68:	ffff7fff 	.word	0xffff7fff
 8006b6c:	ffffefff 	.word	0xffffefff
 8006b70:	ffffdfff 	.word	0xffffdfff
 8006b74:	ffefffff 	.word	0xffefffff
 8006b78:	ff9fffff 	.word	0xff9fffff
 8006b7c:	fff7ffff 	.word	0xfff7ffff

08006b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2290      	movs	r2, #144	; 0x90
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b90:	f7fc f824 	bl	8002bdc <HAL_GetTick>
 8006b94:	0003      	movs	r3, r0
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d10c      	bne.n	8006bc0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2280      	movs	r2, #128	; 0x80
 8006baa:	0391      	lsls	r1, r2, #14
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	4a1a      	ldr	r2, [pc, #104]	; (8006c18 <UART_CheckIdleState+0x98>)
 8006bb0:	9200      	str	r2, [sp, #0]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f000 f832 	bl	8006c1c <UART_WaitOnFlagUntilTimeout>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d001      	beq.n	8006bc0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e026      	b.n	8006c0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d10c      	bne.n	8006be8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2280      	movs	r2, #128	; 0x80
 8006bd2:	03d1      	lsls	r1, r2, #15
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4a10      	ldr	r2, [pc, #64]	; (8006c18 <UART_CheckIdleState+0x98>)
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f000 f81e 	bl	8006c1c <UART_WaitOnFlagUntilTimeout>
 8006be0:	1e03      	subs	r3, r0, #0
 8006be2:	d001      	beq.n	8006be8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e012      	b.n	8006c0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2288      	movs	r2, #136	; 0x88
 8006bec:	2120      	movs	r1, #32
 8006bee:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	228c      	movs	r2, #140	; 0x8c
 8006bf4:	2120      	movs	r1, #32
 8006bf6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2284      	movs	r2, #132	; 0x84
 8006c08:	2100      	movs	r1, #0
 8006c0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b004      	add	sp, #16
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	01ffffff 	.word	0x01ffffff

08006c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b094      	sub	sp, #80	; 0x50
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	1dfb      	adds	r3, r7, #7
 8006c2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c2c:	e0a7      	b.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c30:	3301      	adds	r3, #1
 8006c32:	d100      	bne.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006c34:	e0a3      	b.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fb ffd1 	bl	8002bdc <HAL_GetTick>
 8006c3a:	0002      	movs	r2, r0
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d13f      	bne.n	8006ccc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c54:	647b      	str	r3, [r7, #68]	; 0x44
 8006c56:	2301      	movs	r3, #1
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5c:	f383 8810 	msr	PRIMASK, r3
}
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	494e      	ldr	r1, [pc, #312]	; (8006da8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c6e:	400a      	ands	r2, r1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c86:	643b      	str	r3, [r7, #64]	; 0x40
 8006c88:	2301      	movs	r3, #1
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	f383 8810 	msr	PRIMASK, r3
}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006caa:	f383 8810 	msr	PRIMASK, r3
}
 8006cae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2288      	movs	r2, #136	; 0x88
 8006cb4:	2120      	movs	r1, #32
 8006cb6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	228c      	movs	r2, #140	; 0x8c
 8006cbc:	2120      	movs	r1, #32
 8006cbe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2284      	movs	r2, #132	; 0x84
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e069      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d052      	beq.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69da      	ldr	r2, [r3, #28]
 8006cde:	2380      	movs	r3, #128	; 0x80
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	2380      	movs	r3, #128	; 0x80
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d148      	bne.n	8006d7e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2280      	movs	r2, #128	; 0x80
 8006cf2:	0112      	lsls	r2, r2, #4
 8006cf4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8006cfc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d00:	2301      	movs	r3, #1
 8006d02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f383 8810 	msr	PRIMASK, r3
}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4924      	ldr	r1, [pc, #144]	; (8006da8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006d18:	400a      	ands	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f383 8810 	msr	PRIMASK, r3
}
 8006d26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d28:	f3ef 8310 	mrs	r3, PRIMASK
 8006d2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d2e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d32:	2301      	movs	r3, #1
 8006d34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f383 8810 	msr	PRIMASK, r3
}
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2101      	movs	r1, #1
 8006d4a:	438a      	bics	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]
 8006d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	f383 8810 	msr	PRIMASK, r3
}
 8006d58:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2288      	movs	r2, #136	; 0x88
 8006d5e:	2120      	movs	r1, #32
 8006d60:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	228c      	movs	r2, #140	; 0x8c
 8006d66:	2120      	movs	r1, #32
 8006d68:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2290      	movs	r2, #144	; 0x90
 8006d6e:	2120      	movs	r1, #32
 8006d70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2284      	movs	r2, #132	; 0x84
 8006d76:	2100      	movs	r1, #0
 8006d78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e010      	b.n	8006da0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	4013      	ands	r3, r2
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	425a      	negs	r2, r3
 8006d8e:	4153      	adcs	r3, r2
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	001a      	movs	r2, r3
 8006d94:	1dfb      	adds	r3, r7, #7
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d100      	bne.n	8006d9e <UART_WaitOnFlagUntilTimeout+0x182>
 8006d9c:	e747      	b.n	8006c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	0018      	movs	r0, r3
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b014      	add	sp, #80	; 0x50
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	fffffe5f 	.word	0xfffffe5f

08006dac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b098      	sub	sp, #96	; 0x60
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	1dbb      	adds	r3, r7, #6
 8006db8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1dba      	adds	r2, r7, #6
 8006dc4:	215c      	movs	r1, #92	; 0x5c
 8006dc6:	8812      	ldrh	r2, [r2, #0]
 8006dc8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1dba      	adds	r2, r7, #6
 8006dce:	215e      	movs	r1, #94	; 0x5e
 8006dd0:	8812      	ldrh	r2, [r2, #0]
 8006dd2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	2380      	movs	r3, #128	; 0x80
 8006de0:	015b      	lsls	r3, r3, #5
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d10d      	bne.n	8006e02 <UART_Start_Receive_IT+0x56>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <UART_Start_Receive_IT+0x4c>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2260      	movs	r2, #96	; 0x60
 8006df2:	497b      	ldr	r1, [pc, #492]	; (8006fe0 <UART_Start_Receive_IT+0x234>)
 8006df4:	5299      	strh	r1, [r3, r2]
 8006df6:	e02e      	b.n	8006e56 <UART_Start_Receive_IT+0xaa>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2260      	movs	r2, #96	; 0x60
 8006dfc:	21ff      	movs	r1, #255	; 0xff
 8006dfe:	5299      	strh	r1, [r3, r2]
 8006e00:	e029      	b.n	8006e56 <UART_Start_Receive_IT+0xaa>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10d      	bne.n	8006e26 <UART_Start_Receive_IT+0x7a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <UART_Start_Receive_IT+0x70>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2260      	movs	r2, #96	; 0x60
 8006e16:	21ff      	movs	r1, #255	; 0xff
 8006e18:	5299      	strh	r1, [r3, r2]
 8006e1a:	e01c      	b.n	8006e56 <UART_Start_Receive_IT+0xaa>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2260      	movs	r2, #96	; 0x60
 8006e20:	217f      	movs	r1, #127	; 0x7f
 8006e22:	5299      	strh	r1, [r3, r2]
 8006e24:	e017      	b.n	8006e56 <UART_Start_Receive_IT+0xaa>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	055b      	lsls	r3, r3, #21
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d10d      	bne.n	8006e4e <UART_Start_Receive_IT+0xa2>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <UART_Start_Receive_IT+0x98>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2260      	movs	r2, #96	; 0x60
 8006e3e:	217f      	movs	r1, #127	; 0x7f
 8006e40:	5299      	strh	r1, [r3, r2]
 8006e42:	e008      	b.n	8006e56 <UART_Start_Receive_IT+0xaa>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2260      	movs	r2, #96	; 0x60
 8006e48:	213f      	movs	r1, #63	; 0x3f
 8006e4a:	5299      	strh	r1, [r3, r2]
 8006e4c:	e003      	b.n	8006e56 <UART_Start_Receive_IT+0xaa>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2260      	movs	r2, #96	; 0x60
 8006e52:	2100      	movs	r1, #0
 8006e54:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2290      	movs	r2, #144	; 0x90
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	228c      	movs	r2, #140	; 0x8c
 8006e62:	2122      	movs	r1, #34	; 0x22
 8006e64:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e66:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e70:	2301      	movs	r3, #1
 8006e72:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e76:	f383 8810 	msr	PRIMASK, r3
}
 8006e7a:	46c0      	nop			; (mov r8, r8)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2101      	movs	r1, #1
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]
 8006e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e92:	f383 8810 	msr	PRIMASK, r3
}
 8006e96:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	059b      	lsls	r3, r3, #22
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d150      	bne.n	8006f46 <UART_Start_Receive_IT+0x19a>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2268      	movs	r2, #104	; 0x68
 8006ea8:	5a9b      	ldrh	r3, [r3, r2]
 8006eaa:	1dba      	adds	r2, r7, #6
 8006eac:	8812      	ldrh	r2, [r2, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d349      	bcc.n	8006f46 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	2380      	movs	r3, #128	; 0x80
 8006eb8:	015b      	lsls	r3, r3, #5
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d107      	bne.n	8006ece <UART_Start_Receive_IT+0x122>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4a46      	ldr	r2, [pc, #280]	; (8006fe4 <UART_Start_Receive_IT+0x238>)
 8006eca:	675a      	str	r2, [r3, #116]	; 0x74
 8006ecc:	e002      	b.n	8006ed4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a45      	ldr	r2, [pc, #276]	; (8006fe8 <UART_Start_Receive_IT+0x23c>)
 8006ed2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d019      	beq.n	8006f10 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006edc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	f383 8810 	msr	PRIMASK, r3
}
 8006ef0:	46c0      	nop			; (mov r8, r8)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2180      	movs	r1, #128	; 0x80
 8006efe:	0049      	lsls	r1, r1, #1
 8006f00:	430a      	orrs	r2, r1
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0a:	f383 8810 	msr	PRIMASK, r3
}
 8006f0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f10:	f3ef 8310 	mrs	r3, PRIMASK
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f18:	657b      	str	r3, [r7, #84]	; 0x54
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	f383 8810 	msr	PRIMASK, r3
}
 8006f24:	46c0      	nop			; (mov r8, r8)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2180      	movs	r1, #128	; 0x80
 8006f32:	0549      	lsls	r1, r1, #21
 8006f34:	430a      	orrs	r2, r1
 8006f36:	609a      	str	r2, [r3, #8]
 8006f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	f383 8810 	msr	PRIMASK, r3
}
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	e047      	b.n	8006fd6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	2380      	movs	r3, #128	; 0x80
 8006f4c:	015b      	lsls	r3, r3, #5
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d107      	bne.n	8006f62 <UART_Start_Receive_IT+0x1b6>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a23      	ldr	r2, [pc, #140]	; (8006fec <UART_Start_Receive_IT+0x240>)
 8006f5e:	675a      	str	r2, [r3, #116]	; 0x74
 8006f60:	e002      	b.n	8006f68 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4a22      	ldr	r2, [pc, #136]	; (8006ff0 <UART_Start_Receive_IT+0x244>)
 8006f66:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d019      	beq.n	8006fa4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f70:	f3ef 8310 	mrs	r3, PRIMASK
 8006f74:	61fb      	str	r3, [r7, #28]
  return(result);
 8006f76:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	f383 8810 	msr	PRIMASK, r3
}
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2190      	movs	r1, #144	; 0x90
 8006f92:	0049      	lsls	r1, r1, #1
 8006f94:	430a      	orrs	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	e018      	b.n	8006fd6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fa8:	613b      	str	r3, [r7, #16]
  return(result);
 8006faa:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fac:	653b      	str	r3, [r7, #80]	; 0x50
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f383 8810 	msr	PRIMASK, r3
}
 8006fb8:	46c0      	nop			; (mov r8, r8)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2120      	movs	r1, #32
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	f383 8810 	msr	PRIMASK, r3
}
 8006fd4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	0018      	movs	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	b018      	add	sp, #96	; 0x60
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	000001ff 	.word	0x000001ff
 8006fe4:	0800771d 	.word	0x0800771d
 8006fe8:	08007431 	.word	0x08007431
 8006fec:	080072bd 	.word	0x080072bd
 8006ff0:	08007149 	.word	0x08007149

08006ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8007000:	617b      	str	r3, [r7, #20]
  return(result);
 8007002:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
 8007006:	2301      	movs	r3, #1
 8007008:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f383 8810 	msr	PRIMASK, r3
}
 8007010:	46c0      	nop			; (mov r8, r8)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4926      	ldr	r1, [pc, #152]	; (80070b8 <UART_EndRxTransfer+0xc4>)
 800701e:	400a      	ands	r2, r1
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f383 8810 	msr	PRIMASK, r3
}
 800702c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800702e:	f3ef 8310 	mrs	r3, PRIMASK
 8007032:	623b      	str	r3, [r7, #32]
  return(result);
 8007034:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007036:	633b      	str	r3, [r7, #48]	; 0x30
 8007038:	2301      	movs	r3, #1
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	f383 8810 	msr	PRIMASK, r3
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	491b      	ldr	r1, [pc, #108]	; (80070bc <UART_EndRxTransfer+0xc8>)
 8007050:	400a      	ands	r2, r1
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	f383 8810 	msr	PRIMASK, r3
}
 800705e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d118      	bne.n	800709a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007068:	f3ef 8310 	mrs	r3, PRIMASK
 800706c:	60bb      	str	r3, [r7, #8]
  return(result);
 800706e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007072:	2301      	movs	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f383 8810 	msr	PRIMASK, r3
}
 800707c:	46c0      	nop			; (mov r8, r8)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2110      	movs	r1, #16
 800708a:	438a      	bics	r2, r1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f383 8810 	msr	PRIMASK, r3
}
 8007098:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	228c      	movs	r2, #140	; 0x8c
 800709e:	2120      	movs	r1, #32
 80070a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80070ae:	46c0      	nop			; (mov r8, r8)
 80070b0:	46bd      	mov	sp, r7
 80070b2:	b00e      	add	sp, #56	; 0x38
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	fffffedf 	.word	0xfffffedf
 80070bc:	effffffe 	.word	0xeffffffe

080070c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	225e      	movs	r2, #94	; 0x5e
 80070d2:	2100      	movs	r1, #0
 80070d4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2256      	movs	r2, #86	; 0x56
 80070da:	2100      	movs	r1, #0
 80070dc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7ff fae1 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b004      	add	sp, #16
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070f6:	f3ef 8310 	mrs	r3, PRIMASK
 80070fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80070fc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	2301      	movs	r3, #1
 8007102:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f383 8810 	msr	PRIMASK, r3
}
 800710a:	46c0      	nop			; (mov r8, r8)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2140      	movs	r1, #64	; 0x40
 8007118:	438a      	bics	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f383 8810 	msr	PRIMASK, r3
}
 8007126:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2288      	movs	r2, #136	; 0x88
 800712c:	2120      	movs	r1, #32
 800712e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	0018      	movs	r0, r3
 800713a:	f7fa fd9f 	bl	8001c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	46bd      	mov	sp, r7
 8007142:	b006      	add	sp, #24
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b090      	sub	sp, #64	; 0x40
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007150:	203e      	movs	r0, #62	; 0x3e
 8007152:	183b      	adds	r3, r7, r0
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	2160      	movs	r1, #96	; 0x60
 8007158:	5a52      	ldrh	r2, [r2, r1]
 800715a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	228c      	movs	r2, #140	; 0x8c
 8007160:	589b      	ldr	r3, [r3, r2]
 8007162:	2b22      	cmp	r3, #34	; 0x22
 8007164:	d000      	beq.n	8007168 <UART_RxISR_8BIT+0x20>
 8007166:	e09a      	b.n	800729e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800716e:	213c      	movs	r1, #60	; 0x3c
 8007170:	187b      	adds	r3, r7, r1
 8007172:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007174:	187b      	adds	r3, r7, r1
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	b2da      	uxtb	r2, r3
 800717a:	183b      	adds	r3, r7, r0
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b2d9      	uxtb	r1, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007184:	400a      	ands	r2, r1
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	225e      	movs	r2, #94	; 0x5e
 8007198:	5a9b      	ldrh	r3, [r3, r2]
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b299      	uxth	r1, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	225e      	movs	r2, #94	; 0x5e
 80071a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	225e      	movs	r2, #94	; 0x5e
 80071aa:	5a9b      	ldrh	r3, [r3, r2]
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d000      	beq.n	80071b4 <UART_RxISR_8BIT+0x6c>
 80071b2:	e07c      	b.n	80072ae <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b4:	f3ef 8310 	mrs	r3, PRIMASK
 80071b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80071ba:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80071be:	2301      	movs	r3, #1
 80071c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f383 8810 	msr	PRIMASK, r3
}
 80071c8:	46c0      	nop			; (mov r8, r8)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4938      	ldr	r1, [pc, #224]	; (80072b8 <UART_RxISR_8BIT+0x170>)
 80071d6:	400a      	ands	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	f383 8810 	msr	PRIMASK, r3
}
 80071e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e6:	f3ef 8310 	mrs	r3, PRIMASK
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80071ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
 80071f0:	2301      	movs	r3, #1
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f383 8810 	msr	PRIMASK, r3
}
 80071fa:	46c0      	nop			; (mov r8, r8)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2101      	movs	r1, #1
 8007208:	438a      	bics	r2, r1
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	f383 8810 	msr	PRIMASK, r3
}
 8007216:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	228c      	movs	r2, #140	; 0x8c
 800721c:	2120      	movs	r1, #32
 800721e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d12f      	bne.n	8007294 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800723a:	f3ef 8310 	mrs	r3, PRIMASK
 800723e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007240:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007242:	633b      	str	r3, [r7, #48]	; 0x30
 8007244:	2301      	movs	r3, #1
 8007246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f383 8810 	msr	PRIMASK, r3
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2110      	movs	r1, #16
 800725c:	438a      	bics	r2, r1
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f383 8810 	msr	PRIMASK, r3
}
 800726a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	2210      	movs	r2, #16
 8007274:	4013      	ands	r3, r2
 8007276:	2b10      	cmp	r3, #16
 8007278:	d103      	bne.n	8007282 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2210      	movs	r2, #16
 8007280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	225c      	movs	r2, #92	; 0x5c
 8007286:	5a9a      	ldrh	r2, [r3, r2]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	0011      	movs	r1, r2
 800728c:	0018      	movs	r0, r3
 800728e:	f7ff fa13 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007292:	e00c      	b.n	80072ae <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0018      	movs	r0, r3
 8007298:	f7fa fcf8 	bl	8001c8c <HAL_UART_RxCpltCallback>
}
 800729c:	e007      	b.n	80072ae <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699a      	ldr	r2, [r3, #24]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2108      	movs	r1, #8
 80072aa:	430a      	orrs	r2, r1
 80072ac:	619a      	str	r2, [r3, #24]
}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	46bd      	mov	sp, r7
 80072b2:	b010      	add	sp, #64	; 0x40
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	fffffedf 	.word	0xfffffedf

080072bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b090      	sub	sp, #64	; 0x40
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072c4:	203e      	movs	r0, #62	; 0x3e
 80072c6:	183b      	adds	r3, r7, r0
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	2160      	movs	r1, #96	; 0x60
 80072cc:	5a52      	ldrh	r2, [r2, r1]
 80072ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	228c      	movs	r2, #140	; 0x8c
 80072d4:	589b      	ldr	r3, [r3, r2]
 80072d6:	2b22      	cmp	r3, #34	; 0x22
 80072d8:	d000      	beq.n	80072dc <UART_RxISR_16BIT+0x20>
 80072da:	e09a      	b.n	8007412 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e2:	213c      	movs	r1, #60	; 0x3c
 80072e4:	187b      	adds	r3, r7, r1
 80072e6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ec:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80072ee:	187b      	adds	r3, r7, r1
 80072f0:	183a      	adds	r2, r7, r0
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	8812      	ldrh	r2, [r2, #0]
 80072f6:	4013      	ands	r3, r2
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007302:	1c9a      	adds	r2, r3, #2
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	225e      	movs	r2, #94	; 0x5e
 800730c:	5a9b      	ldrh	r3, [r3, r2]
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b299      	uxth	r1, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	225e      	movs	r2, #94	; 0x5e
 8007318:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	225e      	movs	r2, #94	; 0x5e
 800731e:	5a9b      	ldrh	r3, [r3, r2]
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d000      	beq.n	8007328 <UART_RxISR_16BIT+0x6c>
 8007326:	e07c      	b.n	8007422 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007328:	f3ef 8310 	mrs	r3, PRIMASK
 800732c:	617b      	str	r3, [r7, #20]
  return(result);
 800732e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
 8007332:	2301      	movs	r3, #1
 8007334:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	f383 8810 	msr	PRIMASK, r3
}
 800733c:	46c0      	nop			; (mov r8, r8)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4938      	ldr	r1, [pc, #224]	; (800742c <UART_RxISR_16BIT+0x170>)
 800734a:	400a      	ands	r2, r1
 800734c:	601a      	str	r2, [r3, #0]
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800735a:	f3ef 8310 	mrs	r3, PRIMASK
 800735e:	623b      	str	r3, [r7, #32]
  return(result);
 8007360:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	633b      	str	r3, [r7, #48]	; 0x30
 8007364:	2301      	movs	r3, #1
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	f383 8810 	msr	PRIMASK, r3
}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2101      	movs	r1, #1
 800737c:	438a      	bics	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	228c      	movs	r2, #140	; 0x8c
 8007390:	2120      	movs	r1, #32
 8007392:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d12f      	bne.n	8007408 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ae:	f3ef 8310 	mrs	r3, PRIMASK
 80073b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b8:	2301      	movs	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f383 8810 	msr	PRIMASK, r3
}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2110      	movs	r1, #16
 80073d0:	438a      	bics	r2, r1
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f383 8810 	msr	PRIMASK, r3
}
 80073de:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	2210      	movs	r2, #16
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b10      	cmp	r3, #16
 80073ec:	d103      	bne.n	80073f6 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2210      	movs	r2, #16
 80073f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	225c      	movs	r2, #92	; 0x5c
 80073fa:	5a9a      	ldrh	r2, [r3, r2]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	0011      	movs	r1, r2
 8007400:	0018      	movs	r0, r3
 8007402:	f7ff f959 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007406:	e00c      	b.n	8007422 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	0018      	movs	r0, r3
 800740c:	f7fa fc3e 	bl	8001c8c <HAL_UART_RxCpltCallback>
}
 8007410:	e007      	b.n	8007422 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2108      	movs	r1, #8
 800741e:	430a      	orrs	r2, r1
 8007420:	619a      	str	r2, [r3, #24]
}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	46bd      	mov	sp, r7
 8007426:	b010      	add	sp, #64	; 0x40
 8007428:	bd80      	pop	{r7, pc}
 800742a:	46c0      	nop			; (mov r8, r8)
 800742c:	fffffedf 	.word	0xfffffedf

08007430 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b09c      	sub	sp, #112	; 0x70
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007438:	236a      	movs	r3, #106	; 0x6a
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	2160      	movs	r1, #96	; 0x60
 8007440:	5a52      	ldrh	r2, [r2, r1]
 8007442:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	228c      	movs	r2, #140	; 0x8c
 8007460:	589b      	ldr	r3, [r3, r2]
 8007462:	2b22      	cmp	r3, #34	; 0x22
 8007464:	d000      	beq.n	8007468 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007466:	e144      	b.n	80076f2 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007468:	235e      	movs	r3, #94	; 0x5e
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	2168      	movs	r1, #104	; 0x68
 8007470:	5a52      	ldrh	r2, [r2, r1]
 8007472:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007474:	e0eb      	b.n	800764e <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800747c:	215c      	movs	r1, #92	; 0x5c
 800747e:	187b      	adds	r3, r7, r1
 8007480:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007482:	187b      	adds	r3, r7, r1
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	236a      	movs	r3, #106	; 0x6a
 800748a:	18fb      	adds	r3, r7, r3
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b2d9      	uxtb	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007494:	400a      	ands	r2, r1
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	225e      	movs	r2, #94	; 0x5e
 80074a8:	5a9b      	ldrh	r3, [r3, r2]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	3b01      	subs	r3, #1
 80074ae:	b299      	uxth	r1, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	225e      	movs	r2, #94	; 0x5e
 80074b4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c0:	2207      	movs	r2, #7
 80074c2:	4013      	ands	r3, r2
 80074c4:	d049      	beq.n	800755a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074c8:	2201      	movs	r2, #1
 80074ca:	4013      	ands	r3, r2
 80074cc:	d010      	beq.n	80074f0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80074ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4013      	ands	r3, r2
 80074d6:	d00b      	beq.n	80074f0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2201      	movs	r2, #1
 80074de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2290      	movs	r2, #144	; 0x90
 80074e4:	589b      	ldr	r3, [r3, r2]
 80074e6:	2201      	movs	r2, #1
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2190      	movs	r1, #144	; 0x90
 80074ee:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f2:	2202      	movs	r2, #2
 80074f4:	4013      	ands	r3, r2
 80074f6:	d00f      	beq.n	8007518 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80074f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074fa:	2201      	movs	r2, #1
 80074fc:	4013      	ands	r3, r2
 80074fe:	d00b      	beq.n	8007518 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2202      	movs	r2, #2
 8007506:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2290      	movs	r2, #144	; 0x90
 800750c:	589b      	ldr	r3, [r3, r2]
 800750e:	2204      	movs	r2, #4
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2190      	movs	r1, #144	; 0x90
 8007516:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751a:	2204      	movs	r2, #4
 800751c:	4013      	ands	r3, r2
 800751e:	d00f      	beq.n	8007540 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007522:	2201      	movs	r2, #1
 8007524:	4013      	ands	r3, r2
 8007526:	d00b      	beq.n	8007540 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2290      	movs	r2, #144	; 0x90
 8007534:	589b      	ldr	r3, [r3, r2]
 8007536:	2202      	movs	r2, #2
 8007538:	431a      	orrs	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2190      	movs	r1, #144	; 0x90
 800753e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2290      	movs	r2, #144	; 0x90
 8007544:	589b      	ldr	r3, [r3, r2]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f7ff f8ab 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2290      	movs	r2, #144	; 0x90
 8007556:	2100      	movs	r1, #0
 8007558:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	225e      	movs	r2, #94	; 0x5e
 800755e:	5a9b      	ldrh	r3, [r3, r2]
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d173      	bne.n	800764e <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007566:	f3ef 8310 	mrs	r3, PRIMASK
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800756e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007570:	2301      	movs	r3, #1
 8007572:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4961      	ldr	r1, [pc, #388]	; (800770c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007588:	400a      	ands	r2, r1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	f383 8810 	msr	PRIMASK, r3
}
 8007596:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007598:	f3ef 8310 	mrs	r3, PRIMASK
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075a0:	657b      	str	r3, [r7, #84]	; 0x54
 80075a2:	2301      	movs	r3, #1
 80075a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	f383 8810 	msr	PRIMASK, r3
}
 80075ac:	46c0      	nop			; (mov r8, r8)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4955      	ldr	r1, [pc, #340]	; (8007710 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80075ba:	400a      	ands	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075c4:	f383 8810 	msr	PRIMASK, r3
}
 80075c8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	228c      	movs	r2, #140	; 0x8c
 80075ce:	2120      	movs	r1, #32
 80075d0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d12f      	bne.n	8007646 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075ec:	f3ef 8310 	mrs	r3, PRIMASK
 80075f0:	623b      	str	r3, [r7, #32]
  return(result);
 80075f2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	653b      	str	r3, [r7, #80]	; 0x50
 80075f6:	2301      	movs	r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	f383 8810 	msr	PRIMASK, r3
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2110      	movs	r1, #16
 800760e:	438a      	bics	r2, r1
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	f383 8810 	msr	PRIMASK, r3
}
 800761c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	2210      	movs	r2, #16
 8007626:	4013      	ands	r3, r2
 8007628:	2b10      	cmp	r3, #16
 800762a:	d103      	bne.n	8007634 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2210      	movs	r2, #16
 8007632:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	225c      	movs	r2, #92	; 0x5c
 8007638:	5a9a      	ldrh	r2, [r3, r2]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	0011      	movs	r1, r2
 800763e:	0018      	movs	r0, r3
 8007640:	f7ff f83a 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
 8007644:	e003      	b.n	800764e <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	0018      	movs	r0, r3
 800764a:	f7fa fb1f 	bl	8001c8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800764e:	235e      	movs	r3, #94	; 0x5e
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765a:	2220      	movs	r2, #32
 800765c:	4013      	ands	r3, r2
 800765e:	d000      	beq.n	8007662 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007660:	e709      	b.n	8007476 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007662:	204e      	movs	r0, #78	; 0x4e
 8007664:	183b      	adds	r3, r7, r0
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	215e      	movs	r1, #94	; 0x5e
 800766a:	5a52      	ldrh	r2, [r2, r1]
 800766c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800766e:	0001      	movs	r1, r0
 8007670:	187b      	adds	r3, r7, r1
 8007672:	881b      	ldrh	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d044      	beq.n	8007702 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2268      	movs	r2, #104	; 0x68
 800767c:	5a9b      	ldrh	r3, [r3, r2]
 800767e:	187a      	adds	r2, r7, r1
 8007680:	8812      	ldrh	r2, [r2, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d23d      	bcs.n	8007702 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007686:	f3ef 8310 	mrs	r3, PRIMASK
 800768a:	60bb      	str	r3, [r7, #8]
  return(result);
 800768c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800768e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007690:	2301      	movs	r3, #1
 8007692:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f383 8810 	msr	PRIMASK, r3
}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	491b      	ldr	r1, [pc, #108]	; (8007714 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80076a8:	400a      	ands	r2, r1
 80076aa:	609a      	str	r2, [r3, #8]
 80076ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f383 8810 	msr	PRIMASK, r3
}
 80076b6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a17      	ldr	r2, [pc, #92]	; (8007718 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80076bc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	617b      	str	r3, [r7, #20]
  return(result);
 80076c4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076c6:	647b      	str	r3, [r7, #68]	; 0x44
 80076c8:	2301      	movs	r3, #1
 80076ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	f383 8810 	msr	PRIMASK, r3
}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2120      	movs	r1, #32
 80076e0:	430a      	orrs	r2, r1
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f383 8810 	msr	PRIMASK, r3
}
 80076ee:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076f0:	e007      	b.n	8007702 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	699a      	ldr	r2, [r3, #24]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2108      	movs	r1, #8
 80076fe:	430a      	orrs	r2, r1
 8007700:	619a      	str	r2, [r3, #24]
}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	46bd      	mov	sp, r7
 8007706:	b01c      	add	sp, #112	; 0x70
 8007708:	bd80      	pop	{r7, pc}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	fffffeff 	.word	0xfffffeff
 8007710:	effffffe 	.word	0xeffffffe
 8007714:	efffffff 	.word	0xefffffff
 8007718:	08007149 	.word	0x08007149

0800771c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b09e      	sub	sp, #120	; 0x78
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007724:	2372      	movs	r3, #114	; 0x72
 8007726:	18fb      	adds	r3, r7, r3
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	2160      	movs	r1, #96	; 0x60
 800772c:	5a52      	ldrh	r2, [r2, r1]
 800772e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	228c      	movs	r2, #140	; 0x8c
 800774c:	589b      	ldr	r3, [r3, r2]
 800774e:	2b22      	cmp	r3, #34	; 0x22
 8007750:	d000      	beq.n	8007754 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007752:	e144      	b.n	80079de <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007754:	2366      	movs	r3, #102	; 0x66
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	2168      	movs	r1, #104	; 0x68
 800775c:	5a52      	ldrh	r2, [r2, r1]
 800775e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007760:	e0eb      	b.n	800793a <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007768:	2164      	movs	r1, #100	; 0x64
 800776a:	187b      	adds	r3, r7, r1
 800776c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007774:	187b      	adds	r3, r7, r1
 8007776:	2272      	movs	r2, #114	; 0x72
 8007778:	18ba      	adds	r2, r7, r2
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	8812      	ldrh	r2, [r2, #0]
 800777e:	4013      	ands	r3, r2
 8007780:	b29a      	uxth	r2, r3
 8007782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007784:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778a:	1c9a      	adds	r2, r3, #2
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	225e      	movs	r2, #94	; 0x5e
 8007794:	5a9b      	ldrh	r3, [r3, r2]
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b299      	uxth	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	225e      	movs	r2, #94	; 0x5e
 80077a0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ac:	2207      	movs	r2, #7
 80077ae:	4013      	ands	r3, r2
 80077b0:	d049      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077b4:	2201      	movs	r2, #1
 80077b6:	4013      	ands	r3, r2
 80077b8:	d010      	beq.n	80077dc <UART_RxISR_16BIT_FIFOEN+0xc0>
 80077ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	4013      	ands	r3, r2
 80077c2:	d00b      	beq.n	80077dc <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2201      	movs	r2, #1
 80077ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2290      	movs	r2, #144	; 0x90
 80077d0:	589b      	ldr	r3, [r3, r2]
 80077d2:	2201      	movs	r2, #1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2190      	movs	r1, #144	; 0x90
 80077da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077de:	2202      	movs	r2, #2
 80077e0:	4013      	ands	r3, r2
 80077e2:	d00f      	beq.n	8007804 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80077e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077e6:	2201      	movs	r2, #1
 80077e8:	4013      	ands	r3, r2
 80077ea:	d00b      	beq.n	8007804 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2202      	movs	r2, #2
 80077f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2290      	movs	r2, #144	; 0x90
 80077f8:	589b      	ldr	r3, [r3, r2]
 80077fa:	2204      	movs	r2, #4
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2190      	movs	r1, #144	; 0x90
 8007802:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007806:	2204      	movs	r2, #4
 8007808:	4013      	ands	r3, r2
 800780a:	d00f      	beq.n	800782c <UART_RxISR_16BIT_FIFOEN+0x110>
 800780c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800780e:	2201      	movs	r2, #1
 8007810:	4013      	ands	r3, r2
 8007812:	d00b      	beq.n	800782c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2204      	movs	r2, #4
 800781a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2290      	movs	r2, #144	; 0x90
 8007820:	589b      	ldr	r3, [r3, r2]
 8007822:	2202      	movs	r2, #2
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2190      	movs	r1, #144	; 0x90
 800782a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2290      	movs	r2, #144	; 0x90
 8007830:	589b      	ldr	r3, [r3, r2]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d007      	beq.n	8007846 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0018      	movs	r0, r3
 800783a:	f7fe ff35 	bl	80066a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2290      	movs	r2, #144	; 0x90
 8007842:	2100      	movs	r1, #0
 8007844:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	225e      	movs	r2, #94	; 0x5e
 800784a:	5a9b      	ldrh	r3, [r3, r2]
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d173      	bne.n	800793a <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007852:	f3ef 8310 	mrs	r3, PRIMASK
 8007856:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800785c:	2301      	movs	r3, #1
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	f383 8810 	msr	PRIMASK, r3
}
 8007866:	46c0      	nop			; (mov r8, r8)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4961      	ldr	r1, [pc, #388]	; (80079f8 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007874:	400a      	ands	r2, r1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800787a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	f383 8810 	msr	PRIMASK, r3
}
 8007882:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007884:	f3ef 8310 	mrs	r3, PRIMASK
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800788a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800788c:	65bb      	str	r3, [r7, #88]	; 0x58
 800788e:	2301      	movs	r3, #1
 8007890:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007894:	f383 8810 	msr	PRIMASK, r3
}
 8007898:	46c0      	nop			; (mov r8, r8)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4955      	ldr	r1, [pc, #340]	; (80079fc <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80078a6:	400a      	ands	r2, r1
 80078a8:	609a      	str	r2, [r3, #8]
 80078aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b0:	f383 8810 	msr	PRIMASK, r3
}
 80078b4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	228c      	movs	r2, #140	; 0x8c
 80078ba:	2120      	movs	r1, #32
 80078bc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d12f      	bne.n	8007932 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d8:	f3ef 8310 	mrs	r3, PRIMASK
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	657b      	str	r3, [r7, #84]	; 0x54
 80078e2:	2301      	movs	r3, #1
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	f383 8810 	msr	PRIMASK, r3
}
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2110      	movs	r1, #16
 80078fa:	438a      	bics	r2, r1
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	f383 8810 	msr	PRIMASK, r3
}
 8007908:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	2210      	movs	r2, #16
 8007912:	4013      	ands	r3, r2
 8007914:	2b10      	cmp	r3, #16
 8007916:	d103      	bne.n	8007920 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2210      	movs	r2, #16
 800791e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	225c      	movs	r2, #92	; 0x5c
 8007924:	5a9a      	ldrh	r2, [r3, r2]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	0011      	movs	r1, r2
 800792a:	0018      	movs	r0, r3
 800792c:	f7fe fec4 	bl	80066b8 <HAL_UARTEx_RxEventCallback>
 8007930:	e003      	b.n	800793a <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	0018      	movs	r0, r3
 8007936:	f7fa f9a9 	bl	8001c8c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800793a:	2366      	movs	r3, #102	; 0x66
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <UART_RxISR_16BIT_FIFOEN+0x232>
 8007944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007946:	2220      	movs	r2, #32
 8007948:	4013      	ands	r3, r2
 800794a:	d000      	beq.n	800794e <UART_RxISR_16BIT_FIFOEN+0x232>
 800794c:	e709      	b.n	8007762 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800794e:	2052      	movs	r0, #82	; 0x52
 8007950:	183b      	adds	r3, r7, r0
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	215e      	movs	r1, #94	; 0x5e
 8007956:	5a52      	ldrh	r2, [r2, r1]
 8007958:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800795a:	0001      	movs	r1, r0
 800795c:	187b      	adds	r3, r7, r1
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d044      	beq.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2268      	movs	r2, #104	; 0x68
 8007968:	5a9b      	ldrh	r3, [r3, r2]
 800796a:	187a      	adds	r2, r7, r1
 800796c:	8812      	ldrh	r2, [r2, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d23d      	bcs.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007972:	f3ef 8310 	mrs	r3, PRIMASK
 8007976:	60fb      	str	r3, [r7, #12]
  return(result);
 8007978:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797c:	2301      	movs	r3, #1
 800797e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f383 8810 	msr	PRIMASK, r3
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	491b      	ldr	r1, [pc, #108]	; (8007a00 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8007994:	400a      	ands	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f383 8810 	msr	PRIMASK, r3
}
 80079a2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80079a8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079aa:	f3ef 8310 	mrs	r3, PRIMASK
 80079ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80079b0:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b4:	2301      	movs	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f383 8810 	msr	PRIMASK, r3
}
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2120      	movs	r1, #32
 80079cc:	430a      	orrs	r2, r1
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	f383 8810 	msr	PRIMASK, r3
}
 80079da:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079dc:	e007      	b.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2108      	movs	r1, #8
 80079ea:	430a      	orrs	r2, r1
 80079ec:	619a      	str	r2, [r3, #24]
}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	46bd      	mov	sp, r7
 80079f2:	b01e      	add	sp, #120	; 0x78
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	fffffeff 	.word	0xfffffeff
 80079fc:	effffffe 	.word	0xeffffffe
 8007a00:	efffffff 	.word	0xefffffff
 8007a04:	080072bd 	.word	0x080072bd

08007a08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a20:	46c0      	nop			; (mov r8, r8)
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b002      	add	sp, #8
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a30:	46c0      	nop			; (mov r8, r8)
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b002      	add	sp, #8
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2284      	movs	r2, #132	; 0x84
 8007a44:	5c9b      	ldrb	r3, [r3, r2]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_UARTEx_DisableFifoMode+0x16>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e027      	b.n	8007a9e <HAL_UARTEx_DisableFifoMode+0x66>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2284      	movs	r2, #132	; 0x84
 8007a52:	2101      	movs	r1, #1
 8007a54:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2288      	movs	r2, #136	; 0x88
 8007a5a:	2124      	movs	r1, #36	; 0x24
 8007a5c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2101      	movs	r1, #1
 8007a72:	438a      	bics	r2, r1
 8007a74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a0b      	ldr	r2, [pc, #44]	; (8007aa8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2288      	movs	r2, #136	; 0x88
 8007a90:	2120      	movs	r1, #32
 8007a92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2284      	movs	r2, #132	; 0x84
 8007a98:	2100      	movs	r1, #0
 8007a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	b004      	add	sp, #16
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	dfffffff 	.word	0xdfffffff

08007aac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2284      	movs	r2, #132	; 0x84
 8007aba:	5c9b      	ldrb	r3, [r3, r2]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e02e      	b.n	8007b22 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2284      	movs	r2, #132	; 0x84
 8007ac8:	2101      	movs	r1, #1
 8007aca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2288      	movs	r2, #136	; 0x88
 8007ad0:	2124      	movs	r1, #36	; 0x24
 8007ad2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	438a      	bics	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	08d9      	lsrs	r1, r3, #3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f000 f854 	bl	8007bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2288      	movs	r2, #136	; 0x88
 8007b14:	2120      	movs	r1, #32
 8007b16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2284      	movs	r2, #132	; 0x84
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	0018      	movs	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b004      	add	sp, #16
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2284      	movs	r2, #132	; 0x84
 8007b3a:	5c9b      	ldrb	r3, [r3, r2]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e02f      	b.n	8007ba4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2284      	movs	r2, #132	; 0x84
 8007b48:	2101      	movs	r1, #1
 8007b4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2288      	movs	r2, #136	; 0x88
 8007b50:	2124      	movs	r1, #36	; 0x24
 8007b52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2101      	movs	r1, #1
 8007b68:	438a      	bics	r2, r1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4a0e      	ldr	r2, [pc, #56]	; (8007bac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	0019      	movs	r1, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	0018      	movs	r0, r3
 8007b86:	f000 f813 	bl	8007bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2288      	movs	r2, #136	; 0x88
 8007b96:	2120      	movs	r1, #32
 8007b98:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2284      	movs	r2, #132	; 0x84
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	f1ffffff 	.word	0xf1ffffff

08007bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d108      	bne.n	8007bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	226a      	movs	r2, #106	; 0x6a
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2268      	movs	r2, #104	; 0x68
 8007bcc:	2101      	movs	r1, #1
 8007bce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bd0:	e043      	b.n	8007c5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bd2:	260f      	movs	r6, #15
 8007bd4:	19bb      	adds	r3, r7, r6
 8007bd6:	2208      	movs	r2, #8
 8007bd8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bda:	200e      	movs	r0, #14
 8007bdc:	183b      	adds	r3, r7, r0
 8007bde:	2208      	movs	r2, #8
 8007be0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	0e5b      	lsrs	r3, r3, #25
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	240d      	movs	r4, #13
 8007bee:	193b      	adds	r3, r7, r4
 8007bf0:	2107      	movs	r1, #7
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	0f5b      	lsrs	r3, r3, #29
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	250c      	movs	r5, #12
 8007c02:	197b      	adds	r3, r7, r5
 8007c04:	2107      	movs	r1, #7
 8007c06:	400a      	ands	r2, r1
 8007c08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c0a:	183b      	adds	r3, r7, r0
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	197a      	adds	r2, r7, r5
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	4914      	ldr	r1, [pc, #80]	; (8007c64 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c14:	5c8a      	ldrb	r2, [r1, r2]
 8007c16:	435a      	muls	r2, r3
 8007c18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c1a:	197b      	adds	r3, r7, r5
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4a12      	ldr	r2, [pc, #72]	; (8007c68 <UARTEx_SetNbDataToProcess+0xb8>)
 8007c20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c22:	0019      	movs	r1, r3
 8007c24:	f7f8 faf6 	bl	8000214 <__divsi3>
 8007c28:	0003      	movs	r3, r0
 8007c2a:	b299      	uxth	r1, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	226a      	movs	r2, #106	; 0x6a
 8007c30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c32:	19bb      	adds	r3, r7, r6
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	193a      	adds	r2, r7, r4
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	490a      	ldr	r1, [pc, #40]	; (8007c64 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c3c:	5c8a      	ldrb	r2, [r1, r2]
 8007c3e:	435a      	muls	r2, r3
 8007c40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c42:	193b      	adds	r3, r7, r4
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <UARTEx_SetNbDataToProcess+0xb8>)
 8007c48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c4a:	0019      	movs	r1, r3
 8007c4c:	f7f8 fae2 	bl	8000214 <__divsi3>
 8007c50:	0003      	movs	r3, r0
 8007c52:	b299      	uxth	r1, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2268      	movs	r2, #104	; 0x68
 8007c58:	5299      	strh	r1, [r3, r2]
}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b005      	add	sp, #20
 8007c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	08007e28 	.word	0x08007e28
 8007c68:	08007e30 	.word	0x08007e30

08007c6c <__libc_init_array>:
 8007c6c:	b570      	push	{r4, r5, r6, lr}
 8007c6e:	2600      	movs	r6, #0
 8007c70:	4d0c      	ldr	r5, [pc, #48]	; (8007ca4 <__libc_init_array+0x38>)
 8007c72:	4c0d      	ldr	r4, [pc, #52]	; (8007ca8 <__libc_init_array+0x3c>)
 8007c74:	1b64      	subs	r4, r4, r5
 8007c76:	10a4      	asrs	r4, r4, #2
 8007c78:	42a6      	cmp	r6, r4
 8007c7a:	d109      	bne.n	8007c90 <__libc_init_array+0x24>
 8007c7c:	2600      	movs	r6, #0
 8007c7e:	f000 f821 	bl	8007cc4 <_init>
 8007c82:	4d0a      	ldr	r5, [pc, #40]	; (8007cac <__libc_init_array+0x40>)
 8007c84:	4c0a      	ldr	r4, [pc, #40]	; (8007cb0 <__libc_init_array+0x44>)
 8007c86:	1b64      	subs	r4, r4, r5
 8007c88:	10a4      	asrs	r4, r4, #2
 8007c8a:	42a6      	cmp	r6, r4
 8007c8c:	d105      	bne.n	8007c9a <__libc_init_array+0x2e>
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	00b3      	lsls	r3, r6, #2
 8007c92:	58eb      	ldr	r3, [r5, r3]
 8007c94:	4798      	blx	r3
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7ee      	b.n	8007c78 <__libc_init_array+0xc>
 8007c9a:	00b3      	lsls	r3, r6, #2
 8007c9c:	58eb      	ldr	r3, [r5, r3]
 8007c9e:	4798      	blx	r3
 8007ca0:	3601      	adds	r6, #1
 8007ca2:	e7f2      	b.n	8007c8a <__libc_init_array+0x1e>
 8007ca4:	08007e38 	.word	0x08007e38
 8007ca8:	08007e38 	.word	0x08007e38
 8007cac:	08007e38 	.word	0x08007e38
 8007cb0:	08007e3c 	.word	0x08007e3c

08007cb4 <memset>:
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	1882      	adds	r2, r0, r2
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d100      	bne.n	8007cbe <memset+0xa>
 8007cbc:	4770      	bx	lr
 8007cbe:	7019      	strb	r1, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	e7f9      	b.n	8007cb8 <memset+0x4>

08007cc4 <_init>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr

08007cd0 <_fini>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr
