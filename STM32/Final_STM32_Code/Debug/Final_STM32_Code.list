
Final_STM32_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000885c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a74  08008a74  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a7c  08008a7c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  2000001c  08008aa0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08008aa0  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fb4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231f  00000000  00000000  00031ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00035238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001608d  00000000  00000000  00036090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c2  00000000  00000000  0004c11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902f5  00000000  00000000  0005d5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed8d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038e4  00000000  00000000  000ed924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008900 	.word	0x08008900

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08008900 	.word	0x08008900

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f001 fa67 	bl	800190c <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f001 f9d1 	bl	80017ec <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 fe38 	bl	80010c8 <__aeabi_dsub>
 8000458:	f001 f9c8 	bl	80017ec <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f001 fa66 	bl	800195c <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f001 fa61 	bl	800195c <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	469b      	mov	fp, r3
 80004a2:	d433      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a4:	465a      	mov	r2, fp
 80004a6:	4653      	mov	r3, sl
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83a      	bhi.n	800052e <__udivmoddi4+0xc2>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e078      	b.n	80005b0 <__udivmoddi4+0x144>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e075      	b.n	80005b6 <__udivmoddi4+0x14a>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e028      	b.n	8000536 <__udivmoddi4+0xca>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	2320      	movs	r3, #32
 8000510:	1a9b      	subs	r3, r3, r2
 8000512:	4652      	mov	r2, sl
 8000514:	40da      	lsrs	r2, r3
 8000516:	4641      	mov	r1, r8
 8000518:	0013      	movs	r3, r2
 800051a:	464a      	mov	r2, r9
 800051c:	408a      	lsls	r2, r1
 800051e:	0017      	movs	r7, r2
 8000520:	4642      	mov	r2, r8
 8000522:	431f      	orrs	r7, r3
 8000524:	4653      	mov	r3, sl
 8000526:	4093      	lsls	r3, r2
 8000528:	001e      	movs	r6, r3
 800052a:	42af      	cmp	r7, r5
 800052c:	d9c4      	bls.n	80004b8 <__udivmoddi4+0x4c>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	4643      	mov	r3, r8
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0d9      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053c:	07fb      	lsls	r3, r7, #31
 800053e:	0872      	lsrs	r2, r6, #1
 8000540:	431a      	orrs	r2, r3
 8000542:	4646      	mov	r6, r8
 8000544:	087b      	lsrs	r3, r7, #1
 8000546:	e00e      	b.n	8000566 <__udivmoddi4+0xfa>
 8000548:	42ab      	cmp	r3, r5
 800054a:	d101      	bne.n	8000550 <__udivmoddi4+0xe4>
 800054c:	42a2      	cmp	r2, r4
 800054e:	d80c      	bhi.n	800056a <__udivmoddi4+0xfe>
 8000550:	1aa4      	subs	r4, r4, r2
 8000552:	419d      	sbcs	r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2100      	movs	r1, #0
 800055c:	3e01      	subs	r6, #1
 800055e:	1824      	adds	r4, r4, r0
 8000560:	414d      	adcs	r5, r1
 8000562:	2e00      	cmp	r6, #0
 8000564:	d006      	beq.n	8000574 <__udivmoddi4+0x108>
 8000566:	42ab      	cmp	r3, r5
 8000568:	d9ee      	bls.n	8000548 <__udivmoddi4+0xdc>
 800056a:	3e01      	subs	r6, #1
 800056c:	1924      	adds	r4, r4, r4
 800056e:	416d      	adcs	r5, r5
 8000570:	2e00      	cmp	r6, #0
 8000572:	d1f8      	bne.n	8000566 <__udivmoddi4+0xfa>
 8000574:	9800      	ldr	r0, [sp, #0]
 8000576:	9901      	ldr	r1, [sp, #4]
 8000578:	465b      	mov	r3, fp
 800057a:	1900      	adds	r0, r0, r4
 800057c:	4169      	adcs	r1, r5
 800057e:	2b00      	cmp	r3, #0
 8000580:	db24      	blt.n	80005cc <__udivmoddi4+0x160>
 8000582:	002b      	movs	r3, r5
 8000584:	465a      	mov	r2, fp
 8000586:	4644      	mov	r4, r8
 8000588:	40d3      	lsrs	r3, r2
 800058a:	002a      	movs	r2, r5
 800058c:	40e2      	lsrs	r2, r4
 800058e:	001c      	movs	r4, r3
 8000590:	465b      	mov	r3, fp
 8000592:	0015      	movs	r5, r2
 8000594:	2b00      	cmp	r3, #0
 8000596:	db2a      	blt.n	80005ee <__udivmoddi4+0x182>
 8000598:	0026      	movs	r6, r4
 800059a:	409e      	lsls	r6, r3
 800059c:	0033      	movs	r3, r6
 800059e:	0026      	movs	r6, r4
 80005a0:	4647      	mov	r7, r8
 80005a2:	40be      	lsls	r6, r7
 80005a4:	0032      	movs	r2, r6
 80005a6:	1a80      	subs	r0, r0, r2
 80005a8:	4199      	sbcs	r1, r3
 80005aa:	9000      	str	r0, [sp, #0]
 80005ac:	9101      	str	r1, [sp, #4]
 80005ae:	e79f      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d8bc      	bhi.n	800052e <__udivmoddi4+0xc2>
 80005b4:	e783      	b.n	80004be <__udivmoddi4+0x52>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	2100      	movs	r1, #0
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	2200      	movs	r2, #0
 80005c0:	9100      	str	r1, [sp, #0]
 80005c2:	9201      	str	r2, [sp, #4]
 80005c4:	2201      	movs	r2, #1
 80005c6:	40da      	lsrs	r2, r3
 80005c8:	9201      	str	r2, [sp, #4]
 80005ca:	e786      	b.n	80004da <__udivmoddi4+0x6e>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	4646      	mov	r6, r8
 80005d6:	409a      	lsls	r2, r3
 80005d8:	0023      	movs	r3, r4
 80005da:	40f3      	lsrs	r3, r6
 80005dc:	4644      	mov	r4, r8
 80005de:	4313      	orrs	r3, r2
 80005e0:	002a      	movs	r2, r5
 80005e2:	40e2      	lsrs	r2, r4
 80005e4:	001c      	movs	r4, r3
 80005e6:	465b      	mov	r3, fp
 80005e8:	0015      	movs	r5, r2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	dad4      	bge.n	8000598 <__udivmoddi4+0x12c>
 80005ee:	4642      	mov	r2, r8
 80005f0:	002f      	movs	r7, r5
 80005f2:	2320      	movs	r3, #32
 80005f4:	0026      	movs	r6, r4
 80005f6:	4097      	lsls	r7, r2
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	40de      	lsrs	r6, r3
 80005fc:	003b      	movs	r3, r7
 80005fe:	4333      	orrs	r3, r6
 8000600:	e7cd      	b.n	800059e <__udivmoddi4+0x132>
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__aeabi_ddiv>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	4657      	mov	r7, sl
 8000608:	464e      	mov	r6, r9
 800060a:	4645      	mov	r5, r8
 800060c:	46de      	mov	lr, fp
 800060e:	b5e0      	push	{r5, r6, r7, lr}
 8000610:	4681      	mov	r9, r0
 8000612:	0005      	movs	r5, r0
 8000614:	030c      	lsls	r4, r1, #12
 8000616:	0048      	lsls	r0, r1, #1
 8000618:	4692      	mov	sl, r2
 800061a:	001f      	movs	r7, r3
 800061c:	b085      	sub	sp, #20
 800061e:	0b24      	lsrs	r4, r4, #12
 8000620:	0d40      	lsrs	r0, r0, #21
 8000622:	0fce      	lsrs	r6, r1, #31
 8000624:	2800      	cmp	r0, #0
 8000626:	d100      	bne.n	800062a <__aeabi_ddiv+0x26>
 8000628:	e156      	b.n	80008d8 <__aeabi_ddiv+0x2d4>
 800062a:	4bd4      	ldr	r3, [pc, #848]	; (800097c <__aeabi_ddiv+0x378>)
 800062c:	4298      	cmp	r0, r3
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0x2e>
 8000630:	e172      	b.n	8000918 <__aeabi_ddiv+0x314>
 8000632:	0f6b      	lsrs	r3, r5, #29
 8000634:	00e4      	lsls	r4, r4, #3
 8000636:	431c      	orrs	r4, r3
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	041b      	lsls	r3, r3, #16
 800063c:	4323      	orrs	r3, r4
 800063e:	4698      	mov	r8, r3
 8000640:	4bcf      	ldr	r3, [pc, #828]	; (8000980 <__aeabi_ddiv+0x37c>)
 8000642:	00ed      	lsls	r5, r5, #3
 8000644:	469b      	mov	fp, r3
 8000646:	2300      	movs	r3, #0
 8000648:	4699      	mov	r9, r3
 800064a:	4483      	add	fp, r0
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	033c      	lsls	r4, r7, #12
 8000650:	007b      	lsls	r3, r7, #1
 8000652:	4650      	mov	r0, sl
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	0d5b      	lsrs	r3, r3, #21
 8000658:	0fff      	lsrs	r7, r7, #31
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_ddiv+0x5c>
 800065e:	e11f      	b.n	80008a0 <__aeabi_ddiv+0x29c>
 8000660:	4ac6      	ldr	r2, [pc, #792]	; (800097c <__aeabi_ddiv+0x378>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d100      	bne.n	8000668 <__aeabi_ddiv+0x64>
 8000666:	e162      	b.n	800092e <__aeabi_ddiv+0x32a>
 8000668:	49c5      	ldr	r1, [pc, #788]	; (8000980 <__aeabi_ddiv+0x37c>)
 800066a:	0f42      	lsrs	r2, r0, #29
 800066c:	468c      	mov	ip, r1
 800066e:	00e4      	lsls	r4, r4, #3
 8000670:	4659      	mov	r1, fp
 8000672:	4314      	orrs	r4, r2
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	4463      	add	r3, ip
 8000678:	0412      	lsls	r2, r2, #16
 800067a:	1acb      	subs	r3, r1, r3
 800067c:	4314      	orrs	r4, r2
 800067e:	469b      	mov	fp, r3
 8000680:	00c2      	lsls	r2, r0, #3
 8000682:	2000      	movs	r0, #0
 8000684:	0033      	movs	r3, r6
 8000686:	407b      	eors	r3, r7
 8000688:	469a      	mov	sl, r3
 800068a:	464b      	mov	r3, r9
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d827      	bhi.n	80006e0 <__aeabi_ddiv+0xdc>
 8000690:	49bc      	ldr	r1, [pc, #752]	; (8000984 <__aeabi_ddiv+0x380>)
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	58cb      	ldr	r3, [r1, r3]
 8000696:	469f      	mov	pc, r3
 8000698:	46b2      	mov	sl, r6
 800069a:	9b00      	ldr	r3, [sp, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d016      	beq.n	80006ce <__aeabi_ddiv+0xca>
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0xa2>
 80006a4:	e28e      	b.n	8000bc4 <__aeabi_ddiv+0x5c0>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d000      	beq.n	80006ac <__aeabi_ddiv+0xa8>
 80006aa:	e0d9      	b.n	8000860 <__aeabi_ddiv+0x25c>
 80006ac:	2300      	movs	r3, #0
 80006ae:	2400      	movs	r4, #0
 80006b0:	2500      	movs	r5, #0
 80006b2:	4652      	mov	r2, sl
 80006b4:	051b      	lsls	r3, r3, #20
 80006b6:	4323      	orrs	r3, r4
 80006b8:	07d2      	lsls	r2, r2, #31
 80006ba:	4313      	orrs	r3, r2
 80006bc:	0028      	movs	r0, r5
 80006be:	0019      	movs	r1, r3
 80006c0:	b005      	add	sp, #20
 80006c2:	bcf0      	pop	{r4, r5, r6, r7}
 80006c4:	46bb      	mov	fp, r7
 80006c6:	46b2      	mov	sl, r6
 80006c8:	46a9      	mov	r9, r5
 80006ca:	46a0      	mov	r8, r4
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	2400      	movs	r4, #0
 80006d0:	2500      	movs	r5, #0
 80006d2:	4baa      	ldr	r3, [pc, #680]	; (800097c <__aeabi_ddiv+0x378>)
 80006d4:	e7ed      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80006d6:	46ba      	mov	sl, r7
 80006d8:	46a0      	mov	r8, r4
 80006da:	0015      	movs	r5, r2
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	e7dc      	b.n	800069a <__aeabi_ddiv+0x96>
 80006e0:	4544      	cmp	r4, r8
 80006e2:	d200      	bcs.n	80006e6 <__aeabi_ddiv+0xe2>
 80006e4:	e1c7      	b.n	8000a76 <__aeabi_ddiv+0x472>
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0xe6>
 80006e8:	e1c2      	b.n	8000a70 <__aeabi_ddiv+0x46c>
 80006ea:	2301      	movs	r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	469c      	mov	ip, r3
 80006f0:	002e      	movs	r6, r5
 80006f2:	4640      	mov	r0, r8
 80006f4:	2500      	movs	r5, #0
 80006f6:	44e3      	add	fp, ip
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	0e14      	lsrs	r4, r2, #24
 80006fc:	431c      	orrs	r4, r3
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	4699      	mov	r9, r3
 8000702:	0423      	lsls	r3, r4, #16
 8000704:	0c1f      	lsrs	r7, r3, #16
 8000706:	0212      	lsls	r2, r2, #8
 8000708:	4649      	mov	r1, r9
 800070a:	9200      	str	r2, [sp, #0]
 800070c:	9701      	str	r7, [sp, #4]
 800070e:	f7ff fd7f 	bl	8000210 <__aeabi_uidivmod>
 8000712:	0002      	movs	r2, r0
 8000714:	437a      	muls	r2, r7
 8000716:	040b      	lsls	r3, r1, #16
 8000718:	0c31      	lsrs	r1, r6, #16
 800071a:	4680      	mov	r8, r0
 800071c:	4319      	orrs	r1, r3
 800071e:	428a      	cmp	r2, r1
 8000720:	d907      	bls.n	8000732 <__aeabi_ddiv+0x12e>
 8000722:	2301      	movs	r3, #1
 8000724:	425b      	negs	r3, r3
 8000726:	469c      	mov	ip, r3
 8000728:	1909      	adds	r1, r1, r4
 800072a:	44e0      	add	r8, ip
 800072c:	428c      	cmp	r4, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x12e>
 8000730:	e207      	b.n	8000b42 <__aeabi_ddiv+0x53e>
 8000732:	1a88      	subs	r0, r1, r2
 8000734:	4649      	mov	r1, r9
 8000736:	f7ff fd6b 	bl	8000210 <__aeabi_uidivmod>
 800073a:	0409      	lsls	r1, r1, #16
 800073c:	468c      	mov	ip, r1
 800073e:	0431      	lsls	r1, r6, #16
 8000740:	4666      	mov	r6, ip
 8000742:	9a01      	ldr	r2, [sp, #4]
 8000744:	0c09      	lsrs	r1, r1, #16
 8000746:	4342      	muls	r2, r0
 8000748:	0003      	movs	r3, r0
 800074a:	4331      	orrs	r1, r6
 800074c:	428a      	cmp	r2, r1
 800074e:	d904      	bls.n	800075a <__aeabi_ddiv+0x156>
 8000750:	1909      	adds	r1, r1, r4
 8000752:	3b01      	subs	r3, #1
 8000754:	428c      	cmp	r4, r1
 8000756:	d800      	bhi.n	800075a <__aeabi_ddiv+0x156>
 8000758:	e1ed      	b.n	8000b36 <__aeabi_ddiv+0x532>
 800075a:	1a88      	subs	r0, r1, r2
 800075c:	4642      	mov	r2, r8
 800075e:	0412      	lsls	r2, r2, #16
 8000760:	431a      	orrs	r2, r3
 8000762:	4690      	mov	r8, r2
 8000764:	4641      	mov	r1, r8
 8000766:	9b00      	ldr	r3, [sp, #0]
 8000768:	040e      	lsls	r6, r1, #16
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	001f      	movs	r7, r3
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	9b00      	ldr	r3, [sp, #0]
 8000772:	0c36      	lsrs	r6, r6, #16
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	0c19      	lsrs	r1, r3, #16
 8000778:	000b      	movs	r3, r1
 800077a:	4373      	muls	r3, r6
 800077c:	0c12      	lsrs	r2, r2, #16
 800077e:	437e      	muls	r6, r7
 8000780:	9103      	str	r1, [sp, #12]
 8000782:	4351      	muls	r1, r2
 8000784:	437a      	muls	r2, r7
 8000786:	0c1f      	lsrs	r7, r3, #16
 8000788:	46bc      	mov	ip, r7
 800078a:	1876      	adds	r6, r6, r1
 800078c:	4466      	add	r6, ip
 800078e:	42b1      	cmp	r1, r6
 8000790:	d903      	bls.n	800079a <__aeabi_ddiv+0x196>
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	0249      	lsls	r1, r1, #9
 8000796:	468c      	mov	ip, r1
 8000798:	4462      	add	r2, ip
 800079a:	0c31      	lsrs	r1, r6, #16
 800079c:	188a      	adds	r2, r1, r2
 800079e:	0431      	lsls	r1, r6, #16
 80007a0:	041e      	lsls	r6, r3, #16
 80007a2:	0c36      	lsrs	r6, r6, #16
 80007a4:	198e      	adds	r6, r1, r6
 80007a6:	4290      	cmp	r0, r2
 80007a8:	d302      	bcc.n	80007b0 <__aeabi_ddiv+0x1ac>
 80007aa:	d112      	bne.n	80007d2 <__aeabi_ddiv+0x1ce>
 80007ac:	42b5      	cmp	r5, r6
 80007ae:	d210      	bcs.n	80007d2 <__aeabi_ddiv+0x1ce>
 80007b0:	4643      	mov	r3, r8
 80007b2:	1e59      	subs	r1, r3, #1
 80007b4:	9b00      	ldr	r3, [sp, #0]
 80007b6:	469c      	mov	ip, r3
 80007b8:	4465      	add	r5, ip
 80007ba:	001f      	movs	r7, r3
 80007bc:	429d      	cmp	r5, r3
 80007be:	419b      	sbcs	r3, r3
 80007c0:	425b      	negs	r3, r3
 80007c2:	191b      	adds	r3, r3, r4
 80007c4:	18c0      	adds	r0, r0, r3
 80007c6:	4284      	cmp	r4, r0
 80007c8:	d200      	bcs.n	80007cc <__aeabi_ddiv+0x1c8>
 80007ca:	e1a0      	b.n	8000b0e <__aeabi_ddiv+0x50a>
 80007cc:	d100      	bne.n	80007d0 <__aeabi_ddiv+0x1cc>
 80007ce:	e19b      	b.n	8000b08 <__aeabi_ddiv+0x504>
 80007d0:	4688      	mov	r8, r1
 80007d2:	1bae      	subs	r6, r5, r6
 80007d4:	42b5      	cmp	r5, r6
 80007d6:	41ad      	sbcs	r5, r5
 80007d8:	1a80      	subs	r0, r0, r2
 80007da:	426d      	negs	r5, r5
 80007dc:	1b40      	subs	r0, r0, r5
 80007de:	4284      	cmp	r4, r0
 80007e0:	d100      	bne.n	80007e4 <__aeabi_ddiv+0x1e0>
 80007e2:	e1d5      	b.n	8000b90 <__aeabi_ddiv+0x58c>
 80007e4:	4649      	mov	r1, r9
 80007e6:	f7ff fd13 	bl	8000210 <__aeabi_uidivmod>
 80007ea:	9a01      	ldr	r2, [sp, #4]
 80007ec:	040b      	lsls	r3, r1, #16
 80007ee:	4342      	muls	r2, r0
 80007f0:	0c31      	lsrs	r1, r6, #16
 80007f2:	0005      	movs	r5, r0
 80007f4:	4319      	orrs	r1, r3
 80007f6:	428a      	cmp	r2, r1
 80007f8:	d900      	bls.n	80007fc <__aeabi_ddiv+0x1f8>
 80007fa:	e16c      	b.n	8000ad6 <__aeabi_ddiv+0x4d2>
 80007fc:	1a88      	subs	r0, r1, r2
 80007fe:	4649      	mov	r1, r9
 8000800:	f7ff fd06 	bl	8000210 <__aeabi_uidivmod>
 8000804:	9a01      	ldr	r2, [sp, #4]
 8000806:	0436      	lsls	r6, r6, #16
 8000808:	4342      	muls	r2, r0
 800080a:	0409      	lsls	r1, r1, #16
 800080c:	0c36      	lsrs	r6, r6, #16
 800080e:	0003      	movs	r3, r0
 8000810:	430e      	orrs	r6, r1
 8000812:	42b2      	cmp	r2, r6
 8000814:	d900      	bls.n	8000818 <__aeabi_ddiv+0x214>
 8000816:	e153      	b.n	8000ac0 <__aeabi_ddiv+0x4bc>
 8000818:	9803      	ldr	r0, [sp, #12]
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	0002      	movs	r2, r0
 800081e:	042d      	lsls	r5, r5, #16
 8000820:	431d      	orrs	r5, r3
 8000822:	9f02      	ldr	r7, [sp, #8]
 8000824:	042b      	lsls	r3, r5, #16
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	435a      	muls	r2, r3
 800082a:	437b      	muls	r3, r7
 800082c:	469c      	mov	ip, r3
 800082e:	0c29      	lsrs	r1, r5, #16
 8000830:	4348      	muls	r0, r1
 8000832:	0c13      	lsrs	r3, r2, #16
 8000834:	4484      	add	ip, r0
 8000836:	4463      	add	r3, ip
 8000838:	4379      	muls	r1, r7
 800083a:	4298      	cmp	r0, r3
 800083c:	d903      	bls.n	8000846 <__aeabi_ddiv+0x242>
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	0240      	lsls	r0, r0, #9
 8000842:	4684      	mov	ip, r0
 8000844:	4461      	add	r1, ip
 8000846:	0c18      	lsrs	r0, r3, #16
 8000848:	0412      	lsls	r2, r2, #16
 800084a:	041b      	lsls	r3, r3, #16
 800084c:	0c12      	lsrs	r2, r2, #16
 800084e:	1841      	adds	r1, r0, r1
 8000850:	189b      	adds	r3, r3, r2
 8000852:	428e      	cmp	r6, r1
 8000854:	d200      	bcs.n	8000858 <__aeabi_ddiv+0x254>
 8000856:	e0ff      	b.n	8000a58 <__aeabi_ddiv+0x454>
 8000858:	d100      	bne.n	800085c <__aeabi_ddiv+0x258>
 800085a:	e0fa      	b.n	8000a52 <__aeabi_ddiv+0x44e>
 800085c:	2301      	movs	r3, #1
 800085e:	431d      	orrs	r5, r3
 8000860:	4a49      	ldr	r2, [pc, #292]	; (8000988 <__aeabi_ddiv+0x384>)
 8000862:	445a      	add	r2, fp
 8000864:	2a00      	cmp	r2, #0
 8000866:	dc00      	bgt.n	800086a <__aeabi_ddiv+0x266>
 8000868:	e0aa      	b.n	80009c0 <__aeabi_ddiv+0x3bc>
 800086a:	076b      	lsls	r3, r5, #29
 800086c:	d000      	beq.n	8000870 <__aeabi_ddiv+0x26c>
 800086e:	e13d      	b.n	8000aec <__aeabi_ddiv+0x4e8>
 8000870:	08ed      	lsrs	r5, r5, #3
 8000872:	4643      	mov	r3, r8
 8000874:	01db      	lsls	r3, r3, #7
 8000876:	d506      	bpl.n	8000886 <__aeabi_ddiv+0x282>
 8000878:	4642      	mov	r2, r8
 800087a:	4b44      	ldr	r3, [pc, #272]	; (800098c <__aeabi_ddiv+0x388>)
 800087c:	401a      	ands	r2, r3
 800087e:	4690      	mov	r8, r2
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	445a      	add	r2, fp
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <__aeabi_ddiv+0x38c>)
 8000888:	429a      	cmp	r2, r3
 800088a:	dd00      	ble.n	800088e <__aeabi_ddiv+0x28a>
 800088c:	e71f      	b.n	80006ce <__aeabi_ddiv+0xca>
 800088e:	4643      	mov	r3, r8
 8000890:	075b      	lsls	r3, r3, #29
 8000892:	431d      	orrs	r5, r3
 8000894:	4643      	mov	r3, r8
 8000896:	0552      	lsls	r2, r2, #21
 8000898:	025c      	lsls	r4, r3, #9
 800089a:	0b24      	lsrs	r4, r4, #12
 800089c:	0d53      	lsrs	r3, r2, #21
 800089e:	e708      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80008a0:	4652      	mov	r2, sl
 80008a2:	4322      	orrs	r2, r4
 80008a4:	d100      	bne.n	80008a8 <__aeabi_ddiv+0x2a4>
 80008a6:	e07b      	b.n	80009a0 <__aeabi_ddiv+0x39c>
 80008a8:	2c00      	cmp	r4, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_ddiv+0x2aa>
 80008ac:	e0fa      	b.n	8000aa4 <__aeabi_ddiv+0x4a0>
 80008ae:	0020      	movs	r0, r4
 80008b0:	f001 f836 	bl	8001920 <__clzsi2>
 80008b4:	0002      	movs	r2, r0
 80008b6:	3a0b      	subs	r2, #11
 80008b8:	231d      	movs	r3, #29
 80008ba:	0001      	movs	r1, r0
 80008bc:	1a9b      	subs	r3, r3, r2
 80008be:	4652      	mov	r2, sl
 80008c0:	3908      	subs	r1, #8
 80008c2:	40da      	lsrs	r2, r3
 80008c4:	408c      	lsls	r4, r1
 80008c6:	4314      	orrs	r4, r2
 80008c8:	4652      	mov	r2, sl
 80008ca:	408a      	lsls	r2, r1
 80008cc:	4b31      	ldr	r3, [pc, #196]	; (8000994 <__aeabi_ddiv+0x390>)
 80008ce:	4458      	add	r0, fp
 80008d0:	469b      	mov	fp, r3
 80008d2:	4483      	add	fp, r0
 80008d4:	2000      	movs	r0, #0
 80008d6:	e6d5      	b.n	8000684 <__aeabi_ddiv+0x80>
 80008d8:	464b      	mov	r3, r9
 80008da:	4323      	orrs	r3, r4
 80008dc:	4698      	mov	r8, r3
 80008de:	d044      	beq.n	800096a <__aeabi_ddiv+0x366>
 80008e0:	2c00      	cmp	r4, #0
 80008e2:	d100      	bne.n	80008e6 <__aeabi_ddiv+0x2e2>
 80008e4:	e0ce      	b.n	8000a84 <__aeabi_ddiv+0x480>
 80008e6:	0020      	movs	r0, r4
 80008e8:	f001 f81a 	bl	8001920 <__clzsi2>
 80008ec:	0001      	movs	r1, r0
 80008ee:	0002      	movs	r2, r0
 80008f0:	390b      	subs	r1, #11
 80008f2:	231d      	movs	r3, #29
 80008f4:	1a5b      	subs	r3, r3, r1
 80008f6:	4649      	mov	r1, r9
 80008f8:	0010      	movs	r0, r2
 80008fa:	40d9      	lsrs	r1, r3
 80008fc:	3808      	subs	r0, #8
 80008fe:	4084      	lsls	r4, r0
 8000900:	000b      	movs	r3, r1
 8000902:	464d      	mov	r5, r9
 8000904:	4323      	orrs	r3, r4
 8000906:	4698      	mov	r8, r3
 8000908:	4085      	lsls	r5, r0
 800090a:	4823      	ldr	r0, [pc, #140]	; (8000998 <__aeabi_ddiv+0x394>)
 800090c:	1a83      	subs	r3, r0, r2
 800090e:	469b      	mov	fp, r3
 8000910:	2300      	movs	r3, #0
 8000912:	4699      	mov	r9, r3
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	e69a      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000918:	464b      	mov	r3, r9
 800091a:	4323      	orrs	r3, r4
 800091c:	4698      	mov	r8, r3
 800091e:	d11d      	bne.n	800095c <__aeabi_ddiv+0x358>
 8000920:	2308      	movs	r3, #8
 8000922:	4699      	mov	r9, r3
 8000924:	3b06      	subs	r3, #6
 8000926:	2500      	movs	r5, #0
 8000928:	4683      	mov	fp, r0
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	e68f      	b.n	800064e <__aeabi_ddiv+0x4a>
 800092e:	4652      	mov	r2, sl
 8000930:	4322      	orrs	r2, r4
 8000932:	d109      	bne.n	8000948 <__aeabi_ddiv+0x344>
 8000934:	2302      	movs	r3, #2
 8000936:	4649      	mov	r1, r9
 8000938:	4319      	orrs	r1, r3
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <__aeabi_ddiv+0x398>)
 800093c:	4689      	mov	r9, r1
 800093e:	469c      	mov	ip, r3
 8000940:	2400      	movs	r4, #0
 8000942:	2002      	movs	r0, #2
 8000944:	44e3      	add	fp, ip
 8000946:	e69d      	b.n	8000684 <__aeabi_ddiv+0x80>
 8000948:	2303      	movs	r3, #3
 800094a:	464a      	mov	r2, r9
 800094c:	431a      	orrs	r2, r3
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <__aeabi_ddiv+0x398>)
 8000950:	4691      	mov	r9, r2
 8000952:	469c      	mov	ip, r3
 8000954:	4652      	mov	r2, sl
 8000956:	2003      	movs	r0, #3
 8000958:	44e3      	add	fp, ip
 800095a:	e693      	b.n	8000684 <__aeabi_ddiv+0x80>
 800095c:	230c      	movs	r3, #12
 800095e:	4699      	mov	r9, r3
 8000960:	3b09      	subs	r3, #9
 8000962:	46a0      	mov	r8, r4
 8000964:	4683      	mov	fp, r0
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	e671      	b.n	800064e <__aeabi_ddiv+0x4a>
 800096a:	2304      	movs	r3, #4
 800096c:	4699      	mov	r9, r3
 800096e:	2300      	movs	r3, #0
 8000970:	469b      	mov	fp, r3
 8000972:	3301      	adds	r3, #1
 8000974:	2500      	movs	r5, #0
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	e669      	b.n	800064e <__aeabi_ddiv+0x4a>
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	000007ff 	.word	0x000007ff
 8000980:	fffffc01 	.word	0xfffffc01
 8000984:	08008918 	.word	0x08008918
 8000988:	000003ff 	.word	0x000003ff
 800098c:	feffffff 	.word	0xfeffffff
 8000990:	000007fe 	.word	0x000007fe
 8000994:	000003f3 	.word	0x000003f3
 8000998:	fffffc0d 	.word	0xfffffc0d
 800099c:	fffff801 	.word	0xfffff801
 80009a0:	4649      	mov	r1, r9
 80009a2:	2301      	movs	r3, #1
 80009a4:	4319      	orrs	r1, r3
 80009a6:	4689      	mov	r9, r1
 80009a8:	2400      	movs	r4, #0
 80009aa:	2001      	movs	r0, #1
 80009ac:	e66a      	b.n	8000684 <__aeabi_ddiv+0x80>
 80009ae:	2300      	movs	r3, #0
 80009b0:	2480      	movs	r4, #128	; 0x80
 80009b2:	469a      	mov	sl, r3
 80009b4:	2500      	movs	r5, #0
 80009b6:	4b8a      	ldr	r3, [pc, #552]	; (8000be0 <__aeabi_ddiv+0x5dc>)
 80009b8:	0324      	lsls	r4, r4, #12
 80009ba:	e67a      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80009bc:	2501      	movs	r5, #1
 80009be:	426d      	negs	r5, r5
 80009c0:	2301      	movs	r3, #1
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	2b38      	cmp	r3, #56	; 0x38
 80009c6:	dd00      	ble.n	80009ca <__aeabi_ddiv+0x3c6>
 80009c8:	e670      	b.n	80006ac <__aeabi_ddiv+0xa8>
 80009ca:	2b1f      	cmp	r3, #31
 80009cc:	dc00      	bgt.n	80009d0 <__aeabi_ddiv+0x3cc>
 80009ce:	e0bf      	b.n	8000b50 <__aeabi_ddiv+0x54c>
 80009d0:	211f      	movs	r1, #31
 80009d2:	4249      	negs	r1, r1
 80009d4:	1a8a      	subs	r2, r1, r2
 80009d6:	4641      	mov	r1, r8
 80009d8:	40d1      	lsrs	r1, r2
 80009da:	000a      	movs	r2, r1
 80009dc:	2b20      	cmp	r3, #32
 80009de:	d004      	beq.n	80009ea <__aeabi_ddiv+0x3e6>
 80009e0:	4641      	mov	r1, r8
 80009e2:	4b80      	ldr	r3, [pc, #512]	; (8000be4 <__aeabi_ddiv+0x5e0>)
 80009e4:	445b      	add	r3, fp
 80009e6:	4099      	lsls	r1, r3
 80009e8:	430d      	orrs	r5, r1
 80009ea:	1e6b      	subs	r3, r5, #1
 80009ec:	419d      	sbcs	r5, r3
 80009ee:	2307      	movs	r3, #7
 80009f0:	432a      	orrs	r2, r5
 80009f2:	001d      	movs	r5, r3
 80009f4:	2400      	movs	r4, #0
 80009f6:	4015      	ands	r5, r2
 80009f8:	4213      	tst	r3, r2
 80009fa:	d100      	bne.n	80009fe <__aeabi_ddiv+0x3fa>
 80009fc:	e0d4      	b.n	8000ba8 <__aeabi_ddiv+0x5a4>
 80009fe:	210f      	movs	r1, #15
 8000a00:	2300      	movs	r3, #0
 8000a02:	4011      	ands	r1, r2
 8000a04:	2904      	cmp	r1, #4
 8000a06:	d100      	bne.n	8000a0a <__aeabi_ddiv+0x406>
 8000a08:	e0cb      	b.n	8000ba2 <__aeabi_ddiv+0x59e>
 8000a0a:	1d11      	adds	r1, r2, #4
 8000a0c:	4291      	cmp	r1, r2
 8000a0e:	4192      	sbcs	r2, r2
 8000a10:	4252      	negs	r2, r2
 8000a12:	189b      	adds	r3, r3, r2
 8000a14:	000a      	movs	r2, r1
 8000a16:	0219      	lsls	r1, r3, #8
 8000a18:	d400      	bmi.n	8000a1c <__aeabi_ddiv+0x418>
 8000a1a:	e0c2      	b.n	8000ba2 <__aeabi_ddiv+0x59e>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	2400      	movs	r4, #0
 8000a20:	2500      	movs	r5, #0
 8000a22:	e646      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	4641      	mov	r1, r8
 8000a28:	031b      	lsls	r3, r3, #12
 8000a2a:	4219      	tst	r1, r3
 8000a2c:	d008      	beq.n	8000a40 <__aeabi_ddiv+0x43c>
 8000a2e:	421c      	tst	r4, r3
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x43c>
 8000a32:	431c      	orrs	r4, r3
 8000a34:	0324      	lsls	r4, r4, #12
 8000a36:	46ba      	mov	sl, r7
 8000a38:	0015      	movs	r5, r2
 8000a3a:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <__aeabi_ddiv+0x5dc>)
 8000a3c:	0b24      	lsrs	r4, r4, #12
 8000a3e:	e638      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a40:	2480      	movs	r4, #128	; 0x80
 8000a42:	4643      	mov	r3, r8
 8000a44:	0324      	lsls	r4, r4, #12
 8000a46:	431c      	orrs	r4, r3
 8000a48:	0324      	lsls	r4, r4, #12
 8000a4a:	46b2      	mov	sl, r6
 8000a4c:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <__aeabi_ddiv+0x5dc>)
 8000a4e:	0b24      	lsrs	r4, r4, #12
 8000a50:	e62f      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_ddiv+0x454>
 8000a56:	e703      	b.n	8000860 <__aeabi_ddiv+0x25c>
 8000a58:	19a6      	adds	r6, r4, r6
 8000a5a:	1e68      	subs	r0, r5, #1
 8000a5c:	42a6      	cmp	r6, r4
 8000a5e:	d200      	bcs.n	8000a62 <__aeabi_ddiv+0x45e>
 8000a60:	e08d      	b.n	8000b7e <__aeabi_ddiv+0x57a>
 8000a62:	428e      	cmp	r6, r1
 8000a64:	d200      	bcs.n	8000a68 <__aeabi_ddiv+0x464>
 8000a66:	e0a3      	b.n	8000bb0 <__aeabi_ddiv+0x5ac>
 8000a68:	d100      	bne.n	8000a6c <__aeabi_ddiv+0x468>
 8000a6a:	e0b3      	b.n	8000bd4 <__aeabi_ddiv+0x5d0>
 8000a6c:	0005      	movs	r5, r0
 8000a6e:	e6f5      	b.n	800085c <__aeabi_ddiv+0x258>
 8000a70:	42aa      	cmp	r2, r5
 8000a72:	d900      	bls.n	8000a76 <__aeabi_ddiv+0x472>
 8000a74:	e639      	b.n	80006ea <__aeabi_ddiv+0xe6>
 8000a76:	4643      	mov	r3, r8
 8000a78:	07de      	lsls	r6, r3, #31
 8000a7a:	0858      	lsrs	r0, r3, #1
 8000a7c:	086b      	lsrs	r3, r5, #1
 8000a7e:	431e      	orrs	r6, r3
 8000a80:	07ed      	lsls	r5, r5, #31
 8000a82:	e639      	b.n	80006f8 <__aeabi_ddiv+0xf4>
 8000a84:	4648      	mov	r0, r9
 8000a86:	f000 ff4b 	bl	8001920 <__clzsi2>
 8000a8a:	0001      	movs	r1, r0
 8000a8c:	0002      	movs	r2, r0
 8000a8e:	3115      	adds	r1, #21
 8000a90:	3220      	adds	r2, #32
 8000a92:	291c      	cmp	r1, #28
 8000a94:	dc00      	bgt.n	8000a98 <__aeabi_ddiv+0x494>
 8000a96:	e72c      	b.n	80008f2 <__aeabi_ddiv+0x2ee>
 8000a98:	464b      	mov	r3, r9
 8000a9a:	3808      	subs	r0, #8
 8000a9c:	4083      	lsls	r3, r0
 8000a9e:	2500      	movs	r5, #0
 8000aa0:	4698      	mov	r8, r3
 8000aa2:	e732      	b.n	800090a <__aeabi_ddiv+0x306>
 8000aa4:	f000 ff3c 	bl	8001920 <__clzsi2>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	001a      	movs	r2, r3
 8000aac:	3215      	adds	r2, #21
 8000aae:	3020      	adds	r0, #32
 8000ab0:	2a1c      	cmp	r2, #28
 8000ab2:	dc00      	bgt.n	8000ab6 <__aeabi_ddiv+0x4b2>
 8000ab4:	e700      	b.n	80008b8 <__aeabi_ddiv+0x2b4>
 8000ab6:	4654      	mov	r4, sl
 8000ab8:	3b08      	subs	r3, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	409c      	lsls	r4, r3
 8000abe:	e705      	b.n	80008cc <__aeabi_ddiv+0x2c8>
 8000ac0:	1936      	adds	r6, r6, r4
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	42b4      	cmp	r4, r6
 8000ac6:	d900      	bls.n	8000aca <__aeabi_ddiv+0x4c6>
 8000ac8:	e6a6      	b.n	8000818 <__aeabi_ddiv+0x214>
 8000aca:	42b2      	cmp	r2, r6
 8000acc:	d800      	bhi.n	8000ad0 <__aeabi_ddiv+0x4cc>
 8000ace:	e6a3      	b.n	8000818 <__aeabi_ddiv+0x214>
 8000ad0:	1e83      	subs	r3, r0, #2
 8000ad2:	1936      	adds	r6, r6, r4
 8000ad4:	e6a0      	b.n	8000818 <__aeabi_ddiv+0x214>
 8000ad6:	1909      	adds	r1, r1, r4
 8000ad8:	3d01      	subs	r5, #1
 8000ada:	428c      	cmp	r4, r1
 8000adc:	d900      	bls.n	8000ae0 <__aeabi_ddiv+0x4dc>
 8000ade:	e68d      	b.n	80007fc <__aeabi_ddiv+0x1f8>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	d800      	bhi.n	8000ae6 <__aeabi_ddiv+0x4e2>
 8000ae4:	e68a      	b.n	80007fc <__aeabi_ddiv+0x1f8>
 8000ae6:	1e85      	subs	r5, r0, #2
 8000ae8:	1909      	adds	r1, r1, r4
 8000aea:	e687      	b.n	80007fc <__aeabi_ddiv+0x1f8>
 8000aec:	230f      	movs	r3, #15
 8000aee:	402b      	ands	r3, r5
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d100      	bne.n	8000af6 <__aeabi_ddiv+0x4f2>
 8000af4:	e6bc      	b.n	8000870 <__aeabi_ddiv+0x26c>
 8000af6:	2305      	movs	r3, #5
 8000af8:	425b      	negs	r3, r3
 8000afa:	42ab      	cmp	r3, r5
 8000afc:	419b      	sbcs	r3, r3
 8000afe:	3504      	adds	r5, #4
 8000b00:	425b      	negs	r3, r3
 8000b02:	08ed      	lsrs	r5, r5, #3
 8000b04:	4498      	add	r8, r3
 8000b06:	e6b4      	b.n	8000872 <__aeabi_ddiv+0x26e>
 8000b08:	42af      	cmp	r7, r5
 8000b0a:	d900      	bls.n	8000b0e <__aeabi_ddiv+0x50a>
 8000b0c:	e660      	b.n	80007d0 <__aeabi_ddiv+0x1cc>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	d804      	bhi.n	8000b1c <__aeabi_ddiv+0x518>
 8000b12:	d000      	beq.n	8000b16 <__aeabi_ddiv+0x512>
 8000b14:	e65c      	b.n	80007d0 <__aeabi_ddiv+0x1cc>
 8000b16:	42ae      	cmp	r6, r5
 8000b18:	d800      	bhi.n	8000b1c <__aeabi_ddiv+0x518>
 8000b1a:	e659      	b.n	80007d0 <__aeabi_ddiv+0x1cc>
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	425b      	negs	r3, r3
 8000b20:	469c      	mov	ip, r3
 8000b22:	9b00      	ldr	r3, [sp, #0]
 8000b24:	44e0      	add	r8, ip
 8000b26:	469c      	mov	ip, r3
 8000b28:	4465      	add	r5, ip
 8000b2a:	429d      	cmp	r5, r3
 8000b2c:	419b      	sbcs	r3, r3
 8000b2e:	425b      	negs	r3, r3
 8000b30:	191b      	adds	r3, r3, r4
 8000b32:	18c0      	adds	r0, r0, r3
 8000b34:	e64d      	b.n	80007d2 <__aeabi_ddiv+0x1ce>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	d800      	bhi.n	8000b3c <__aeabi_ddiv+0x538>
 8000b3a:	e60e      	b.n	800075a <__aeabi_ddiv+0x156>
 8000b3c:	1e83      	subs	r3, r0, #2
 8000b3e:	1909      	adds	r1, r1, r4
 8000b40:	e60b      	b.n	800075a <__aeabi_ddiv+0x156>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	d800      	bhi.n	8000b48 <__aeabi_ddiv+0x544>
 8000b46:	e5f4      	b.n	8000732 <__aeabi_ddiv+0x12e>
 8000b48:	1e83      	subs	r3, r0, #2
 8000b4a:	4698      	mov	r8, r3
 8000b4c:	1909      	adds	r1, r1, r4
 8000b4e:	e5f0      	b.n	8000732 <__aeabi_ddiv+0x12e>
 8000b50:	4925      	ldr	r1, [pc, #148]	; (8000be8 <__aeabi_ddiv+0x5e4>)
 8000b52:	0028      	movs	r0, r5
 8000b54:	4459      	add	r1, fp
 8000b56:	408d      	lsls	r5, r1
 8000b58:	4642      	mov	r2, r8
 8000b5a:	408a      	lsls	r2, r1
 8000b5c:	1e69      	subs	r1, r5, #1
 8000b5e:	418d      	sbcs	r5, r1
 8000b60:	4641      	mov	r1, r8
 8000b62:	40d8      	lsrs	r0, r3
 8000b64:	40d9      	lsrs	r1, r3
 8000b66:	4302      	orrs	r2, r0
 8000b68:	432a      	orrs	r2, r5
 8000b6a:	000b      	movs	r3, r1
 8000b6c:	0751      	lsls	r1, r2, #29
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_ddiv+0x56e>
 8000b70:	e751      	b.n	8000a16 <__aeabi_ddiv+0x412>
 8000b72:	210f      	movs	r1, #15
 8000b74:	4011      	ands	r1, r2
 8000b76:	2904      	cmp	r1, #4
 8000b78:	d000      	beq.n	8000b7c <__aeabi_ddiv+0x578>
 8000b7a:	e746      	b.n	8000a0a <__aeabi_ddiv+0x406>
 8000b7c:	e74b      	b.n	8000a16 <__aeabi_ddiv+0x412>
 8000b7e:	0005      	movs	r5, r0
 8000b80:	428e      	cmp	r6, r1
 8000b82:	d000      	beq.n	8000b86 <__aeabi_ddiv+0x582>
 8000b84:	e66a      	b.n	800085c <__aeabi_ddiv+0x258>
 8000b86:	9a00      	ldr	r2, [sp, #0]
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d000      	beq.n	8000b8e <__aeabi_ddiv+0x58a>
 8000b8c:	e666      	b.n	800085c <__aeabi_ddiv+0x258>
 8000b8e:	e667      	b.n	8000860 <__aeabi_ddiv+0x25c>
 8000b90:	4a16      	ldr	r2, [pc, #88]	; (8000bec <__aeabi_ddiv+0x5e8>)
 8000b92:	445a      	add	r2, fp
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	dc00      	bgt.n	8000b9a <__aeabi_ddiv+0x596>
 8000b98:	e710      	b.n	80009bc <__aeabi_ddiv+0x3b8>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	4498      	add	r8, r3
 8000ba0:	e667      	b.n	8000872 <__aeabi_ddiv+0x26e>
 8000ba2:	075d      	lsls	r5, r3, #29
 8000ba4:	025b      	lsls	r3, r3, #9
 8000ba6:	0b1c      	lsrs	r4, r3, #12
 8000ba8:	08d2      	lsrs	r2, r2, #3
 8000baa:	2300      	movs	r3, #0
 8000bac:	4315      	orrs	r5, r2
 8000bae:	e580      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000bb0:	9800      	ldr	r0, [sp, #0]
 8000bb2:	3d02      	subs	r5, #2
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	41bf      	sbcs	r7, r7
 8000bba:	427f      	negs	r7, r7
 8000bbc:	193c      	adds	r4, r7, r4
 8000bbe:	1936      	adds	r6, r6, r4
 8000bc0:	9200      	str	r2, [sp, #0]
 8000bc2:	e7dd      	b.n	8000b80 <__aeabi_ddiv+0x57c>
 8000bc4:	2480      	movs	r4, #128	; 0x80
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	0324      	lsls	r4, r4, #12
 8000bca:	431c      	orrs	r4, r3
 8000bcc:	0324      	lsls	r4, r4, #12
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__aeabi_ddiv+0x5dc>)
 8000bd0:	0b24      	lsrs	r4, r4, #12
 8000bd2:	e56e      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000bd4:	9a00      	ldr	r2, [sp, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3ea      	bcc.n	8000bb0 <__aeabi_ddiv+0x5ac>
 8000bda:	0005      	movs	r5, r0
 8000bdc:	e7d3      	b.n	8000b86 <__aeabi_ddiv+0x582>
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	000007ff 	.word	0x000007ff
 8000be4:	0000043e 	.word	0x0000043e
 8000be8:	0000041e 	.word	0x0000041e
 8000bec:	000003ff 	.word	0x000003ff

08000bf0 <__aeabi_dmul>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	4657      	mov	r7, sl
 8000bf4:	464e      	mov	r6, r9
 8000bf6:	4645      	mov	r5, r8
 8000bf8:	46de      	mov	lr, fp
 8000bfa:	b5e0      	push	{r5, r6, r7, lr}
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	030c      	lsls	r4, r1, #12
 8000c00:	004b      	lsls	r3, r1, #1
 8000c02:	0006      	movs	r6, r0
 8000c04:	4692      	mov	sl, r2
 8000c06:	b087      	sub	sp, #28
 8000c08:	0b24      	lsrs	r4, r4, #12
 8000c0a:	0d5b      	lsrs	r3, r3, #21
 8000c0c:	0fcf      	lsrs	r7, r1, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dmul+0x24>
 8000c12:	e15c      	b.n	8000ece <__aeabi_dmul+0x2de>
 8000c14:	4ad9      	ldr	r2, [pc, #868]	; (8000f7c <__aeabi_dmul+0x38c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dmul+0x2c>
 8000c1a:	e175      	b.n	8000f08 <__aeabi_dmul+0x318>
 8000c1c:	0f42      	lsrs	r2, r0, #29
 8000c1e:	00e4      	lsls	r4, r4, #3
 8000c20:	4314      	orrs	r4, r2
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	0412      	lsls	r2, r2, #16
 8000c26:	4314      	orrs	r4, r2
 8000c28:	4ad5      	ldr	r2, [pc, #852]	; (8000f80 <__aeabi_dmul+0x390>)
 8000c2a:	00c5      	lsls	r5, r0, #3
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	4463      	add	r3, ip
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	4699      	mov	r9, r3
 8000c36:	469b      	mov	fp, r3
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	031e      	lsls	r6, r3, #12
 8000c3e:	0fd2      	lsrs	r2, r2, #31
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4650      	mov	r0, sl
 8000c44:	4690      	mov	r8, r2
 8000c46:	0b36      	lsrs	r6, r6, #12
 8000c48:	0d5b      	lsrs	r3, r3, #21
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_dmul+0x5e>
 8000c4c:	e120      	b.n	8000e90 <__aeabi_dmul+0x2a0>
 8000c4e:	4acb      	ldr	r2, [pc, #812]	; (8000f7c <__aeabi_dmul+0x38c>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dmul+0x66>
 8000c54:	e162      	b.n	8000f1c <__aeabi_dmul+0x32c>
 8000c56:	49ca      	ldr	r1, [pc, #808]	; (8000f80 <__aeabi_dmul+0x390>)
 8000c58:	0f42      	lsrs	r2, r0, #29
 8000c5a:	468c      	mov	ip, r1
 8000c5c:	9900      	ldr	r1, [sp, #0]
 8000c5e:	4463      	add	r3, ip
 8000c60:	00f6      	lsls	r6, r6, #3
 8000c62:	468c      	mov	ip, r1
 8000c64:	4316      	orrs	r6, r2
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	449c      	add	ip, r3
 8000c6a:	0412      	lsls	r2, r2, #16
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	4316      	orrs	r6, r2
 8000c70:	00c2      	lsls	r2, r0, #3
 8000c72:	2000      	movs	r0, #0
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	9900      	ldr	r1, [sp, #0]
 8000c78:	4643      	mov	r3, r8
 8000c7a:	3101      	adds	r1, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	4649      	mov	r1, r9
 8000c80:	407b      	eors	r3, r7
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	290f      	cmp	r1, #15
 8000c86:	d826      	bhi.n	8000cd6 <__aeabi_dmul+0xe6>
 8000c88:	4bbe      	ldr	r3, [pc, #760]	; (8000f84 <__aeabi_dmul+0x394>)
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	5859      	ldr	r1, [r3, r1]
 8000c8e:	468f      	mov	pc, r1
 8000c90:	4643      	mov	r3, r8
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	0034      	movs	r4, r6
 8000c96:	0015      	movs	r5, r2
 8000c98:	4683      	mov	fp, r0
 8000c9a:	465b      	mov	r3, fp
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d016      	beq.n	8000cce <__aeabi_dmul+0xde>
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_dmul+0xb6>
 8000ca4:	e203      	b.n	80010ae <__aeabi_dmul+0x4be>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dmul+0xbc>
 8000caa:	e0cd      	b.n	8000e48 <__aeabi_dmul+0x258>
 8000cac:	2200      	movs	r2, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	2500      	movs	r5, #0
 8000cb2:	9b01      	ldr	r3, [sp, #4]
 8000cb4:	0512      	lsls	r2, r2, #20
 8000cb6:	4322      	orrs	r2, r4
 8000cb8:	07db      	lsls	r3, r3, #31
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	0028      	movs	r0, r5
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	b007      	add	sp, #28
 8000cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc4:	46bb      	mov	fp, r7
 8000cc6:	46b2      	mov	sl, r6
 8000cc8:	46a9      	mov	r9, r5
 8000cca:	46a0      	mov	r8, r4
 8000ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cce:	2400      	movs	r4, #0
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	4aaa      	ldr	r2, [pc, #680]	; (8000f7c <__aeabi_dmul+0x38c>)
 8000cd4:	e7ed      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 8000cd6:	0c28      	lsrs	r0, r5, #16
 8000cd8:	042d      	lsls	r5, r5, #16
 8000cda:	0c2d      	lsrs	r5, r5, #16
 8000cdc:	002b      	movs	r3, r5
 8000cde:	0c11      	lsrs	r1, r2, #16
 8000ce0:	0412      	lsls	r2, r2, #16
 8000ce2:	0c12      	lsrs	r2, r2, #16
 8000ce4:	4353      	muls	r3, r2
 8000ce6:	4698      	mov	r8, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	002f      	movs	r7, r5
 8000cec:	4343      	muls	r3, r0
 8000cee:	4699      	mov	r9, r3
 8000cf0:	434f      	muls	r7, r1
 8000cf2:	444f      	add	r7, r9
 8000cf4:	46bb      	mov	fp, r7
 8000cf6:	4647      	mov	r7, r8
 8000cf8:	000b      	movs	r3, r1
 8000cfa:	0c3f      	lsrs	r7, r7, #16
 8000cfc:	46ba      	mov	sl, r7
 8000cfe:	4343      	muls	r3, r0
 8000d00:	44da      	add	sl, fp
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	45d1      	cmp	r9, sl
 8000d06:	d904      	bls.n	8000d12 <__aeabi_dmul+0x122>
 8000d08:	2780      	movs	r7, #128	; 0x80
 8000d0a:	027f      	lsls	r7, r7, #9
 8000d0c:	46b9      	mov	r9, r7
 8000d0e:	444b      	add	r3, r9
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	4653      	mov	r3, sl
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	469b      	mov	fp, r3
 8000d18:	4653      	mov	r3, sl
 8000d1a:	041f      	lsls	r7, r3, #16
 8000d1c:	4643      	mov	r3, r8
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	0c1b      	lsrs	r3, r3, #16
 8000d22:	4698      	mov	r8, r3
 8000d24:	003b      	movs	r3, r7
 8000d26:	4443      	add	r3, r8
 8000d28:	9304      	str	r3, [sp, #16]
 8000d2a:	0c33      	lsrs	r3, r6, #16
 8000d2c:	0436      	lsls	r6, r6, #16
 8000d2e:	0c36      	lsrs	r6, r6, #16
 8000d30:	4698      	mov	r8, r3
 8000d32:	0033      	movs	r3, r6
 8000d34:	4343      	muls	r3, r0
 8000d36:	4699      	mov	r9, r3
 8000d38:	4643      	mov	r3, r8
 8000d3a:	4343      	muls	r3, r0
 8000d3c:	002f      	movs	r7, r5
 8000d3e:	469a      	mov	sl, r3
 8000d40:	4643      	mov	r3, r8
 8000d42:	4377      	muls	r7, r6
 8000d44:	435d      	muls	r5, r3
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	444d      	add	r5, r9
 8000d4a:	1945      	adds	r5, r0, r5
 8000d4c:	45a9      	cmp	r9, r5
 8000d4e:	d903      	bls.n	8000d58 <__aeabi_dmul+0x168>
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	4699      	mov	r9, r3
 8000d56:	44ca      	add	sl, r9
 8000d58:	043f      	lsls	r7, r7, #16
 8000d5a:	0c28      	lsrs	r0, r5, #16
 8000d5c:	0c3f      	lsrs	r7, r7, #16
 8000d5e:	042d      	lsls	r5, r5, #16
 8000d60:	19ed      	adds	r5, r5, r7
 8000d62:	0c27      	lsrs	r7, r4, #16
 8000d64:	0424      	lsls	r4, r4, #16
 8000d66:	0c24      	lsrs	r4, r4, #16
 8000d68:	0003      	movs	r3, r0
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	4350      	muls	r0, r2
 8000d6e:	437a      	muls	r2, r7
 8000d70:	4691      	mov	r9, r2
 8000d72:	003a      	movs	r2, r7
 8000d74:	4453      	add	r3, sl
 8000d76:	9305      	str	r3, [sp, #20]
 8000d78:	0c03      	lsrs	r3, r0, #16
 8000d7a:	469a      	mov	sl, r3
 8000d7c:	434a      	muls	r2, r1
 8000d7e:	4361      	muls	r1, r4
 8000d80:	4449      	add	r1, r9
 8000d82:	4451      	add	r1, sl
 8000d84:	44ab      	add	fp, r5
 8000d86:	4589      	cmp	r9, r1
 8000d88:	d903      	bls.n	8000d92 <__aeabi_dmul+0x1a2>
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	025b      	lsls	r3, r3, #9
 8000d8e:	4699      	mov	r9, r3
 8000d90:	444a      	add	r2, r9
 8000d92:	0400      	lsls	r0, r0, #16
 8000d94:	0c0b      	lsrs	r3, r1, #16
 8000d96:	0c00      	lsrs	r0, r0, #16
 8000d98:	0409      	lsls	r1, r1, #16
 8000d9a:	1809      	adds	r1, r1, r0
 8000d9c:	0020      	movs	r0, r4
 8000d9e:	4699      	mov	r9, r3
 8000da0:	4643      	mov	r3, r8
 8000da2:	4370      	muls	r0, r6
 8000da4:	435c      	muls	r4, r3
 8000da6:	437e      	muls	r6, r7
 8000da8:	435f      	muls	r7, r3
 8000daa:	0c03      	lsrs	r3, r0, #16
 8000dac:	4698      	mov	r8, r3
 8000dae:	19a4      	adds	r4, r4, r6
 8000db0:	4444      	add	r4, r8
 8000db2:	444a      	add	r2, r9
 8000db4:	9703      	str	r7, [sp, #12]
 8000db6:	42a6      	cmp	r6, r4
 8000db8:	d904      	bls.n	8000dc4 <__aeabi_dmul+0x1d4>
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	025b      	lsls	r3, r3, #9
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	4447      	add	r7, r8
 8000dc2:	9703      	str	r7, [sp, #12]
 8000dc4:	0423      	lsls	r3, r4, #16
 8000dc6:	9e02      	ldr	r6, [sp, #8]
 8000dc8:	469a      	mov	sl, r3
 8000dca:	9b05      	ldr	r3, [sp, #20]
 8000dcc:	445e      	add	r6, fp
 8000dce:	4698      	mov	r8, r3
 8000dd0:	42ae      	cmp	r6, r5
 8000dd2:	41ad      	sbcs	r5, r5
 8000dd4:	1876      	adds	r6, r6, r1
 8000dd6:	428e      	cmp	r6, r1
 8000dd8:	4189      	sbcs	r1, r1
 8000dda:	0400      	lsls	r0, r0, #16
 8000ddc:	0c00      	lsrs	r0, r0, #16
 8000dde:	4450      	add	r0, sl
 8000de0:	4440      	add	r0, r8
 8000de2:	426d      	negs	r5, r5
 8000de4:	1947      	adds	r7, r0, r5
 8000de6:	46b8      	mov	r8, r7
 8000de8:	4693      	mov	fp, r2
 8000dea:	4249      	negs	r1, r1
 8000dec:	4689      	mov	r9, r1
 8000dee:	44c3      	add	fp, r8
 8000df0:	44d9      	add	r9, fp
 8000df2:	4298      	cmp	r0, r3
 8000df4:	4180      	sbcs	r0, r0
 8000df6:	45a8      	cmp	r8, r5
 8000df8:	41ad      	sbcs	r5, r5
 8000dfa:	4593      	cmp	fp, r2
 8000dfc:	4192      	sbcs	r2, r2
 8000dfe:	4589      	cmp	r9, r1
 8000e00:	4189      	sbcs	r1, r1
 8000e02:	426d      	negs	r5, r5
 8000e04:	4240      	negs	r0, r0
 8000e06:	4328      	orrs	r0, r5
 8000e08:	0c24      	lsrs	r4, r4, #16
 8000e0a:	4252      	negs	r2, r2
 8000e0c:	4249      	negs	r1, r1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	1900      	adds	r0, r0, r4
 8000e14:	1880      	adds	r0, r0, r2
 8000e16:	18c7      	adds	r7, r0, r3
 8000e18:	464b      	mov	r3, r9
 8000e1a:	0ddc      	lsrs	r4, r3, #23
 8000e1c:	9b04      	ldr	r3, [sp, #16]
 8000e1e:	0275      	lsls	r5, r6, #9
 8000e20:	431d      	orrs	r5, r3
 8000e22:	1e6a      	subs	r2, r5, #1
 8000e24:	4195      	sbcs	r5, r2
 8000e26:	464b      	mov	r3, r9
 8000e28:	0df6      	lsrs	r6, r6, #23
 8000e2a:	027f      	lsls	r7, r7, #9
 8000e2c:	4335      	orrs	r5, r6
 8000e2e:	025a      	lsls	r2, r3, #9
 8000e30:	433c      	orrs	r4, r7
 8000e32:	4315      	orrs	r5, r2
 8000e34:	01fb      	lsls	r3, r7, #7
 8000e36:	d400      	bmi.n	8000e3a <__aeabi_dmul+0x24a>
 8000e38:	e11c      	b.n	8001074 <__aeabi_dmul+0x484>
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	086a      	lsrs	r2, r5, #1
 8000e3e:	400d      	ands	r5, r1
 8000e40:	4315      	orrs	r5, r2
 8000e42:	07e2      	lsls	r2, r4, #31
 8000e44:	4315      	orrs	r5, r2
 8000e46:	0864      	lsrs	r4, r4, #1
 8000e48:	494f      	ldr	r1, [pc, #316]	; (8000f88 <__aeabi_dmul+0x398>)
 8000e4a:	4461      	add	r1, ip
 8000e4c:	2900      	cmp	r1, #0
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_dmul+0x262>
 8000e50:	e0b0      	b.n	8000fb4 <__aeabi_dmul+0x3c4>
 8000e52:	076b      	lsls	r3, r5, #29
 8000e54:	d009      	beq.n	8000e6a <__aeabi_dmul+0x27a>
 8000e56:	220f      	movs	r2, #15
 8000e58:	402a      	ands	r2, r5
 8000e5a:	2a04      	cmp	r2, #4
 8000e5c:	d005      	beq.n	8000e6a <__aeabi_dmul+0x27a>
 8000e5e:	1d2a      	adds	r2, r5, #4
 8000e60:	42aa      	cmp	r2, r5
 8000e62:	41ad      	sbcs	r5, r5
 8000e64:	426d      	negs	r5, r5
 8000e66:	1964      	adds	r4, r4, r5
 8000e68:	0015      	movs	r5, r2
 8000e6a:	01e3      	lsls	r3, r4, #7
 8000e6c:	d504      	bpl.n	8000e78 <__aeabi_dmul+0x288>
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	4a46      	ldr	r2, [pc, #280]	; (8000f8c <__aeabi_dmul+0x39c>)
 8000e72:	00c9      	lsls	r1, r1, #3
 8000e74:	4014      	ands	r4, r2
 8000e76:	4461      	add	r1, ip
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <__aeabi_dmul+0x3a0>)
 8000e7a:	4291      	cmp	r1, r2
 8000e7c:	dd00      	ble.n	8000e80 <__aeabi_dmul+0x290>
 8000e7e:	e726      	b.n	8000cce <__aeabi_dmul+0xde>
 8000e80:	0762      	lsls	r2, r4, #29
 8000e82:	08ed      	lsrs	r5, r5, #3
 8000e84:	0264      	lsls	r4, r4, #9
 8000e86:	0549      	lsls	r1, r1, #21
 8000e88:	4315      	orrs	r5, r2
 8000e8a:	0b24      	lsrs	r4, r4, #12
 8000e8c:	0d4a      	lsrs	r2, r1, #21
 8000e8e:	e710      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 8000e90:	4652      	mov	r2, sl
 8000e92:	4332      	orrs	r2, r6
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dmul+0x2a8>
 8000e96:	e07f      	b.n	8000f98 <__aeabi_dmul+0x3a8>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_dmul+0x2ae>
 8000e9c:	e0dc      	b.n	8001058 <__aeabi_dmul+0x468>
 8000e9e:	0030      	movs	r0, r6
 8000ea0:	f000 fd3e 	bl	8001920 <__clzsi2>
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	3a0b      	subs	r2, #11
 8000ea8:	231d      	movs	r3, #29
 8000eaa:	0001      	movs	r1, r0
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	4652      	mov	r2, sl
 8000eb0:	3908      	subs	r1, #8
 8000eb2:	40da      	lsrs	r2, r3
 8000eb4:	408e      	lsls	r6, r1
 8000eb6:	4316      	orrs	r6, r2
 8000eb8:	4652      	mov	r2, sl
 8000eba:	408a      	lsls	r2, r1
 8000ebc:	9b00      	ldr	r3, [sp, #0]
 8000ebe:	4935      	ldr	r1, [pc, #212]	; (8000f94 <__aeabi_dmul+0x3a4>)
 8000ec0:	1a18      	subs	r0, r3, r0
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	468c      	mov	ip, r1
 8000ec6:	4463      	add	r3, ip
 8000ec8:	2000      	movs	r0, #0
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	e6d3      	b.n	8000c76 <__aeabi_dmul+0x86>
 8000ece:	0025      	movs	r5, r4
 8000ed0:	4305      	orrs	r5, r0
 8000ed2:	d04a      	beq.n	8000f6a <__aeabi_dmul+0x37a>
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dmul+0x2ea>
 8000ed8:	e0b0      	b.n	800103c <__aeabi_dmul+0x44c>
 8000eda:	0020      	movs	r0, r4
 8000edc:	f000 fd20 	bl	8001920 <__clzsi2>
 8000ee0:	0001      	movs	r1, r0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	390b      	subs	r1, #11
 8000ee6:	231d      	movs	r3, #29
 8000ee8:	0010      	movs	r0, r2
 8000eea:	1a5b      	subs	r3, r3, r1
 8000eec:	0031      	movs	r1, r6
 8000eee:	0035      	movs	r5, r6
 8000ef0:	3808      	subs	r0, #8
 8000ef2:	4084      	lsls	r4, r0
 8000ef4:	40d9      	lsrs	r1, r3
 8000ef6:	4085      	lsls	r5, r0
 8000ef8:	430c      	orrs	r4, r1
 8000efa:	4826      	ldr	r0, [pc, #152]	; (8000f94 <__aeabi_dmul+0x3a4>)
 8000efc:	1a83      	subs	r3, r0, r2
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	4699      	mov	r9, r3
 8000f04:	469b      	mov	fp, r3
 8000f06:	e697      	b.n	8000c38 <__aeabi_dmul+0x48>
 8000f08:	0005      	movs	r5, r0
 8000f0a:	4325      	orrs	r5, r4
 8000f0c:	d126      	bne.n	8000f5c <__aeabi_dmul+0x36c>
 8000f0e:	2208      	movs	r2, #8
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2302      	movs	r3, #2
 8000f14:	2400      	movs	r4, #0
 8000f16:	4691      	mov	r9, r2
 8000f18:	469b      	mov	fp, r3
 8000f1a:	e68d      	b.n	8000c38 <__aeabi_dmul+0x48>
 8000f1c:	4652      	mov	r2, sl
 8000f1e:	9b00      	ldr	r3, [sp, #0]
 8000f20:	4332      	orrs	r2, r6
 8000f22:	d110      	bne.n	8000f46 <__aeabi_dmul+0x356>
 8000f24:	4915      	ldr	r1, [pc, #84]	; (8000f7c <__aeabi_dmul+0x38c>)
 8000f26:	2600      	movs	r6, #0
 8000f28:	468c      	mov	ip, r1
 8000f2a:	4463      	add	r3, ip
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2302      	movs	r3, #2
 8000f32:	4319      	orrs	r1, r3
 8000f34:	4689      	mov	r9, r1
 8000f36:	2002      	movs	r0, #2
 8000f38:	e69d      	b.n	8000c76 <__aeabi_dmul+0x86>
 8000f3a:	465b      	mov	r3, fp
 8000f3c:	9701      	str	r7, [sp, #4]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d000      	beq.n	8000f44 <__aeabi_dmul+0x354>
 8000f42:	e6ad      	b.n	8000ca0 <__aeabi_dmul+0xb0>
 8000f44:	e6c3      	b.n	8000cce <__aeabi_dmul+0xde>
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <__aeabi_dmul+0x38c>)
 8000f48:	2003      	movs	r0, #3
 8000f4a:	4694      	mov	ip, r2
 8000f4c:	4463      	add	r3, ip
 8000f4e:	464a      	mov	r2, r9
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2303      	movs	r3, #3
 8000f54:	431a      	orrs	r2, r3
 8000f56:	4691      	mov	r9, r2
 8000f58:	4652      	mov	r2, sl
 8000f5a:	e68c      	b.n	8000c76 <__aeabi_dmul+0x86>
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2303      	movs	r3, #3
 8000f62:	0005      	movs	r5, r0
 8000f64:	4691      	mov	r9, r2
 8000f66:	469b      	mov	fp, r3
 8000f68:	e666      	b.n	8000c38 <__aeabi_dmul+0x48>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	4699      	mov	r9, r3
 8000f6e:	2300      	movs	r3, #0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	2400      	movs	r4, #0
 8000f76:	469b      	mov	fp, r3
 8000f78:	e65e      	b.n	8000c38 <__aeabi_dmul+0x48>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	000007ff 	.word	0x000007ff
 8000f80:	fffffc01 	.word	0xfffffc01
 8000f84:	08008958 	.word	0x08008958
 8000f88:	000003ff 	.word	0x000003ff
 8000f8c:	feffffff 	.word	0xfeffffff
 8000f90:	000007fe 	.word	0x000007fe
 8000f94:	fffffc0d 	.word	0xfffffc0d
 8000f98:	4649      	mov	r1, r9
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	4319      	orrs	r1, r3
 8000f9e:	4689      	mov	r9, r1
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	e667      	b.n	8000c76 <__aeabi_dmul+0x86>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2480      	movs	r4, #128	; 0x80
 8000faa:	2500      	movs	r5, #0
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <__aeabi_dmul+0x4cc>)
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	0324      	lsls	r4, r4, #12
 8000fb2:	e67e      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	1a40      	subs	r0, r0, r1
 8000fb8:	2838      	cmp	r0, #56	; 0x38
 8000fba:	dd00      	ble.n	8000fbe <__aeabi_dmul+0x3ce>
 8000fbc:	e676      	b.n	8000cac <__aeabi_dmul+0xbc>
 8000fbe:	281f      	cmp	r0, #31
 8000fc0:	dd5b      	ble.n	800107a <__aeabi_dmul+0x48a>
 8000fc2:	221f      	movs	r2, #31
 8000fc4:	0023      	movs	r3, r4
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	1a51      	subs	r1, r2, r1
 8000fca:	40cb      	lsrs	r3, r1
 8000fcc:	0019      	movs	r1, r3
 8000fce:	2820      	cmp	r0, #32
 8000fd0:	d003      	beq.n	8000fda <__aeabi_dmul+0x3ea>
 8000fd2:	4a3b      	ldr	r2, [pc, #236]	; (80010c0 <__aeabi_dmul+0x4d0>)
 8000fd4:	4462      	add	r2, ip
 8000fd6:	4094      	lsls	r4, r2
 8000fd8:	4325      	orrs	r5, r4
 8000fda:	1e6a      	subs	r2, r5, #1
 8000fdc:	4195      	sbcs	r5, r2
 8000fde:	002a      	movs	r2, r5
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	000d      	movs	r5, r1
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	4015      	ands	r5, r2
 8000fea:	4211      	tst	r1, r2
 8000fec:	d05b      	beq.n	80010a6 <__aeabi_dmul+0x4b6>
 8000fee:	210f      	movs	r1, #15
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	4011      	ands	r1, r2
 8000ff4:	2904      	cmp	r1, #4
 8000ff6:	d053      	beq.n	80010a0 <__aeabi_dmul+0x4b0>
 8000ff8:	1d11      	adds	r1, r2, #4
 8000ffa:	4291      	cmp	r1, r2
 8000ffc:	4192      	sbcs	r2, r2
 8000ffe:	4252      	negs	r2, r2
 8001000:	18a4      	adds	r4, r4, r2
 8001002:	000a      	movs	r2, r1
 8001004:	0223      	lsls	r3, r4, #8
 8001006:	d54b      	bpl.n	80010a0 <__aeabi_dmul+0x4b0>
 8001008:	2201      	movs	r2, #1
 800100a:	2400      	movs	r4, #0
 800100c:	2500      	movs	r5, #0
 800100e:	e650      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	031b      	lsls	r3, r3, #12
 8001014:	421c      	tst	r4, r3
 8001016:	d009      	beq.n	800102c <__aeabi_dmul+0x43c>
 8001018:	421e      	tst	r6, r3
 800101a:	d107      	bne.n	800102c <__aeabi_dmul+0x43c>
 800101c:	4333      	orrs	r3, r6
 800101e:	031c      	lsls	r4, r3, #12
 8001020:	4643      	mov	r3, r8
 8001022:	0015      	movs	r5, r2
 8001024:	0b24      	lsrs	r4, r4, #12
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <__aeabi_dmul+0x4cc>)
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	e642      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	0312      	lsls	r2, r2, #12
 8001030:	4314      	orrs	r4, r2
 8001032:	0324      	lsls	r4, r4, #12
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <__aeabi_dmul+0x4cc>)
 8001036:	0b24      	lsrs	r4, r4, #12
 8001038:	9701      	str	r7, [sp, #4]
 800103a:	e63a      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 800103c:	f000 fc70 	bl	8001920 <__clzsi2>
 8001040:	0001      	movs	r1, r0
 8001042:	0002      	movs	r2, r0
 8001044:	3115      	adds	r1, #21
 8001046:	3220      	adds	r2, #32
 8001048:	291c      	cmp	r1, #28
 800104a:	dc00      	bgt.n	800104e <__aeabi_dmul+0x45e>
 800104c:	e74b      	b.n	8000ee6 <__aeabi_dmul+0x2f6>
 800104e:	0034      	movs	r4, r6
 8001050:	3808      	subs	r0, #8
 8001052:	2500      	movs	r5, #0
 8001054:	4084      	lsls	r4, r0
 8001056:	e750      	b.n	8000efa <__aeabi_dmul+0x30a>
 8001058:	f000 fc62 	bl	8001920 <__clzsi2>
 800105c:	0003      	movs	r3, r0
 800105e:	001a      	movs	r2, r3
 8001060:	3215      	adds	r2, #21
 8001062:	3020      	adds	r0, #32
 8001064:	2a1c      	cmp	r2, #28
 8001066:	dc00      	bgt.n	800106a <__aeabi_dmul+0x47a>
 8001068:	e71e      	b.n	8000ea8 <__aeabi_dmul+0x2b8>
 800106a:	4656      	mov	r6, sl
 800106c:	3b08      	subs	r3, #8
 800106e:	2200      	movs	r2, #0
 8001070:	409e      	lsls	r6, r3
 8001072:	e723      	b.n	8000ebc <__aeabi_dmul+0x2cc>
 8001074:	9b00      	ldr	r3, [sp, #0]
 8001076:	469c      	mov	ip, r3
 8001078:	e6e6      	b.n	8000e48 <__aeabi_dmul+0x258>
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <__aeabi_dmul+0x4d4>)
 800107c:	0022      	movs	r2, r4
 800107e:	4461      	add	r1, ip
 8001080:	002e      	movs	r6, r5
 8001082:	408d      	lsls	r5, r1
 8001084:	408a      	lsls	r2, r1
 8001086:	40c6      	lsrs	r6, r0
 8001088:	1e69      	subs	r1, r5, #1
 800108a:	418d      	sbcs	r5, r1
 800108c:	4332      	orrs	r2, r6
 800108e:	432a      	orrs	r2, r5
 8001090:	40c4      	lsrs	r4, r0
 8001092:	0753      	lsls	r3, r2, #29
 8001094:	d0b6      	beq.n	8001004 <__aeabi_dmul+0x414>
 8001096:	210f      	movs	r1, #15
 8001098:	4011      	ands	r1, r2
 800109a:	2904      	cmp	r1, #4
 800109c:	d1ac      	bne.n	8000ff8 <__aeabi_dmul+0x408>
 800109e:	e7b1      	b.n	8001004 <__aeabi_dmul+0x414>
 80010a0:	0765      	lsls	r5, r4, #29
 80010a2:	0264      	lsls	r4, r4, #9
 80010a4:	0b24      	lsrs	r4, r4, #12
 80010a6:	08d2      	lsrs	r2, r2, #3
 80010a8:	4315      	orrs	r5, r2
 80010aa:	2200      	movs	r2, #0
 80010ac:	e601      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	0312      	lsls	r2, r2, #12
 80010b2:	4314      	orrs	r4, r2
 80010b4:	0324      	lsls	r4, r4, #12
 80010b6:	4a01      	ldr	r2, [pc, #4]	; (80010bc <__aeabi_dmul+0x4cc>)
 80010b8:	0b24      	lsrs	r4, r4, #12
 80010ba:	e5fa      	b.n	8000cb2 <__aeabi_dmul+0xc2>
 80010bc:	000007ff 	.word	0x000007ff
 80010c0:	0000043e 	.word	0x0000043e
 80010c4:	0000041e 	.word	0x0000041e

080010c8 <__aeabi_dsub>:
 80010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ca:	4657      	mov	r7, sl
 80010cc:	464e      	mov	r6, r9
 80010ce:	4645      	mov	r5, r8
 80010d0:	46de      	mov	lr, fp
 80010d2:	b5e0      	push	{r5, r6, r7, lr}
 80010d4:	001e      	movs	r6, r3
 80010d6:	0017      	movs	r7, r2
 80010d8:	004a      	lsls	r2, r1, #1
 80010da:	030b      	lsls	r3, r1, #12
 80010dc:	0d52      	lsrs	r2, r2, #21
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	4690      	mov	r8, r2
 80010e2:	0f42      	lsrs	r2, r0, #29
 80010e4:	431a      	orrs	r2, r3
 80010e6:	0fcd      	lsrs	r5, r1, #31
 80010e8:	4ccd      	ldr	r4, [pc, #820]	; (8001420 <__aeabi_dsub+0x358>)
 80010ea:	0331      	lsls	r1, r6, #12
 80010ec:	00c3      	lsls	r3, r0, #3
 80010ee:	4694      	mov	ip, r2
 80010f0:	0070      	lsls	r0, r6, #1
 80010f2:	0f7a      	lsrs	r2, r7, #29
 80010f4:	0a49      	lsrs	r1, r1, #9
 80010f6:	00ff      	lsls	r7, r7, #3
 80010f8:	469a      	mov	sl, r3
 80010fa:	46b9      	mov	r9, r7
 80010fc:	0d40      	lsrs	r0, r0, #21
 80010fe:	0ff6      	lsrs	r6, r6, #31
 8001100:	4311      	orrs	r1, r2
 8001102:	42a0      	cmp	r0, r4
 8001104:	d100      	bne.n	8001108 <__aeabi_dsub+0x40>
 8001106:	e0b1      	b.n	800126c <__aeabi_dsub+0x1a4>
 8001108:	2201      	movs	r2, #1
 800110a:	4056      	eors	r6, r2
 800110c:	46b3      	mov	fp, r6
 800110e:	42b5      	cmp	r5, r6
 8001110:	d100      	bne.n	8001114 <__aeabi_dsub+0x4c>
 8001112:	e088      	b.n	8001226 <__aeabi_dsub+0x15e>
 8001114:	4642      	mov	r2, r8
 8001116:	1a12      	subs	r2, r2, r0
 8001118:	2a00      	cmp	r2, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dsub+0x56>
 800111c:	e0ae      	b.n	800127c <__aeabi_dsub+0x1b4>
 800111e:	2800      	cmp	r0, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dsub+0x5c>
 8001122:	e0c1      	b.n	80012a8 <__aeabi_dsub+0x1e0>
 8001124:	48be      	ldr	r0, [pc, #760]	; (8001420 <__aeabi_dsub+0x358>)
 8001126:	4580      	cmp	r8, r0
 8001128:	d100      	bne.n	800112c <__aeabi_dsub+0x64>
 800112a:	e151      	b.n	80013d0 <__aeabi_dsub+0x308>
 800112c:	2080      	movs	r0, #128	; 0x80
 800112e:	0400      	lsls	r0, r0, #16
 8001130:	4301      	orrs	r1, r0
 8001132:	2a38      	cmp	r2, #56	; 0x38
 8001134:	dd00      	ble.n	8001138 <__aeabi_dsub+0x70>
 8001136:	e17b      	b.n	8001430 <__aeabi_dsub+0x368>
 8001138:	2a1f      	cmp	r2, #31
 800113a:	dd00      	ble.n	800113e <__aeabi_dsub+0x76>
 800113c:	e1ee      	b.n	800151c <__aeabi_dsub+0x454>
 800113e:	2020      	movs	r0, #32
 8001140:	003e      	movs	r6, r7
 8001142:	1a80      	subs	r0, r0, r2
 8001144:	000c      	movs	r4, r1
 8001146:	40d6      	lsrs	r6, r2
 8001148:	40d1      	lsrs	r1, r2
 800114a:	4087      	lsls	r7, r0
 800114c:	4662      	mov	r2, ip
 800114e:	4084      	lsls	r4, r0
 8001150:	1a52      	subs	r2, r2, r1
 8001152:	1e78      	subs	r0, r7, #1
 8001154:	4187      	sbcs	r7, r0
 8001156:	4694      	mov	ip, r2
 8001158:	4334      	orrs	r4, r6
 800115a:	4327      	orrs	r7, r4
 800115c:	1bdc      	subs	r4, r3, r7
 800115e:	42a3      	cmp	r3, r4
 8001160:	419b      	sbcs	r3, r3
 8001162:	4662      	mov	r2, ip
 8001164:	425b      	negs	r3, r3
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	4699      	mov	r9, r3
 800116a:	464b      	mov	r3, r9
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	d400      	bmi.n	8001172 <__aeabi_dsub+0xaa>
 8001170:	e118      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 8001172:	464b      	mov	r3, r9
 8001174:	0258      	lsls	r0, r3, #9
 8001176:	0a43      	lsrs	r3, r0, #9
 8001178:	4699      	mov	r9, r3
 800117a:	464b      	mov	r3, r9
 800117c:	2b00      	cmp	r3, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_dsub+0xba>
 8001180:	e137      	b.n	80013f2 <__aeabi_dsub+0x32a>
 8001182:	4648      	mov	r0, r9
 8001184:	f000 fbcc 	bl	8001920 <__clzsi2>
 8001188:	0001      	movs	r1, r0
 800118a:	3908      	subs	r1, #8
 800118c:	2320      	movs	r3, #32
 800118e:	0022      	movs	r2, r4
 8001190:	4648      	mov	r0, r9
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	40da      	lsrs	r2, r3
 8001196:	4088      	lsls	r0, r1
 8001198:	408c      	lsls	r4, r1
 800119a:	4643      	mov	r3, r8
 800119c:	4310      	orrs	r0, r2
 800119e:	4588      	cmp	r8, r1
 80011a0:	dd00      	ble.n	80011a4 <__aeabi_dsub+0xdc>
 80011a2:	e136      	b.n	8001412 <__aeabi_dsub+0x34a>
 80011a4:	1ac9      	subs	r1, r1, r3
 80011a6:	1c4b      	adds	r3, r1, #1
 80011a8:	2b1f      	cmp	r3, #31
 80011aa:	dd00      	ble.n	80011ae <__aeabi_dsub+0xe6>
 80011ac:	e0ea      	b.n	8001384 <__aeabi_dsub+0x2bc>
 80011ae:	2220      	movs	r2, #32
 80011b0:	0026      	movs	r6, r4
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	0001      	movs	r1, r0
 80011b6:	4094      	lsls	r4, r2
 80011b8:	40de      	lsrs	r6, r3
 80011ba:	40d8      	lsrs	r0, r3
 80011bc:	2300      	movs	r3, #0
 80011be:	4091      	lsls	r1, r2
 80011c0:	1e62      	subs	r2, r4, #1
 80011c2:	4194      	sbcs	r4, r2
 80011c4:	4681      	mov	r9, r0
 80011c6:	4698      	mov	r8, r3
 80011c8:	4331      	orrs	r1, r6
 80011ca:	430c      	orrs	r4, r1
 80011cc:	0763      	lsls	r3, r4, #29
 80011ce:	d009      	beq.n	80011e4 <__aeabi_dsub+0x11c>
 80011d0:	230f      	movs	r3, #15
 80011d2:	4023      	ands	r3, r4
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d005      	beq.n	80011e4 <__aeabi_dsub+0x11c>
 80011d8:	1d23      	adds	r3, r4, #4
 80011da:	42a3      	cmp	r3, r4
 80011dc:	41a4      	sbcs	r4, r4
 80011de:	4264      	negs	r4, r4
 80011e0:	44a1      	add	r9, r4
 80011e2:	001c      	movs	r4, r3
 80011e4:	464b      	mov	r3, r9
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_dsub+0x124>
 80011ea:	e0de      	b.n	80013aa <__aeabi_dsub+0x2e2>
 80011ec:	4641      	mov	r1, r8
 80011ee:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <__aeabi_dsub+0x358>)
 80011f0:	3101      	adds	r1, #1
 80011f2:	4299      	cmp	r1, r3
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dsub+0x130>
 80011f6:	e0e7      	b.n	80013c8 <__aeabi_dsub+0x300>
 80011f8:	464b      	mov	r3, r9
 80011fa:	488a      	ldr	r0, [pc, #552]	; (8001424 <__aeabi_dsub+0x35c>)
 80011fc:	08e4      	lsrs	r4, r4, #3
 80011fe:	4003      	ands	r3, r0
 8001200:	0018      	movs	r0, r3
 8001202:	0549      	lsls	r1, r1, #21
 8001204:	075b      	lsls	r3, r3, #29
 8001206:	0240      	lsls	r0, r0, #9
 8001208:	4323      	orrs	r3, r4
 800120a:	0d4a      	lsrs	r2, r1, #21
 800120c:	0b04      	lsrs	r4, r0, #12
 800120e:	0512      	lsls	r2, r2, #20
 8001210:	07ed      	lsls	r5, r5, #31
 8001212:	4322      	orrs	r2, r4
 8001214:	432a      	orrs	r2, r5
 8001216:	0018      	movs	r0, r3
 8001218:	0011      	movs	r1, r2
 800121a:	bcf0      	pop	{r4, r5, r6, r7}
 800121c:	46bb      	mov	fp, r7
 800121e:	46b2      	mov	sl, r6
 8001220:	46a9      	mov	r9, r5
 8001222:	46a0      	mov	r8, r4
 8001224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001226:	4642      	mov	r2, r8
 8001228:	1a12      	subs	r2, r2, r0
 800122a:	2a00      	cmp	r2, #0
 800122c:	dd52      	ble.n	80012d4 <__aeabi_dsub+0x20c>
 800122e:	2800      	cmp	r0, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_dsub+0x16c>
 8001232:	e09c      	b.n	800136e <__aeabi_dsub+0x2a6>
 8001234:	45a0      	cmp	r8, r4
 8001236:	d100      	bne.n	800123a <__aeabi_dsub+0x172>
 8001238:	e0ca      	b.n	80013d0 <__aeabi_dsub+0x308>
 800123a:	2080      	movs	r0, #128	; 0x80
 800123c:	0400      	lsls	r0, r0, #16
 800123e:	4301      	orrs	r1, r0
 8001240:	2a38      	cmp	r2, #56	; 0x38
 8001242:	dd00      	ble.n	8001246 <__aeabi_dsub+0x17e>
 8001244:	e149      	b.n	80014da <__aeabi_dsub+0x412>
 8001246:	2a1f      	cmp	r2, #31
 8001248:	dc00      	bgt.n	800124c <__aeabi_dsub+0x184>
 800124a:	e197      	b.n	800157c <__aeabi_dsub+0x4b4>
 800124c:	0010      	movs	r0, r2
 800124e:	000e      	movs	r6, r1
 8001250:	3820      	subs	r0, #32
 8001252:	40c6      	lsrs	r6, r0
 8001254:	2a20      	cmp	r2, #32
 8001256:	d004      	beq.n	8001262 <__aeabi_dsub+0x19a>
 8001258:	2040      	movs	r0, #64	; 0x40
 800125a:	1a82      	subs	r2, r0, r2
 800125c:	4091      	lsls	r1, r2
 800125e:	430f      	orrs	r7, r1
 8001260:	46b9      	mov	r9, r7
 8001262:	464c      	mov	r4, r9
 8001264:	1e62      	subs	r2, r4, #1
 8001266:	4194      	sbcs	r4, r2
 8001268:	4334      	orrs	r4, r6
 800126a:	e13a      	b.n	80014e2 <__aeabi_dsub+0x41a>
 800126c:	000a      	movs	r2, r1
 800126e:	433a      	orrs	r2, r7
 8001270:	d028      	beq.n	80012c4 <__aeabi_dsub+0x1fc>
 8001272:	46b3      	mov	fp, r6
 8001274:	42b5      	cmp	r5, r6
 8001276:	d02b      	beq.n	80012d0 <__aeabi_dsub+0x208>
 8001278:	4a6b      	ldr	r2, [pc, #428]	; (8001428 <__aeabi_dsub+0x360>)
 800127a:	4442      	add	r2, r8
 800127c:	2a00      	cmp	r2, #0
 800127e:	d05d      	beq.n	800133c <__aeabi_dsub+0x274>
 8001280:	4642      	mov	r2, r8
 8001282:	4644      	mov	r4, r8
 8001284:	1a82      	subs	r2, r0, r2
 8001286:	2c00      	cmp	r4, #0
 8001288:	d000      	beq.n	800128c <__aeabi_dsub+0x1c4>
 800128a:	e0f5      	b.n	8001478 <__aeabi_dsub+0x3b0>
 800128c:	4665      	mov	r5, ip
 800128e:	431d      	orrs	r5, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_dsub+0x1cc>
 8001292:	e19c      	b.n	80015ce <__aeabi_dsub+0x506>
 8001294:	1e55      	subs	r5, r2, #1
 8001296:	2a01      	cmp	r2, #1
 8001298:	d100      	bne.n	800129c <__aeabi_dsub+0x1d4>
 800129a:	e1fb      	b.n	8001694 <__aeabi_dsub+0x5cc>
 800129c:	4c60      	ldr	r4, [pc, #384]	; (8001420 <__aeabi_dsub+0x358>)
 800129e:	42a2      	cmp	r2, r4
 80012a0:	d100      	bne.n	80012a4 <__aeabi_dsub+0x1dc>
 80012a2:	e1bd      	b.n	8001620 <__aeabi_dsub+0x558>
 80012a4:	002a      	movs	r2, r5
 80012a6:	e0f0      	b.n	800148a <__aeabi_dsub+0x3c2>
 80012a8:	0008      	movs	r0, r1
 80012aa:	4338      	orrs	r0, r7
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dsub+0x1e8>
 80012ae:	e0c3      	b.n	8001438 <__aeabi_dsub+0x370>
 80012b0:	1e50      	subs	r0, r2, #1
 80012b2:	2a01      	cmp	r2, #1
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dsub+0x1f0>
 80012b6:	e1a8      	b.n	800160a <__aeabi_dsub+0x542>
 80012b8:	4c59      	ldr	r4, [pc, #356]	; (8001420 <__aeabi_dsub+0x358>)
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dsub+0x1f8>
 80012be:	e087      	b.n	80013d0 <__aeabi_dsub+0x308>
 80012c0:	0002      	movs	r2, r0
 80012c2:	e736      	b.n	8001132 <__aeabi_dsub+0x6a>
 80012c4:	2201      	movs	r2, #1
 80012c6:	4056      	eors	r6, r2
 80012c8:	46b3      	mov	fp, r6
 80012ca:	42b5      	cmp	r5, r6
 80012cc:	d000      	beq.n	80012d0 <__aeabi_dsub+0x208>
 80012ce:	e721      	b.n	8001114 <__aeabi_dsub+0x4c>
 80012d0:	4a55      	ldr	r2, [pc, #340]	; (8001428 <__aeabi_dsub+0x360>)
 80012d2:	4442      	add	r2, r8
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d100      	bne.n	80012da <__aeabi_dsub+0x212>
 80012d8:	e0b5      	b.n	8001446 <__aeabi_dsub+0x37e>
 80012da:	4642      	mov	r2, r8
 80012dc:	4644      	mov	r4, r8
 80012de:	1a82      	subs	r2, r0, r2
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dsub+0x21e>
 80012e4:	e138      	b.n	8001558 <__aeabi_dsub+0x490>
 80012e6:	4e4e      	ldr	r6, [pc, #312]	; (8001420 <__aeabi_dsub+0x358>)
 80012e8:	42b0      	cmp	r0, r6
 80012ea:	d100      	bne.n	80012ee <__aeabi_dsub+0x226>
 80012ec:	e1de      	b.n	80016ac <__aeabi_dsub+0x5e4>
 80012ee:	2680      	movs	r6, #128	; 0x80
 80012f0:	4664      	mov	r4, ip
 80012f2:	0436      	lsls	r6, r6, #16
 80012f4:	4334      	orrs	r4, r6
 80012f6:	46a4      	mov	ip, r4
 80012f8:	2a38      	cmp	r2, #56	; 0x38
 80012fa:	dd00      	ble.n	80012fe <__aeabi_dsub+0x236>
 80012fc:	e196      	b.n	800162c <__aeabi_dsub+0x564>
 80012fe:	2a1f      	cmp	r2, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dsub+0x23c>
 8001302:	e224      	b.n	800174e <__aeabi_dsub+0x686>
 8001304:	2620      	movs	r6, #32
 8001306:	1ab4      	subs	r4, r6, r2
 8001308:	46a2      	mov	sl, r4
 800130a:	4664      	mov	r4, ip
 800130c:	4656      	mov	r6, sl
 800130e:	40b4      	lsls	r4, r6
 8001310:	46a1      	mov	r9, r4
 8001312:	001c      	movs	r4, r3
 8001314:	464e      	mov	r6, r9
 8001316:	40d4      	lsrs	r4, r2
 8001318:	4326      	orrs	r6, r4
 800131a:	0034      	movs	r4, r6
 800131c:	4656      	mov	r6, sl
 800131e:	40b3      	lsls	r3, r6
 8001320:	1e5e      	subs	r6, r3, #1
 8001322:	41b3      	sbcs	r3, r6
 8001324:	431c      	orrs	r4, r3
 8001326:	4663      	mov	r3, ip
 8001328:	40d3      	lsrs	r3, r2
 800132a:	18c9      	adds	r1, r1, r3
 800132c:	19e4      	adds	r4, r4, r7
 800132e:	42bc      	cmp	r4, r7
 8001330:	41bf      	sbcs	r7, r7
 8001332:	427f      	negs	r7, r7
 8001334:	46b9      	mov	r9, r7
 8001336:	4680      	mov	r8, r0
 8001338:	4489      	add	r9, r1
 800133a:	e0d8      	b.n	80014ee <__aeabi_dsub+0x426>
 800133c:	4640      	mov	r0, r8
 800133e:	4c3b      	ldr	r4, [pc, #236]	; (800142c <__aeabi_dsub+0x364>)
 8001340:	3001      	adds	r0, #1
 8001342:	4220      	tst	r0, r4
 8001344:	d000      	beq.n	8001348 <__aeabi_dsub+0x280>
 8001346:	e0b4      	b.n	80014b2 <__aeabi_dsub+0x3ea>
 8001348:	4640      	mov	r0, r8
 800134a:	2800      	cmp	r0, #0
 800134c:	d000      	beq.n	8001350 <__aeabi_dsub+0x288>
 800134e:	e144      	b.n	80015da <__aeabi_dsub+0x512>
 8001350:	4660      	mov	r0, ip
 8001352:	4318      	orrs	r0, r3
 8001354:	d100      	bne.n	8001358 <__aeabi_dsub+0x290>
 8001356:	e190      	b.n	800167a <__aeabi_dsub+0x5b2>
 8001358:	0008      	movs	r0, r1
 800135a:	4338      	orrs	r0, r7
 800135c:	d000      	beq.n	8001360 <__aeabi_dsub+0x298>
 800135e:	e1aa      	b.n	80016b6 <__aeabi_dsub+0x5ee>
 8001360:	4661      	mov	r1, ip
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	0749      	lsls	r1, r1, #29
 8001366:	430b      	orrs	r3, r1
 8001368:	4661      	mov	r1, ip
 800136a:	08cc      	lsrs	r4, r1, #3
 800136c:	e027      	b.n	80013be <__aeabi_dsub+0x2f6>
 800136e:	0008      	movs	r0, r1
 8001370:	4338      	orrs	r0, r7
 8001372:	d061      	beq.n	8001438 <__aeabi_dsub+0x370>
 8001374:	1e50      	subs	r0, r2, #1
 8001376:	2a01      	cmp	r2, #1
 8001378:	d100      	bne.n	800137c <__aeabi_dsub+0x2b4>
 800137a:	e139      	b.n	80015f0 <__aeabi_dsub+0x528>
 800137c:	42a2      	cmp	r2, r4
 800137e:	d027      	beq.n	80013d0 <__aeabi_dsub+0x308>
 8001380:	0002      	movs	r2, r0
 8001382:	e75d      	b.n	8001240 <__aeabi_dsub+0x178>
 8001384:	0002      	movs	r2, r0
 8001386:	391f      	subs	r1, #31
 8001388:	40ca      	lsrs	r2, r1
 800138a:	0011      	movs	r1, r2
 800138c:	2b20      	cmp	r3, #32
 800138e:	d003      	beq.n	8001398 <__aeabi_dsub+0x2d0>
 8001390:	2240      	movs	r2, #64	; 0x40
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4098      	lsls	r0, r3
 8001396:	4304      	orrs	r4, r0
 8001398:	1e63      	subs	r3, r4, #1
 800139a:	419c      	sbcs	r4, r3
 800139c:	2300      	movs	r3, #0
 800139e:	4699      	mov	r9, r3
 80013a0:	4698      	mov	r8, r3
 80013a2:	430c      	orrs	r4, r1
 80013a4:	0763      	lsls	r3, r4, #29
 80013a6:	d000      	beq.n	80013aa <__aeabi_dsub+0x2e2>
 80013a8:	e712      	b.n	80011d0 <__aeabi_dsub+0x108>
 80013aa:	464b      	mov	r3, r9
 80013ac:	464a      	mov	r2, r9
 80013ae:	08e4      	lsrs	r4, r4, #3
 80013b0:	075b      	lsls	r3, r3, #29
 80013b2:	4323      	orrs	r3, r4
 80013b4:	08d4      	lsrs	r4, r2, #3
 80013b6:	4642      	mov	r2, r8
 80013b8:	4919      	ldr	r1, [pc, #100]	; (8001420 <__aeabi_dsub+0x358>)
 80013ba:	428a      	cmp	r2, r1
 80013bc:	d00e      	beq.n	80013dc <__aeabi_dsub+0x314>
 80013be:	0324      	lsls	r4, r4, #12
 80013c0:	0552      	lsls	r2, r2, #21
 80013c2:	0b24      	lsrs	r4, r4, #12
 80013c4:	0d52      	lsrs	r2, r2, #21
 80013c6:	e722      	b.n	800120e <__aeabi_dsub+0x146>
 80013c8:	000a      	movs	r2, r1
 80013ca:	2400      	movs	r4, #0
 80013cc:	2300      	movs	r3, #0
 80013ce:	e71e      	b.n	800120e <__aeabi_dsub+0x146>
 80013d0:	08db      	lsrs	r3, r3, #3
 80013d2:	4662      	mov	r2, ip
 80013d4:	0752      	lsls	r2, r2, #29
 80013d6:	4313      	orrs	r3, r2
 80013d8:	4662      	mov	r2, ip
 80013da:	08d4      	lsrs	r4, r2, #3
 80013dc:	001a      	movs	r2, r3
 80013de:	4322      	orrs	r2, r4
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dsub+0x31c>
 80013e2:	e1fc      	b.n	80017de <__aeabi_dsub+0x716>
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	0312      	lsls	r2, r2, #12
 80013e8:	4314      	orrs	r4, r2
 80013ea:	0324      	lsls	r4, r4, #12
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <__aeabi_dsub+0x358>)
 80013ee:	0b24      	lsrs	r4, r4, #12
 80013f0:	e70d      	b.n	800120e <__aeabi_dsub+0x146>
 80013f2:	0020      	movs	r0, r4
 80013f4:	f000 fa94 	bl	8001920 <__clzsi2>
 80013f8:	0001      	movs	r1, r0
 80013fa:	3118      	adds	r1, #24
 80013fc:	291f      	cmp	r1, #31
 80013fe:	dc00      	bgt.n	8001402 <__aeabi_dsub+0x33a>
 8001400:	e6c4      	b.n	800118c <__aeabi_dsub+0xc4>
 8001402:	3808      	subs	r0, #8
 8001404:	4084      	lsls	r4, r0
 8001406:	4643      	mov	r3, r8
 8001408:	0020      	movs	r0, r4
 800140a:	2400      	movs	r4, #0
 800140c:	4588      	cmp	r8, r1
 800140e:	dc00      	bgt.n	8001412 <__aeabi_dsub+0x34a>
 8001410:	e6c8      	b.n	80011a4 <__aeabi_dsub+0xdc>
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__aeabi_dsub+0x35c>)
 8001414:	1a5b      	subs	r3, r3, r1
 8001416:	4010      	ands	r0, r2
 8001418:	4698      	mov	r8, r3
 800141a:	4681      	mov	r9, r0
 800141c:	e6d6      	b.n	80011cc <__aeabi_dsub+0x104>
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	000007ff 	.word	0x000007ff
 8001424:	ff7fffff 	.word	0xff7fffff
 8001428:	fffff801 	.word	0xfffff801
 800142c:	000007fe 	.word	0x000007fe
 8001430:	430f      	orrs	r7, r1
 8001432:	1e7a      	subs	r2, r7, #1
 8001434:	4197      	sbcs	r7, r2
 8001436:	e691      	b.n	800115c <__aeabi_dsub+0x94>
 8001438:	4661      	mov	r1, ip
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	0749      	lsls	r1, r1, #29
 800143e:	430b      	orrs	r3, r1
 8001440:	4661      	mov	r1, ip
 8001442:	08cc      	lsrs	r4, r1, #3
 8001444:	e7b8      	b.n	80013b8 <__aeabi_dsub+0x2f0>
 8001446:	4640      	mov	r0, r8
 8001448:	4cd3      	ldr	r4, [pc, #844]	; (8001798 <__aeabi_dsub+0x6d0>)
 800144a:	3001      	adds	r0, #1
 800144c:	4220      	tst	r0, r4
 800144e:	d000      	beq.n	8001452 <__aeabi_dsub+0x38a>
 8001450:	e0a2      	b.n	8001598 <__aeabi_dsub+0x4d0>
 8001452:	4640      	mov	r0, r8
 8001454:	2800      	cmp	r0, #0
 8001456:	d000      	beq.n	800145a <__aeabi_dsub+0x392>
 8001458:	e101      	b.n	800165e <__aeabi_dsub+0x596>
 800145a:	4660      	mov	r0, ip
 800145c:	4318      	orrs	r0, r3
 800145e:	d100      	bne.n	8001462 <__aeabi_dsub+0x39a>
 8001460:	e15e      	b.n	8001720 <__aeabi_dsub+0x658>
 8001462:	0008      	movs	r0, r1
 8001464:	4338      	orrs	r0, r7
 8001466:	d000      	beq.n	800146a <__aeabi_dsub+0x3a2>
 8001468:	e15f      	b.n	800172a <__aeabi_dsub+0x662>
 800146a:	4661      	mov	r1, ip
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	0749      	lsls	r1, r1, #29
 8001470:	430b      	orrs	r3, r1
 8001472:	4661      	mov	r1, ip
 8001474:	08cc      	lsrs	r4, r1, #3
 8001476:	e7a2      	b.n	80013be <__aeabi_dsub+0x2f6>
 8001478:	4dc8      	ldr	r5, [pc, #800]	; (800179c <__aeabi_dsub+0x6d4>)
 800147a:	42a8      	cmp	r0, r5
 800147c:	d100      	bne.n	8001480 <__aeabi_dsub+0x3b8>
 800147e:	e0cf      	b.n	8001620 <__aeabi_dsub+0x558>
 8001480:	2580      	movs	r5, #128	; 0x80
 8001482:	4664      	mov	r4, ip
 8001484:	042d      	lsls	r5, r5, #16
 8001486:	432c      	orrs	r4, r5
 8001488:	46a4      	mov	ip, r4
 800148a:	2a38      	cmp	r2, #56	; 0x38
 800148c:	dc56      	bgt.n	800153c <__aeabi_dsub+0x474>
 800148e:	2a1f      	cmp	r2, #31
 8001490:	dd00      	ble.n	8001494 <__aeabi_dsub+0x3cc>
 8001492:	e0d1      	b.n	8001638 <__aeabi_dsub+0x570>
 8001494:	2520      	movs	r5, #32
 8001496:	001e      	movs	r6, r3
 8001498:	1aad      	subs	r5, r5, r2
 800149a:	4664      	mov	r4, ip
 800149c:	40ab      	lsls	r3, r5
 800149e:	40ac      	lsls	r4, r5
 80014a0:	40d6      	lsrs	r6, r2
 80014a2:	1e5d      	subs	r5, r3, #1
 80014a4:	41ab      	sbcs	r3, r5
 80014a6:	4334      	orrs	r4, r6
 80014a8:	4323      	orrs	r3, r4
 80014aa:	4664      	mov	r4, ip
 80014ac:	40d4      	lsrs	r4, r2
 80014ae:	1b09      	subs	r1, r1, r4
 80014b0:	e049      	b.n	8001546 <__aeabi_dsub+0x47e>
 80014b2:	4660      	mov	r0, ip
 80014b4:	1bdc      	subs	r4, r3, r7
 80014b6:	1a46      	subs	r6, r0, r1
 80014b8:	42a3      	cmp	r3, r4
 80014ba:	4180      	sbcs	r0, r0
 80014bc:	4240      	negs	r0, r0
 80014be:	4681      	mov	r9, r0
 80014c0:	0030      	movs	r0, r6
 80014c2:	464e      	mov	r6, r9
 80014c4:	1b80      	subs	r0, r0, r6
 80014c6:	4681      	mov	r9, r0
 80014c8:	0200      	lsls	r0, r0, #8
 80014ca:	d476      	bmi.n	80015ba <__aeabi_dsub+0x4f2>
 80014cc:	464b      	mov	r3, r9
 80014ce:	4323      	orrs	r3, r4
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dsub+0x40c>
 80014d2:	e652      	b.n	800117a <__aeabi_dsub+0xb2>
 80014d4:	2400      	movs	r4, #0
 80014d6:	2500      	movs	r5, #0
 80014d8:	e771      	b.n	80013be <__aeabi_dsub+0x2f6>
 80014da:	4339      	orrs	r1, r7
 80014dc:	000c      	movs	r4, r1
 80014de:	1e62      	subs	r2, r4, #1
 80014e0:	4194      	sbcs	r4, r2
 80014e2:	18e4      	adds	r4, r4, r3
 80014e4:	429c      	cmp	r4, r3
 80014e6:	419b      	sbcs	r3, r3
 80014e8:	425b      	negs	r3, r3
 80014ea:	4463      	add	r3, ip
 80014ec:	4699      	mov	r9, r3
 80014ee:	464b      	mov	r3, r9
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	d400      	bmi.n	80014f6 <__aeabi_dsub+0x42e>
 80014f4:	e756      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 80014f6:	2301      	movs	r3, #1
 80014f8:	469c      	mov	ip, r3
 80014fa:	4ba8      	ldr	r3, [pc, #672]	; (800179c <__aeabi_dsub+0x6d4>)
 80014fc:	44e0      	add	r8, ip
 80014fe:	4598      	cmp	r8, r3
 8001500:	d038      	beq.n	8001574 <__aeabi_dsub+0x4ac>
 8001502:	464b      	mov	r3, r9
 8001504:	48a6      	ldr	r0, [pc, #664]	; (80017a0 <__aeabi_dsub+0x6d8>)
 8001506:	2201      	movs	r2, #1
 8001508:	4003      	ands	r3, r0
 800150a:	0018      	movs	r0, r3
 800150c:	0863      	lsrs	r3, r4, #1
 800150e:	4014      	ands	r4, r2
 8001510:	431c      	orrs	r4, r3
 8001512:	07c3      	lsls	r3, r0, #31
 8001514:	431c      	orrs	r4, r3
 8001516:	0843      	lsrs	r3, r0, #1
 8001518:	4699      	mov	r9, r3
 800151a:	e657      	b.n	80011cc <__aeabi_dsub+0x104>
 800151c:	0010      	movs	r0, r2
 800151e:	000e      	movs	r6, r1
 8001520:	3820      	subs	r0, #32
 8001522:	40c6      	lsrs	r6, r0
 8001524:	2a20      	cmp	r2, #32
 8001526:	d004      	beq.n	8001532 <__aeabi_dsub+0x46a>
 8001528:	2040      	movs	r0, #64	; 0x40
 800152a:	1a82      	subs	r2, r0, r2
 800152c:	4091      	lsls	r1, r2
 800152e:	430f      	orrs	r7, r1
 8001530:	46b9      	mov	r9, r7
 8001532:	464f      	mov	r7, r9
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	4337      	orrs	r7, r6
 800153a:	e60f      	b.n	800115c <__aeabi_dsub+0x94>
 800153c:	4662      	mov	r2, ip
 800153e:	431a      	orrs	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	4193      	sbcs	r3, r2
 8001546:	1afc      	subs	r4, r7, r3
 8001548:	42a7      	cmp	r7, r4
 800154a:	41bf      	sbcs	r7, r7
 800154c:	427f      	negs	r7, r7
 800154e:	1bcb      	subs	r3, r1, r7
 8001550:	4699      	mov	r9, r3
 8001552:	465d      	mov	r5, fp
 8001554:	4680      	mov	r8, r0
 8001556:	e608      	b.n	800116a <__aeabi_dsub+0xa2>
 8001558:	4666      	mov	r6, ip
 800155a:	431e      	orrs	r6, r3
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x498>
 800155e:	e0be      	b.n	80016de <__aeabi_dsub+0x616>
 8001560:	1e56      	subs	r6, r2, #1
 8001562:	2a01      	cmp	r2, #1
 8001564:	d100      	bne.n	8001568 <__aeabi_dsub+0x4a0>
 8001566:	e109      	b.n	800177c <__aeabi_dsub+0x6b4>
 8001568:	4c8c      	ldr	r4, [pc, #560]	; (800179c <__aeabi_dsub+0x6d4>)
 800156a:	42a2      	cmp	r2, r4
 800156c:	d100      	bne.n	8001570 <__aeabi_dsub+0x4a8>
 800156e:	e119      	b.n	80017a4 <__aeabi_dsub+0x6dc>
 8001570:	0032      	movs	r2, r6
 8001572:	e6c1      	b.n	80012f8 <__aeabi_dsub+0x230>
 8001574:	4642      	mov	r2, r8
 8001576:	2400      	movs	r4, #0
 8001578:	2300      	movs	r3, #0
 800157a:	e648      	b.n	800120e <__aeabi_dsub+0x146>
 800157c:	2020      	movs	r0, #32
 800157e:	000c      	movs	r4, r1
 8001580:	1a80      	subs	r0, r0, r2
 8001582:	003e      	movs	r6, r7
 8001584:	4087      	lsls	r7, r0
 8001586:	4084      	lsls	r4, r0
 8001588:	40d6      	lsrs	r6, r2
 800158a:	1e78      	subs	r0, r7, #1
 800158c:	4187      	sbcs	r7, r0
 800158e:	40d1      	lsrs	r1, r2
 8001590:	4334      	orrs	r4, r6
 8001592:	433c      	orrs	r4, r7
 8001594:	448c      	add	ip, r1
 8001596:	e7a4      	b.n	80014e2 <__aeabi_dsub+0x41a>
 8001598:	4a80      	ldr	r2, [pc, #512]	; (800179c <__aeabi_dsub+0x6d4>)
 800159a:	4290      	cmp	r0, r2
 800159c:	d100      	bne.n	80015a0 <__aeabi_dsub+0x4d8>
 800159e:	e0e9      	b.n	8001774 <__aeabi_dsub+0x6ac>
 80015a0:	19df      	adds	r7, r3, r7
 80015a2:	429f      	cmp	r7, r3
 80015a4:	419b      	sbcs	r3, r3
 80015a6:	4461      	add	r1, ip
 80015a8:	425b      	negs	r3, r3
 80015aa:	18c9      	adds	r1, r1, r3
 80015ac:	07cc      	lsls	r4, r1, #31
 80015ae:	087f      	lsrs	r7, r7, #1
 80015b0:	084b      	lsrs	r3, r1, #1
 80015b2:	4699      	mov	r9, r3
 80015b4:	4680      	mov	r8, r0
 80015b6:	433c      	orrs	r4, r7
 80015b8:	e6f4      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 80015ba:	1afc      	subs	r4, r7, r3
 80015bc:	42a7      	cmp	r7, r4
 80015be:	41bf      	sbcs	r7, r7
 80015c0:	4663      	mov	r3, ip
 80015c2:	427f      	negs	r7, r7
 80015c4:	1ac9      	subs	r1, r1, r3
 80015c6:	1bcb      	subs	r3, r1, r7
 80015c8:	4699      	mov	r9, r3
 80015ca:	465d      	mov	r5, fp
 80015cc:	e5d5      	b.n	800117a <__aeabi_dsub+0xb2>
 80015ce:	08ff      	lsrs	r7, r7, #3
 80015d0:	074b      	lsls	r3, r1, #29
 80015d2:	465d      	mov	r5, fp
 80015d4:	433b      	orrs	r3, r7
 80015d6:	08cc      	lsrs	r4, r1, #3
 80015d8:	e6ee      	b.n	80013b8 <__aeabi_dsub+0x2f0>
 80015da:	4662      	mov	r2, ip
 80015dc:	431a      	orrs	r2, r3
 80015de:	d000      	beq.n	80015e2 <__aeabi_dsub+0x51a>
 80015e0:	e082      	b.n	80016e8 <__aeabi_dsub+0x620>
 80015e2:	000b      	movs	r3, r1
 80015e4:	433b      	orrs	r3, r7
 80015e6:	d11b      	bne.n	8001620 <__aeabi_dsub+0x558>
 80015e8:	2480      	movs	r4, #128	; 0x80
 80015ea:	2500      	movs	r5, #0
 80015ec:	0324      	lsls	r4, r4, #12
 80015ee:	e6f9      	b.n	80013e4 <__aeabi_dsub+0x31c>
 80015f0:	19dc      	adds	r4, r3, r7
 80015f2:	429c      	cmp	r4, r3
 80015f4:	419b      	sbcs	r3, r3
 80015f6:	4461      	add	r1, ip
 80015f8:	4689      	mov	r9, r1
 80015fa:	425b      	negs	r3, r3
 80015fc:	4499      	add	r9, r3
 80015fe:	464b      	mov	r3, r9
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	d444      	bmi.n	800168e <__aeabi_dsub+0x5c6>
 8001604:	2301      	movs	r3, #1
 8001606:	4698      	mov	r8, r3
 8001608:	e6cc      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 800160a:	1bdc      	subs	r4, r3, r7
 800160c:	4662      	mov	r2, ip
 800160e:	42a3      	cmp	r3, r4
 8001610:	419b      	sbcs	r3, r3
 8001612:	1a51      	subs	r1, r2, r1
 8001614:	425b      	negs	r3, r3
 8001616:	1acb      	subs	r3, r1, r3
 8001618:	4699      	mov	r9, r3
 800161a:	2301      	movs	r3, #1
 800161c:	4698      	mov	r8, r3
 800161e:	e5a4      	b.n	800116a <__aeabi_dsub+0xa2>
 8001620:	08ff      	lsrs	r7, r7, #3
 8001622:	074b      	lsls	r3, r1, #29
 8001624:	465d      	mov	r5, fp
 8001626:	433b      	orrs	r3, r7
 8001628:	08cc      	lsrs	r4, r1, #3
 800162a:	e6d7      	b.n	80013dc <__aeabi_dsub+0x314>
 800162c:	4662      	mov	r2, ip
 800162e:	431a      	orrs	r2, r3
 8001630:	0014      	movs	r4, r2
 8001632:	1e63      	subs	r3, r4, #1
 8001634:	419c      	sbcs	r4, r3
 8001636:	e679      	b.n	800132c <__aeabi_dsub+0x264>
 8001638:	0015      	movs	r5, r2
 800163a:	4664      	mov	r4, ip
 800163c:	3d20      	subs	r5, #32
 800163e:	40ec      	lsrs	r4, r5
 8001640:	46a0      	mov	r8, r4
 8001642:	2a20      	cmp	r2, #32
 8001644:	d005      	beq.n	8001652 <__aeabi_dsub+0x58a>
 8001646:	2540      	movs	r5, #64	; 0x40
 8001648:	4664      	mov	r4, ip
 800164a:	1aaa      	subs	r2, r5, r2
 800164c:	4094      	lsls	r4, r2
 800164e:	4323      	orrs	r3, r4
 8001650:	469a      	mov	sl, r3
 8001652:	4654      	mov	r4, sl
 8001654:	1e63      	subs	r3, r4, #1
 8001656:	419c      	sbcs	r4, r3
 8001658:	4643      	mov	r3, r8
 800165a:	4323      	orrs	r3, r4
 800165c:	e773      	b.n	8001546 <__aeabi_dsub+0x47e>
 800165e:	4662      	mov	r2, ip
 8001660:	431a      	orrs	r2, r3
 8001662:	d023      	beq.n	80016ac <__aeabi_dsub+0x5e4>
 8001664:	000a      	movs	r2, r1
 8001666:	433a      	orrs	r2, r7
 8001668:	d000      	beq.n	800166c <__aeabi_dsub+0x5a4>
 800166a:	e0a0      	b.n	80017ae <__aeabi_dsub+0x6e6>
 800166c:	4662      	mov	r2, ip
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	0752      	lsls	r2, r2, #29
 8001672:	4313      	orrs	r3, r2
 8001674:	4662      	mov	r2, ip
 8001676:	08d4      	lsrs	r4, r2, #3
 8001678:	e6b0      	b.n	80013dc <__aeabi_dsub+0x314>
 800167a:	000b      	movs	r3, r1
 800167c:	433b      	orrs	r3, r7
 800167e:	d100      	bne.n	8001682 <__aeabi_dsub+0x5ba>
 8001680:	e728      	b.n	80014d4 <__aeabi_dsub+0x40c>
 8001682:	08ff      	lsrs	r7, r7, #3
 8001684:	074b      	lsls	r3, r1, #29
 8001686:	465d      	mov	r5, fp
 8001688:	433b      	orrs	r3, r7
 800168a:	08cc      	lsrs	r4, r1, #3
 800168c:	e697      	b.n	80013be <__aeabi_dsub+0x2f6>
 800168e:	2302      	movs	r3, #2
 8001690:	4698      	mov	r8, r3
 8001692:	e736      	b.n	8001502 <__aeabi_dsub+0x43a>
 8001694:	1afc      	subs	r4, r7, r3
 8001696:	42a7      	cmp	r7, r4
 8001698:	41bf      	sbcs	r7, r7
 800169a:	4663      	mov	r3, ip
 800169c:	427f      	negs	r7, r7
 800169e:	1ac9      	subs	r1, r1, r3
 80016a0:	1bcb      	subs	r3, r1, r7
 80016a2:	4699      	mov	r9, r3
 80016a4:	2301      	movs	r3, #1
 80016a6:	465d      	mov	r5, fp
 80016a8:	4698      	mov	r8, r3
 80016aa:	e55e      	b.n	800116a <__aeabi_dsub+0xa2>
 80016ac:	074b      	lsls	r3, r1, #29
 80016ae:	08ff      	lsrs	r7, r7, #3
 80016b0:	433b      	orrs	r3, r7
 80016b2:	08cc      	lsrs	r4, r1, #3
 80016b4:	e692      	b.n	80013dc <__aeabi_dsub+0x314>
 80016b6:	1bdc      	subs	r4, r3, r7
 80016b8:	4660      	mov	r0, ip
 80016ba:	42a3      	cmp	r3, r4
 80016bc:	41b6      	sbcs	r6, r6
 80016be:	1a40      	subs	r0, r0, r1
 80016c0:	4276      	negs	r6, r6
 80016c2:	1b80      	subs	r0, r0, r6
 80016c4:	4681      	mov	r9, r0
 80016c6:	0200      	lsls	r0, r0, #8
 80016c8:	d560      	bpl.n	800178c <__aeabi_dsub+0x6c4>
 80016ca:	1afc      	subs	r4, r7, r3
 80016cc:	42a7      	cmp	r7, r4
 80016ce:	41bf      	sbcs	r7, r7
 80016d0:	4663      	mov	r3, ip
 80016d2:	427f      	negs	r7, r7
 80016d4:	1ac9      	subs	r1, r1, r3
 80016d6:	1bcb      	subs	r3, r1, r7
 80016d8:	4699      	mov	r9, r3
 80016da:	465d      	mov	r5, fp
 80016dc:	e576      	b.n	80011cc <__aeabi_dsub+0x104>
 80016de:	08ff      	lsrs	r7, r7, #3
 80016e0:	074b      	lsls	r3, r1, #29
 80016e2:	433b      	orrs	r3, r7
 80016e4:	08cc      	lsrs	r4, r1, #3
 80016e6:	e667      	b.n	80013b8 <__aeabi_dsub+0x2f0>
 80016e8:	000a      	movs	r2, r1
 80016ea:	08db      	lsrs	r3, r3, #3
 80016ec:	433a      	orrs	r2, r7
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dsub+0x62a>
 80016f0:	e66f      	b.n	80013d2 <__aeabi_dsub+0x30a>
 80016f2:	4662      	mov	r2, ip
 80016f4:	0752      	lsls	r2, r2, #29
 80016f6:	4313      	orrs	r3, r2
 80016f8:	4662      	mov	r2, ip
 80016fa:	08d4      	lsrs	r4, r2, #3
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	0312      	lsls	r2, r2, #12
 8001700:	4214      	tst	r4, r2
 8001702:	d007      	beq.n	8001714 <__aeabi_dsub+0x64c>
 8001704:	08c8      	lsrs	r0, r1, #3
 8001706:	4210      	tst	r0, r2
 8001708:	d104      	bne.n	8001714 <__aeabi_dsub+0x64c>
 800170a:	465d      	mov	r5, fp
 800170c:	0004      	movs	r4, r0
 800170e:	08fb      	lsrs	r3, r7, #3
 8001710:	0749      	lsls	r1, r1, #29
 8001712:	430b      	orrs	r3, r1
 8001714:	0f5a      	lsrs	r2, r3, #29
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	08db      	lsrs	r3, r3, #3
 800171a:	0752      	lsls	r2, r2, #29
 800171c:	4313      	orrs	r3, r2
 800171e:	e65d      	b.n	80013dc <__aeabi_dsub+0x314>
 8001720:	074b      	lsls	r3, r1, #29
 8001722:	08ff      	lsrs	r7, r7, #3
 8001724:	433b      	orrs	r3, r7
 8001726:	08cc      	lsrs	r4, r1, #3
 8001728:	e649      	b.n	80013be <__aeabi_dsub+0x2f6>
 800172a:	19dc      	adds	r4, r3, r7
 800172c:	429c      	cmp	r4, r3
 800172e:	419b      	sbcs	r3, r3
 8001730:	4461      	add	r1, ip
 8001732:	4689      	mov	r9, r1
 8001734:	425b      	negs	r3, r3
 8001736:	4499      	add	r9, r3
 8001738:	464b      	mov	r3, r9
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	d400      	bmi.n	8001740 <__aeabi_dsub+0x678>
 800173e:	e631      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 8001740:	464a      	mov	r2, r9
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <__aeabi_dsub+0x6d8>)
 8001744:	401a      	ands	r2, r3
 8001746:	2301      	movs	r3, #1
 8001748:	4691      	mov	r9, r2
 800174a:	4698      	mov	r8, r3
 800174c:	e62a      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 800174e:	0016      	movs	r6, r2
 8001750:	4664      	mov	r4, ip
 8001752:	3e20      	subs	r6, #32
 8001754:	40f4      	lsrs	r4, r6
 8001756:	46a0      	mov	r8, r4
 8001758:	2a20      	cmp	r2, #32
 800175a:	d005      	beq.n	8001768 <__aeabi_dsub+0x6a0>
 800175c:	2640      	movs	r6, #64	; 0x40
 800175e:	4664      	mov	r4, ip
 8001760:	1ab2      	subs	r2, r6, r2
 8001762:	4094      	lsls	r4, r2
 8001764:	4323      	orrs	r3, r4
 8001766:	469a      	mov	sl, r3
 8001768:	4654      	mov	r4, sl
 800176a:	1e63      	subs	r3, r4, #1
 800176c:	419c      	sbcs	r4, r3
 800176e:	4643      	mov	r3, r8
 8001770:	431c      	orrs	r4, r3
 8001772:	e5db      	b.n	800132c <__aeabi_dsub+0x264>
 8001774:	0002      	movs	r2, r0
 8001776:	2400      	movs	r4, #0
 8001778:	2300      	movs	r3, #0
 800177a:	e548      	b.n	800120e <__aeabi_dsub+0x146>
 800177c:	19dc      	adds	r4, r3, r7
 800177e:	42bc      	cmp	r4, r7
 8001780:	41bf      	sbcs	r7, r7
 8001782:	4461      	add	r1, ip
 8001784:	4689      	mov	r9, r1
 8001786:	427f      	negs	r7, r7
 8001788:	44b9      	add	r9, r7
 800178a:	e738      	b.n	80015fe <__aeabi_dsub+0x536>
 800178c:	464b      	mov	r3, r9
 800178e:	4323      	orrs	r3, r4
 8001790:	d100      	bne.n	8001794 <__aeabi_dsub+0x6cc>
 8001792:	e69f      	b.n	80014d4 <__aeabi_dsub+0x40c>
 8001794:	e606      	b.n	80013a4 <__aeabi_dsub+0x2dc>
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	000007fe 	.word	0x000007fe
 800179c:	000007ff 	.word	0x000007ff
 80017a0:	ff7fffff 	.word	0xff7fffff
 80017a4:	08ff      	lsrs	r7, r7, #3
 80017a6:	074b      	lsls	r3, r1, #29
 80017a8:	433b      	orrs	r3, r7
 80017aa:	08cc      	lsrs	r4, r1, #3
 80017ac:	e616      	b.n	80013dc <__aeabi_dsub+0x314>
 80017ae:	4662      	mov	r2, ip
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	0752      	lsls	r2, r2, #29
 80017b4:	4313      	orrs	r3, r2
 80017b6:	4662      	mov	r2, ip
 80017b8:	08d4      	lsrs	r4, r2, #3
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	0312      	lsls	r2, r2, #12
 80017be:	4214      	tst	r4, r2
 80017c0:	d007      	beq.n	80017d2 <__aeabi_dsub+0x70a>
 80017c2:	08c8      	lsrs	r0, r1, #3
 80017c4:	4210      	tst	r0, r2
 80017c6:	d104      	bne.n	80017d2 <__aeabi_dsub+0x70a>
 80017c8:	465d      	mov	r5, fp
 80017ca:	0004      	movs	r4, r0
 80017cc:	08fb      	lsrs	r3, r7, #3
 80017ce:	0749      	lsls	r1, r1, #29
 80017d0:	430b      	orrs	r3, r1
 80017d2:	0f5a      	lsrs	r2, r3, #29
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	0752      	lsls	r2, r2, #29
 80017d8:	08db      	lsrs	r3, r3, #3
 80017da:	4313      	orrs	r3, r2
 80017dc:	e5fe      	b.n	80013dc <__aeabi_dsub+0x314>
 80017de:	2300      	movs	r3, #0
 80017e0:	4a01      	ldr	r2, [pc, #4]	; (80017e8 <__aeabi_dsub+0x720>)
 80017e2:	001c      	movs	r4, r3
 80017e4:	e513      	b.n	800120e <__aeabi_dsub+0x146>
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	000007ff 	.word	0x000007ff

080017ec <__aeabi_d2iz>:
 80017ec:	000a      	movs	r2, r1
 80017ee:	b530      	push	{r4, r5, lr}
 80017f0:	4c13      	ldr	r4, [pc, #76]	; (8001840 <__aeabi_d2iz+0x54>)
 80017f2:	0053      	lsls	r3, r2, #1
 80017f4:	0309      	lsls	r1, r1, #12
 80017f6:	0005      	movs	r5, r0
 80017f8:	0b09      	lsrs	r1, r1, #12
 80017fa:	2000      	movs	r0, #0
 80017fc:	0d5b      	lsrs	r3, r3, #21
 80017fe:	0fd2      	lsrs	r2, r2, #31
 8001800:	42a3      	cmp	r3, r4
 8001802:	dd04      	ble.n	800180e <__aeabi_d2iz+0x22>
 8001804:	480f      	ldr	r0, [pc, #60]	; (8001844 <__aeabi_d2iz+0x58>)
 8001806:	4283      	cmp	r3, r0
 8001808:	dd02      	ble.n	8001810 <__aeabi_d2iz+0x24>
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <__aeabi_d2iz+0x5c>)
 800180c:	18d0      	adds	r0, r2, r3
 800180e:	bd30      	pop	{r4, r5, pc}
 8001810:	2080      	movs	r0, #128	; 0x80
 8001812:	0340      	lsls	r0, r0, #13
 8001814:	4301      	orrs	r1, r0
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <__aeabi_d2iz+0x60>)
 8001818:	1ac0      	subs	r0, r0, r3
 800181a:	281f      	cmp	r0, #31
 800181c:	dd08      	ble.n	8001830 <__aeabi_d2iz+0x44>
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <__aeabi_d2iz+0x64>)
 8001820:	1ac3      	subs	r3, r0, r3
 8001822:	40d9      	lsrs	r1, r3
 8001824:	000b      	movs	r3, r1
 8001826:	4258      	negs	r0, r3
 8001828:	2a00      	cmp	r2, #0
 800182a:	d1f0      	bne.n	800180e <__aeabi_d2iz+0x22>
 800182c:	0018      	movs	r0, r3
 800182e:	e7ee      	b.n	800180e <__aeabi_d2iz+0x22>
 8001830:	4c08      	ldr	r4, [pc, #32]	; (8001854 <__aeabi_d2iz+0x68>)
 8001832:	40c5      	lsrs	r5, r0
 8001834:	46a4      	mov	ip, r4
 8001836:	4463      	add	r3, ip
 8001838:	4099      	lsls	r1, r3
 800183a:	000b      	movs	r3, r1
 800183c:	432b      	orrs	r3, r5
 800183e:	e7f2      	b.n	8001826 <__aeabi_d2iz+0x3a>
 8001840:	000003fe 	.word	0x000003fe
 8001844:	0000041d 	.word	0x0000041d
 8001848:	7fffffff 	.word	0x7fffffff
 800184c:	00000433 	.word	0x00000433
 8001850:	00000413 	.word	0x00000413
 8001854:	fffffbed 	.word	0xfffffbed

08001858 <__aeabi_ui2d>:
 8001858:	b510      	push	{r4, lr}
 800185a:	1e04      	subs	r4, r0, #0
 800185c:	d010      	beq.n	8001880 <__aeabi_ui2d+0x28>
 800185e:	f000 f85f 	bl	8001920 <__clzsi2>
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <__aeabi_ui2d+0x48>)
 8001864:	1a1b      	subs	r3, r3, r0
 8001866:	280a      	cmp	r0, #10
 8001868:	dc11      	bgt.n	800188e <__aeabi_ui2d+0x36>
 800186a:	220b      	movs	r2, #11
 800186c:	0021      	movs	r1, r4
 800186e:	1a12      	subs	r2, r2, r0
 8001870:	40d1      	lsrs	r1, r2
 8001872:	3015      	adds	r0, #21
 8001874:	030a      	lsls	r2, r1, #12
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4084      	lsls	r4, r0
 800187a:	0b12      	lsrs	r2, r2, #12
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	e001      	b.n	8001884 <__aeabi_ui2d+0x2c>
 8001880:	2300      	movs	r3, #0
 8001882:	2200      	movs	r2, #0
 8001884:	051b      	lsls	r3, r3, #20
 8001886:	4313      	orrs	r3, r2
 8001888:	0020      	movs	r0, r4
 800188a:	0019      	movs	r1, r3
 800188c:	bd10      	pop	{r4, pc}
 800188e:	0022      	movs	r2, r4
 8001890:	380b      	subs	r0, #11
 8001892:	4082      	lsls	r2, r0
 8001894:	055b      	lsls	r3, r3, #21
 8001896:	0312      	lsls	r2, r2, #12
 8001898:	2400      	movs	r4, #0
 800189a:	0b12      	lsrs	r2, r2, #12
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	e7f1      	b.n	8001884 <__aeabi_ui2d+0x2c>
 80018a0:	0000041e 	.word	0x0000041e

080018a4 <__aeabi_cdrcmple>:
 80018a4:	4684      	mov	ip, r0
 80018a6:	0010      	movs	r0, r2
 80018a8:	4662      	mov	r2, ip
 80018aa:	468c      	mov	ip, r1
 80018ac:	0019      	movs	r1, r3
 80018ae:	4663      	mov	r3, ip
 80018b0:	e000      	b.n	80018b4 <__aeabi_cdcmpeq>
 80018b2:	46c0      	nop			; (mov r8, r8)

080018b4 <__aeabi_cdcmpeq>:
 80018b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80018b6:	f000 f905 	bl	8001ac4 <__ledf2>
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d401      	bmi.n	80018c2 <__aeabi_cdcmpeq+0xe>
 80018be:	2100      	movs	r1, #0
 80018c0:	42c8      	cmn	r0, r1
 80018c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080018c4 <__aeabi_dcmpeq>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	f000 f855 	bl	8001974 <__eqdf2>
 80018ca:	4240      	negs	r0, r0
 80018cc:	3001      	adds	r0, #1
 80018ce:	bd10      	pop	{r4, pc}

080018d0 <__aeabi_dcmplt>:
 80018d0:	b510      	push	{r4, lr}
 80018d2:	f000 f8f7 	bl	8001ac4 <__ledf2>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	db01      	blt.n	80018de <__aeabi_dcmplt+0xe>
 80018da:	2000      	movs	r0, #0
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	2001      	movs	r0, #1
 80018e0:	bd10      	pop	{r4, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)

080018e4 <__aeabi_dcmple>:
 80018e4:	b510      	push	{r4, lr}
 80018e6:	f000 f8ed 	bl	8001ac4 <__ledf2>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	dd01      	ble.n	80018f2 <__aeabi_dcmple+0xe>
 80018ee:	2000      	movs	r0, #0
 80018f0:	bd10      	pop	{r4, pc}
 80018f2:	2001      	movs	r0, #1
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)

080018f8 <__aeabi_dcmpgt>:
 80018f8:	b510      	push	{r4, lr}
 80018fa:	f000 f87d 	bl	80019f8 <__gedf2>
 80018fe:	2800      	cmp	r0, #0
 8001900:	dc01      	bgt.n	8001906 <__aeabi_dcmpgt+0xe>
 8001902:	2000      	movs	r0, #0
 8001904:	bd10      	pop	{r4, pc}
 8001906:	2001      	movs	r0, #1
 8001908:	bd10      	pop	{r4, pc}
 800190a:	46c0      	nop			; (mov r8, r8)

0800190c <__aeabi_dcmpge>:
 800190c:	b510      	push	{r4, lr}
 800190e:	f000 f873 	bl	80019f8 <__gedf2>
 8001912:	2800      	cmp	r0, #0
 8001914:	da01      	bge.n	800191a <__aeabi_dcmpge+0xe>
 8001916:	2000      	movs	r0, #0
 8001918:	bd10      	pop	{r4, pc}
 800191a:	2001      	movs	r0, #1
 800191c:	bd10      	pop	{r4, pc}
 800191e:	46c0      	nop			; (mov r8, r8)

08001920 <__clzsi2>:
 8001920:	211c      	movs	r1, #28
 8001922:	2301      	movs	r3, #1
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	4298      	cmp	r0, r3
 8001928:	d301      	bcc.n	800192e <__clzsi2+0xe>
 800192a:	0c00      	lsrs	r0, r0, #16
 800192c:	3910      	subs	r1, #16
 800192e:	0a1b      	lsrs	r3, r3, #8
 8001930:	4298      	cmp	r0, r3
 8001932:	d301      	bcc.n	8001938 <__clzsi2+0x18>
 8001934:	0a00      	lsrs	r0, r0, #8
 8001936:	3908      	subs	r1, #8
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	4298      	cmp	r0, r3
 800193c:	d301      	bcc.n	8001942 <__clzsi2+0x22>
 800193e:	0900      	lsrs	r0, r0, #4
 8001940:	3904      	subs	r1, #4
 8001942:	a202      	add	r2, pc, #8	; (adr r2, 800194c <__clzsi2+0x2c>)
 8001944:	5c10      	ldrb	r0, [r2, r0]
 8001946:	1840      	adds	r0, r0, r1
 8001948:	4770      	bx	lr
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	02020304 	.word	0x02020304
 8001950:	01010101 	.word	0x01010101
	...

0800195c <__clzdi2>:
 800195c:	b510      	push	{r4, lr}
 800195e:	2900      	cmp	r1, #0
 8001960:	d103      	bne.n	800196a <__clzdi2+0xe>
 8001962:	f7ff ffdd 	bl	8001920 <__clzsi2>
 8001966:	3020      	adds	r0, #32
 8001968:	e002      	b.n	8001970 <__clzdi2+0x14>
 800196a:	0008      	movs	r0, r1
 800196c:	f7ff ffd8 	bl	8001920 <__clzsi2>
 8001970:	bd10      	pop	{r4, pc}
 8001972:	46c0      	nop			; (mov r8, r8)

08001974 <__eqdf2>:
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	464e      	mov	r6, r9
 8001978:	4645      	mov	r5, r8
 800197a:	46de      	mov	lr, fp
 800197c:	4657      	mov	r7, sl
 800197e:	4690      	mov	r8, r2
 8001980:	b5e0      	push	{r5, r6, r7, lr}
 8001982:	0017      	movs	r7, r2
 8001984:	031a      	lsls	r2, r3, #12
 8001986:	0b12      	lsrs	r2, r2, #12
 8001988:	0005      	movs	r5, r0
 800198a:	4684      	mov	ip, r0
 800198c:	4819      	ldr	r0, [pc, #100]	; (80019f4 <__eqdf2+0x80>)
 800198e:	030e      	lsls	r6, r1, #12
 8001990:	004c      	lsls	r4, r1, #1
 8001992:	4691      	mov	r9, r2
 8001994:	005a      	lsls	r2, r3, #1
 8001996:	0fdb      	lsrs	r3, r3, #31
 8001998:	469b      	mov	fp, r3
 800199a:	0b36      	lsrs	r6, r6, #12
 800199c:	0d64      	lsrs	r4, r4, #21
 800199e:	0fc9      	lsrs	r1, r1, #31
 80019a0:	0d52      	lsrs	r2, r2, #21
 80019a2:	4284      	cmp	r4, r0
 80019a4:	d019      	beq.n	80019da <__eqdf2+0x66>
 80019a6:	4282      	cmp	r2, r0
 80019a8:	d010      	beq.n	80019cc <__eqdf2+0x58>
 80019aa:	2001      	movs	r0, #1
 80019ac:	4294      	cmp	r4, r2
 80019ae:	d10e      	bne.n	80019ce <__eqdf2+0x5a>
 80019b0:	454e      	cmp	r6, r9
 80019b2:	d10c      	bne.n	80019ce <__eqdf2+0x5a>
 80019b4:	2001      	movs	r0, #1
 80019b6:	45c4      	cmp	ip, r8
 80019b8:	d109      	bne.n	80019ce <__eqdf2+0x5a>
 80019ba:	4559      	cmp	r1, fp
 80019bc:	d017      	beq.n	80019ee <__eqdf2+0x7a>
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d105      	bne.n	80019ce <__eqdf2+0x5a>
 80019c2:	0030      	movs	r0, r6
 80019c4:	4328      	orrs	r0, r5
 80019c6:	1e43      	subs	r3, r0, #1
 80019c8:	4198      	sbcs	r0, r3
 80019ca:	e000      	b.n	80019ce <__eqdf2+0x5a>
 80019cc:	2001      	movs	r0, #1
 80019ce:	bcf0      	pop	{r4, r5, r6, r7}
 80019d0:	46bb      	mov	fp, r7
 80019d2:	46b2      	mov	sl, r6
 80019d4:	46a9      	mov	r9, r5
 80019d6:	46a0      	mov	r8, r4
 80019d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019da:	0033      	movs	r3, r6
 80019dc:	2001      	movs	r0, #1
 80019de:	432b      	orrs	r3, r5
 80019e0:	d1f5      	bne.n	80019ce <__eqdf2+0x5a>
 80019e2:	42a2      	cmp	r2, r4
 80019e4:	d1f3      	bne.n	80019ce <__eqdf2+0x5a>
 80019e6:	464b      	mov	r3, r9
 80019e8:	433b      	orrs	r3, r7
 80019ea:	d1f0      	bne.n	80019ce <__eqdf2+0x5a>
 80019ec:	e7e2      	b.n	80019b4 <__eqdf2+0x40>
 80019ee:	2000      	movs	r0, #0
 80019f0:	e7ed      	b.n	80019ce <__eqdf2+0x5a>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	000007ff 	.word	0x000007ff

080019f8 <__gedf2>:
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	4647      	mov	r7, r8
 80019fc:	46ce      	mov	lr, r9
 80019fe:	0004      	movs	r4, r0
 8001a00:	0018      	movs	r0, r3
 8001a02:	0016      	movs	r6, r2
 8001a04:	031b      	lsls	r3, r3, #12
 8001a06:	0b1b      	lsrs	r3, r3, #12
 8001a08:	4d2d      	ldr	r5, [pc, #180]	; (8001ac0 <__gedf2+0xc8>)
 8001a0a:	004a      	lsls	r2, r1, #1
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	0043      	lsls	r3, r0, #1
 8001a12:	030f      	lsls	r7, r1, #12
 8001a14:	46a4      	mov	ip, r4
 8001a16:	46b0      	mov	r8, r6
 8001a18:	0b3f      	lsrs	r7, r7, #12
 8001a1a:	0d52      	lsrs	r2, r2, #21
 8001a1c:	0fc9      	lsrs	r1, r1, #31
 8001a1e:	0d5b      	lsrs	r3, r3, #21
 8001a20:	0fc0      	lsrs	r0, r0, #31
 8001a22:	42aa      	cmp	r2, r5
 8001a24:	d021      	beq.n	8001a6a <__gedf2+0x72>
 8001a26:	42ab      	cmp	r3, r5
 8001a28:	d013      	beq.n	8001a52 <__gedf2+0x5a>
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d122      	bne.n	8001a74 <__gedf2+0x7c>
 8001a2e:	433c      	orrs	r4, r7
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <__gedf2+0x42>
 8001a34:	464d      	mov	r5, r9
 8001a36:	432e      	orrs	r6, r5
 8001a38:	d022      	beq.n	8001a80 <__gedf2+0x88>
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d010      	beq.n	8001a60 <__gedf2+0x68>
 8001a3e:	4281      	cmp	r1, r0
 8001a40:	d022      	beq.n	8001a88 <__gedf2+0x90>
 8001a42:	2002      	movs	r0, #2
 8001a44:	3901      	subs	r1, #1
 8001a46:	4008      	ands	r0, r1
 8001a48:	3801      	subs	r0, #1
 8001a4a:	bcc0      	pop	{r6, r7}
 8001a4c:	46b9      	mov	r9, r7
 8001a4e:	46b0      	mov	r8, r6
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a52:	464d      	mov	r5, r9
 8001a54:	432e      	orrs	r6, r5
 8001a56:	d129      	bne.n	8001aac <__gedf2+0xb4>
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d1f0      	bne.n	8001a3e <__gedf2+0x46>
 8001a5c:	433c      	orrs	r4, r7
 8001a5e:	d1ee      	bne.n	8001a3e <__gedf2+0x46>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d1f2      	bne.n	8001a4a <__gedf2+0x52>
 8001a64:	2001      	movs	r0, #1
 8001a66:	4240      	negs	r0, r0
 8001a68:	e7ef      	b.n	8001a4a <__gedf2+0x52>
 8001a6a:	003d      	movs	r5, r7
 8001a6c:	4325      	orrs	r5, r4
 8001a6e:	d11d      	bne.n	8001aac <__gedf2+0xb4>
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d0ee      	beq.n	8001a52 <__gedf2+0x5a>
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e2      	bne.n	8001a3e <__gedf2+0x46>
 8001a78:	464c      	mov	r4, r9
 8001a7a:	4326      	orrs	r6, r4
 8001a7c:	d1df      	bne.n	8001a3e <__gedf2+0x46>
 8001a7e:	e7e0      	b.n	8001a42 <__gedf2+0x4a>
 8001a80:	2000      	movs	r0, #0
 8001a82:	2c00      	cmp	r4, #0
 8001a84:	d0e1      	beq.n	8001a4a <__gedf2+0x52>
 8001a86:	e7dc      	b.n	8001a42 <__gedf2+0x4a>
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dc0a      	bgt.n	8001aa2 <__gedf2+0xaa>
 8001a8c:	dbe8      	blt.n	8001a60 <__gedf2+0x68>
 8001a8e:	454f      	cmp	r7, r9
 8001a90:	d8d7      	bhi.n	8001a42 <__gedf2+0x4a>
 8001a92:	d00e      	beq.n	8001ab2 <__gedf2+0xba>
 8001a94:	2000      	movs	r0, #0
 8001a96:	454f      	cmp	r7, r9
 8001a98:	d2d7      	bcs.n	8001a4a <__gedf2+0x52>
 8001a9a:	2900      	cmp	r1, #0
 8001a9c:	d0e2      	beq.n	8001a64 <__gedf2+0x6c>
 8001a9e:	0008      	movs	r0, r1
 8001aa0:	e7d3      	b.n	8001a4a <__gedf2+0x52>
 8001aa2:	4243      	negs	r3, r0
 8001aa4:	4158      	adcs	r0, r3
 8001aa6:	0040      	lsls	r0, r0, #1
 8001aa8:	3801      	subs	r0, #1
 8001aaa:	e7ce      	b.n	8001a4a <__gedf2+0x52>
 8001aac:	2002      	movs	r0, #2
 8001aae:	4240      	negs	r0, r0
 8001ab0:	e7cb      	b.n	8001a4a <__gedf2+0x52>
 8001ab2:	45c4      	cmp	ip, r8
 8001ab4:	d8c5      	bhi.n	8001a42 <__gedf2+0x4a>
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	45c4      	cmp	ip, r8
 8001aba:	d2c6      	bcs.n	8001a4a <__gedf2+0x52>
 8001abc:	e7ed      	b.n	8001a9a <__gedf2+0xa2>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	000007ff 	.word	0x000007ff

08001ac4 <__ledf2>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	4647      	mov	r7, r8
 8001ac8:	46ce      	mov	lr, r9
 8001aca:	0004      	movs	r4, r0
 8001acc:	0018      	movs	r0, r3
 8001ace:	0016      	movs	r6, r2
 8001ad0:	031b      	lsls	r3, r3, #12
 8001ad2:	0b1b      	lsrs	r3, r3, #12
 8001ad4:	4d2c      	ldr	r5, [pc, #176]	; (8001b88 <__ledf2+0xc4>)
 8001ad6:	004a      	lsls	r2, r1, #1
 8001ad8:	4699      	mov	r9, r3
 8001ada:	b580      	push	{r7, lr}
 8001adc:	0043      	lsls	r3, r0, #1
 8001ade:	030f      	lsls	r7, r1, #12
 8001ae0:	46a4      	mov	ip, r4
 8001ae2:	46b0      	mov	r8, r6
 8001ae4:	0b3f      	lsrs	r7, r7, #12
 8001ae6:	0d52      	lsrs	r2, r2, #21
 8001ae8:	0fc9      	lsrs	r1, r1, #31
 8001aea:	0d5b      	lsrs	r3, r3, #21
 8001aec:	0fc0      	lsrs	r0, r0, #31
 8001aee:	42aa      	cmp	r2, r5
 8001af0:	d00d      	beq.n	8001b0e <__ledf2+0x4a>
 8001af2:	42ab      	cmp	r3, r5
 8001af4:	d010      	beq.n	8001b18 <__ledf2+0x54>
 8001af6:	2a00      	cmp	r2, #0
 8001af8:	d127      	bne.n	8001b4a <__ledf2+0x86>
 8001afa:	433c      	orrs	r4, r7
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d111      	bne.n	8001b24 <__ledf2+0x60>
 8001b00:	464d      	mov	r5, r9
 8001b02:	432e      	orrs	r6, r5
 8001b04:	d10e      	bne.n	8001b24 <__ledf2+0x60>
 8001b06:	2000      	movs	r0, #0
 8001b08:	2c00      	cmp	r4, #0
 8001b0a:	d015      	beq.n	8001b38 <__ledf2+0x74>
 8001b0c:	e00e      	b.n	8001b2c <__ledf2+0x68>
 8001b0e:	003d      	movs	r5, r7
 8001b10:	4325      	orrs	r5, r4
 8001b12:	d110      	bne.n	8001b36 <__ledf2+0x72>
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d118      	bne.n	8001b4a <__ledf2+0x86>
 8001b18:	464d      	mov	r5, r9
 8001b1a:	432e      	orrs	r6, r5
 8001b1c:	d10b      	bne.n	8001b36 <__ledf2+0x72>
 8001b1e:	2a00      	cmp	r2, #0
 8001b20:	d102      	bne.n	8001b28 <__ledf2+0x64>
 8001b22:	433c      	orrs	r4, r7
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d00b      	beq.n	8001b40 <__ledf2+0x7c>
 8001b28:	4281      	cmp	r1, r0
 8001b2a:	d014      	beq.n	8001b56 <__ledf2+0x92>
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	3901      	subs	r1, #1
 8001b30:	4008      	ands	r0, r1
 8001b32:	3801      	subs	r0, #1
 8001b34:	e000      	b.n	8001b38 <__ledf2+0x74>
 8001b36:	2002      	movs	r0, #2
 8001b38:	bcc0      	pop	{r6, r7}
 8001b3a:	46b9      	mov	r9, r7
 8001b3c:	46b0      	mov	r8, r6
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d1f9      	bne.n	8001b38 <__ledf2+0x74>
 8001b44:	2001      	movs	r0, #1
 8001b46:	4240      	negs	r0, r0
 8001b48:	e7f6      	b.n	8001b38 <__ledf2+0x74>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ec      	bne.n	8001b28 <__ledf2+0x64>
 8001b4e:	464c      	mov	r4, r9
 8001b50:	4326      	orrs	r6, r4
 8001b52:	d1e9      	bne.n	8001b28 <__ledf2+0x64>
 8001b54:	e7ea      	b.n	8001b2c <__ledf2+0x68>
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dd04      	ble.n	8001b64 <__ledf2+0xa0>
 8001b5a:	4243      	negs	r3, r0
 8001b5c:	4158      	adcs	r0, r3
 8001b5e:	0040      	lsls	r0, r0, #1
 8001b60:	3801      	subs	r0, #1
 8001b62:	e7e9      	b.n	8001b38 <__ledf2+0x74>
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbeb      	blt.n	8001b40 <__ledf2+0x7c>
 8001b68:	454f      	cmp	r7, r9
 8001b6a:	d8df      	bhi.n	8001b2c <__ledf2+0x68>
 8001b6c:	d006      	beq.n	8001b7c <__ledf2+0xb8>
 8001b6e:	2000      	movs	r0, #0
 8001b70:	454f      	cmp	r7, r9
 8001b72:	d2e1      	bcs.n	8001b38 <__ledf2+0x74>
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d0e5      	beq.n	8001b44 <__ledf2+0x80>
 8001b78:	0008      	movs	r0, r1
 8001b7a:	e7dd      	b.n	8001b38 <__ledf2+0x74>
 8001b7c:	45c4      	cmp	ip, r8
 8001b7e:	d8d5      	bhi.n	8001b2c <__ledf2+0x68>
 8001b80:	2000      	movs	r0, #0
 8001b82:	45c4      	cmp	ip, r8
 8001b84:	d2d8      	bcs.n	8001b38 <__ledf2+0x74>
 8001b86:	e7f5      	b.n	8001b74 <__ledf2+0xb0>
 8001b88:	000007ff 	.word	0x000007ff

08001b8c <delay_in_us>:
/*********************************************************************************
								Macro Functions End
**********************************************************************************/

void delay_in_us(uint16_t time)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	0002      	movs	r2, r0
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	801a      	strh	r2, [r3, #0]
	TIM_HandleTypeDef *htim = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

#if HCSR5_EN
	htim = &HCSR5_timer_handler;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <delay_in_us+0x3c>)
 8001b9e:	60fb      	str	r3, [r7, #12]
	htim = &HCSR2_timer_handler;
#elif HCSR1_EN
	htim = &HCSR1_timer_handler;
#endif

	if (htim != NULL)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <delay_in_us+0x32>
	{
		__HAL_TIM_SET_COUNTER(htim, 0);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER(htim) < time);
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bb6:	1dbb      	adds	r3, r7, #6
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d3f8      	bcc.n	8001bb0 <delay_in_us+0x24>
	}
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000168 	.word	0x20000168

08001bcc <HAL_TIM_IC_CaptureCallback>:
/*********************************************************************************
								HC-SR04 Functions Begin
**********************************************************************************/
// Timer Input Capture Interrupt Callback for HC-SR04
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
#if HCSR1_EN
	HCSR_INPUT_HANDLE(htim, HCSR1_TIMER_ADDRESS, HCSR1_ACTIVE_CHANNEL, HCSR1_TIMER_CHANNEL,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4ae2      	ldr	r2, [pc, #904]	; (8001f64 <HAL_TIM_IC_CaptureCallback+0x398>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d000      	beq.n	8001be0 <HAL_TIM_IC_CaptureCallback+0x14>
 8001bde:	e082      	b.n	8001ce6 <HAL_TIM_IC_CaptureCallback+0x11a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7f1b      	ldrb	r3, [r3, #28]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d000      	beq.n	8001bea <HAL_TIM_IC_CaptureCallback+0x1e>
 8001be8:	e07d      	b.n	8001ce6 <HAL_TIM_IC_CaptureCallback+0x11a>
 8001bea:	4bdf      	ldr	r3, [pc, #892]	; (8001f68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d11b      	bne.n	8001c2a <HAL_TIM_IC_CaptureCallback+0x5e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f004 f8c2 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	4bdb      	ldr	r3, [pc, #876]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4bd9      	ldr	r3, [pc, #868]	; (8001f68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a1a      	ldr	r2, [r3, #32]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	210a      	movs	r1, #10
 8001c14:	438a      	bics	r2, r1
 8001c16:	621a      	str	r2, [r3, #32]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a1a      	ldr	r2, [r3, #32]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2102      	movs	r1, #2
 8001c24:	430a      	orrs	r2, r1
 8001c26:	621a      	str	r2, [r3, #32]
 8001c28:	e05d      	b.n	8001ce6 <HAL_TIM_IC_CaptureCallback+0x11a>
 8001c2a:	4bcf      	ldr	r3, [pc, #828]	; (8001f68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d159      	bne.n	8001ce6 <HAL_TIM_IC_CaptureCallback+0x11a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2100      	movs	r1, #0
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 f8a2 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	4bcc      	ldr	r3, [pc, #816]	; (8001f70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	4bcb      	ldr	r3, [pc, #812]	; (8001f70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4bc9      	ldr	r3, [pc, #804]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d907      	bls.n	8001c5e <HAL_TIM_IC_CaptureCallback+0x92>
 8001c4e:	4bc8      	ldr	r3, [pc, #800]	; (8001f70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4bc6      	ldr	r3, [pc, #792]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	4bc6      	ldr	r3, [pc, #792]	; (8001f74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e00e      	b.n	8001c7c <HAL_TIM_IC_CaptureCallback+0xb0>
 8001c5e:	4bc3      	ldr	r3, [pc, #780]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4bc3      	ldr	r3, [pc, #780]	; (8001f70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d908      	bls.n	8001c7c <HAL_TIM_IC_CaptureCallback+0xb0>
 8001c6a:	4bc1      	ldr	r3, [pc, #772]	; (8001f70 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4bbf      	ldr	r3, [pc, #764]	; (8001f6c <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	4ac0      	ldr	r2, [pc, #768]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001c76:	189a      	adds	r2, r3, r2
 8001c78:	4bbe      	ldr	r3, [pc, #760]	; (8001f74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4bbd      	ldr	r3, [pc, #756]	; (8001f74 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff fde9 	bl	8001858 <__aeabi_ui2d>
 8001c86:	4abd      	ldr	r2, [pc, #756]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001c88:	4bbd      	ldr	r3, [pc, #756]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001c8a:	f7fe ffb1 	bl	8000bf0 <__aeabi_dmul>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	000b      	movs	r3, r1
 8001c92:	0010      	movs	r0, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	2200      	movs	r2, #0
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	05db      	lsls	r3, r3, #23
 8001c9c:	f7fe fcb2 	bl	8000604 <__aeabi_ddiv>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	000b      	movs	r3, r1
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	f7fe fbc2 	bl	8000430 <__aeabi_d2uiz>
 8001cac:	0003      	movs	r3, r0
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4bb4      	ldr	r3, [pc, #720]	; (8001f84 <HAL_TIM_IC_CaptureCallback+0x3b8>)
 8001cb2:	801a      	strh	r2, [r3, #0]
 8001cb4:	4bac      	ldr	r3, [pc, #688]	; (8001f68 <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6a1a      	ldr	r2, [r3, #32]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	210a      	movs	r1, #10
 8001cc6:	438a      	bics	r2, r1
 8001cc8:	621a      	str	r2, [r3, #32]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a12      	ldr	r2, [r2, #32]
 8001cd4:	621a      	str	r2, [r3, #32]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	438a      	bics	r2, r1
 8001ce4:	60da      	str	r2, [r3, #12]
					  HCSR1_TIM_IT_CC, Is_First_Captured_1, IC_VAL1_HCSR1, IC_VAL2_HCSR1,
					  Difference_1, HCSR_Distance_1);
#endif
#if HCSR2_EN
	HCSR_INPUT_HANDLE(htim, HCSR2_TIMER_ADDRESS, HCSR2_ACTIVE_CHANNEL, HCSR2_TIMER_CHANNEL,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	05db      	lsls	r3, r3, #23
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d000      	beq.n	8001cf4 <HAL_TIM_IC_CaptureCallback+0x128>
 8001cf2:	e082      	b.n	8001dfa <HAL_TIM_IC_CaptureCallback+0x22e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7f1b      	ldrb	r3, [r3, #28]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d000      	beq.n	8001cfe <HAL_TIM_IC_CaptureCallback+0x132>
 8001cfc:	e07d      	b.n	8001dfa <HAL_TIM_IC_CaptureCallback+0x22e>
 8001cfe:	4ba2      	ldr	r3, [pc, #648]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11b      	bne.n	8001d3e <HAL_TIM_IC_CaptureCallback+0x172>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2100      	movs	r1, #0
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f004 f838 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001d10:	0002      	movs	r2, r0
 8001d12:	4b9e      	ldr	r3, [pc, #632]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	4b9c      	ldr	r3, [pc, #624]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	210a      	movs	r1, #10
 8001d28:	438a      	bics	r2, r1
 8001d2a:	621a      	str	r2, [r3, #32]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2102      	movs	r1, #2
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	621a      	str	r2, [r3, #32]
 8001d3c:	e05d      	b.n	8001dfa <HAL_TIM_IC_CaptureCallback+0x22e>
 8001d3e:	4b92      	ldr	r3, [pc, #584]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d159      	bne.n	8001dfa <HAL_TIM_IC_CaptureCallback+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f004 f818 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001d50:	0002      	movs	r2, r0
 8001d52:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	4b8e      	ldr	r3, [pc, #568]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d907      	bls.n	8001d72 <HAL_TIM_IC_CaptureCallback+0x1a6>
 8001d62:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	e00e      	b.n	8001d90 <HAL_TIM_IC_CaptureCallback+0x1c4>
 8001d72:	4b86      	ldr	r3, [pc, #536]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d908      	bls.n	8001d90 <HAL_TIM_IC_CaptureCallback+0x1c4>
 8001d7e:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <HAL_TIM_IC_CaptureCallback+0x3c4>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <HAL_TIM_IC_CaptureCallback+0x3c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	4a7b      	ldr	r2, [pc, #492]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001d8a:	189a      	adds	r2, r3, r2
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <HAL_TIM_IC_CaptureCallback+0x3c8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fd5f 	bl	8001858 <__aeabi_ui2d>
 8001d9a:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001d9c:	4b78      	ldr	r3, [pc, #480]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001d9e:	f7fe ff27 	bl	8000bf0 <__aeabi_dmul>
 8001da2:	0002      	movs	r2, r0
 8001da4:	000b      	movs	r3, r1
 8001da6:	0010      	movs	r0, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	05db      	lsls	r3, r3, #23
 8001db0:	f7fe fc28 	bl	8000604 <__aeabi_ddiv>
 8001db4:	0002      	movs	r2, r0
 8001db6:	000b      	movs	r3, r1
 8001db8:	0010      	movs	r0, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	f7fe fb38 	bl	8000430 <__aeabi_d2uiz>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b74      	ldr	r3, [pc, #464]	; (8001f98 <HAL_TIM_IC_CaptureCallback+0x3cc>)
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_TIM_IC_CaptureCallback+0x3bc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	210a      	movs	r1, #10
 8001dda:	438a      	bics	r2, r1
 8001ddc:	621a      	str	r2, [r3, #32]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6a12      	ldr	r2, [r2, #32]
 8001de8:	621a      	str	r2, [r3, #32]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2102      	movs	r1, #2
 8001df6:	438a      	bics	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
					  HCSR2_TIM_IT_CC, Is_First_Captured_2, IC_VAL1_HCSR2, IC_VAL2_HCSR2,
					  Difference_2, HCSR_Distance_2);
#endif
#if HCSR3_EN
	HCSR_INPUT_HANDLE(htim, HCSR3_TIMER_ADDRESS, HCSR3_ACTIVE_CHANNEL, HCSR3_TIMER_CHANNEL,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	05db      	lsls	r3, r3, #23
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d000      	beq.n	8001e08 <HAL_TIM_IC_CaptureCallback+0x23c>
 8001e06:	e082      	b.n	8001f0e <HAL_TIM_IC_CaptureCallback+0x342>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7f1b      	ldrb	r3, [r3, #28]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d000      	beq.n	8001e12 <HAL_TIM_IC_CaptureCallback+0x246>
 8001e10:	e07d      	b.n	8001f0e <HAL_TIM_IC_CaptureCallback+0x342>
 8001e12:	4b62      	ldr	r3, [pc, #392]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d11b      	bne.n	8001e52 <HAL_TIM_IC_CaptureCallback+0x286>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f003 ffae 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001e24:	0002      	movs	r2, r0
 8001e26:	4b5e      	ldr	r3, [pc, #376]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	21a0      	movs	r1, #160	; 0xa0
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	621a      	str	r2, [r3, #32]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2120      	movs	r1, #32
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	621a      	str	r2, [r3, #32]
 8001e50:	e05d      	b.n	8001f0e <HAL_TIM_IC_CaptureCallback+0x342>
 8001e52:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d159      	bne.n	8001f0e <HAL_TIM_IC_CaptureCallback+0x342>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f003 ff8e 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001e64:	0002      	movs	r2, r0
 8001e66:	4b4f      	ldr	r3, [pc, #316]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	4b4e      	ldr	r3, [pc, #312]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d907      	bls.n	8001e86 <HAL_TIM_IC_CaptureCallback+0x2ba>
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_TIM_IC_CaptureCallback+0x3dc>)
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e00e      	b.n	8001ea4 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001e86:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d908      	bls.n	8001ea4 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_TIM_IC_CaptureCallback+0x3d8>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <HAL_TIM_IC_CaptureCallback+0x3d4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a36      	ldr	r2, [pc, #216]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001e9e:	189a      	adds	r2, r3, r2
 8001ea0:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_TIM_IC_CaptureCallback+0x3dc>)
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <HAL_TIM_IC_CaptureCallback+0x3dc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff fcd5 	bl	8001858 <__aeabi_ui2d>
 8001eae:	4a33      	ldr	r2, [pc, #204]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001eb0:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x3b4>)
 8001eb2:	f7fe fe9d 	bl	8000bf0 <__aeabi_dmul>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	000b      	movs	r3, r1
 8001eba:	0010      	movs	r0, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	05db      	lsls	r3, r3, #23
 8001ec4:	f7fe fb9e 	bl	8000604 <__aeabi_ddiv>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	000b      	movs	r3, r1
 8001ecc:	0010      	movs	r0, r2
 8001ece:	0019      	movs	r1, r3
 8001ed0:	f7fe faae 	bl	8000430 <__aeabi_d2uiz>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_TIM_IC_CaptureCallback+0x3e0>)
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_TIM_IC_CaptureCallback+0x3d0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	21a0      	movs	r1, #160	; 0xa0
 8001eee:	438a      	bics	r2, r1
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a12      	ldr	r2, [r2, #32]
 8001efc:	621a      	str	r2, [r3, #32]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2104      	movs	r1, #4
 8001f0a:	438a      	bics	r2, r1
 8001f0c:	60da      	str	r2, [r3, #12]
					  HCSR3_TIM_IT_CC, Is_First_Captured_3, IC_VAL1_HCSR3, IC_VAL2_HCSR3,
					  Difference_3, HCSR_Distance_3);
#endif
#if HCSR4_EN
	HCSR_INPUT_HANDLE(htim, HCSR4_TIMER_ADDRESS, HCSR4_ACTIVE_CHANNEL, HCSR4_TIMER_CHANNEL,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a27      	ldr	r2, [pc, #156]	; (8001fb0 <HAL_TIM_IC_CaptureCallback+0x3e4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d000      	beq.n	8001f1a <HAL_TIM_IC_CaptureCallback+0x34e>
 8001f18:	e0ae      	b.n	8002078 <HAL_TIM_IC_CaptureCallback+0x4ac>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	7f1b      	ldrb	r3, [r3, #28]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d000      	beq.n	8001f24 <HAL_TIM_IC_CaptureCallback+0x358>
 8001f22:	e0a9      	b.n	8002078 <HAL_TIM_IC_CaptureCallback+0x4ac>
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_TIM_IC_CaptureCallback+0x3e8>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d147      	bne.n	8001fbc <HAL_TIM_IC_CaptureCallback+0x3f0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	0018      	movs	r0, r3
 8001f32:	f003 ff25 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001f36:	0002      	movs	r2, r0
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_TIM_IC_CaptureCallback+0x3ec>)
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_TIM_IC_CaptureCallback+0x3e8>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	210a      	movs	r1, #10
 8001f4e:	438a      	bics	r2, r1
 8001f50:	621a      	str	r2, [r3, #32]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	621a      	str	r2, [r3, #32]
 8001f62:	e089      	b.n	8002078 <HAL_TIM_IC_CaptureCallback+0x4ac>
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	200003e0 	.word	0x200003e0
 8001f6c:	200003a4 	.word	0x200003a4
 8001f70:	200003a8 	.word	0x200003a8
 8001f74:	200003cc 	.word	0x200003cc
 8001f78:	0000ffff 	.word	0x0000ffff
 8001f7c:	b020c49c 	.word	0xb020c49c
 8001f80:	3fa16872 	.word	0x3fa16872
 8001f84:	20000004 	.word	0x20000004
 8001f88:	200003e1 	.word	0x200003e1
 8001f8c:	200003ac 	.word	0x200003ac
 8001f90:	200003b0 	.word	0x200003b0
 8001f94:	200003d0 	.word	0x200003d0
 8001f98:	20000006 	.word	0x20000006
 8001f9c:	200003e2 	.word	0x200003e2
 8001fa0:	200003b4 	.word	0x200003b4
 8001fa4:	200003b8 	.word	0x200003b8
 8001fa8:	200003d4 	.word	0x200003d4
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	40002000 	.word	0x40002000
 8001fb4:	200003e3 	.word	0x200003e3
 8001fb8:	200003bc 	.word	0x200003bc
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x5c8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d159      	bne.n	8002078 <HAL_TIM_IC_CaptureCallback+0x4ac>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f003 fed9 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	4b71      	ldr	r3, [pc, #452]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x5cc>)
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	4b70      	ldr	r3, [pc, #448]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x5cc>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_TIM_IC_CaptureCallback+0x5d0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d907      	bls.n	8001ff0 <HAL_TIM_IC_CaptureCallback+0x424>
 8001fe0:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x5cc>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b6d      	ldr	r3, [pc, #436]	; (800219c <HAL_TIM_IC_CaptureCallback+0x5d0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x5d4>)
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e00e      	b.n	800200e <HAL_TIM_IC_CaptureCallback+0x442>
 8001ff0:	4b6a      	ldr	r3, [pc, #424]	; (800219c <HAL_TIM_IC_CaptureCallback+0x5d0>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b68      	ldr	r3, [pc, #416]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x5cc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d908      	bls.n	800200e <HAL_TIM_IC_CaptureCallback+0x442>
 8001ffc:	4b66      	ldr	r3, [pc, #408]	; (8002198 <HAL_TIM_IC_CaptureCallback+0x5cc>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_TIM_IC_CaptureCallback+0x5d0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	4a67      	ldr	r2, [pc, #412]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x5d8>)
 8002008:	189a      	adds	r2, r3, r2
 800200a:	4b65      	ldr	r3, [pc, #404]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x5d4>)
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <HAL_TIM_IC_CaptureCallback+0x5d4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	f7ff fc20 	bl	8001858 <__aeabi_ui2d>
 8002018:	4a63      	ldr	r2, [pc, #396]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x5dc>)
 800201a:	4b64      	ldr	r3, [pc, #400]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x5e0>)
 800201c:	f7fe fde8 	bl	8000bf0 <__aeabi_dmul>
 8002020:	0002      	movs	r2, r0
 8002022:	000b      	movs	r3, r1
 8002024:	0010      	movs	r0, r2
 8002026:	0019      	movs	r1, r3
 8002028:	2200      	movs	r2, #0
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	05db      	lsls	r3, r3, #23
 800202e:	f7fe fae9 	bl	8000604 <__aeabi_ddiv>
 8002032:	0002      	movs	r2, r0
 8002034:	000b      	movs	r3, r1
 8002036:	0010      	movs	r0, r2
 8002038:	0019      	movs	r1, r3
 800203a:	f7fe f9f9 	bl	8000430 <__aeabi_d2uiz>
 800203e:	0003      	movs	r3, r0
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_TIM_IC_CaptureCallback+0x5e4>)
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_TIM_IC_CaptureCallback+0x5c8>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	210a      	movs	r1, #10
 8002058:	438a      	bics	r2, r1
 800205a:	621a      	str	r2, [r3, #32]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a12      	ldr	r2, [r2, #32]
 8002066:	621a      	str	r2, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2102      	movs	r1, #2
 8002074:	438a      	bics	r2, r1
 8002076:	60da      	str	r2, [r3, #12]
					  HCSR4_TIM_IT_CC, Is_First_Captured_4, IC_VAL1_HCSR4, IC_VAL2_HCSR4,
					  Difference_4, HCSR_Distance_4);
#endif
#if HCSR5_EN
	HCSR_INPUT_HANDLE(htim, HCSR5_TIMER_ADDRESS, HCSR5_ACTIVE_CHANNEL, HCSR5_TIMER_CHANNEL,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a4d      	ldr	r2, [pc, #308]	; (80021b4 <HAL_TIM_IC_CaptureCallback+0x5e8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d000      	beq.n	8002084 <HAL_TIM_IC_CaptureCallback+0x4b8>
 8002082:	e082      	b.n	800218a <HAL_TIM_IC_CaptureCallback+0x5be>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7f1b      	ldrb	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d000      	beq.n	800208e <HAL_TIM_IC_CaptureCallback+0x4c2>
 800208c:	e07d      	b.n	800218a <HAL_TIM_IC_CaptureCallback+0x5be>
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x5ec>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <HAL_TIM_IC_CaptureCallback+0x502>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2100      	movs	r1, #0
 800209a:	0018      	movs	r0, r3
 800209c:	f003 fe70 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 80020a0:	0002      	movs	r2, r0
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x5f0>)
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x5ec>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6a1a      	ldr	r2, [r3, #32]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	210a      	movs	r1, #10
 80020b8:	438a      	bics	r2, r1
 80020ba:	621a      	str	r2, [r3, #32]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2102      	movs	r1, #2
 80020c8:	430a      	orrs	r2, r1
 80020ca:	621a      	str	r2, [r3, #32]
					  HCSR5_TIM_IT_CC, Is_First_Captured_5, IC_VAL1_HCSR5, IC_VAL2_HCSR5,
					  Difference_5, HCSR_Distance_5);
#endif
}
 80020cc:	e05d      	b.n	800218a <HAL_TIM_IC_CaptureCallback+0x5be>
	HCSR_INPUT_HANDLE(htim, HCSR5_TIMER_ADDRESS, HCSR5_ACTIVE_CHANNEL, HCSR5_TIMER_CHANNEL,
 80020ce:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x5ec>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d159      	bne.n	800218a <HAL_TIM_IC_CaptureCallback+0x5be>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2100      	movs	r1, #0
 80020da:	0018      	movs	r0, r3
 80020dc:	f003 fe50 	bl	8005d80 <HAL_TIM_ReadCapturedValue>
 80020e0:	0002      	movs	r2, r0
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x5f4>)
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x5f4>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x5f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d907      	bls.n	8002102 <HAL_TIM_IC_CaptureCallback+0x536>
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x5f4>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x5f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1ad2      	subs	r2, r2, r3
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x5f8>)
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e00e      	b.n	8002120 <HAL_TIM_IC_CaptureCallback+0x554>
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x5f0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x5f4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d908      	bls.n	8002120 <HAL_TIM_IC_CaptureCallback+0x554>
 800210e:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_TIM_IC_CaptureCallback+0x5f4>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_TIM_IC_CaptureCallback+0x5f0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <HAL_TIM_IC_CaptureCallback+0x5d8>)
 800211a:	189a      	adds	r2, r3, r2
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x5f8>)
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HAL_TIM_IC_CaptureCallback+0x5f8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0018      	movs	r0, r3
 8002126:	f7ff fb97 	bl	8001858 <__aeabi_ui2d>
 800212a:	4a1f      	ldr	r2, [pc, #124]	; (80021a8 <HAL_TIM_IC_CaptureCallback+0x5dc>)
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_TIM_IC_CaptureCallback+0x5e0>)
 800212e:	f7fe fd5f 	bl	8000bf0 <__aeabi_dmul>
 8002132:	0002      	movs	r2, r0
 8002134:	000b      	movs	r3, r1
 8002136:	0010      	movs	r0, r2
 8002138:	0019      	movs	r1, r3
 800213a:	2200      	movs	r2, #0
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	05db      	lsls	r3, r3, #23
 8002140:	f7fe fa60 	bl	8000604 <__aeabi_ddiv>
 8002144:	0002      	movs	r2, r0
 8002146:	000b      	movs	r3, r1
 8002148:	0010      	movs	r0, r2
 800214a:	0019      	movs	r1, r3
 800214c:	f7fe f970 	bl	8000430 <__aeabi_d2uiz>
 8002150:	0003      	movs	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <HAL_TIM_IC_CaptureCallback+0x5fc>)
 8002156:	801a      	strh	r2, [r3, #0]
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_TIM_IC_CaptureCallback+0x5ec>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	210a      	movs	r1, #10
 800216a:	438a      	bics	r2, r1
 800216c:	621a      	str	r2, [r3, #32]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a12      	ldr	r2, [r2, #32]
 8002178:	621a      	str	r2, [r3, #32]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2102      	movs	r1, #2
 8002186:	438a      	bics	r2, r1
 8002188:	60da      	str	r2, [r3, #12]
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	200003e3 	.word	0x200003e3
 8002198:	200003c0 	.word	0x200003c0
 800219c:	200003bc 	.word	0x200003bc
 80021a0:	200003d8 	.word	0x200003d8
 80021a4:	0000ffff 	.word	0x0000ffff
 80021a8:	b020c49c 	.word	0xb020c49c
 80021ac:	3fa16872 	.word	0x3fa16872
 80021b0:	2000000a 	.word	0x2000000a
 80021b4:	40014800 	.word	0x40014800
 80021b8:	200003e4 	.word	0x200003e4
 80021bc:	200003c4 	.word	0x200003c4
 80021c0:	200003c8 	.word	0x200003c8
 80021c4:	200003dc 	.word	0x200003dc
 80021c8:	2000000c 	.word	0x2000000c

080021cc <HCSR04_Read>:

// Pulls the trigger pin high for 10us to start the calculation
void HCSR04_Read (void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
#if (HCSR1_EN || HCSR2_EN || HCSR3_EN || HCSR4_EN || HCSR5_EN)
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	481c      	ldr	r0, [pc, #112]	; (8002248 <HCSR04_Read+0x7c>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	0019      	movs	r1, r3
 80021da:	f002 f85f 	bl	800429c <HAL_GPIO_WritePin>
	delay_in_us(10);  // wait for 10 us
 80021de:	200a      	movs	r0, #10
 80021e0:	f7ff fcd4 	bl	8001b8c <delay_in_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	4817      	ldr	r0, [pc, #92]	; (8002248 <HCSR04_Read+0x7c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	0019      	movs	r1, r3
 80021ee:	f002 f855 	bl	800429c <HAL_GPIO_WritePin>
#endif

	// Enable the interrupt for capturing how long the ECHO pin stays high in order to calculate the distance
#if HCSR1_EN
	__HAL_TIM_ENABLE_IT(&HCSR1_timer_handler, HCSR1_TIM_IT_CC);
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <HCSR04_Read+0x80>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HCSR04_Read+0x80>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2102      	movs	r1, #2
 80021fe:	430a      	orrs	r2, r1
 8002200:	60da      	str	r2, [r3, #12]
#endif
#if HCSR2_EN
	__HAL_TIM_ENABLE_IT(&HCSR2_timer_handler, HCSR2_TIM_IT_CC);
 8002202:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HCSR04_Read+0x84>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HCSR04_Read+0x84>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2102      	movs	r1, #2
 800220e:	430a      	orrs	r2, r1
 8002210:	60da      	str	r2, [r3, #12]
#endif
#if HCSR3_EN
	__HAL_TIM_ENABLE_IT(&HCSR3_timer_handler, HCSR3_TIM_IT_CC);
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HCSR04_Read+0x84>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HCSR04_Read+0x84>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2104      	movs	r1, #4
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
#endif
#if HCSR4_EN
	__HAL_TIM_ENABLE_IT(&HCSR4_timer_handler, HCSR4_TIM_IT_CC);
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <HCSR04_Read+0x88>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HCSR04_Read+0x88>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2102      	movs	r1, #2
 800222e:	430a      	orrs	r2, r1
 8002230:	60da      	str	r2, [r3, #12]
#endif
#if HCSR5_EN
	__HAL_TIM_ENABLE_IT(&HCSR5_timer_handler, HCSR5_TIM_IT_CC);
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HCSR04_Read+0x8c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <HCSR04_Read+0x8c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2102      	movs	r1, #2
 800223e:	430a      	orrs	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
#endif
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	50000800 	.word	0x50000800
 800224c:	20000038 	.word	0x20000038
 8002250:	20000084 	.word	0x20000084
 8002254:	2000011c 	.word	0x2000011c
 8002258:	20000168 	.word	0x20000168

0800225c <HAL_UART_TxCpltCallback>:
						Interrupt Callbacks (ISR) Begin
**********************************************************************************/

// UART transmit callback: gets called as soon as STM32 transmits through UART
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
   // do nothing here
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_UART_RxCpltCallback>:
int16_t angle_buff[ANGLE_BUFF_SIZE] = {179}; // Ring buffer (replaces the oldest angle with the new output at each iteration)
uint8_t angle_buff_index = 0;

// UART receive callback: gets called as soon as STM32 receives through UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	// parse angle from rx buffer
	temp_angle = ((int16_t *)rx)[0];
 8002274:	4b15      	ldr	r3, [pc, #84]	; (80022cc <HAL_UART_RxCpltCallback+0x60>)
 8002276:	2200      	movs	r2, #0
 8002278:	5e9a      	ldrsh	r2, [r3, r2]
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_UART_RxCpltCallback+0x64>)
 800227c:	801a      	strh	r2, [r3, #0]

	// If the angle is valid, then assign it to the global variable
	if (IS_VALID_ANGLE(temp_angle))
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_UART_RxCpltCallback+0x64>)
 8002280:	2200      	movs	r2, #0
 8002282:	5e9b      	ldrsh	r3, [r3, r2]
 8002284:	33b3      	adds	r3, #179	; 0xb3
 8002286:	db0a      	blt.n	800229e <HAL_UART_RxCpltCallback+0x32>
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_UART_RxCpltCallback+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	5e9b      	ldrsh	r3, [r3, r2]
 800228e:	2bb3      	cmp	r3, #179	; 0xb3
 8002290:	dc05      	bgt.n	800229e <HAL_UART_RxCpltCallback+0x32>
	{
		angle = temp_angle;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_UART_RxCpltCallback+0x64>)
 8002294:	2200      	movs	r2, #0
 8002296:	5e9a      	ldrsh	r2, [r3, r2]
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_UART_RxCpltCallback+0x68>)
 800229a:	801a      	strh	r2, [r3, #0]
 800229c:	e008      	b.n	80022b0 <HAL_UART_RxCpltCallback+0x44>
	}
	else // Else, stop the motors and stop the turning and set the global variable so that DOLL-E thinks it is facing the user.
	{
		stop = 1;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_UART_RxCpltCallback+0x6c>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
		turn = 0;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_UART_RxCpltCallback+0x70>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
		angle = 179;
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_UART_RxCpltCallback+0x68>)
 80022ac:	22b3      	movs	r2, #179	; 0xb3
 80022ae:	801a      	strh	r2, [r3, #0]
	angle = (((int16_t) (((float)recent_angles_sum/ANGLE_BUFF_SIZE) + 179.5f)) - 179);

**************************************************************************************************************/

	// call the interrupt function again to keep the interrupts going
	USART_State = HAL_UART_Receive_IT(&huart1, aoa_buffer, AOA_USART_NUM_BYTES);
 80022b0:	4906      	ldr	r1, [pc, #24]	; (80022cc <HAL_UART_RxCpltCallback+0x60>)
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_UART_RxCpltCallback+0x74>)
 80022b4:	2202      	movs	r2, #2
 80022b6:	0018      	movs	r0, r3
 80022b8:	f004 fbbc 	bl	8006a34 <HAL_UART_Receive_IT>
 80022bc:	0003      	movs	r3, r0
 80022be:	001a      	movs	r2, r3
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_UART_RxCpltCallback+0x78>)
 80022c2:	701a      	strb	r2, [r3, #0]
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b002      	add	sp, #8
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000039c 	.word	0x2000039c
 80022d0:	20000398 	.word	0x20000398
 80022d4:	20000002 	.word	0x20000002
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000394 	.word	0x20000394
 80022e0:	200001b4 	.word	0x200001b4
 80022e4:	2000000e 	.word	0x2000000e

080022e8 <speed>:

/*********************************************************************************
					   Motor Controller Functions Begin
**********************************************************************************/
void speed(int32_t l, int32_t r) // range from -250 to 250
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	uint32_t set_l = (l) + 750;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0f      	ldr	r2, [pc, #60]	; (8002334 <speed+0x4c>)
 80022f6:	4694      	mov	ip, r2
 80022f8:	4463      	add	r3, ip
 80022fa:	60fb      	str	r3, [r7, #12]
	if (l == 0)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <speed+0x1e>
		set_l = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]

	uint32_t set_r = (r) + 750;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <speed+0x4c>)
 800230a:	4694      	mov	ip, r2
 800230c:	4463      	add	r3, ip
 800230e:	60bb      	str	r3, [r7, #8]
	if (r == 0)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <speed+0x32>
		set_r = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COMPARE(&pwm_timer_handler, PWM_LEFT_MOTOR_CHANNEL, set_l);
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <speed+0x50>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&pwm_timer_handler, PWM_RIGHT_MOTOR_CHANNEL, set_r);
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <speed+0x50>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	000002ee 	.word	0x000002ee
 8002338:	200000d0 	.word	0x200000d0

0800233c <turnLeft>:

// Input: Left wheel absolute speed
void turnLeft(int32_t speed_val)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	// Less than FRICTION_OFFSET is there because the friction on the left wheel is more.
	if (speed_val < FRICTION_OFFSET || speed_val > 250)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db02      	blt.n	8002350 <turnLeft+0x14>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2bfa      	cmp	r3, #250	; 0xfa
 800234e:	dd04      	ble.n	800235a <turnLeft+0x1e>
	{
		speed(0, 0);
 8002350:	2100      	movs	r1, #0
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff ffc8 	bl	80022e8 <speed>
		return;
 8002358:	e012      	b.n	8002380 <turnLeft+0x44>
	}

	turningLeft = 1;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <turnLeft+0x4c>)
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <turnLeft+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <turnLeft+0x54>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
	movingStraight = 0;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <turnLeft+0x58>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
	speed(-speed_val, speed_val - FRICTION_OFFSET);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	425b      	negs	r3, r3
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f7ff ffb4 	bl	80022e8 <speed>
}
 8002380:	46bd      	mov	sp, r7
 8002382:	b002      	add	sp, #8
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	20000395 	.word	0x20000395
 800238c:	20000396 	.word	0x20000396
 8002390:	20000001 	.word	0x20000001
 8002394:	20000397 	.word	0x20000397

08002398 <turnRight>:

// Input: Left wheel absolute speed (since left wheel has the larger absolute value at all times)
void turnRight(int32_t speed_val)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	// Less than FRICTION_OFFSET is there because the friction on the left wheel is more.
	if (speed_val < FRICTION_OFFSET || speed_val > 250)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db02      	blt.n	80023ac <turnRight+0x14>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2bfa      	cmp	r3, #250	; 0xfa
 80023aa:	dd04      	ble.n	80023b6 <turnRight+0x1e>
	{
		speed(0, 0);
 80023ac:	2100      	movs	r1, #0
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff ff9a 	bl	80022e8 <speed>
		return;
 80023b4:	e012      	b.n	80023dc <turnRight+0x44>
	}

	turningRight = 1;
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <turnRight+0x4c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
	turningLeft = 0;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <turnRight+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <turnRight+0x54>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
	movingStraight = 0;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <turnRight+0x58>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
	speed(speed_val, -(speed_val - FRICTION_OFFSET));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	425a      	negs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff ff86 	bl	80022e8 <speed>
}
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	20000396 	.word	0x20000396
 80023e8:	20000395 	.word	0x20000395
 80023ec:	20000001 	.word	0x20000001
 80023f0:	20000397 	.word	0x20000397

080023f4 <goStraight>:

// Input: Left wheel absolute speed
void goStraight(int32_t speed_val)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	// Less than FRICTION_OFFSET is there because the friction on the left wheel is more.
	if (speed_val <= FRICTION_OFFSET || speed_val > 250)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	dd02      	ble.n	8002408 <goStraight+0x14>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2bfa      	cmp	r3, #250	; 0xfa
 8002406:	dd04      	ble.n	8002412 <goStraight+0x1e>
	{
		speed(0, 0);
 8002408:	2100      	movs	r1, #0
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff ff6c 	bl	80022e8 <speed>
		return;
 8002410:	e011      	b.n	8002436 <goStraight+0x42>
	}

	turningLeft = 0;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <goStraight+0x48>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
	turningRight = 0;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <goStraight+0x4c>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
	stopped = 0;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <goStraight+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
	movingStraight = 1;
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <goStraight+0x54>)
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
	speed(speed_val, speed_val - FRICTION_OFFSET);
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0011      	movs	r1, r2
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff ff59 	bl	80022e8 <speed>
}
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000395 	.word	0x20000395
 8002440:	20000396 	.word	0x20000396
 8002444:	20000001 	.word	0x20000001
 8002448:	20000397 	.word	0x20000397

0800244c <reinitalize_aoa_UART>:
/*********************************************************************************
					   Error Handling Functions Begin
**********************************************************************************/
// Reinitializes the AOA USART
void reinitalize_aoa_UART()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart1); // Deinitialize USART1
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <reinitalize_aoa_UART+0x2c>)
 8002452:	0018      	movs	r0, r3
 8002454:	f004 faae 	bl	80069b4 <HAL_UART_DeInit>
    MX_USART1_UART_Init();    // Reinitialize USART1
 8002458:	f000 fb88 	bl	8002b6c <MX_USART1_UART_Init>

    // Call UART interrupt to sample again before it tries to deinitialize again.
    // If it doesn't work, give some delay after it to wait for the new angle to arrive.
    USART_State = HAL_UART_Receive_IT(&huart1, aoa_buffer, AOA_USART_NUM_BYTES);
 800245c:	4907      	ldr	r1, [pc, #28]	; (800247c <reinitalize_aoa_UART+0x30>)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <reinitalize_aoa_UART+0x2c>)
 8002460:	2202      	movs	r2, #2
 8002462:	0018      	movs	r0, r3
 8002464:	f004 fae6 	bl	8006a34 <HAL_UART_Receive_IT>
 8002468:	0003      	movs	r3, r0
 800246a:	001a      	movs	r2, r3
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <reinitalize_aoa_UART+0x34>)
 800246e:	701a      	strb	r2, [r3, #0]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	200001b4 	.word	0x200001b4
 800247c:	2000039c 	.word	0x2000039c
 8002480:	2000000e 	.word	0x2000000e

08002484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002488:	f001 f84a 	bl	8003520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800248c:	f000 f936 	bl	80026fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002490:	f000 fc14 	bl	8002cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8002494:	f000 fbec 	bl	8002c70 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002498:	f000 fb68 	bl	8002b6c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800249c:	f000 faca 	bl	8002a34 <MX_TIM14_Init>
  MX_TIM17_Init();
 80024a0:	f000 fb14 	bl	8002acc <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80024a4:	f000 fbb0 	bl	8002c08 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80024a8:	f000 f970 	bl	800278c <MX_TIM1_Init>
  MX_TIM2_Init();
 80024ac:	f000 f9d2 	bl	8002854 <MX_TIM2_Init>
  MX_TIM3_Init();
 80024b0:	f000 fa36 	bl	8002920 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // ********** Timer Interrupts Start for HC-SR04 Distance Sensor **********
#if HCSR1_EN
  HAL_TIM_IC_Start_IT(&HCSR1_timer_handler, HCSR1_TIMER_CHANNEL);
 80024b4:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <main+0x21c>)
 80024b6:	2100      	movs	r1, #0
 80024b8:	0018      	movs	r0, r3
 80024ba:	f002 ff85 	bl	80053c8 <HAL_TIM_IC_Start_IT>
#endif
#if HCSR2_EN
  HAL_TIM_IC_Start_IT(&HCSR2_timer_handler, HCSR2_TIMER_CHANNEL);
 80024be:	4b79      	ldr	r3, [pc, #484]	; (80026a4 <main+0x220>)
 80024c0:	2100      	movs	r1, #0
 80024c2:	0018      	movs	r0, r3
 80024c4:	f002 ff80 	bl	80053c8 <HAL_TIM_IC_Start_IT>
#endif
#if HCSR3_EN
  HAL_TIM_IC_Start_IT(&HCSR3_timer_handler, HCSR3_TIMER_CHANNEL);
 80024c8:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <main+0x220>)
 80024ca:	2104      	movs	r1, #4
 80024cc:	0018      	movs	r0, r3
 80024ce:	f002 ff7b 	bl	80053c8 <HAL_TIM_IC_Start_IT>
#endif
#if HCSR4_EN
  HAL_TIM_IC_Start_IT(&HCSR4_timer_handler, HCSR4_TIMER_CHANNEL);
 80024d2:	4b75      	ldr	r3, [pc, #468]	; (80026a8 <main+0x224>)
 80024d4:	2100      	movs	r1, #0
 80024d6:	0018      	movs	r0, r3
 80024d8:	f002 ff76 	bl	80053c8 <HAL_TIM_IC_Start_IT>
#endif
#if HCSR5_EN
  HAL_TIM_IC_Start_IT(&HCSR5_timer_handler, HCSR5_TIMER_CHANNEL);
 80024dc:	4b73      	ldr	r3, [pc, #460]	; (80026ac <main+0x228>)
 80024de:	2100      	movs	r1, #0
 80024e0:	0018      	movs	r0, r3
 80024e2:	f002 ff71 	bl	80053c8 <HAL_TIM_IC_Start_IT>
#endif

  // ********** PWM Start for Controlling the Motors **********
#if MOTOR_EN
  HAL_TIM_PWM_Start(&pwm_timer_handler, PWM_LEFT_MOTOR_CHANNEL); // Start the PWM for left motor
 80024e6:	4b72      	ldr	r3, [pc, #456]	; (80026b0 <main+0x22c>)
 80024e8:	2100      	movs	r1, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f002 fe36 	bl	800515c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&pwm_timer_handler, PWM_RIGHT_MOTOR_CHANNEL); // Start the PWM for right motor
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <main+0x22c>)
 80024f2:	2104      	movs	r1, #4
 80024f4:	0018      	movs	r0, r3
 80024f6:	f002 fe31 	bl	800515c <HAL_TIM_PWM_Start>
#endif

  // ********** UART Rx Interrupt Start for Receiving Angles from Raspberry Pi **********
#if AOA_EN
  USART_State = HAL_UART_Receive_IT(&huart1, aoa_buffer, AOA_USART_NUM_BYTES);
 80024fa:	496e      	ldr	r1, [pc, #440]	; (80026b4 <main+0x230>)
 80024fc:	4b6e      	ldr	r3, [pc, #440]	; (80026b8 <main+0x234>)
 80024fe:	2202      	movs	r2, #2
 8002500:	0018      	movs	r0, r3
 8002502:	f004 fa97 	bl	8006a34 <HAL_UART_Receive_IT>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	4b6c      	ldr	r3, [pc, #432]	; (80026bc <main+0x238>)
 800250c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Send the command to read from the distance sensors.
	  HCSR04_Read();
 800250e:	f7ff fe5d 	bl	80021cc <HCSR04_Read>

	  // Update the state.
	  stop = ISSTOP(HCSR_Distance_1, HCSR_Distance_2, HCSR_Distance_3, HCSR_Distance_4, HCSR_Distance_5);
 8002512:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <main+0x23c>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	2b45      	cmp	r3, #69	; 0x45
 8002518:	d90f      	bls.n	800253a <main+0xb6>
 800251a:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <main+0x240>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	2b45      	cmp	r3, #69	; 0x45
 8002520:	d90b      	bls.n	800253a <main+0xb6>
 8002522:	4b69      	ldr	r3, [pc, #420]	; (80026c8 <main+0x244>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	2b45      	cmp	r3, #69	; 0x45
 8002528:	d907      	bls.n	800253a <main+0xb6>
 800252a:	4b68      	ldr	r3, [pc, #416]	; (80026cc <main+0x248>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	2b45      	cmp	r3, #69	; 0x45
 8002530:	d903      	bls.n	800253a <main+0xb6>
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <main+0x24c>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	2b45      	cmp	r3, #69	; 0x45
 8002538:	d801      	bhi.n	800253e <main+0xba>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <main+0xbc>
 800253e:	2300      	movs	r3, #0
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <main+0x250>)
 8002544:	701a      	strb	r2, [r3, #0]
	  turn = ISTURN(angle);
 8002546:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <main+0x254>)
 8002548:	2200      	movs	r2, #0
 800254a:	5e9b      	ldrsh	r3, [r3, r2]
 800254c:	339f      	adds	r3, #159	; 0x9f
 800254e:	db06      	blt.n	800255e <main+0xda>
 8002550:	4b61      	ldr	r3, [pc, #388]	; (80026d8 <main+0x254>)
 8002552:	2200      	movs	r2, #0
 8002554:	5e9b      	ldrsh	r3, [r3, r2]
 8002556:	2b9f      	cmp	r3, #159	; 0x9f
 8002558:	dc01      	bgt.n	800255e <main+0xda>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <main+0xdc>
 800255e:	2300      	movs	r3, #0
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <main+0x258>)
 8002564:	701a      	strb	r2, [r3, #0]

	  // Interpret the results to send motor commands.
	  if (turn)
 8002566:	4b5d      	ldr	r3, [pc, #372]	; (80026dc <main+0x258>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d037      	beq.n	80025de <main+0x15a>
	  {
		  if (ISLEFT(angle) && !turningLeft)
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <main+0x254>)
 8002570:	2200      	movs	r2, #0
 8002572:	5e9b      	ldrsh	r3, [r3, r2]
 8002574:	339f      	adds	r3, #159	; 0x9f
 8002576:	db16      	blt.n	80025a6 <main+0x122>
 8002578:	4b57      	ldr	r3, [pc, #348]	; (80026d8 <main+0x254>)
 800257a:	2200      	movs	r2, #0
 800257c:	5e9b      	ldrsh	r3, [r3, r2]
 800257e:	2b00      	cmp	r3, #0
 8002580:	da11      	bge.n	80025a6 <main+0x122>
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <main+0x25c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10d      	bne.n	80025a6 <main+0x122>
		  {
			  turnLeft(ANGLE_TO_SPEED(angle));
 800258a:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <main+0x254>)
 800258c:	2200      	movs	r2, #0
 800258e:	5e9b      	ldrsh	r3, [r3, r2]
 8002590:	17da      	asrs	r2, r3, #31
 8002592:	189b      	adds	r3, r3, r2
 8002594:	4053      	eors	r3, r2
 8002596:	b29b      	uxth	r3, r3
 8002598:	001a      	movs	r2, r3
 800259a:	23c8      	movs	r3, #200	; 0xc8
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff fecc 	bl	800233c <turnLeft>
 80025a4:	e03f      	b.n	8002626 <main+0x1a2>
		  }
		  else if (ISRIGHT(angle) && !turningRight)
 80025a6:	4b4c      	ldr	r3, [pc, #304]	; (80026d8 <main+0x254>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	5e9b      	ldrsh	r3, [r3, r2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db3a      	blt.n	8002626 <main+0x1a2>
 80025b0:	4b49      	ldr	r3, [pc, #292]	; (80026d8 <main+0x254>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	5e9b      	ldrsh	r3, [r3, r2]
 80025b6:	2b9f      	cmp	r3, #159	; 0x9f
 80025b8:	dc35      	bgt.n	8002626 <main+0x1a2>
 80025ba:	4b4a      	ldr	r3, [pc, #296]	; (80026e4 <main+0x260>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d131      	bne.n	8002626 <main+0x1a2>
		  {
			  turnRight(ANGLE_TO_SPEED(angle));
 80025c2:	4b45      	ldr	r3, [pc, #276]	; (80026d8 <main+0x254>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	5e9b      	ldrsh	r3, [r3, r2]
 80025c8:	17da      	asrs	r2, r3, #31
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	4053      	eors	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	001a      	movs	r2, r3
 80025d2:	23c8      	movs	r3, #200	; 0xc8
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7ff fede 	bl	8002398 <turnRight>
 80025dc:	e023      	b.n	8002626 <main+0x1a2>
		  }
	  }
	  else if (stop && !stopped)
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <main+0x250>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d014      	beq.n	8002610 <main+0x18c>
 80025e6:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <main+0x264>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d110      	bne.n	8002610 <main+0x18c>
	  {
		  speed(0, 0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff fe79 	bl	80022e8 <speed>
		  turningLeft = 0;
 80025f6:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <main+0x25c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
		  turningRight = 0;
 80025fc:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <main+0x260>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
		  stopped = 1;
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <main+0x264>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
		  movingStraight = 0;
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <main+0x268>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e00a      	b.n	8002626 <main+0x1a2>
	  }
	  else if (!stop && !movingStraight)
 8002610:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <main+0x250>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <main+0x1a2>
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <main+0x268>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <main+0x1a2>
	  {
		  goStraight(50);
 8002620:	2032      	movs	r0, #50	; 0x32
 8002622:	f7ff fee7 	bl	80023f4 <goStraight>
	  }

	  HAL_Delay(30); // Small delay to avoid sending commands to motors too frequently.
 8002626:	201e      	movs	r0, #30
 8002628:	f001 f800 	bl	800362c <HAL_Delay>

	  // ***** Rest of the while loop is error handling *****

	  // Count how many times we went through the while loop without angle being updated.
	  if (prevAngle == angle)
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <main+0x26c>)
 800262e:	2200      	movs	r2, #0
 8002630:	5e9a      	ldrsh	r2, [r3, r2]
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <main+0x254>)
 8002634:	2100      	movs	r1, #0
 8002636:	5e5b      	ldrsh	r3, [r3, r1]
 8002638:	429a      	cmp	r2, r3
 800263a:	d10d      	bne.n	8002658 <main+0x1d4>
	  {
		  angleCounter++;
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <main+0x270>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	b2da      	uxtb	r2, r3
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <main+0x270>)
 8002646:	701a      	strb	r2, [r3, #0]
		  if (angleCounter == 0)
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <main+0x270>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <main+0x1da>
			  angleCounter = 255;
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <main+0x270>)
 8002652:	22ff      	movs	r2, #255	; 0xff
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e002      	b.n	800265e <main+0x1da>
	  }
	  else
	  {
		  angleCounter = 0;
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <main+0x270>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
	  }

	  prevAngle = angle; // Update previous angle value
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <main+0x254>)
 8002660:	2200      	movs	r2, #0
 8002662:	5e9a      	ldrsh	r2, [r3, r2]
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <main+0x26c>)
 8002666:	801a      	strh	r2, [r3, #0]

	  // If the angle has been the same value for a while, call the UART Receive interrupt again.
	  if (angleCounter >= ANGLE_SAMPLING_HALTED_COUNT)
 8002668:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <main+0x270>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d909      	bls.n	8002684 <main+0x200>
	  {
		  USART_State = HAL_UART_Receive_IT(&huart1, aoa_buffer, AOA_USART_NUM_BYTES);
 8002670:	4910      	ldr	r1, [pc, #64]	; (80026b4 <main+0x230>)
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <main+0x234>)
 8002674:	2202      	movs	r2, #2
 8002676:	0018      	movs	r0, r3
 8002678:	f004 f9dc 	bl	8006a34 <HAL_UART_Receive_IT>
 800267c:	0003      	movs	r3, r0
 800267e:	001a      	movs	r2, r3
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <main+0x238>)
 8002682:	701a      	strb	r2, [r3, #0]
	  }

	  // If the angle is outside the valid range, restart the UART.
      if (!IS_VALID_ANGLE(temp_angle))
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <main+0x274>)
 8002686:	2200      	movs	r2, #0
 8002688:	5e9b      	ldrsh	r3, [r3, r2]
 800268a:	33b3      	adds	r3, #179	; 0xb3
 800268c:	db05      	blt.n	800269a <main+0x216>
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <main+0x274>)
 8002690:	2200      	movs	r2, #0
 8002692:	5e9b      	ldrsh	r3, [r3, r2]
 8002694:	2bb3      	cmp	r3, #179	; 0xb3
 8002696:	dc00      	bgt.n	800269a <main+0x216>
 8002698:	e739      	b.n	800250e <main+0x8a>
      {
	     reinitalize_aoa_UART();
 800269a:	f7ff fed7 	bl	800244c <reinitalize_aoa_UART>
	  HCSR04_Read();
 800269e:	e736      	b.n	800250e <main+0x8a>
 80026a0:	20000038 	.word	0x20000038
 80026a4:	20000084 	.word	0x20000084
 80026a8:	2000011c 	.word	0x2000011c
 80026ac:	20000168 	.word	0x20000168
 80026b0:	200000d0 	.word	0x200000d0
 80026b4:	2000039c 	.word	0x2000039c
 80026b8:	200001b4 	.word	0x200001b4
 80026bc:	2000000e 	.word	0x2000000e
 80026c0:	20000004 	.word	0x20000004
 80026c4:	20000006 	.word	0x20000006
 80026c8:	20000008 	.word	0x20000008
 80026cc:	2000000a 	.word	0x2000000a
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000002 	.word	0x20000002
 80026dc:	20000394 	.word	0x20000394
 80026e0:	20000395 	.word	0x20000395
 80026e4:	20000396 	.word	0x20000396
 80026e8:	20000001 	.word	0x20000001
 80026ec:	20000397 	.word	0x20000397
 80026f0:	200003a0 	.word	0x200003a0
 80026f4:	2000039e 	.word	0x2000039e
 80026f8:	20000398 	.word	0x20000398

080026fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026fc:	b590      	push	{r4, r7, lr}
 80026fe:	b093      	sub	sp, #76	; 0x4c
 8002700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002702:	2410      	movs	r4, #16
 8002704:	193b      	adds	r3, r7, r4
 8002706:	0018      	movs	r0, r3
 8002708:	2338      	movs	r3, #56	; 0x38
 800270a:	001a      	movs	r2, r3
 800270c:	2100      	movs	r1, #0
 800270e:	f006 f8ef 	bl	80088f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002712:	003b      	movs	r3, r7
 8002714:	0018      	movs	r0, r3
 8002716:	2310      	movs	r3, #16
 8002718:	001a      	movs	r2, r3
 800271a:	2100      	movs	r1, #0
 800271c:	f006 f8e8 	bl	80088f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	0018      	movs	r0, r3
 8002726:	f001 fdd7 	bl	80042d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002730:	193b      	adds	r3, r7, r4
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	0052      	lsls	r2, r2, #1
 8002736:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800273e:	193b      	adds	r3, r7, r4
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002744:	193b      	adds	r3, r7, r4
 8002746:	2200      	movs	r2, #0
 8002748:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274a:	193b      	adds	r3, r7, r4
 800274c:	0018      	movs	r0, r3
 800274e:	f001 fe0f 	bl	8004370 <HAL_RCC_OscConfig>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002756:	f000 fb35 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800275a:	003b      	movs	r3, r7
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002760:	003b      	movs	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002766:	003b      	movs	r3, r7
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800276c:	003b      	movs	r3, r7
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002772:	003b      	movs	r3, r7
 8002774:	2100      	movs	r1, #0
 8002776:	0018      	movs	r0, r3
 8002778:	f002 f914 	bl	80049a4 <HAL_RCC_ClockConfig>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002780:	f000 fb20 	bl	8002dc4 <Error_Handler>
  }
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b013      	add	sp, #76	; 0x4c
 800278a:	bd90      	pop	{r4, r7, pc}

0800278c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002792:	2314      	movs	r3, #20
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	0018      	movs	r0, r3
 8002798:	230c      	movs	r3, #12
 800279a:	001a      	movs	r2, r3
 800279c:	2100      	movs	r1, #0
 800279e:	f006 f8a7 	bl	80088f0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	0018      	movs	r0, r3
 80027a6:	2310      	movs	r3, #16
 80027a8:	001a      	movs	r2, r3
 80027aa:	2100      	movs	r1, #0
 80027ac:	f006 f8a0 	bl	80088f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <MX_TIM1_Init+0xc0>)
 80027b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027b8:	220f      	movs	r2, #15
 80027ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <MX_TIM1_Init+0xc4>)
 80027c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c8:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <MX_TIM1_Init+0xbc>)
 80027dc:	0018      	movs	r0, r3
 80027de:	f002 fd9b 	bl	8005318 <HAL_TIM_IC_Init>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80027e6:	f000 faed 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ea:	2114      	movs	r1, #20
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027fe:	187a      	adds	r2, r7, r1
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_TIM1_Init+0xbc>)
 8002802:	0011      	movs	r1, r2
 8002804:	0018      	movs	r0, r3
 8002806:	f003 ffff 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 800280e:	f000 fad9 	bl	8002dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2201      	movs	r2, #1
 800281c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800282a:	1d39      	adds	r1, r7, #4
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <MX_TIM1_Init+0xbc>)
 800282e:	2200      	movs	r2, #0
 8002830:	0018      	movs	r0, r3
 8002832:	f003 f82b 	bl	800588c <HAL_TIM_IC_ConfigChannel>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800283a:	f000 fac3 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b008      	add	sp, #32
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000038 	.word	0x20000038
 800284c:	40012c00 	.word	0x40012c00
 8002850:	0000ffff 	.word	0x0000ffff

08002854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285a:	2314      	movs	r3, #20
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	0018      	movs	r0, r3
 8002860:	230c      	movs	r3, #12
 8002862:	001a      	movs	r2, r3
 8002864:	2100      	movs	r1, #0
 8002866:	f006 f843 	bl	80088f0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	0018      	movs	r0, r3
 800286e:	2310      	movs	r3, #16
 8002870:	001a      	movs	r2, r3
 8002872:	2100      	movs	r1, #0
 8002874:	f006 f83c 	bl	80088f0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <MX_TIM2_Init+0xc4>)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	05d2      	lsls	r2, r2, #23
 800287e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8002880:	4b25      	ldr	r3, [pc, #148]	; (8002918 <MX_TIM2_Init+0xc4>)
 8002882:	220f      	movs	r2, #15
 8002884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <MX_TIM2_Init+0xc4>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800288c:	4b22      	ldr	r3, [pc, #136]	; (8002918 <MX_TIM2_Init+0xc4>)
 800288e:	4a23      	ldr	r2, [pc, #140]	; (800291c <MX_TIM2_Init+0xc8>)
 8002890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <MX_TIM2_Init+0xc4>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002898:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <MX_TIM2_Init+0xc4>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800289e:	4b1e      	ldr	r3, [pc, #120]	; (8002918 <MX_TIM2_Init+0xc4>)
 80028a0:	0018      	movs	r0, r3
 80028a2:	f002 fd39 	bl	8005318 <HAL_TIM_IC_Init>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80028aa:	f000 fa8b 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ae:	2114      	movs	r1, #20
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028bc:	187a      	adds	r2, r7, r1
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <MX_TIM2_Init+0xc4>)
 80028c0:	0011      	movs	r1, r2
 80028c2:	0018      	movs	r0, r3
 80028c4:	f003 ffa0 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	1e03      	subs	r3, r0, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80028cc:	f000 fa7a 	bl	8002dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2201      	movs	r2, #1
 80028da:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028e8:	1d39      	adds	r1, r7, #4
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <MX_TIM2_Init+0xc4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	0018      	movs	r0, r3
 80028f0:	f002 ffcc 	bl	800588c <HAL_TIM_IC_ConfigChannel>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80028f8:	f000 fa64 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028fc:	1d39      	adds	r1, r7, #4
 80028fe:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_TIM2_Init+0xc4>)
 8002900:	2204      	movs	r2, #4
 8002902:	0018      	movs	r0, r3
 8002904:	f002 ffc2 	bl	800588c <HAL_TIM_IC_ConfigChannel>
 8002908:	1e03      	subs	r3, r0, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800290c:	f000 fa5a 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b008      	add	sp, #32
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000084 	.word	0x20000084
 800291c:	0000ffff 	.word	0x0000ffff

08002920 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08e      	sub	sp, #56	; 0x38
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002926:	2328      	movs	r3, #40	; 0x28
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	0018      	movs	r0, r3
 800292c:	2310      	movs	r3, #16
 800292e:	001a      	movs	r2, r3
 8002930:	2100      	movs	r1, #0
 8002932:	f005 ffdd 	bl	80088f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002936:	231c      	movs	r3, #28
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	0018      	movs	r0, r3
 800293c:	230c      	movs	r3, #12
 800293e:	001a      	movs	r2, r3
 8002940:	2100      	movs	r1, #0
 8002942:	f005 ffd5 	bl	80088f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002946:	003b      	movs	r3, r7
 8002948:	0018      	movs	r0, r3
 800294a:	231c      	movs	r3, #28
 800294c:	001a      	movs	r2, r3
 800294e:	2100      	movs	r1, #0
 8002950:	f005 ffce 	bl	80088f0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002956:	4a35      	ldr	r2, [pc, #212]	; (8002a2c <MX_TIM3_Init+0x10c>)
 8002958:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 32;
 800295a:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <MX_TIM3_Init+0x108>)
 800295c:	2220      	movs	r2, #32
 800295e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002960:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002966:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002968:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <MX_TIM3_Init+0x110>)
 800296a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800296c:	4b2e      	ldr	r3, [pc, #184]	; (8002a28 <MX_TIM3_Init+0x108>)
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <MX_TIM3_Init+0x108>)
 800297a:	0018      	movs	r0, r3
 800297c:	f002 fb36 	bl	8004fec <HAL_TIM_Base_Init>
 8002980:	1e03      	subs	r3, r0, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002984:	f000 fa1e 	bl	8002dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002988:	2128      	movs	r1, #40	; 0x28
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2280      	movs	r2, #128	; 0x80
 800298e:	0152      	lsls	r2, r2, #5
 8002990:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002992:	187a      	adds	r2, r7, r1
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002996:	0011      	movs	r1, r2
 8002998:	0018      	movs	r0, r3
 800299a:	f003 f91b 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80029a2:	f000 fa0f 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <MX_TIM3_Init+0x108>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f002 fb77 	bl	800509c <HAL_TIM_PWM_Init>
 80029ae:	1e03      	subs	r3, r0, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80029b2:	f000 fa07 	bl	8002dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b6:	211c      	movs	r1, #28
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029c4:	187a      	adds	r2, r7, r1
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <MX_TIM3_Init+0x108>)
 80029c8:	0011      	movs	r1, r2
 80029ca:	0018      	movs	r0, r3
 80029cc:	f003 ff1c 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 80029d0:	1e03      	subs	r3, r0, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80029d4:	f000 f9f6 	bl	8002dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029d8:	003b      	movs	r3, r7
 80029da:	2260      	movs	r2, #96	; 0x60
 80029dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80029de:	003b      	movs	r3, r7
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e4:	003b      	movs	r3, r7
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ea:	003b      	movs	r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029f0:	0039      	movs	r1, r7
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <MX_TIM3_Init+0x108>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	0018      	movs	r0, r3
 80029f8:	f002 ffec 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8002a00:	f000 f9e0 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a04:	0039      	movs	r1, r7
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002a08:	2204      	movs	r2, #4
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f002 ffe2 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8002a14:	f000 f9d6 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <MX_TIM3_Init+0x108>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fb4e 	bl	80030bc <HAL_TIM_MspPostInit>

}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b00e      	add	sp, #56	; 0x38
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200000d0 	.word	0x200000d0
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	0000270f 	.word	0x0000270f

08002a34 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	2310      	movs	r3, #16
 8002a40:	001a      	movs	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	f005 ff54 	bl	80088f0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <MX_TIM14_Init+0x90>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a50:	220f      	movs	r2, #15
 8002a52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <MX_TIM14_Init+0x94>)
 8002a5e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f002 fabc 	bl	8004fec <HAL_TIM_Base_Init>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002a78:	f000 f9a4 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f002 fc4a 	bl	8005318 <HAL_TIM_IC_Init>
 8002a84:	1e03      	subs	r3, r0, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002a88:	f000 f99c 	bl	8002dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a8c:	003b      	movs	r3, r7
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a92:	003b      	movs	r3, r7
 8002a94:	2201      	movs	r2, #1
 8002a96:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a98:	003b      	movs	r3, r7
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002a9e:	003b      	movs	r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002aa4:	0039      	movs	r1, r7
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <MX_TIM14_Init+0x8c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f002 feee 	bl	800588c <HAL_TIM_IC_ConfigChannel>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002ab4:	f000 f986 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b004      	add	sp, #16
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	2000011c 	.word	0x2000011c
 8002ac4:	40002000 	.word	0x40002000
 8002ac8:	0000ffff 	.word	0x0000ffff

08002acc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ad2:	003b      	movs	r3, r7
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	001a      	movs	r2, r3
 8002ada:	2100      	movs	r1, #0
 8002adc:	f005 ff08 	bl	80088f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002ae0:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002ae2:	4a20      	ldr	r2, [pc, #128]	; (8002b64 <MX_TIM17_Init+0x98>)
 8002ae4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 16-1;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002ae8:	220f      	movs	r2, #15
 8002aea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <MX_TIM17_Init+0x9c>)
 8002af6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f002 fa6d 	bl	8004fec <HAL_TIM_Base_Init>
 8002b12:	1e03      	subs	r3, r0, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8002b16:	f000 f955 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f002 fbfb 	bl	8005318 <HAL_TIM_IC_Init>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002b26:	f000 f94d 	bl	8002dc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b2a:	003b      	movs	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2201      	movs	r2, #1
 8002b34:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b36:	003b      	movs	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b42:	0039      	movs	r1, r7
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_TIM17_Init+0x94>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f002 fe9f 	bl	800588c <HAL_TIM_IC_ConfigChannel>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM17_Init+0x8a>
  {
    Error_Handler();
 8002b52:	f000 f937 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	20000168 	.word	0x20000168
 8002b64:	40014800 	.word	0x40014800
 8002b68:	0000ffff 	.word	0x0000ffff

08002b6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b72:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <MX_USART1_UART_Init+0x98>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b76:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b78:	22e1      	movs	r2, #225	; 0xe1
 8002b7a:	0252      	lsls	r2, r2, #9
 8002b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ba8:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bae:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f003 fea6 	bl	8006908 <HAL_UART_Init>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002bc0:	f000 f900 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f005 fd8d 	bl	80086e8 <HAL_UARTEx_SetTxFifoThreshold>
 8002bce:	1e03      	subs	r3, r0, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bd2:	f000 f8f7 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f005 fdc4 	bl	8008768 <HAL_UARTEx_SetRxFifoThreshold>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d001      	beq.n	8002be8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002be4:	f000 f8ee 	bl	8002dc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <MX_USART1_UART_Init+0x94>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f005 fd42 	bl	8008674 <HAL_UARTEx_DisableFifoMode>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bf4:	f000 f8e6 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bf8:	46c0      	nop			; (mov r8, r8)
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	200001b4 	.word	0x200001b4
 8002c04:	40013800 	.word	0x40013800

08002c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <MX_USART2_UART_Init+0x64>)
 8002c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c14:	22e1      	movs	r2, #225	; 0xe1
 8002c16:	0252      	lsls	r2, r2, #9
 8002c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c2e:	220c      	movs	r2, #12
 8002c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <MX_USART2_UART_Init+0x60>)
 8002c52:	0018      	movs	r0, r3
 8002c54:	f003 fe58 	bl	8006908 <HAL_UART_Init>
 8002c58:	1e03      	subs	r3, r0, #0
 8002c5a:	d001      	beq.n	8002c60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c5c:	f000 f8b2 	bl	8002dc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	20000248 	.word	0x20000248
 8002c6c:	40004400 	.word	0x40004400

08002c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <MX_DMA_Init+0x48>)
 8002c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <MX_DMA_Init+0x48>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	639a      	str	r2, [r3, #56]	; 0x38
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <MX_DMA_Init+0x48>)
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2009      	movs	r0, #9
 8002c94:	f000 fdbc 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c98:	2009      	movs	r0, #9
 8002c9a:	f000 fdce 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	200a      	movs	r0, #10
 8002ca4:	f000 fdb4 	bl	8003810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002ca8:	200a      	movs	r0, #10
 8002caa:	f000 fdc6 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b002      	add	sp, #8
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	40021000 	.word	0x40021000

08002cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc2:	240c      	movs	r4, #12
 8002cc4:	193b      	adds	r3, r7, r4
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	2314      	movs	r3, #20
 8002cca:	001a      	movs	r2, r3
 8002ccc:	2100      	movs	r1, #0
 8002cce:	f005 fe0f 	bl	80088f0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002cd8:	2102      	movs	r1, #2
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	4b34      	ldr	r3, [pc, #208]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002cf0:	2104      	movs	r1, #4
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <MX_GPIO_Init+0x100>)
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	2201      	movs	r2, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	4828      	ldr	r0, [pc, #160]	; (8002dc0 <MX_GPIO_Init+0x104>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	0019      	movs	r1, r3
 8002d24:	f001 faba 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8002d28:	23a0      	movs	r3, #160	; 0xa0
 8002d2a:	05db      	lsls	r3, r3, #23
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2120      	movs	r1, #32
 8002d30:	0018      	movs	r0, r3
 8002d32:	f001 fab3 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	2280      	movs	r2, #128	; 0x80
 8002d3a:	0212      	lsls	r2, r2, #8
 8002d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2201      	movs	r2, #1
 8002d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <MX_GPIO_Init+0x104>)
 8002d54:	0019      	movs	r1, r3
 8002d56:	0010      	movs	r0, r2
 8002d58:	f001 f86c 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8002d5c:	193b      	adds	r3, r7, r4
 8002d5e:	2220      	movs	r2, #32
 8002d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2201      	movs	r2, #1
 8002d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8002d74:	193a      	adds	r2, r7, r4
 8002d76:	23a0      	movs	r3, #160	; 0xa0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f001 f859 	bl	8003e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SCL_Pin PA12 */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin|GPIO_PIN_12;
 8002d82:	0021      	movs	r1, r4
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	22c0      	movs	r2, #192	; 0xc0
 8002d88:	0152      	lsls	r2, r2, #5
 8002d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2212      	movs	r2, #18
 8002d90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2206      	movs	r2, #6
 8002da2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da4:	187a      	adds	r2, r7, r1
 8002da6:	23a0      	movs	r3, #160	; 0xa0
 8002da8:	05db      	lsls	r3, r3, #23
 8002daa:	0011      	movs	r1, r2
 8002dac:	0018      	movs	r0, r3
 8002dae:	f001 f841 	bl	8003e34 <HAL_GPIO_Init>

}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b009      	add	sp, #36	; 0x24
 8002db8:	bd90      	pop	{r4, r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	50000800 	.word	0x50000800

08002dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <Error_Handler+0x8>
	...

08002dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <HAL_MspInit+0x44>)
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_MspInit+0x44>)
 8002ddc:	2101      	movs	r1, #1
 8002dde:	430a      	orrs	r2, r1
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
 8002de2:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <HAL_MspInit+0x44>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2201      	movs	r2, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <HAL_MspInit+0x44>)
 8002df0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df2:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <HAL_MspInit+0x44>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0549      	lsls	r1, r1, #21
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_MspInit+0x44>)
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	055b      	lsls	r3, r3, #21
 8002e04:	4013      	ands	r3, r2
 8002e06:	603b      	str	r3, [r7, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	40021000 	.word	0x40021000

08002e18 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b097      	sub	sp, #92	; 0x5c
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	2344      	movs	r3, #68	; 0x44
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	0018      	movs	r0, r3
 8002e26:	2314      	movs	r3, #20
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	f005 fd60 	bl	80088f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e30:	241c      	movs	r4, #28
 8002e32:	193b      	adds	r3, r7, r4
 8002e34:	0018      	movs	r0, r3
 8002e36:	2328      	movs	r3, #40	; 0x28
 8002e38:	001a      	movs	r2, r3
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	f005 fd58 	bl	80088f0 <memset>
  if(htim_ic->Instance==TIM1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_TIM_IC_MspInit+0x148>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d149      	bne.n	8002ede <HAL_TIM_IC_MspInit+0xc6>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2280      	movs	r2, #128	; 0x80
 8002e4e:	0392      	lsls	r2, r2, #14
 8002e50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002e52:	193b      	adds	r3, r7, r4
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f001 ff4c 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_IC_MspInit+0x50>
    {
      Error_Handler();
 8002e64:	f7ff ffae 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e68:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e6c:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	0109      	lsls	r1, r1, #4
 8002e72:	430a      	orrs	r2, r1
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e88:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e90:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_Pin;
 8002e9c:	2144      	movs	r1, #68	; 0x44
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2280      	movs	r2, #128	; 0x80
 8002ea2:	0052      	lsls	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	187b      	adds	r3, r7, r1
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	2202      	movs	r2, #2
 8002ebc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM1_CH1_GPIO_Port, &GPIO_InitStruct);
 8002ebe:	187a      	adds	r2, r7, r1
 8002ec0:	23a0      	movs	r3, #160	; 0xa0
 8002ec2:	05db      	lsls	r3, r3, #23
 8002ec4:	0011      	movs	r1, r2
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 ffb4 	bl	8003e34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	200e      	movs	r0, #14
 8002ed2:	f000 fc9d 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ed6:	200e      	movs	r0, #14
 8002ed8:	f000 fcaf 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002edc:	e03c      	b.n	8002f58 <HAL_TIM_IC_MspInit+0x140>
  else if(htim_ic->Instance==TIM2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d136      	bne.n	8002f58 <HAL_TIM_IC_MspInit+0x140>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef6:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	2201      	movs	r2, #1
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002f08:	2101      	movs	r1, #1
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_TIM_IC_MspInit+0x14c>)
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	2201      	movs	r2, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM2_CH1_Pin|TIM2_CH2_Pin;
 8002f1a:	2144      	movs	r1, #68	; 0x44
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2202      	movs	r2, #2
 8002f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2202      	movs	r2, #2
 8002f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	187a      	adds	r2, r7, r1
 8002f3c:	23a0      	movs	r3, #160	; 0xa0
 8002f3e:	05db      	lsls	r3, r3, #23
 8002f40:	0011      	movs	r1, r2
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 ff76 	bl	8003e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	200f      	movs	r0, #15
 8002f4e:	f000 fc5f 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f52:	200f      	movs	r0, #15
 8002f54:	f000 fc71 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b017      	add	sp, #92	; 0x5c
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08c      	sub	sp, #48	; 0x30
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	231c      	movs	r3, #28
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	0018      	movs	r0, r3
 8002f76:	2314      	movs	r3, #20
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f005 fcb8 	bl	80088f0 <memset>
  if(htim_base->Instance==TIM3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a48      	ldr	r2, [pc, #288]	; (80030a8 <HAL_TIM_Base_MspInit+0x140>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10c      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f8a:	4b48      	ldr	r3, [pc, #288]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8e:	4b47      	ldr	r3, [pc, #284]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002f90:	2102      	movs	r1, #2
 8002f92:	430a      	orrs	r2, r1
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f96:	4b45      	ldr	r3, [pc, #276]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002fa2:	e07c      	b.n	800309e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM14)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a41      	ldr	r2, [pc, #260]	; (80030b0 <HAL_TIM_Base_MspInit+0x148>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d139      	bne.n	8003022 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002fae:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	0209      	lsls	r1, r1, #8
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	4b38      	ldr	r3, [pc, #224]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd6:	4b35      	ldr	r3, [pc, #212]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM14_CH1_Pin;
 8002fe2:	211c      	movs	r1, #28
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	187b      	adds	r3, r7, r1
 8002fec:	2202      	movs	r2, #2
 8002fee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	2204      	movs	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM14_CH1_GPIO_Port, &GPIO_InitStruct);
 8003002:	187a      	adds	r2, r7, r1
 8003004:	23a0      	movs	r3, #160	; 0xa0
 8003006:	05db      	lsls	r3, r3, #23
 8003008:	0011      	movs	r1, r2
 800300a:	0018      	movs	r0, r3
 800300c:	f000 ff12 	bl	8003e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	2013      	movs	r0, #19
 8003016:	f000 fbfb 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800301a:	2013      	movs	r0, #19
 800301c:	f000 fc0d 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 8003020:	e03d      	b.n	800309e <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM17)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_TIM_Base_MspInit+0x14c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d138      	bne.n	800309e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800302c:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 800302e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	02c9      	lsls	r1, r1, #11
 8003036:	430a      	orrs	r2, r1
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
 800303a:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	02db      	lsls	r3, r3, #11
 8003042:	4013      	ands	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 800304a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 800304e:	2102      	movs	r1, #2
 8003050:	430a      	orrs	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
 8003054:	4b15      	ldr	r3, [pc, #84]	; (80030ac <HAL_TIM_Base_MspInit+0x144>)
 8003056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003058:	2202      	movs	r2, #2
 800305a:	4013      	ands	r3, r2
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM17_CH1_Pin;
 8003060:	211c      	movs	r1, #28
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2202      	movs	r2, #2
 800306e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003070:	187b      	adds	r3, r7, r1
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	187b      	adds	r3, r7, r1
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800307c:	187b      	adds	r3, r7, r1
 800307e:	2202      	movs	r2, #2
 8003080:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM17_CH1_GPIO_Port, &GPIO_InitStruct);
 8003082:	187b      	adds	r3, r7, r1
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_TIM_Base_MspInit+0x150>)
 8003086:	0019      	movs	r1, r3
 8003088:	0010      	movs	r0, r2
 800308a:	f000 fed3 	bl	8003e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	2100      	movs	r1, #0
 8003092:	2016      	movs	r0, #22
 8003094:	f000 fbbc 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003098:	2016      	movs	r0, #22
 800309a:	f000 fbce 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b00c      	add	sp, #48	; 0x30
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40002000 	.word	0x40002000
 80030b4:	40014800 	.word	0x40014800
 80030b8:	50000400 	.word	0x50000400

080030bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	240c      	movs	r4, #12
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	0018      	movs	r0, r3
 80030ca:	2314      	movs	r3, #20
 80030cc:	001a      	movs	r2, r3
 80030ce:	2100      	movs	r1, #0
 80030d0:	f005 fc0e 	bl	80088f0 <memset>
  if(htim->Instance==TIM3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <HAL_TIM_MspPostInit+0x70>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d122      	bne.n	8003124 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <HAL_TIM_MspPostInit+0x74>)
 80030e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e2:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_TIM_MspPostInit+0x74>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	430a      	orrs	r2, r1
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_TIM_MspPostInit+0x74>)
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Pin|TIM3_CH2_Pin;
 80030f6:	0021      	movs	r1, r4
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	22c0      	movs	r2, #192	; 0xc0
 80030fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2202      	movs	r2, #2
 8003102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	187b      	adds	r3, r7, r1
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2201      	movs	r2, #1
 8003114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	187a      	adds	r2, r7, r1
 8003118:	23a0      	movs	r3, #160	; 0xa0
 800311a:	05db      	lsls	r3, r3, #23
 800311c:	0011      	movs	r1, r2
 800311e:	0018      	movs	r0, r3
 8003120:	f000 fe88 	bl	8003e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b009      	add	sp, #36	; 0x24
 800312a:	bd90      	pop	{r4, r7, pc}
 800312c:	40000400 	.word	0x40000400
 8003130:	40021000 	.word	0x40021000

08003134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b097      	sub	sp, #92	; 0x5c
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	2344      	movs	r3, #68	; 0x44
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	0018      	movs	r0, r3
 8003142:	2314      	movs	r3, #20
 8003144:	001a      	movs	r2, r3
 8003146:	2100      	movs	r1, #0
 8003148:	f005 fbd2 	bl	80088f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800314c:	241c      	movs	r4, #28
 800314e:	193b      	adds	r3, r7, r4
 8003150:	0018      	movs	r0, r3
 8003152:	2328      	movs	r3, #40	; 0x28
 8003154:	001a      	movs	r2, r3
 8003156:	2100      	movs	r1, #0
 8003158:	f005 fbca 	bl	80088f0 <memset>
  if(huart->Instance==USART1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a6f      	ldr	r2, [pc, #444]	; (8003320 <HAL_UART_MspInit+0x1ec>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d170      	bne.n	8003248 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800316c:	193b      	adds	r3, r7, r4
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003172:	193b      	adds	r3, r7, r4
 8003174:	0018      	movs	r0, r3
 8003176:	f001 fdbf 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800317e:	f7ff fe21 	bl	8002dc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003186:	4b67      	ldr	r3, [pc, #412]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	01c9      	lsls	r1, r1, #7
 800318c:	430a      	orrs	r2, r1
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	01db      	lsls	r3, r3, #7
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 80031a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 80031a4:	2102      	movs	r1, #2
 80031a6:	430a      	orrs	r2, r1
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	2202      	movs	r2, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80031b6:	2144      	movs	r1, #68	; 0x44
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	22c0      	movs	r2, #192	; 0xc0
 80031bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	2202      	movs	r2, #2
 80031c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2200      	movs	r2, #0
 80031ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	4a53      	ldr	r2, [pc, #332]	; (8003328 <HAL_UART_MspInit+0x1f4>)
 80031da:	0019      	movs	r1, r3
 80031dc:	0010      	movs	r0, r2
 80031de:	f000 fe29 	bl	8003e34 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80031e2:	4b52      	ldr	r3, [pc, #328]	; (800332c <HAL_UART_MspInit+0x1f8>)
 80031e4:	4a52      	ldr	r2, [pc, #328]	; (8003330 <HAL_UART_MspInit+0x1fc>)
 80031e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031e8:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_UART_MspInit+0x1f8>)
 80031ea:	2232      	movs	r2, #50	; 0x32
 80031ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ee:	4b4f      	ldr	r3, [pc, #316]	; (800332c <HAL_UART_MspInit+0x1f8>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f4:	4b4d      	ldr	r3, [pc, #308]	; (800332c <HAL_UART_MspInit+0x1f8>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fa:	4b4c      	ldr	r3, [pc, #304]	; (800332c <HAL_UART_MspInit+0x1f8>)
 80031fc:	2280      	movs	r2, #128	; 0x80
 80031fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003200:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_UART_MspInit+0x1f8>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	4b49      	ldr	r3, [pc, #292]	; (800332c <HAL_UART_MspInit+0x1f8>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800320c:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_UART_MspInit+0x1f8>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003212:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_UART_MspInit+0x1f8>)
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003218:	4b44      	ldr	r3, [pc, #272]	; (800332c <HAL_UART_MspInit+0x1f8>)
 800321a:	0018      	movs	r0, r3
 800321c:	f000 fb3a 	bl	8003894 <HAL_DMA_Init>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8003224:	f7ff fdce 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	4a3f      	ldr	r2, [pc, #252]	; (800332c <HAL_UART_MspInit+0x1f8>)
 800322e:	505a      	str	r2, [r3, r1]
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_UART_MspInit+0x1f8>)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	2100      	movs	r1, #0
 800323a:	201b      	movs	r0, #27
 800323c:	f000 fae8 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003240:	201b      	movs	r0, #27
 8003242:	f000 fafa 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003246:	e067      	b.n	8003318 <HAL_UART_MspInit+0x1e4>
  else if(huart->Instance==USART2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a39      	ldr	r2, [pc, #228]	; (8003334 <HAL_UART_MspInit+0x200>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d162      	bne.n	8003318 <HAL_UART_MspInit+0x1e4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	0289      	lsls	r1, r1, #10
 800325c:	430a      	orrs	r2, r1
 800325e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	029b      	lsls	r3, r3, #10
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003272:	4b2c      	ldr	r3, [pc, #176]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 8003274:	2101      	movs	r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_UART_MspInit+0x1f0>)
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003286:	2144      	movs	r1, #68	; 0x44
 8003288:	187b      	adds	r3, r7, r1
 800328a:	220c      	movs	r2, #12
 800328c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2202      	movs	r2, #2
 8003292:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	187b      	adds	r3, r7, r1
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2200      	movs	r2, #0
 800329e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	2201      	movs	r2, #1
 80032a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	187a      	adds	r2, r7, r1
 80032a8:	23a0      	movs	r3, #160	; 0xa0
 80032aa:	05db      	lsls	r3, r3, #23
 80032ac:	0011      	movs	r1, r2
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 fdc0 	bl	8003e34 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032b6:	4a21      	ldr	r2, [pc, #132]	; (800333c <HAL_UART_MspInit+0x208>)
 80032b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032bc:	2234      	movs	r2, #52	; 0x34
 80032be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032d2:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032d8:	4b17      	ldr	r3, [pc, #92]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032da:	2200      	movs	r2, #0
 80032dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_UART_MspInit+0x204>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 fad1 	bl	8003894 <HAL_DMA_Init>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 80032f6:	f7ff fd65 	bl	8002dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <HAL_UART_MspInit+0x204>)
 8003300:	505a      	str	r2, [r3, r1]
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_UART_MspInit+0x204>)
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2100      	movs	r1, #0
 800330c:	201c      	movs	r0, #28
 800330e:	f000 fa7f 	bl	8003810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003312:	201c      	movs	r0, #28
 8003314:	f000 fa91 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b017      	add	sp, #92	; 0x5c
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	40013800 	.word	0x40013800
 8003324:	40021000 	.word	0x40021000
 8003328:	50000400 	.word	0x50000400
 800332c:	200002dc 	.word	0x200002dc
 8003330:	40020008 	.word	0x40020008
 8003334:	40004400 	.word	0x40004400
 8003338:	20000338 	.word	0x20000338
 800333c:	4002001c 	.word	0x4002001c

08003340 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_UART_MspDeInit+0x78>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d114      	bne.n	800337c <HAL_UART_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <HAL_UART_MspDeInit+0x7c>)
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_UART_MspDeInit+0x7c>)
 8003358:	4919      	ldr	r1, [pc, #100]	; (80033c0 <HAL_UART_MspDeInit+0x80>)
 800335a:	400a      	ands	r2, r1
 800335c:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_UART_MspDeInit+0x84>)
 8003360:	21c0      	movs	r1, #192	; 0xc0
 8003362:	0018      	movs	r0, r3
 8003364:	f000 feca 	bl	80040fc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	589b      	ldr	r3, [r3, r2]
 800336e:	0018      	movs	r0, r3
 8003370:	f000 fb1a 	bl	80039a8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003374:	201b      	movs	r0, #27
 8003376:	f000 fa70 	bl	800385a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800337a:	e019      	b.n	80033b0 <HAL_UART_MspDeInit+0x70>
  else if(huart->Instance==USART2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_UART_MspDeInit+0x88>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d114      	bne.n	80033b0 <HAL_UART_MspDeInit+0x70>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_UART_MspDeInit+0x7c>)
 8003388:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_UART_MspDeInit+0x7c>)
 800338c:	490f      	ldr	r1, [pc, #60]	; (80033cc <HAL_UART_MspDeInit+0x8c>)
 800338e:	400a      	ands	r2, r1
 8003390:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003392:	23a0      	movs	r3, #160	; 0xa0
 8003394:	05db      	lsls	r3, r3, #23
 8003396:	210c      	movs	r1, #12
 8003398:	0018      	movs	r0, r3
 800339a:	f000 feaf 	bl	80040fc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	589b      	ldr	r3, [r3, r2]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 faff 	bl	80039a8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80033aa:	201c      	movs	r0, #28
 80033ac:	f000 fa55 	bl	800385a <HAL_NVIC_DisableIRQ>
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40013800 	.word	0x40013800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	ffffbfff 	.word	0xffffbfff
 80033c4:	50000400 	.word	0x50000400
 80033c8:	40004400 	.word	0x40004400
 80033cc:	fffdffff 	.word	0xfffdffff

080033d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <NMI_Handler+0x4>

080033d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033da:	e7fe      	b.n	80033da <HardFault_Handler+0x4>

080033dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f4:	f000 f8fe 	bl	80035f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003404:	4b03      	ldr	r3, [pc, #12]	; (8003414 <DMA1_Channel1_IRQHandler+0x14>)
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fc12 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800340c:	46c0      	nop			; (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	200002dc 	.word	0x200002dc

08003418 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <DMA1_Channel2_3_IRQHandler+0x14>)
 800341e:	0018      	movs	r0, r3
 8003420:	f000 fc06 	bl	8003c30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	20000338 	.word	0x20000338

08003430 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <TIM1_CC_IRQHandler+0x14>)
 8003436:	0018      	movs	r0, r3
 8003438:	f002 f8f6 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	20000038 	.word	0x20000038

08003448 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <TIM2_IRQHandler+0x14>)
 800344e:	0018      	movs	r0, r3
 8003450:	f002 f8ea 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	20000084 	.word	0x20000084

08003460 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <TIM14_IRQHandler+0x14>)
 8003466:	0018      	movs	r0, r3
 8003468:	f002 f8de 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	2000011c 	.word	0x2000011c

08003478 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800347c:	4b03      	ldr	r3, [pc, #12]	; (800348c <TIM17_IRQHandler+0x14>)
 800347e:	0018      	movs	r0, r3
 8003480:	f002 f8d2 	bl	8005628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	20000168 	.word	0x20000168

08003490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <USART1_IRQHandler+0x14>)
 8003496:	0018      	movs	r0, r3
 8003498:	f003 fb2a 	bl	8006af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	200001b4 	.word	0x200001b4

080034a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <USART2_IRQHandler+0x14>)
 80034ae:	0018      	movs	r0, r3
 80034b0:	f003 fb1e 	bl	8006af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	20000248 	.word	0x20000248

080034c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c4:	46c0      	nop			; (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80034d0:	f7ff fff6 	bl	80034c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034d4:	480c      	ldr	r0, [pc, #48]	; (8003508 <LoopForever+0x6>)
  ldr r1, =_edata
 80034d6:	490d      	ldr	r1, [pc, #52]	; (800350c <LoopForever+0xa>)
  ldr r2, =_sidata
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <LoopForever+0xe>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034dc:	e002      	b.n	80034e4 <LoopCopyDataInit>

080034de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e2:	3304      	adds	r3, #4

080034e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e8:	d3f9      	bcc.n	80034de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034ec:	4c0a      	ldr	r4, [pc, #40]	; (8003518 <LoopForever+0x16>)
  movs r3, #0
 80034ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f0:	e001      	b.n	80034f6 <LoopFillZerobss>

080034f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f4:	3204      	adds	r2, #4

080034f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f8:	d3fb      	bcc.n	80034f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034fa:	f005 f9d5 	bl	80088a8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80034fe:	f7fe ffc1 	bl	8002484 <main>

08003502 <LoopForever>:

LoopForever:
  b LoopForever
 8003502:	e7fe      	b.n	8003502 <LoopForever>
  ldr   r0, =_estack
 8003504:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800350c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003510:	08008a84 	.word	0x08008a84
  ldr r2, =_sbss
 8003514:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003518:	200003ec 	.word	0x200003ec

0800351c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800351c:	e7fe      	b.n	800351c <ADC1_IRQHandler>
	...

08003520 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003526:	1dfb      	adds	r3, r7, #7
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_Init+0x3c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <HAL_Init+0x3c>)
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	0049      	lsls	r1, r1, #1
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800353a:	2003      	movs	r0, #3
 800353c:	f000 f810 	bl	8003560 <HAL_InitTick>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d003      	beq.n	800354c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003544:	1dfb      	adds	r3, r7, #7
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e001      	b.n	8003550 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800354c:	f7ff fc40 	bl	8002dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003550:	1dfb      	adds	r3, r7, #7
 8003552:	781b      	ldrb	r3, [r3, #0]
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40022000 	.word	0x40022000

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003568:	230f      	movs	r3, #15
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_InitTick+0x88>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02b      	beq.n	80035d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003578:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_InitTick+0x8c>)
 800357a:	681c      	ldr	r4, [r3, #0]
 800357c:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <HAL_InitTick+0x88>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	0019      	movs	r1, r3
 8003582:	23fa      	movs	r3, #250	; 0xfa
 8003584:	0098      	lsls	r0, r3, #2
 8003586:	f7fc fdbd 	bl	8000104 <__udivsi3>
 800358a:	0003      	movs	r3, r0
 800358c:	0019      	movs	r1, r3
 800358e:	0020      	movs	r0, r4
 8003590:	f7fc fdb8 	bl	8000104 <__udivsi3>
 8003594:	0003      	movs	r3, r0
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f96f 	bl	800387a <HAL_SYSTICK_Config>
 800359c:	1e03      	subs	r3, r0, #0
 800359e:	d112      	bne.n	80035c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d80a      	bhi.n	80035bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	2301      	movs	r3, #1
 80035aa:	425b      	negs	r3, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	0018      	movs	r0, r3
 80035b0:	f000 f92e 	bl	8003810 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_InitTick+0x90>)
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e00d      	b.n	80035d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80035bc:	230f      	movs	r3, #15
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e008      	b.n	80035d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035c6:	230f      	movs	r3, #15
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e003      	b.n	80035d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035d0:	230f      	movs	r3, #15
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80035d8:	230f      	movs	r3, #15
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b005      	add	sp, #20
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000018 	.word	0x20000018
 80035ec:	20000010 	.word	0x20000010
 80035f0:	20000014 	.word	0x20000014

080035f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_IncTick+0x1c>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	001a      	movs	r2, r3
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_IncTick+0x20>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	18d2      	adds	r2, r2, r3
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HAL_IncTick+0x20>)
 8003606:	601a      	str	r2, [r3, #0]
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	20000018 	.word	0x20000018
 8003614:	200003e8 	.word	0x200003e8

08003618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  return uwTick;
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_GetTick+0x10>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	0018      	movs	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	200003e8 	.word	0x200003e8

0800362c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff fff0 	bl	8003618 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	d005      	beq.n	8003652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_Delay+0x44>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	001a      	movs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	189b      	adds	r3, r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	f7ff ffe0 	bl	8003618 <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d8f7      	bhi.n	8003654 <HAL_Delay+0x28>
  {
  }
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20000018 	.word	0x20000018

08003674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	0002      	movs	r2, r0
 800367c:	1dfb      	adds	r3, r7, #7
 800367e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b7f      	cmp	r3, #127	; 0x7f
 8003686:	d809      	bhi.n	800369c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003688:	1dfb      	adds	r3, r7, #7
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	001a      	movs	r2, r3
 800368e:	231f      	movs	r3, #31
 8003690:	401a      	ands	r2, r3
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <__NVIC_EnableIRQ+0x30>)
 8003694:	2101      	movs	r1, #1
 8003696:	4091      	lsls	r1, r2
 8003698:	000a      	movs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b002      	add	sp, #8
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	0002      	movs	r2, r0
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	1dfb      	adds	r3, r7, #7
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b7f      	cmp	r3, #127	; 0x7f
 80036ba:	d810      	bhi.n	80036de <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	001a      	movs	r2, r3
 80036c2:	231f      	movs	r3, #31
 80036c4:	4013      	ands	r3, r2
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <__NVIC_DisableIRQ+0x40>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	0013      	movs	r3, r2
 80036ce:	2280      	movs	r2, #128	; 0x80
 80036d0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80036d2:	f3bf 8f4f 	dsb	sy
}
 80036d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80036d8:	f3bf 8f6f 	isb	sy
}
 80036dc:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	e000e100 	.word	0xe000e100

080036ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	0002      	movs	r2, r0
 80036f4:	6039      	str	r1, [r7, #0]
 80036f6:	1dfb      	adds	r3, r7, #7
 80036f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	1dfb      	adds	r3, r7, #7
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003700:	d828      	bhi.n	8003754 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003702:	4a2f      	ldr	r2, [pc, #188]	; (80037c0 <__NVIC_SetPriority+0xd4>)
 8003704:	1dfb      	adds	r3, r7, #7
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b25b      	sxtb	r3, r3
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	33c0      	adds	r3, #192	; 0xc0
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	589b      	ldr	r3, [r3, r2]
 8003712:	1dfa      	adds	r2, r7, #7
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	0011      	movs	r1, r2
 8003718:	2203      	movs	r2, #3
 800371a:	400a      	ands	r2, r1
 800371c:	00d2      	lsls	r2, r2, #3
 800371e:	21ff      	movs	r1, #255	; 0xff
 8003720:	4091      	lsls	r1, r2
 8003722:	000a      	movs	r2, r1
 8003724:	43d2      	mvns	r2, r2
 8003726:	401a      	ands	r2, r3
 8003728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	22ff      	movs	r2, #255	; 0xff
 8003730:	401a      	ands	r2, r3
 8003732:	1dfb      	adds	r3, r7, #7
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	0018      	movs	r0, r3
 8003738:	2303      	movs	r3, #3
 800373a:	4003      	ands	r3, r0
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003740:	481f      	ldr	r0, [pc, #124]	; (80037c0 <__NVIC_SetPriority+0xd4>)
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b25b      	sxtb	r3, r3
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	430a      	orrs	r2, r1
 800374c:	33c0      	adds	r3, #192	; 0xc0
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003752:	e031      	b.n	80037b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003754:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <__NVIC_SetPriority+0xd8>)
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	0019      	movs	r1, r3
 800375c:	230f      	movs	r3, #15
 800375e:	400b      	ands	r3, r1
 8003760:	3b08      	subs	r3, #8
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	3306      	adds	r3, #6
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	3304      	adds	r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1dfa      	adds	r2, r7, #7
 8003770:	7812      	ldrb	r2, [r2, #0]
 8003772:	0011      	movs	r1, r2
 8003774:	2203      	movs	r2, #3
 8003776:	400a      	ands	r2, r1
 8003778:	00d2      	lsls	r2, r2, #3
 800377a:	21ff      	movs	r1, #255	; 0xff
 800377c:	4091      	lsls	r1, r2
 800377e:	000a      	movs	r2, r1
 8003780:	43d2      	mvns	r2, r2
 8003782:	401a      	ands	r2, r3
 8003784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	22ff      	movs	r2, #255	; 0xff
 800378c:	401a      	ands	r2, r3
 800378e:	1dfb      	adds	r3, r7, #7
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	0018      	movs	r0, r3
 8003794:	2303      	movs	r3, #3
 8003796:	4003      	ands	r3, r0
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800379c:	4809      	ldr	r0, [pc, #36]	; (80037c4 <__NVIC_SetPriority+0xd8>)
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	001c      	movs	r4, r3
 80037a4:	230f      	movs	r3, #15
 80037a6:	4023      	ands	r3, r4
 80037a8:	3b08      	subs	r3, #8
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	430a      	orrs	r2, r1
 80037ae:	3306      	adds	r3, #6
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	18c3      	adds	r3, r0, r3
 80037b4:	3304      	adds	r3, #4
 80037b6:	601a      	str	r2, [r3, #0]
}
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b003      	add	sp, #12
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	045b      	lsls	r3, r3, #17
 80037d8:	429a      	cmp	r2, r3
 80037da:	d301      	bcc.n	80037e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037dc:	2301      	movs	r3, #1
 80037de:	e010      	b.n	8003802 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <SysTick_Config+0x44>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	3a01      	subs	r2, #1
 80037e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e8:	2301      	movs	r3, #1
 80037ea:	425b      	negs	r3, r3
 80037ec:	2103      	movs	r1, #3
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7ff ff7c 	bl	80036ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <SysTick_Config+0x44>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <SysTick_Config+0x44>)
 80037fc:	2207      	movs	r2, #7
 80037fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	e000e010 	.word	0xe000e010

08003810 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	210f      	movs	r1, #15
 800381c:	187b      	adds	r3, r7, r1
 800381e:	1c02      	adds	r2, r0, #0
 8003820:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	187b      	adds	r3, r7, r1
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b25b      	sxtb	r3, r3
 800382a:	0011      	movs	r1, r2
 800382c:	0018      	movs	r0, r3
 800382e:	f7ff ff5d 	bl	80036ec <__NVIC_SetPriority>
}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	46bd      	mov	sp, r7
 8003836:	b004      	add	sp, #16
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	0002      	movs	r2, r0
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003846:	1dfb      	adds	r3, r7, #7
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	b25b      	sxtb	r3, r3
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff ff11 	bl	8003674 <__NVIC_EnableIRQ>
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b002      	add	sp, #8
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	0002      	movs	r2, r0
 8003862:	1dfb      	adds	r3, r7, #7
 8003864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003866:	1dfb      	adds	r3, r7, #7
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b25b      	sxtb	r3, r3
 800386c:	0018      	movs	r0, r3
 800386e:	f7ff ff1b 	bl	80036a8 <__NVIC_DisableIRQ>
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f7ff ff9f 	bl	80037c8 <SysTick_Config>
 800388a:	0003      	movs	r3, r0
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e077      	b.n	8003996 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a3d      	ldr	r2, [pc, #244]	; (80039a0 <HAL_DMA_Init+0x10c>)
 80038ac:	4694      	mov	ip, r2
 80038ae:	4463      	add	r3, ip
 80038b0:	2114      	movs	r1, #20
 80038b2:	0018      	movs	r0, r3
 80038b4:	f7fc fc26 	bl	8000104 <__udivsi3>
 80038b8:	0003      	movs	r3, r0
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2225      	movs	r2, #37	; 0x25
 80038c4:	2102      	movs	r1, #2
 80038c6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4934      	ldr	r1, [pc, #208]	; (80039a4 <HAL_DMA_Init+0x110>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 fa3f 	bl	8003d94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	01db      	lsls	r3, r3, #7
 800391e:	429a      	cmp	r2, r3
 8003920:	d102      	bne.n	8003928 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	213f      	movs	r1, #63	; 0x3f
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800393e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d011      	beq.n	800396c <HAL_DMA_Init+0xd8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d80d      	bhi.n	800396c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 fa4a 	bl	8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	e008      	b.n	800397e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2225      	movs	r2, #37	; 0x25
 8003988:	2101      	movs	r1, #1
 800398a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	bffdfff8 	.word	0xbffdfff8
 80039a4:	ffff800f 	.word	0xffff800f

080039a8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e066      	b.n	8003a88 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	438a      	bics	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <HAL_DMA_DeInit+0xe8>)
 80039d0:	4694      	mov	ip, r2
 80039d2:	4463      	add	r3, ip
 80039d4:	2114      	movs	r1, #20
 80039d6:	0018      	movs	r0, r3
 80039d8:	f7fc fb94 	bl	8000104 <__udivsi3>
 80039dc:	0003      	movs	r3, r0
 80039de:	009a      	lsls	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80039ec:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_DMA_DeInit+0xec>)
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f4:	221c      	movs	r2, #28
 80039f6:	4013      	ands	r3, r2
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <HAL_DMA_DeInit+0xec>)
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 f9c5 	bl	8003d94 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_DMA_DeInit+0x9e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d80c      	bhi.n	8003a46 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f000 f9dc 	bl	8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a44:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	659a      	str	r2, [r3, #88]	; 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2225      	movs	r2, #37	; 0x25
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	; 0x24
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	bffdfff8 	.word	0xbffdfff8
 8003a94:	40020000 	.word	0x40020000

08003a98 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e050      	b.n	8003b4c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2225      	movs	r2, #37	; 0x25
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d008      	beq.n	8003ac8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2204      	movs	r2, #4
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e041      	b.n	8003b4c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	210e      	movs	r1, #14
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	491c      	ldr	r1, [pc, #112]	; (8003b54 <HAL_DMA_Abort+0xbc>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	438a      	bics	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <HAL_DMA_Abort+0xc0>)
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	221c      	movs	r2, #28
 8003b02:	4013      	ands	r3, r2
 8003b04:	2201      	movs	r2, #1
 8003b06:	409a      	lsls	r2, r3
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_DMA_Abort+0xc0>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b16:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	490a      	ldr	r1, [pc, #40]	; (8003b54 <HAL_DMA_Abort+0xbc>)
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b38:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2225      	movs	r2, #37	; 0x25
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fffffeff 	.word	0xfffffeff
 8003b58:	40020000 	.word	0x40020000

08003b5c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	210f      	movs	r1, #15
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2225      	movs	r2, #37	; 0x25
 8003b70:	5c9b      	ldrb	r3, [r3, r2]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d006      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e049      	b.n	8003c1a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	210e      	movs	r1, #14
 8003b92:	438a      	bics	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	491d      	ldr	r1, [pc, #116]	; (8003c28 <HAL_DMA_Abort_IT+0xcc>)
 8003bb2:	400a      	ands	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <HAL_DMA_Abort_IT+0xd0>)
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	221c      	movs	r2, #28
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <HAL_DMA_Abort_IT+0xd0>)
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <HAL_DMA_Abort_IT+0xcc>)
 8003bea:	400a      	ands	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bf6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2225      	movs	r2, #37	; 0x25
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	; 0x24
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d004      	beq.n	8003c1a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	0010      	movs	r0, r2
 8003c18:	4798      	blx	r3
    }
  }
  return status;
 8003c1a:	230f      	movs	r3, #15
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
}
 8003c20:	0018      	movs	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b004      	add	sp, #16
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	fffffeff 	.word	0xfffffeff
 8003c2c:	40020000 	.word	0x40020000

08003c30 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003c38:	4b55      	ldr	r3, [pc, #340]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	221c      	movs	r2, #28
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2204      	movs	r2, #4
 8003c50:	409a      	lsls	r2, r3
 8003c52:	0013      	movs	r3, r2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	d027      	beq.n	8003caa <HAL_DMA_IRQHandler+0x7a>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d023      	beq.n	8003caa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d107      	bne.n	8003c7e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2104      	movs	r1, #4
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003c7e:	4b44      	ldr	r3, [pc, #272]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003c80:	6859      	ldr	r1, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	221c      	movs	r2, #28
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003c90:	430a      	orrs	r2, r1
 8003c92:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d100      	bne.n	8003c9e <HAL_DMA_IRQHandler+0x6e>
 8003c9c:	e073      	b.n	8003d86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ca8:	e06d      	b.n	8003d86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	221c      	movs	r2, #28
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	0013      	movs	r3, r2
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d02e      	beq.n	8003d1c <HAL_DMA_IRQHandler+0xec>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d02a      	beq.n	8003d1c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d10b      	bne.n	8003cea <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	210a      	movs	r1, #10
 8003cde:	438a      	bics	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2225      	movs	r2, #37	; 0x25
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	221c      	movs	r2, #28
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2224      	movs	r2, #36	; 0x24
 8003d04:	2100      	movs	r1, #0
 8003d06:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d03a      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	0010      	movs	r0, r2
 8003d18:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d1a:	e034      	b.n	8003d86 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	221c      	movs	r2, #28
 8003d22:	4013      	ands	r3, r2
 8003d24:	2208      	movs	r2, #8
 8003d26:	409a      	lsls	r2, r3
 8003d28:	0013      	movs	r3, r2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d02b      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x158>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2208      	movs	r2, #8
 8003d34:	4013      	ands	r3, r2
 8003d36:	d027      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	210e      	movs	r1, #14
 8003d44:	438a      	bics	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	221c      	movs	r2, #28
 8003d52:	4013      	ands	r3, r2
 8003d54:	2201      	movs	r2, #1
 8003d56:	409a      	lsls	r2, r3
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_DMA_IRQHandler+0x160>)
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2225      	movs	r2, #37	; 0x25
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	; 0x24
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	0010      	movs	r0, r2
 8003d84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46c0      	nop			; (mov r8, r8)
}
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b004      	add	sp, #16
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40020000 	.word	0x40020000

08003d94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	4a10      	ldr	r2, [pc, #64]	; (8003de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003da4:	4694      	mov	ip, r2
 8003da6:	4463      	add	r3, ip
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	001a      	movs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	001a      	movs	r2, r3
 8003db6:	23ff      	movs	r3, #255	; 0xff
 8003db8:	4013      	ands	r3, r2
 8003dba:	3b08      	subs	r3, #8
 8003dbc:	2114      	movs	r1, #20
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fc f9a0 	bl	8000104 <__udivsi3>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003dcc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	221f      	movs	r2, #31
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b004      	add	sp, #16
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	10008200 	.word	0x10008200
 8003de8:	40020880 	.word	0x40020880

08003dec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	223f      	movs	r2, #63	; 0x3f
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e02:	4694      	mov	ip, r2
 8003e04:	4463      	add	r3, ip
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	001a      	movs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b004      	add	sp, #16
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	1000823f 	.word	0x1000823f
 8003e30:	40020940 	.word	0x40020940

08003e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e147      	b.n	80040d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2101      	movs	r1, #1
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4091      	lsls	r1, r2
 8003e4e:	000a      	movs	r2, r1
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d100      	bne.n	8003e5c <HAL_GPIO_Init+0x28>
 8003e5a:	e138      	b.n	80040ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2203      	movs	r2, #3
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d005      	beq.n	8003e74 <HAL_GPIO_Init+0x40>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d130      	bne.n	8003ed6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	409a      	lsls	r2, r3
 8003e82:	0013      	movs	r3, r2
 8003e84:	43da      	mvns	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	0013      	movs	r3, r2
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eaa:	2201      	movs	r2, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	0013      	movs	r3, r2
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	0013      	movs	r3, r2
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2203      	movs	r2, #3
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d017      	beq.n	8003f12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	2203      	movs	r2, #3
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	0013      	movs	r3, r2
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	409a      	lsls	r2, r3
 8003f04:	0013      	movs	r3, r2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2203      	movs	r2, #3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d123      	bne.n	8003f66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	08da      	lsrs	r2, r3, #3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3208      	adds	r2, #8
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	58d3      	ldr	r3, [r2, r3]
 8003f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2207      	movs	r2, #7
 8003f30:	4013      	ands	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	409a      	lsls	r2, r3
 8003f38:	0013      	movs	r3, r2
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2107      	movs	r1, #7
 8003f4a:	400b      	ands	r3, r1
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	0013      	movs	r3, r2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	08da      	lsrs	r2, r3, #3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3208      	adds	r2, #8
 8003f60:	0092      	lsls	r2, r2, #2
 8003f62:	6939      	ldr	r1, [r7, #16]
 8003f64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	2203      	movs	r2, #3
 8003f72:	409a      	lsls	r2, r3
 8003f74:	0013      	movs	r3, r2
 8003f76:	43da      	mvns	r2, r3
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2203      	movs	r2, #3
 8003f84:	401a      	ands	r2, r3
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	0013      	movs	r3, r2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	23c0      	movs	r3, #192	; 0xc0
 8003fa0:	029b      	lsls	r3, r3, #10
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d100      	bne.n	8003fa8 <HAL_GPIO_Init+0x174>
 8003fa6:	e092      	b.n	80040ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003fa8:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3318      	adds	r3, #24
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	589b      	ldr	r3, [r3, r2]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	23a0      	movs	r3, #160	; 0xa0
 8003fd0:	05db      	lsls	r3, r3, #23
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d013      	beq.n	8003ffe <HAL_GPIO_Init+0x1ca>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a45      	ldr	r2, [pc, #276]	; (80040f0 <HAL_GPIO_Init+0x2bc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00d      	beq.n	8003ffa <HAL_GPIO_Init+0x1c6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a44      	ldr	r2, [pc, #272]	; (80040f4 <HAL_GPIO_Init+0x2c0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <HAL_GPIO_Init+0x1c2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <HAL_GPIO_Init+0x2c4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_GPIO_Init+0x1be>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e006      	b.n	8004000 <HAL_GPIO_Init+0x1cc>
 8003ff2:	2305      	movs	r3, #5
 8003ff4:	e004      	b.n	8004000 <HAL_GPIO_Init+0x1cc>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e002      	b.n	8004000 <HAL_GPIO_Init+0x1cc>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <HAL_GPIO_Init+0x1cc>
 8003ffe:	2300      	movs	r3, #0
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	2103      	movs	r1, #3
 8004004:	400a      	ands	r2, r1
 8004006:	00d2      	lsls	r2, r2, #3
 8004008:	4093      	lsls	r3, r2
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004010:	4936      	ldr	r1, [pc, #216]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	3318      	adds	r3, #24
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800401e:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	43da      	mvns	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	035b      	lsls	r3, r3, #13
 8004036:	4013      	ands	r3, r2
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004042:	4b2a      	ldr	r3, [pc, #168]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004048:	4b28      	ldr	r3, [pc, #160]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	43da      	mvns	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	039b      	lsls	r3, r3, #14
 8004060:	4013      	ands	r3, r2
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004072:	4a1e      	ldr	r2, [pc, #120]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 8004074:	2384      	movs	r3, #132	; 0x84
 8004076:	58d3      	ldr	r3, [r2, r3]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43da      	mvns	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	4013      	ands	r3, r2
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004098:	4914      	ldr	r1, [pc, #80]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 800409a:	2284      	movs	r2, #132	; 0x84
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80040a0:	4a12      	ldr	r2, [pc, #72]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	58d3      	ldr	r3, [r2, r3]
 80040a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	4013      	ands	r3, r2
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040c6:	4909      	ldr	r1, [pc, #36]	; (80040ec <HAL_GPIO_Init+0x2b8>)
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	3301      	adds	r3, #1
 80040d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	40da      	lsrs	r2, r3
 80040dc:	1e13      	subs	r3, r2, #0
 80040de:	d000      	beq.n	80040e2 <HAL_GPIO_Init+0x2ae>
 80040e0:	e6b0      	b.n	8003e44 <HAL_GPIO_Init+0x10>
  }
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b006      	add	sp, #24
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021800 	.word	0x40021800
 80040f0:	50000400 	.word	0x50000400
 80040f4:	50000800 	.word	0x50000800
 80040f8:	50000c00 	.word	0x50000c00

080040fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800410a:	e0b4      	b.n	8004276 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800410c:	2201      	movs	r2, #1
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	409a      	lsls	r2, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d100      	bne.n	8004120 <HAL_GPIO_DeInit+0x24>
 800411e:	e0a7      	b.n	8004270 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004120:	4a5a      	ldr	r2, [pc, #360]	; (800428c <HAL_GPIO_DeInit+0x190>)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	3318      	adds	r3, #24
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	589b      	ldr	r3, [r3, r2]
 800412c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2203      	movs	r2, #3
 8004132:	4013      	ands	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	220f      	movs	r2, #15
 8004138:	409a      	lsls	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	23a0      	movs	r3, #160	; 0xa0
 8004144:	05db      	lsls	r3, r3, #23
 8004146:	429a      	cmp	r2, r3
 8004148:	d013      	beq.n	8004172 <HAL_GPIO_DeInit+0x76>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a50      	ldr	r2, [pc, #320]	; (8004290 <HAL_GPIO_DeInit+0x194>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00d      	beq.n	800416e <HAL_GPIO_DeInit+0x72>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a4f      	ldr	r2, [pc, #316]	; (8004294 <HAL_GPIO_DeInit+0x198>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d007      	beq.n	800416a <HAL_GPIO_DeInit+0x6e>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a4e      	ldr	r2, [pc, #312]	; (8004298 <HAL_GPIO_DeInit+0x19c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <HAL_GPIO_DeInit+0x6a>
 8004162:	2303      	movs	r3, #3
 8004164:	e006      	b.n	8004174 <HAL_GPIO_DeInit+0x78>
 8004166:	2305      	movs	r3, #5
 8004168:	e004      	b.n	8004174 <HAL_GPIO_DeInit+0x78>
 800416a:	2302      	movs	r3, #2
 800416c:	e002      	b.n	8004174 <HAL_GPIO_DeInit+0x78>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_GPIO_DeInit+0x78>
 8004172:	2300      	movs	r3, #0
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	2103      	movs	r1, #3
 8004178:	400a      	ands	r2, r1
 800417a:	00d2      	lsls	r2, r2, #3
 800417c:	4093      	lsls	r3, r2
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d136      	bne.n	80041f2 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004184:	4a41      	ldr	r2, [pc, #260]	; (800428c <HAL_GPIO_DeInit+0x190>)
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	58d3      	ldr	r3, [r2, r3]
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	43d2      	mvns	r2, r2
 800418e:	493f      	ldr	r1, [pc, #252]	; (800428c <HAL_GPIO_DeInit+0x190>)
 8004190:	4013      	ands	r3, r2
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004196:	4a3d      	ldr	r2, [pc, #244]	; (800428c <HAL_GPIO_DeInit+0x190>)
 8004198:	2384      	movs	r3, #132	; 0x84
 800419a:	58d3      	ldr	r3, [r2, r3]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	43d2      	mvns	r2, r2
 80041a0:	493a      	ldr	r1, [pc, #232]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	2284      	movs	r2, #132	; 0x84
 80041a6:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	43d9      	mvns	r1, r3
 80041b0:	4b36      	ldr	r3, [pc, #216]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80041b6:	4b35      	ldr	r3, [pc, #212]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43d9      	mvns	r1, r3
 80041be:	4b33      	ldr	r3, [pc, #204]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041c0:	400a      	ands	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2203      	movs	r2, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	220f      	movs	r2, #15
 80041ce:	409a      	lsls	r2, r3
 80041d0:	0013      	movs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80041d4:	4a2d      	ldr	r2, [pc, #180]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	3318      	adds	r3, #24
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	589a      	ldr	r2, [r3, r2]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43d9      	mvns	r1, r3
 80041e4:	4829      	ldr	r0, [pc, #164]	; (800428c <HAL_GPIO_DeInit+0x190>)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	089b      	lsrs	r3, r3, #2
 80041ea:	400a      	ands	r2, r1
 80041ec:	3318      	adds	r3, #24
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	2103      	movs	r1, #3
 80041fc:	4099      	lsls	r1, r3
 80041fe:	000b      	movs	r3, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	08da      	lsrs	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3208      	adds	r2, #8
 800420e:	0092      	lsls	r2, r2, #2
 8004210:	58d3      	ldr	r3, [r2, r3]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	2107      	movs	r1, #7
 8004216:	400a      	ands	r2, r1
 8004218:	0092      	lsls	r2, r2, #2
 800421a:	210f      	movs	r1, #15
 800421c:	4091      	lsls	r1, r2
 800421e:	000a      	movs	r2, r1
 8004220:	43d1      	mvns	r1, r2
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	08d2      	lsrs	r2, r2, #3
 8004226:	4019      	ands	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3208      	adds	r2, #8
 800422c:	0092      	lsls	r2, r2, #2
 800422e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	0052      	lsls	r2, r2, #1
 8004238:	2103      	movs	r1, #3
 800423a:	4091      	lsls	r1, r2
 800423c:	000a      	movs	r2, r1
 800423e:	43d2      	mvns	r2, r2
 8004240:	401a      	ands	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2101      	movs	r1, #1
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4091      	lsls	r1, r2
 8004250:	000a      	movs	r2, r1
 8004252:	43d2      	mvns	r2, r2
 8004254:	401a      	ands	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	0052      	lsls	r2, r2, #1
 8004262:	2103      	movs	r1, #3
 8004264:	4091      	lsls	r1, r2
 8004266:	000a      	movs	r2, r1
 8004268:	43d2      	mvns	r2, r2
 800426a:	401a      	ands	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3301      	adds	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	40da      	lsrs	r2, r3
 800427c:	1e13      	subs	r3, r2, #0
 800427e:	d000      	beq.n	8004282 <HAL_GPIO_DeInit+0x186>
 8004280:	e744      	b.n	800410c <HAL_GPIO_DeInit+0x10>
  }
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46c0      	nop			; (mov r8, r8)
 8004286:	46bd      	mov	sp, r7
 8004288:	b006      	add	sp, #24
 800428a:	bd80      	pop	{r7, pc}
 800428c:	40021800 	.word	0x40021800
 8004290:	50000400 	.word	0x50000400
 8004294:	50000800 	.word	0x50000800
 8004298:	50000c00 	.word	0x50000c00

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	0008      	movs	r0, r1
 80042a6:	0011      	movs	r1, r2
 80042a8:	1cbb      	adds	r3, r7, #2
 80042aa:	1c02      	adds	r2, r0, #0
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	1c7b      	adds	r3, r7, #1
 80042b0:	1c0a      	adds	r2, r1, #0
 80042b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b4:	1c7b      	adds	r3, r7, #1
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042bc:	1cbb      	adds	r3, r7, #2
 80042be:	881a      	ldrh	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c4:	e003      	b.n	80042ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c6:	1cbb      	adds	r3, r7, #2
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b002      	add	sp, #8
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	0019      	movs	r1, r3
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d11f      	bne.n	800433c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	0013      	movs	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	189b      	adds	r3, r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	4912      	ldr	r1, [pc, #72]	; (8004354 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800430a:	0018      	movs	r0, r3
 800430c:	f7fb fefa 	bl	8000104 <__udivsi3>
 8004310:	0003      	movs	r3, r0
 8004312:	3301      	adds	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004316:	e008      	b.n	800432a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b01      	subs	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e001      	b.n	800432a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e009      	b.n	800433e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	401a      	ands	r2, r3
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	429a      	cmp	r2, r3
 800433a:	d0ed      	beq.n	8004318 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	0018      	movs	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	b004      	add	sp, #16
 8004344:	bd80      	pop	{r7, pc}
 8004346:	46c0      	nop			; (mov r8, r8)
 8004348:	40007000 	.word	0x40007000
 800434c:	fffff9ff 	.word	0xfffff9ff
 8004350:	20000010 	.word	0x20000010
 8004354:	000f4240 	.word	0x000f4240

08004358 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800435c:	4b03      	ldr	r3, [pc, #12]	; (800436c <LL_RCC_GetAPB1Prescaler+0x14>)
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	23e0      	movs	r3, #224	; 0xe0
 8004362:	01db      	lsls	r3, r3, #7
 8004364:	4013      	ands	r3, r2
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000

08004370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e2fe      	b.n	8004980 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	d100      	bne.n	800438e <HAL_RCC_OscConfig+0x1e>
 800438c:	e07c      	b.n	8004488 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800438e:	4bc3      	ldr	r3, [pc, #780]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2238      	movs	r2, #56	; 0x38
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004398:	4bc0      	ldr	r3, [pc, #768]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2203      	movs	r2, #3
 800439e:	4013      	ands	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d102      	bne.n	80043ae <HAL_RCC_OscConfig+0x3e>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d10b      	bne.n	80043cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b4:	4bb9      	ldr	r3, [pc, #740]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	4013      	ands	r3, r2
 80043be:	d062      	beq.n	8004486 <HAL_RCC_OscConfig+0x116>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d15e      	bne.n	8004486 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e2d9      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	025b      	lsls	r3, r3, #9
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x78>
 80043d8:	4bb0      	ldr	r3, [pc, #704]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4baf      	ldr	r3, [pc, #700]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80043de:	2180      	movs	r1, #128	; 0x80
 80043e0:	0249      	lsls	r1, r1, #9
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e020      	b.n	800442a <HAL_RCC_OscConfig+0xba>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	23a0      	movs	r3, #160	; 0xa0
 80043ee:	02db      	lsls	r3, r3, #11
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d10e      	bne.n	8004412 <HAL_RCC_OscConfig+0xa2>
 80043f4:	4ba9      	ldr	r3, [pc, #676]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4ba8      	ldr	r3, [pc, #672]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80043fa:	2180      	movs	r1, #128	; 0x80
 80043fc:	02c9      	lsls	r1, r1, #11
 80043fe:	430a      	orrs	r2, r1
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	4ba6      	ldr	r3, [pc, #664]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	4ba5      	ldr	r3, [pc, #660]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	0249      	lsls	r1, r1, #9
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e00b      	b.n	800442a <HAL_RCC_OscConfig+0xba>
 8004412:	4ba2      	ldr	r3, [pc, #648]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4ba1      	ldr	r3, [pc, #644]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004418:	49a1      	ldr	r1, [pc, #644]	; (80046a0 <HAL_RCC_OscConfig+0x330>)
 800441a:	400a      	ands	r2, r1
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	4b9f      	ldr	r3, [pc, #636]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b9e      	ldr	r3, [pc, #632]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004424:	499f      	ldr	r1, [pc, #636]	; (80046a4 <HAL_RCC_OscConfig+0x334>)
 8004426:	400a      	ands	r2, r1
 8004428:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d014      	beq.n	800445c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004432:	f7ff f8f1 	bl	8003618 <HAL_GetTick>
 8004436:	0003      	movs	r3, r0
 8004438:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7ff f8ec 	bl	8003618 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e298      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444e:	4b93      	ldr	r3, [pc, #588]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	029b      	lsls	r3, r3, #10
 8004456:	4013      	ands	r3, r2
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xcc>
 800445a:	e015      	b.n	8004488 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7ff f8dc 	bl	8003618 <HAL_GetTick>
 8004460:	0003      	movs	r3, r0
 8004462:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004466:	f7ff f8d7 	bl	8003618 <HAL_GetTick>
 800446a:	0002      	movs	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e283      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004478:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	4013      	ands	r3, r2
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0xf6>
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004486:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2202      	movs	r2, #2
 800448e:	4013      	ands	r3, r2
 8004490:	d100      	bne.n	8004494 <HAL_RCC_OscConfig+0x124>
 8004492:	e099      	b.n	80045c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004494:	4b81      	ldr	r3, [pc, #516]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2238      	movs	r2, #56	; 0x38
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449e:	4b7f      	ldr	r3, [pc, #508]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2203      	movs	r2, #3
 80044a4:	4013      	ands	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d102      	bne.n	80044b4 <HAL_RCC_OscConfig+0x144>
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d002      	beq.n	80044ba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d135      	bne.n	8004526 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ba:	4b78      	ldr	r3, [pc, #480]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4013      	ands	r3, r2
 80044c4:	d005      	beq.n	80044d2 <HAL_RCC_OscConfig+0x162>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e256      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	4b72      	ldr	r3, [pc, #456]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a74      	ldr	r2, [pc, #464]	; (80046a8 <HAL_RCC_OscConfig+0x338>)
 80044d8:	4013      	ands	r3, r2
 80044da:	0019      	movs	r1, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	4b6e      	ldr	r3, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80044e4:	430a      	orrs	r2, r1
 80044e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d112      	bne.n	8004514 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80044ee:	4b6b      	ldr	r3, [pc, #428]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a6e      	ldr	r2, [pc, #440]	; (80046ac <HAL_RCC_OscConfig+0x33c>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	4b67      	ldr	r3, [pc, #412]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004502:	4b66      	ldr	r3, [pc, #408]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	0adb      	lsrs	r3, r3, #11
 8004508:	2207      	movs	r2, #7
 800450a:	4013      	ands	r3, r2
 800450c:	4a68      	ldr	r2, [pc, #416]	; (80046b0 <HAL_RCC_OscConfig+0x340>)
 800450e:	40da      	lsrs	r2, r3
 8004510:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <HAL_RCC_OscConfig+0x344>)
 8004512:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004514:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <HAL_RCC_OscConfig+0x348>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff f821 	bl	8003560 <HAL_InitTick>
 800451e:	1e03      	subs	r3, r0, #0
 8004520:	d051      	beq.n	80045c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e22c      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d030      	beq.n	8004590 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800452e:	4b5b      	ldr	r3, [pc, #364]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a5e      	ldr	r2, [pc, #376]	; (80046ac <HAL_RCC_OscConfig+0x33c>)
 8004534:	4013      	ands	r3, r2
 8004536:	0019      	movs	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	4b57      	ldr	r3, [pc, #348]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800453e:	430a      	orrs	r2, r1
 8004540:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004542:	4b56      	ldr	r3, [pc, #344]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	4b55      	ldr	r3, [pc, #340]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004548:	2180      	movs	r1, #128	; 0x80
 800454a:	0049      	lsls	r1, r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7ff f862 	bl	8003618 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455a:	f7ff f85d 	bl	8003618 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e209      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456c:	4b4b      	ldr	r3, [pc, #300]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4013      	ands	r3, r2
 8004576:	d0f0      	beq.n	800455a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b48      	ldr	r3, [pc, #288]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	4a4a      	ldr	r2, [pc, #296]	; (80046a8 <HAL_RCC_OscConfig+0x338>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	021a      	lsls	r2, r3, #8
 8004588:	4b44      	ldr	r3, [pc, #272]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	e01b      	b.n	80045c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004590:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004596:	4949      	ldr	r1, [pc, #292]	; (80046bc <HAL_RCC_OscConfig+0x34c>)
 8004598:	400a      	ands	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7ff f83c 	bl	8003618 <HAL_GetTick>
 80045a0:	0003      	movs	r3, r0
 80045a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a6:	f7ff f837 	bl	8003618 <HAL_GetTick>
 80045aa:	0002      	movs	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e1e3      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b8:	4b38      	ldr	r3, [pc, #224]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4013      	ands	r3, r2
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x236>
 80045c4:	e000      	b.n	80045c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2208      	movs	r2, #8
 80045ce:	4013      	ands	r3, r2
 80045d0:	d047      	beq.n	8004662 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045d2:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2238      	movs	r2, #56	; 0x38
 80045d8:	4013      	ands	r3, r2
 80045da:	2b18      	cmp	r3, #24
 80045dc:	d10a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80045de:	4b2f      	ldr	r3, [pc, #188]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80045e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e2:	2202      	movs	r2, #2
 80045e4:	4013      	ands	r3, r2
 80045e6:	d03c      	beq.n	8004662 <HAL_RCC_OscConfig+0x2f2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d138      	bne.n	8004662 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e1c5      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d019      	beq.n	8004630 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 80045fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004600:	4b26      	ldr	r3, [pc, #152]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004602:	2101      	movs	r1, #1
 8004604:	430a      	orrs	r2, r1
 8004606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7ff f806 	bl	8003618 <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004612:	f7ff f801 	bl	8003618 <HAL_GetTick>
 8004616:	0002      	movs	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e1ad      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004628:	2202      	movs	r2, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d0f1      	beq.n	8004612 <HAL_RCC_OscConfig+0x2a2>
 800462e:	e018      	b.n	8004662 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004632:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004634:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004636:	2101      	movs	r1, #1
 8004638:	438a      	bics	r2, r1
 800463a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe ffec 	bl	8003618 <HAL_GetTick>
 8004640:	0003      	movs	r3, r0
 8004642:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004646:	f7fe ffe7 	bl	8003618 <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e193      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004658:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 800465a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465c:	2202      	movs	r2, #2
 800465e:	4013      	ands	r3, r2
 8004660:	d1f1      	bne.n	8004646 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2204      	movs	r2, #4
 8004668:	4013      	ands	r3, r2
 800466a:	d100      	bne.n	800466e <HAL_RCC_OscConfig+0x2fe>
 800466c:	e0c6      	b.n	80047fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	231f      	movs	r3, #31
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2238      	movs	r2, #56	; 0x38
 800467c:	4013      	ands	r3, r2
 800467e:	2b20      	cmp	r3, #32
 8004680:	d11e      	bne.n	80046c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_OscConfig+0x32c>)
 8004684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004686:	2202      	movs	r2, #2
 8004688:	4013      	ands	r3, r2
 800468a:	d100      	bne.n	800468e <HAL_RCC_OscConfig+0x31e>
 800468c:	e0b6      	b.n	80047fc <HAL_RCC_OscConfig+0x48c>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d000      	beq.n	8004698 <HAL_RCC_OscConfig+0x328>
 8004696:	e0b1      	b.n	80047fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e171      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
 800469c:	40021000 	.word	0x40021000
 80046a0:	fffeffff 	.word	0xfffeffff
 80046a4:	fffbffff 	.word	0xfffbffff
 80046a8:	ffff80ff 	.word	0xffff80ff
 80046ac:	ffffc7ff 	.word	0xffffc7ff
 80046b0:	00f42400 	.word	0x00f42400
 80046b4:	20000010 	.word	0x20000010
 80046b8:	20000014 	.word	0x20000014
 80046bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046c0:	4bb1      	ldr	r3, [pc, #708]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	2380      	movs	r3, #128	; 0x80
 80046c6:	055b      	lsls	r3, r3, #21
 80046c8:	4013      	ands	r3, r2
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_OscConfig+0x360>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x362>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4bac      	ldr	r3, [pc, #688]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80046d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046da:	4bab      	ldr	r3, [pc, #684]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80046dc:	2180      	movs	r1, #128	; 0x80
 80046de:	0549      	lsls	r1, r1, #21
 80046e0:	430a      	orrs	r2, r1
 80046e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80046e4:	4ba8      	ldr	r3, [pc, #672]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80046e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	055b      	lsls	r3, r3, #21
 80046ec:	4013      	ands	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80046f2:	231f      	movs	r3, #31
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fa:	4ba4      	ldr	r3, [pc, #656]	; (800498c <HAL_RCC_OscConfig+0x61c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4013      	ands	r3, r2
 8004704:	d11a      	bne.n	800473c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004706:	4ba1      	ldr	r3, [pc, #644]	; (800498c <HAL_RCC_OscConfig+0x61c>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4ba0      	ldr	r3, [pc, #640]	; (800498c <HAL_RCC_OscConfig+0x61c>)
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	0049      	lsls	r1, r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004714:	f7fe ff80 	bl	8003618 <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fe ff7b 	bl	8003618 <HAL_GetTick>
 8004722:	0002      	movs	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e127      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004730:	4b96      	ldr	r3, [pc, #600]	; (800498c <HAL_RCC_OscConfig+0x61c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4013      	ands	r3, r2
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <HAL_RCC_OscConfig+0x3e2>
 8004744:	4b90      	ldr	r3, [pc, #576]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004748:	4b8f      	ldr	r3, [pc, #572]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800474a:	2101      	movs	r1, #1
 800474c:	430a      	orrs	r2, r1
 800474e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004750:	e01c      	b.n	800478c <HAL_RCC_OscConfig+0x41c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b05      	cmp	r3, #5
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x404>
 800475a:	4b8b      	ldr	r3, [pc, #556]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800475c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800475e:	4b8a      	ldr	r3, [pc, #552]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004760:	2104      	movs	r1, #4
 8004762:	430a      	orrs	r2, r1
 8004764:	65da      	str	r2, [r3, #92]	; 0x5c
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800476a:	4b87      	ldr	r3, [pc, #540]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800476c:	2101      	movs	r1, #1
 800476e:	430a      	orrs	r2, r1
 8004770:	65da      	str	r2, [r3, #92]	; 0x5c
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0x41c>
 8004774:	4b84      	ldr	r3, [pc, #528]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004776:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004778:	4b83      	ldr	r3, [pc, #524]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800477a:	2101      	movs	r1, #1
 800477c:	438a      	bics	r2, r1
 800477e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004780:	4b81      	ldr	r3, [pc, #516]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004782:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004784:	4b80      	ldr	r3, [pc, #512]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004786:	2104      	movs	r1, #4
 8004788:	438a      	bics	r2, r1
 800478a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d014      	beq.n	80047be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fe ff40 	bl	8003618 <HAL_GetTick>
 8004798:	0003      	movs	r3, r0
 800479a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479c:	e009      	b.n	80047b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fe ff3b 	bl	8003618 <HAL_GetTick>
 80047a2:	0002      	movs	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	4a79      	ldr	r2, [pc, #484]	; (8004990 <HAL_RCC_OscConfig+0x620>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e0e6      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b2:	4b75      	ldr	r3, [pc, #468]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80047b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b6:	2202      	movs	r2, #2
 80047b8:	4013      	ands	r3, r2
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x42e>
 80047bc:	e013      	b.n	80047e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fe ff2b 	bl	8003618 <HAL_GetTick>
 80047c2:	0003      	movs	r3, r0
 80047c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c6:	e009      	b.n	80047dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c8:	f7fe ff26 	bl	8003618 <HAL_GetTick>
 80047cc:	0002      	movs	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	4a6f      	ldr	r2, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x620>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0d1      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	2202      	movs	r2, #2
 80047e2:	4013      	ands	r3, r2
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047e6:	231f      	movs	r3, #31
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d105      	bne.n	80047fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80047f0:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80047f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f4:	4b64      	ldr	r3, [pc, #400]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80047f6:	4967      	ldr	r1, [pc, #412]	; (8004994 <HAL_RCC_OscConfig+0x624>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d100      	bne.n	8004806 <HAL_RCC_OscConfig+0x496>
 8004804:	e0bb      	b.n	800497e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004806:	4b60      	ldr	r3, [pc, #384]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2238      	movs	r2, #56	; 0x38
 800480c:	4013      	ands	r3, r2
 800480e:	2b10      	cmp	r3, #16
 8004810:	d100      	bne.n	8004814 <HAL_RCC_OscConfig+0x4a4>
 8004812:	e07b      	b.n	800490c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d156      	bne.n	80048ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481c:	4b5a      	ldr	r3, [pc, #360]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b59      	ldr	r3, [pc, #356]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004822:	495d      	ldr	r1, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x628>)
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fe fef6 	bl	8003618 <HAL_GetTick>
 800482c:	0003      	movs	r3, r0
 800482e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004832:	f7fe fef1 	bl	8003618 <HAL_GetTick>
 8004836:	0002      	movs	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e09d      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004844:	4b50      	ldr	r3, [pc, #320]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	049b      	lsls	r3, r3, #18
 800484c:	4013      	ands	r3, r2
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004850:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a51      	ldr	r2, [pc, #324]	; (800499c <HAL_RCC_OscConfig+0x62c>)
 8004856:	4013      	ands	r3, r2
 8004858:	0019      	movs	r1, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1a      	ldr	r2, [r3, #32]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	431a      	orrs	r2, r3
 800487e:	4b42      	ldr	r3, [pc, #264]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004880:	430a      	orrs	r2, r1
 8004882:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004884:	4b40      	ldr	r3, [pc, #256]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	0449      	lsls	r1, r1, #17
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004892:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004894:	68da      	ldr	r2, [r3, #12]
 8004896:	4b3c      	ldr	r3, [pc, #240]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0549      	lsls	r1, r1, #21
 800489c:	430a      	orrs	r2, r1
 800489e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe feba 	bl	8003618 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fe feb5 	bl	8003618 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e061      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	049b      	lsls	r3, r3, #18
 80048c4:	4013      	ands	r3, r2
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x53a>
 80048c8:	e059      	b.n	800497e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b2f      	ldr	r3, [pc, #188]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4b2e      	ldr	r3, [pc, #184]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80048d0:	4931      	ldr	r1, [pc, #196]	; (8004998 <HAL_RCC_OscConfig+0x628>)
 80048d2:	400a      	ands	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fe fe9f 	bl	8003618 <HAL_GetTick>
 80048da:	0003      	movs	r3, r0
 80048dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fe fe9a 	bl	8003618 <HAL_GetTick>
 80048e4:	0002      	movs	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e046      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f2:	4b25      	ldr	r3, [pc, #148]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	2380      	movs	r3, #128	; 0x80
 80048f8:	049b      	lsls	r3, r3, #18
 80048fa:	4013      	ands	r3, r2
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80048fe:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 8004904:	4926      	ldr	r1, [pc, #152]	; (80049a0 <HAL_RCC_OscConfig+0x630>)
 8004906:	400a      	ands	r2, r1
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	e038      	b.n	800497e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e033      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004918:	4b1b      	ldr	r3, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x618>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2203      	movs	r2, #3
 8004922:	401a      	ands	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	429a      	cmp	r2, r3
 800492a:	d126      	bne.n	800497a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2270      	movs	r2, #112	; 0x70
 8004930:	401a      	ands	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004936:	429a      	cmp	r2, r3
 8004938:	d11f      	bne.n	800497a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	23fe      	movs	r3, #254	; 0xfe
 800493e:	01db      	lsls	r3, r3, #7
 8004940:	401a      	ands	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d116      	bne.n	800497a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	23f8      	movs	r3, #248	; 0xf8
 8004950:	039b      	lsls	r3, r3, #14
 8004952:	401a      	ands	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d10e      	bne.n	800497a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	23e0      	movs	r3, #224	; 0xe0
 8004960:	051b      	lsls	r3, r3, #20
 8004962:	401a      	ands	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	0f5b      	lsrs	r3, r3, #29
 8004970:	075a      	lsls	r2, r3, #29
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	0018      	movs	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	b008      	add	sp, #32
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000
 800498c:	40007000 	.word	0x40007000
 8004990:	00001388 	.word	0x00001388
 8004994:	efffffff 	.word	0xefffffff
 8004998:	feffffff 	.word	0xfeffffff
 800499c:	11c1808c 	.word	0x11c1808c
 80049a0:	eefefffc 	.word	0xeefefffc

080049a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0e9      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b76      	ldr	r3, [pc, #472]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2207      	movs	r2, #7
 80049be:	4013      	ands	r3, r2
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d91e      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b73      	ldr	r3, [pc, #460]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2207      	movs	r2, #7
 80049cc:	4393      	bics	r3, r2
 80049ce:	0019      	movs	r1, r3
 80049d0:	4b70      	ldr	r3, [pc, #448]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049d8:	f7fe fe1e 	bl	8003618 <HAL_GetTick>
 80049dc:	0003      	movs	r3, r0
 80049de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049e0:	e009      	b.n	80049f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e2:	f7fe fe19 	bl	8003618 <HAL_GetTick>
 80049e6:	0002      	movs	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	4a6a      	ldr	r2, [pc, #424]	; (8004b98 <HAL_RCC_ClockConfig+0x1f4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e0ca      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049f6:	4b67      	ldr	r3, [pc, #412]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2207      	movs	r2, #7
 80049fc:	4013      	ands	r3, r2
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d1ee      	bne.n	80049e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d015      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2204      	movs	r2, #4
 8004a14:	4013      	ands	r3, r2
 8004a16:	d006      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004a18:	4b60      	ldr	r3, [pc, #384]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a1e:	21e0      	movs	r1, #224	; 0xe0
 8004a20:	01c9      	lsls	r1, r1, #7
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a26:	4b5d      	ldr	r3, [pc, #372]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a5d      	ldr	r2, [pc, #372]	; (8004ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	4b59      	ldr	r3, [pc, #356]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4013      	ands	r3, r2
 8004a42:	d057      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4c:	4b53      	ldr	r3, [pc, #332]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	029b      	lsls	r3, r3, #10
 8004a54:	4013      	ands	r3, r2
 8004a56:	d12b      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e097      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a64:	4b4d      	ldr	r3, [pc, #308]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	049b      	lsls	r3, r3, #18
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d11f      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e08b      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7c:	4b47      	ldr	r3, [pc, #284]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4013      	ands	r3, r2
 8004a86:	d113      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e07f      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a94:	4b41      	ldr	r3, [pc, #260]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a98:	2202      	movs	r2, #2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e074      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e06d      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ab0:	4b3a      	ldr	r3, [pc, #232]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4393      	bics	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4b37      	ldr	r3, [pc, #220]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac4:	f7fe fda8 	bl	8003618 <HAL_GetTick>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004acc:	e009      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ace:	f7fe fda3 	bl	8003618 <HAL_GetTick>
 8004ad2:	0002      	movs	r2, r0
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <HAL_RCC_ClockConfig+0x1f4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e054      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	4b2e      	ldr	r3, [pc, #184]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2238      	movs	r2, #56	; 0x38
 8004ae8:	401a      	ands	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d1ec      	bne.n	8004ace <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2207      	movs	r2, #7
 8004afa:	4013      	ands	r3, r2
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d21e      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b24      	ldr	r3, [pc, #144]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2207      	movs	r2, #7
 8004b08:	4393      	bics	r3, r2
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	4b21      	ldr	r3, [pc, #132]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b14:	f7fe fd80 	bl	8003618 <HAL_GetTick>
 8004b18:	0003      	movs	r3, r0
 8004b1a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b1c:	e009      	b.n	8004b32 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1e:	f7fe fd7b 	bl	8003618 <HAL_GetTick>
 8004b22:	0002      	movs	r2, r0
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <HAL_RCC_ClockConfig+0x1f4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e02c      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b32:	4b18      	ldr	r3, [pc, #96]	; (8004b94 <HAL_RCC_ClockConfig+0x1f0>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2207      	movs	r2, #7
 8004b38:	4013      	ands	r3, r2
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d1ee      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2204      	movs	r2, #4
 8004b46:	4013      	ands	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <HAL_RCC_ClockConfig+0x200>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004b5e:	f000 f829 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b62:	0001      	movs	r1, r0
 8004b64:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <HAL_RCC_ClockConfig+0x1f8>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	220f      	movs	r2, #15
 8004b6c:	401a      	ands	r2, r3
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <HAL_RCC_ClockConfig+0x204>)
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	58d3      	ldr	r3, [r2, r3]
 8004b74:	221f      	movs	r2, #31
 8004b76:	4013      	ands	r3, r2
 8004b78:	000a      	movs	r2, r1
 8004b7a:	40da      	lsrs	r2, r3
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_ClockConfig+0x208>)
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x20c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fe fceb 	bl	8003560 <HAL_InitTick>
 8004b8a:	0003      	movs	r3, r0
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40022000 	.word	0x40022000
 8004b98:	00001388 	.word	0x00001388
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	fffff0ff 	.word	0xfffff0ff
 8004ba4:	ffff8fff 	.word	0xffff8fff
 8004ba8:	08008998 	.word	0x08008998
 8004bac:	20000010 	.word	0x20000010
 8004bb0:	20000014 	.word	0x20000014

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bba:	4b3c      	ldr	r3, [pc, #240]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2238      	movs	r2, #56	; 0x38
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d10f      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	0adb      	lsrs	r3, r3, #11
 8004bca:	2207      	movs	r2, #7
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2201      	movs	r2, #1
 8004bd0:	409a      	lsls	r2, r3
 8004bd2:	0013      	movs	r3, r2
 8004bd4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	4835      	ldr	r0, [pc, #212]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004bda:	f7fb fa93 	bl	8000104 <__udivsi3>
 8004bde:	0003      	movs	r3, r0
 8004be0:	613b      	str	r3, [r7, #16]
 8004be2:	e05d      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004be4:	4b31      	ldr	r3, [pc, #196]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2238      	movs	r2, #56	; 0x38
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d102      	bne.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bf0:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e054      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf6:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2238      	movs	r2, #56	; 0x38
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d138      	bne.n	8004c74 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2203      	movs	r2, #3
 8004c08:	4013      	ands	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c0c:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	2207      	movs	r2, #7
 8004c14:	4013      	ands	r3, r2
 8004c16:	3301      	adds	r3, #1
 8004c18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4824      	ldr	r0, [pc, #144]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c24:	f7fb fa6e 	bl	8000104 <__udivsi3>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	227f      	movs	r2, #127	; 0x7f
 8004c34:	4013      	ands	r3, r2
 8004c36:	434b      	muls	r3, r1
 8004c38:	617b      	str	r3, [r7, #20]
        break;
 8004c3a:	e00d      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	481c      	ldr	r0, [pc, #112]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c40:	f7fb fa60 	bl	8000104 <__udivsi3>
 8004c44:	0003      	movs	r3, r0
 8004c46:	0019      	movs	r1, r3
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	227f      	movs	r2, #127	; 0x7f
 8004c50:	4013      	ands	r3, r2
 8004c52:	434b      	muls	r3, r1
 8004c54:	617b      	str	r3, [r7, #20]
        break;
 8004c56:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	0f5b      	lsrs	r3, r3, #29
 8004c5e:	2207      	movs	r2, #7
 8004c60:	4013      	ands	r3, r2
 8004c62:	3301      	adds	r3, #1
 8004c64:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f7fb fa4b 	bl	8000104 <__udivsi3>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	e015      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2238      	movs	r2, #56	; 0x38
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d103      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	021b      	lsls	r3, r3, #8
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e00b      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004c88:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2238      	movs	r2, #56	; 0x38
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b18      	cmp	r3, #24
 8004c92:	d103      	bne.n	8004c9c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004c94:	23fa      	movs	r3, #250	; 0xfa
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e001      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004ca0:	693b      	ldr	r3, [r7, #16]
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b006      	add	sp, #24
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	00f42400 	.word	0x00f42400
 8004cb4:	007a1200 	.word	0x007a1200

08004cb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cbc:	4b02      	ldr	r3, [pc, #8]	; (8004cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
}
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20000010 	.word	0x20000010

08004ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ccc:	b5b0      	push	{r4, r5, r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cd0:	f7ff fff2 	bl	8004cb8 <HAL_RCC_GetHCLKFreq>
 8004cd4:	0004      	movs	r4, r0
 8004cd6:	f7ff fb3f 	bl	8004358 <LL_RCC_GetAPB1Prescaler>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	0b1a      	lsrs	r2, r3, #12
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	58d3      	ldr	r3, [r2, r3]
 8004ce4:	221f      	movs	r2, #31
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	40dc      	lsrs	r4, r3
 8004cea:	0023      	movs	r3, r4
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	080089d8 	.word	0x080089d8

08004cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d00:	2313      	movs	r3, #19
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d08:	2312      	movs	r3, #18
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	029b      	lsls	r3, r3, #10
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d100      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004d1c:	e0a3      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2011      	movs	r0, #17
 8004d20:	183b      	adds	r3, r7, r0
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4ba5      	ldr	r3, [pc, #660]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2a:	2380      	movs	r3, #128	; 0x80
 8004d2c:	055b      	lsls	r3, r3, #21
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d110      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4ba2      	ldr	r3, [pc, #648]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d36:	4ba1      	ldr	r3, [pc, #644]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0549      	lsls	r1, r1, #21
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d40:	4b9e      	ldr	r3, [pc, #632]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	055b      	lsls	r3, r3, #21
 8004d48:	4013      	ands	r3, r2
 8004d4a:	60bb      	str	r3, [r7, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d54:	4b9a      	ldr	r3, [pc, #616]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b99      	ldr	r3, [pc, #612]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d5a:	2180      	movs	r1, #128	; 0x80
 8004d5c:	0049      	lsls	r1, r1, #1
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d62:	f7fe fc59 	bl	8003618 <HAL_GetTick>
 8004d66:	0003      	movs	r3, r0
 8004d68:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d6a:	e00b      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6c:	f7fe fc54 	bl	8003618 <HAL_GetTick>
 8004d70:	0002      	movs	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d904      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004d7a:	2313      	movs	r3, #19
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	2203      	movs	r2, #3
 8004d80:	701a      	strb	r2, [r3, #0]
        break;
 8004d82:	e005      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d84:	4b8e      	ldr	r3, [pc, #568]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d0ed      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004d90:	2313      	movs	r3, #19
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d154      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d9a:	4b88      	ldr	r3, [pc, #544]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d9e:	23c0      	movs	r3, #192	; 0xc0
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4013      	ands	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d019      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d014      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004db6:	4b81      	ldr	r3, [pc, #516]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	4a82      	ldr	r2, [pc, #520]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dc0:	4b7e      	ldr	r3, [pc, #504]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dc4:	4b7d      	ldr	r3, [pc, #500]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	0249      	lsls	r1, r1, #9
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dce:	4b7b      	ldr	r3, [pc, #492]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dd2:	4b7a      	ldr	r3, [pc, #488]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd4:	497c      	ldr	r1, [pc, #496]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dda:	4b78      	ldr	r3, [pc, #480]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2201      	movs	r2, #1
 8004de4:	4013      	ands	r3, r2
 8004de6:	d016      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fc16 	bl	8003618 <HAL_GetTick>
 8004dec:	0003      	movs	r3, r0
 8004dee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df0:	e00c      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fe fc11 	bl	8003618 <HAL_GetTick>
 8004df6:	0002      	movs	r2, r0
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	4a73      	ldr	r2, [pc, #460]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d904      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004e02:	2313      	movs	r3, #19
 8004e04:	18fb      	adds	r3, r7, r3
 8004e06:	2203      	movs	r2, #3
 8004e08:	701a      	strb	r2, [r3, #0]
            break;
 8004e0a:	e004      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0c:	4b6b      	ldr	r3, [pc, #428]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e10:	2202      	movs	r2, #2
 8004e12:	4013      	ands	r3, r2
 8004e14:	d0ed      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004e16:	2313      	movs	r3, #19
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e20:	4b66      	ldr	r3, [pc, #408]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	4a67      	ldr	r2, [pc, #412]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e2e:	4b63      	ldr	r3, [pc, #396]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e34:	e00c      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e36:	2312      	movs	r3, #18
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	2213      	movs	r2, #19
 8004e3c:	18ba      	adds	r2, r7, r2
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e005      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	2312      	movs	r3, #18
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	2213      	movs	r2, #19
 8004e4a:	18ba      	adds	r2, r7, r2
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e50:	2311      	movs	r3, #17
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d105      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b58      	ldr	r3, [pc, #352]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e5e:	4b57      	ldr	r3, [pc, #348]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e60:	495b      	ldr	r1, [pc, #364]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e70:	4b52      	ldr	r3, [pc, #328]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	2203      	movs	r2, #3
 8004e76:	4393      	bics	r3, r2
 8004e78:	0019      	movs	r1, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e80:	430a      	orrs	r2, r1
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2210      	movs	r2, #16
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e8e:	4b4b      	ldr	r3, [pc, #300]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e92:	4a50      	ldr	r2, [pc, #320]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	0019      	movs	r1, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4b47      	ldr	r3, [pc, #284]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eae:	4b43      	ldr	r3, [pc, #268]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	4a49      	ldr	r2, [pc, #292]	; (8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ece:	4b3b      	ldr	r3, [pc, #236]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	4a42      	ldr	r2, [pc, #264]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699a      	ldr	r2, [r3, #24]
 8004edc:	4b37      	ldr	r3, [pc, #220]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d009      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	4a3b      	ldr	r2, [pc, #236]	; (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004efc:	430a      	orrs	r2, r1
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	01db      	lsls	r3, r3, #7
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d015      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	0899      	lsrs	r1, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69da      	ldr	r2, [r3, #28]
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	05db      	lsls	r3, r3, #23
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d106      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f2a:	4b24      	ldr	r3, [pc, #144]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	0249      	lsls	r1, r1, #9
 8004f34:	430a      	orrs	r2, r1
 8004f36:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	039b      	lsls	r3, r3, #14
 8004f40:	4013      	ands	r3, r2
 8004f42:	d016      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	03db      	lsls	r3, r3, #15
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d106      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004f64:	4b15      	ldr	r3, [pc, #84]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f6a:	2180      	movs	r1, #128	; 0x80
 8004f6c:	0449      	lsls	r1, r1, #17
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d016      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004f7e:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	01db      	lsls	r3, r3, #7
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d106      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004fa4:	2180      	movs	r1, #128	; 0x80
 8004fa6:	0249      	lsls	r1, r1, #9
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004fac:	2312      	movs	r3, #18
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b006      	add	sp, #24
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	40007000 	.word	0x40007000
 8004fc4:	fffffcff 	.word	0xfffffcff
 8004fc8:	fffeffff 	.word	0xfffeffff
 8004fcc:	00001388 	.word	0x00001388
 8004fd0:	efffffff 	.word	0xefffffff
 8004fd4:	fffff3ff 	.word	0xfffff3ff
 8004fd8:	fff3ffff 	.word	0xfff3ffff
 8004fdc:	ffcfffff 	.word	0xffcfffff
 8004fe0:	ffffcfff 	.word	0xffffcfff
 8004fe4:	ffbfffff 	.word	0xffbfffff
 8004fe8:	ffff3fff 	.word	0xffff3fff

08004fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e04a      	b.n	8005094 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	223d      	movs	r2, #61	; 0x3d
 8005002:	5c9b      	ldrb	r3, [r3, r2]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	223c      	movs	r2, #60	; 0x3c
 800500e:	2100      	movs	r1, #0
 8005010:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	0018      	movs	r0, r3
 8005016:	f7fd ffa7 	bl	8002f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	223d      	movs	r2, #61	; 0x3d
 800501e:	2102      	movs	r1, #2
 8005020:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3304      	adds	r3, #4
 800502a:	0019      	movs	r1, r3
 800502c:	0010      	movs	r0, r2
 800502e:	f000 fefb 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2248      	movs	r2, #72	; 0x48
 8005036:	2101      	movs	r1, #1
 8005038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	223e      	movs	r2, #62	; 0x3e
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	223f      	movs	r2, #63	; 0x3f
 8005046:	2101      	movs	r1, #1
 8005048:	5499      	strb	r1, [r3, r2]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2240      	movs	r2, #64	; 0x40
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2241      	movs	r2, #65	; 0x41
 8005056:	2101      	movs	r1, #1
 8005058:	5499      	strb	r1, [r3, r2]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2242      	movs	r2, #66	; 0x42
 800505e:	2101      	movs	r1, #1
 8005060:	5499      	strb	r1, [r3, r2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2243      	movs	r2, #67	; 0x43
 8005066:	2101      	movs	r1, #1
 8005068:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2244      	movs	r2, #68	; 0x44
 800506e:	2101      	movs	r1, #1
 8005070:	5499      	strb	r1, [r3, r2]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2245      	movs	r2, #69	; 0x45
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2246      	movs	r2, #70	; 0x46
 800507e:	2101      	movs	r1, #1
 8005080:	5499      	strb	r1, [r3, r2]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2247      	movs	r2, #71	; 0x47
 8005086:	2101      	movs	r1, #1
 8005088:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	223d      	movs	r2, #61	; 0x3d
 800508e:	2101      	movs	r1, #1
 8005090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b002      	add	sp, #8
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e04a      	b.n	8005144 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	223d      	movs	r2, #61	; 0x3d
 80050b2:	5c9b      	ldrb	r3, [r3, r2]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d107      	bne.n	80050ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	223c      	movs	r2, #60	; 0x3c
 80050be:	2100      	movs	r1, #0
 80050c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f000 f841 	bl	800514c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	223d      	movs	r2, #61	; 0x3d
 80050ce:	2102      	movs	r1, #2
 80050d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	0019      	movs	r1, r3
 80050dc:	0010      	movs	r0, r2
 80050de:	f000 fea3 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2248      	movs	r2, #72	; 0x48
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	223e      	movs	r2, #62	; 0x3e
 80050ee:	2101      	movs	r1, #1
 80050f0:	5499      	strb	r1, [r3, r2]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	223f      	movs	r2, #63	; 0x3f
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	2101      	movs	r1, #1
 8005100:	5499      	strb	r1, [r3, r2]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2241      	movs	r2, #65	; 0x41
 8005106:	2101      	movs	r1, #1
 8005108:	5499      	strb	r1, [r3, r2]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2242      	movs	r2, #66	; 0x42
 800510e:	2101      	movs	r1, #1
 8005110:	5499      	strb	r1, [r3, r2]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2243      	movs	r2, #67	; 0x43
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2244      	movs	r2, #68	; 0x44
 800511e:	2101      	movs	r1, #1
 8005120:	5499      	strb	r1, [r3, r2]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2245      	movs	r2, #69	; 0x45
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2246      	movs	r2, #70	; 0x46
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2247      	movs	r2, #71	; 0x47
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	223d      	movs	r2, #61	; 0x3d
 800513e:	2101      	movs	r1, #1
 8005140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	0018      	movs	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005154:	46c0      	nop			; (mov r8, r8)
 8005156:	46bd      	mov	sp, r7
 8005158:	b002      	add	sp, #8
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <HAL_TIM_PWM_Start+0x22>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	223e      	movs	r2, #62	; 0x3e
 8005170:	5c9b      	ldrb	r3, [r3, r2]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	4193      	sbcs	r3, r2
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e037      	b.n	80051ee <HAL_TIM_PWM_Start+0x92>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b04      	cmp	r3, #4
 8005182:	d108      	bne.n	8005196 <HAL_TIM_PWM_Start+0x3a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	223f      	movs	r2, #63	; 0x3f
 8005188:	5c9b      	ldrb	r3, [r3, r2]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	4193      	sbcs	r3, r2
 8005192:	b2db      	uxtb	r3, r3
 8005194:	e02b      	b.n	80051ee <HAL_TIM_PWM_Start+0x92>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b08      	cmp	r3, #8
 800519a:	d108      	bne.n	80051ae <HAL_TIM_PWM_Start+0x52>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2240      	movs	r2, #64	; 0x40
 80051a0:	5c9b      	ldrb	r3, [r3, r2]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	4193      	sbcs	r3, r2
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e01f      	b.n	80051ee <HAL_TIM_PWM_Start+0x92>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b0c      	cmp	r3, #12
 80051b2:	d108      	bne.n	80051c6 <HAL_TIM_PWM_Start+0x6a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2241      	movs	r2, #65	; 0x41
 80051b8:	5c9b      	ldrb	r3, [r3, r2]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	1e5a      	subs	r2, r3, #1
 80051c0:	4193      	sbcs	r3, r2
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	e013      	b.n	80051ee <HAL_TIM_PWM_Start+0x92>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d108      	bne.n	80051de <HAL_TIM_PWM_Start+0x82>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2242      	movs	r2, #66	; 0x42
 80051d0:	5c9b      	ldrb	r3, [r3, r2]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	1e5a      	subs	r2, r3, #1
 80051d8:	4193      	sbcs	r3, r2
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	e007      	b.n	80051ee <HAL_TIM_PWM_Start+0x92>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2243      	movs	r2, #67	; 0x43
 80051e2:	5c9b      	ldrb	r3, [r3, r2]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	1e5a      	subs	r2, r3, #1
 80051ea:	4193      	sbcs	r3, r2
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e081      	b.n	80052fa <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xaa>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	223e      	movs	r2, #62	; 0x3e
 8005200:	2102      	movs	r1, #2
 8005202:	5499      	strb	r1, [r3, r2]
 8005204:	e023      	b.n	800524e <HAL_TIM_PWM_Start+0xf2>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0xba>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	223f      	movs	r2, #63	; 0x3f
 8005210:	2102      	movs	r1, #2
 8005212:	5499      	strb	r1, [r3, r2]
 8005214:	e01b      	b.n	800524e <HAL_TIM_PWM_Start+0xf2>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xca>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2240      	movs	r2, #64	; 0x40
 8005220:	2102      	movs	r1, #2
 8005222:	5499      	strb	r1, [r3, r2]
 8005224:	e013      	b.n	800524e <HAL_TIM_PWM_Start+0xf2>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b0c      	cmp	r3, #12
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0xda>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2241      	movs	r2, #65	; 0x41
 8005230:	2102      	movs	r1, #2
 8005232:	5499      	strb	r1, [r3, r2]
 8005234:	e00b      	b.n	800524e <HAL_TIM_PWM_Start+0xf2>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b10      	cmp	r3, #16
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0xea>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2242      	movs	r2, #66	; 0x42
 8005240:	2102      	movs	r1, #2
 8005242:	5499      	strb	r1, [r3, r2]
 8005244:	e003      	b.n	800524e <HAL_TIM_PWM_Start+0xf2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2243      	movs	r2, #67	; 0x43
 800524a:	2102      	movs	r1, #2
 800524c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	2201      	movs	r2, #1
 8005256:	0018      	movs	r0, r3
 8005258:	f001 fab2 	bl	80067c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a28      	ldr	r2, [pc, #160]	; (8005304 <HAL_TIM_PWM_Start+0x1a8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_TIM_PWM_Start+0x11e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a27      	ldr	r2, [pc, #156]	; (8005308 <HAL_TIM_PWM_Start+0x1ac>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_TIM_PWM_Start+0x11e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	; (800530c <HAL_TIM_PWM_Start+0x1b0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d101      	bne.n	800527e <HAL_TIM_PWM_Start+0x122>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <HAL_TIM_PWM_Start+0x124>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d008      	beq.n	8005296 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	0209      	lsls	r1, r1, #8
 8005292:	430a      	orrs	r2, r1
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <HAL_TIM_PWM_Start+0x1a8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00a      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x15a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	05db      	lsls	r3, r3, #23
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d004      	beq.n	80052b6 <HAL_TIM_PWM_Start+0x15a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a17      	ldr	r2, [pc, #92]	; (8005310 <HAL_TIM_PWM_Start+0x1b4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d116      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	4a15      	ldr	r2, [pc, #84]	; (8005314 <HAL_TIM_PWM_Start+0x1b8>)
 80052be:	4013      	ands	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d016      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x19a>
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	025b      	lsls	r3, r3, #9
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d011      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2101      	movs	r1, #1
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2101      	movs	r1, #1
 80052f0:	430a      	orrs	r2, r1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b004      	add	sp, #16
 8005300:	bd80      	pop	{r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	40012c00 	.word	0x40012c00
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	40000400 	.word	0x40000400
 8005314:	00010007 	.word	0x00010007

08005318 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e04a      	b.n	80053c0 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	223d      	movs	r2, #61	; 0x3d
 800532e:	5c9b      	ldrb	r3, [r3, r2]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d107      	bne.n	8005346 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	223c      	movs	r2, #60	; 0x3c
 800533a:	2100      	movs	r1, #0
 800533c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0018      	movs	r0, r3
 8005342:	f7fd fd69 	bl	8002e18 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	223d      	movs	r2, #61	; 0x3d
 800534a:	2102      	movs	r1, #2
 800534c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	0019      	movs	r1, r3
 8005358:	0010      	movs	r0, r2
 800535a:	f000 fd65 	bl	8005e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2248      	movs	r2, #72	; 0x48
 8005362:	2101      	movs	r1, #1
 8005364:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	223e      	movs	r2, #62	; 0x3e
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	223f      	movs	r2, #63	; 0x3f
 8005372:	2101      	movs	r1, #1
 8005374:	5499      	strb	r1, [r3, r2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2240      	movs	r2, #64	; 0x40
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2241      	movs	r2, #65	; 0x41
 8005382:	2101      	movs	r1, #1
 8005384:	5499      	strb	r1, [r3, r2]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2242      	movs	r2, #66	; 0x42
 800538a:	2101      	movs	r1, #1
 800538c:	5499      	strb	r1, [r3, r2]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2243      	movs	r2, #67	; 0x43
 8005392:	2101      	movs	r1, #1
 8005394:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2244      	movs	r2, #68	; 0x44
 800539a:	2101      	movs	r1, #1
 800539c:	5499      	strb	r1, [r3, r2]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2245      	movs	r2, #69	; 0x45
 80053a2:	2101      	movs	r1, #1
 80053a4:	5499      	strb	r1, [r3, r2]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2246      	movs	r2, #70	; 0x46
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2247      	movs	r2, #71	; 0x47
 80053b2:	2101      	movs	r1, #1
 80053b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	223d      	movs	r2, #61	; 0x3d
 80053ba:	2101      	movs	r1, #1
 80053bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b002      	add	sp, #8
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	230f      	movs	r3, #15
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <HAL_TIM_IC_Start_IT+0x22>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	223e      	movs	r2, #62	; 0x3e
 80053e4:	5c9b      	ldrb	r3, [r3, r2]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e023      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x6a>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d104      	bne.n	80053fa <HAL_TIM_IC_Start_IT+0x32>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	223f      	movs	r2, #63	; 0x3f
 80053f4:	5c9b      	ldrb	r3, [r3, r2]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	e01b      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x6a>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d104      	bne.n	800540a <HAL_TIM_IC_Start_IT+0x42>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	5c9b      	ldrb	r3, [r3, r2]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	e013      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x6a>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b0c      	cmp	r3, #12
 800540e:	d104      	bne.n	800541a <HAL_TIM_IC_Start_IT+0x52>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2241      	movs	r2, #65	; 0x41
 8005414:	5c9b      	ldrb	r3, [r3, r2]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	e00b      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x6a>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b10      	cmp	r3, #16
 800541e:	d104      	bne.n	800542a <HAL_TIM_IC_Start_IT+0x62>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2242      	movs	r2, #66	; 0x42
 8005424:	5c9b      	ldrb	r3, [r3, r2]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e003      	b.n	8005432 <HAL_TIM_IC_Start_IT+0x6a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2243      	movs	r2, #67	; 0x43
 800542e:	5c9b      	ldrb	r3, [r3, r2]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	220e      	movs	r2, #14
 8005434:	18ba      	adds	r2, r7, r2
 8005436:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_TIM_IC_Start_IT+0x80>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2244      	movs	r2, #68	; 0x44
 8005442:	5c9b      	ldrb	r3, [r3, r2]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e013      	b.n	8005470 <HAL_TIM_IC_Start_IT+0xa8>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d104      	bne.n	8005458 <HAL_TIM_IC_Start_IT+0x90>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2245      	movs	r2, #69	; 0x45
 8005452:	5c9b      	ldrb	r3, [r3, r2]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e00b      	b.n	8005470 <HAL_TIM_IC_Start_IT+0xa8>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b08      	cmp	r3, #8
 800545c:	d104      	bne.n	8005468 <HAL_TIM_IC_Start_IT+0xa0>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2246      	movs	r2, #70	; 0x46
 8005462:	5c9b      	ldrb	r3, [r3, r2]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e003      	b.n	8005470 <HAL_TIM_IC_Start_IT+0xa8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2247      	movs	r2, #71	; 0x47
 800546c:	5c9b      	ldrb	r3, [r3, r2]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	210d      	movs	r1, #13
 8005472:	187a      	adds	r2, r7, r1
 8005474:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005476:	230e      	movs	r3, #14
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d103      	bne.n	8005488 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005480:	187b      	adds	r3, r7, r1
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0c3      	b.n	8005614 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d104      	bne.n	800549c <HAL_TIM_IC_Start_IT+0xd4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	223e      	movs	r2, #62	; 0x3e
 8005496:	2102      	movs	r1, #2
 8005498:	5499      	strb	r1, [r3, r2]
 800549a:	e023      	b.n	80054e4 <HAL_TIM_IC_Start_IT+0x11c>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d104      	bne.n	80054ac <HAL_TIM_IC_Start_IT+0xe4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	223f      	movs	r2, #63	; 0x3f
 80054a6:	2102      	movs	r1, #2
 80054a8:	5499      	strb	r1, [r3, r2]
 80054aa:	e01b      	b.n	80054e4 <HAL_TIM_IC_Start_IT+0x11c>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b08      	cmp	r3, #8
 80054b0:	d104      	bne.n	80054bc <HAL_TIM_IC_Start_IT+0xf4>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2240      	movs	r2, #64	; 0x40
 80054b6:	2102      	movs	r1, #2
 80054b8:	5499      	strb	r1, [r3, r2]
 80054ba:	e013      	b.n	80054e4 <HAL_TIM_IC_Start_IT+0x11c>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b0c      	cmp	r3, #12
 80054c0:	d104      	bne.n	80054cc <HAL_TIM_IC_Start_IT+0x104>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2241      	movs	r2, #65	; 0x41
 80054c6:	2102      	movs	r1, #2
 80054c8:	5499      	strb	r1, [r3, r2]
 80054ca:	e00b      	b.n	80054e4 <HAL_TIM_IC_Start_IT+0x11c>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d104      	bne.n	80054dc <HAL_TIM_IC_Start_IT+0x114>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2242      	movs	r2, #66	; 0x42
 80054d6:	2102      	movs	r1, #2
 80054d8:	5499      	strb	r1, [r3, r2]
 80054da:	e003      	b.n	80054e4 <HAL_TIM_IC_Start_IT+0x11c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2243      	movs	r2, #67	; 0x43
 80054e0:	2102      	movs	r1, #2
 80054e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d104      	bne.n	80054f4 <HAL_TIM_IC_Start_IT+0x12c>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2244      	movs	r2, #68	; 0x44
 80054ee:	2102      	movs	r1, #2
 80054f0:	5499      	strb	r1, [r3, r2]
 80054f2:	e013      	b.n	800551c <HAL_TIM_IC_Start_IT+0x154>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d104      	bne.n	8005504 <HAL_TIM_IC_Start_IT+0x13c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2245      	movs	r2, #69	; 0x45
 80054fe:	2102      	movs	r1, #2
 8005500:	5499      	strb	r1, [r3, r2]
 8005502:	e00b      	b.n	800551c <HAL_TIM_IC_Start_IT+0x154>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b08      	cmp	r3, #8
 8005508:	d104      	bne.n	8005514 <HAL_TIM_IC_Start_IT+0x14c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2246      	movs	r2, #70	; 0x46
 800550e:	2102      	movs	r1, #2
 8005510:	5499      	strb	r1, [r3, r2]
 8005512:	e003      	b.n	800551c <HAL_TIM_IC_Start_IT+0x154>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2247      	movs	r2, #71	; 0x47
 8005518:	2102      	movs	r1, #2
 800551a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b0c      	cmp	r3, #12
 8005520:	d02a      	beq.n	8005578 <HAL_TIM_IC_Start_IT+0x1b0>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d830      	bhi.n	800558a <HAL_TIM_IC_Start_IT+0x1c2>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b08      	cmp	r3, #8
 800552c:	d01b      	beq.n	8005566 <HAL_TIM_IC_Start_IT+0x19e>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d82a      	bhi.n	800558a <HAL_TIM_IC_Start_IT+0x1c2>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IC_Start_IT+0x17a>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d009      	beq.n	8005554 <HAL_TIM_IC_Start_IT+0x18c>
 8005540:	e023      	b.n	800558a <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2102      	movs	r1, #2
 800554e:	430a      	orrs	r2, r1
 8005550:	60da      	str	r2, [r3, #12]
      break;
 8005552:	e01f      	b.n	8005594 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2104      	movs	r1, #4
 8005560:	430a      	orrs	r2, r1
 8005562:	60da      	str	r2, [r3, #12]
      break;
 8005564:	e016      	b.n	8005594 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2108      	movs	r1, #8
 8005572:	430a      	orrs	r2, r1
 8005574:	60da      	str	r2, [r3, #12]
      break;
 8005576:	e00d      	b.n	8005594 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2110      	movs	r1, #16
 8005584:	430a      	orrs	r2, r1
 8005586:	60da      	str	r2, [r3, #12]
      break;
 8005588:	e004      	b.n	8005594 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800558a:	230f      	movs	r3, #15
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2201      	movs	r2, #1
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005594:	230f      	movs	r3, #15
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d137      	bne.n	800560e <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6839      	ldr	r1, [r7, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	0018      	movs	r0, r3
 80055a8:	f001 f90a 	bl	80067c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1a      	ldr	r2, [pc, #104]	; (800561c <HAL_TIM_IC_Start_IT+0x254>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00a      	beq.n	80055cc <HAL_TIM_IC_Start_IT+0x204>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	05db      	lsls	r3, r3, #23
 80055be:	429a      	cmp	r2, r3
 80055c0:	d004      	beq.n	80055cc <HAL_TIM_IC_Start_IT+0x204>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a16      	ldr	r2, [pc, #88]	; (8005620 <HAL_TIM_IC_Start_IT+0x258>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d116      	bne.n	80055fa <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_TIM_IC_Start_IT+0x25c>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b06      	cmp	r3, #6
 80055dc:	d016      	beq.n	800560c <HAL_TIM_IC_Start_IT+0x244>
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	025b      	lsls	r3, r3, #9
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d011      	beq.n	800560c <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2101      	movs	r1, #1
 80055f4:	430a      	orrs	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	e008      	b.n	800560c <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2101      	movs	r1, #1
 8005606:	430a      	orrs	r2, r1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e000      	b.n	800560e <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800560e:	230f      	movs	r3, #15
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	781b      	ldrb	r3, [r3, #0]
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40000400 	.word	0x40000400
 8005624:	00010007 	.word	0x00010007

08005628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	2202      	movs	r2, #2
 8005638:	4013      	ands	r3, r2
 800563a:	2b02      	cmp	r3, #2
 800563c:	d124      	bne.n	8005688 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	2202      	movs	r2, #2
 8005646:	4013      	ands	r3, r2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d11d      	bne.n	8005688 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2203      	movs	r2, #3
 8005652:	4252      	negs	r2, r2
 8005654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	2203      	movs	r2, #3
 8005664:	4013      	ands	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	0018      	movs	r0, r3
 800566c:	f7fc faae 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 8005670:	e007      	b.n	8005682 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f000 fbbf 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	0018      	movs	r0, r3
 800567e:	f000 fbc3 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2204      	movs	r2, #4
 8005690:	4013      	ands	r3, r2
 8005692:	2b04      	cmp	r3, #4
 8005694:	d125      	bne.n	80056e2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2204      	movs	r2, #4
 800569e:	4013      	ands	r3, r2
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d11e      	bne.n	80056e2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2205      	movs	r2, #5
 80056aa:	4252      	negs	r2, r2
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	23c0      	movs	r3, #192	; 0xc0
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4013      	ands	r3, r2
 80056c0:	d004      	beq.n	80056cc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fc fa81 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 80056ca:	e007      	b.n	80056dc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 fb92 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	0018      	movs	r0, r3
 80056d8:	f000 fb96 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2208      	movs	r2, #8
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d124      	bne.n	800573a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2208      	movs	r2, #8
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d11d      	bne.n	800573a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2209      	movs	r2, #9
 8005704:	4252      	negs	r2, r2
 8005706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2204      	movs	r2, #4
 800570c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2203      	movs	r2, #3
 8005716:	4013      	ands	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f7fc fa55 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 8005722:	e007      	b.n	8005734 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f000 fb66 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	0018      	movs	r0, r3
 8005730:	f000 fb6a 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2210      	movs	r2, #16
 8005742:	4013      	ands	r3, r2
 8005744:	2b10      	cmp	r3, #16
 8005746:	d125      	bne.n	8005794 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2210      	movs	r2, #16
 8005750:	4013      	ands	r3, r2
 8005752:	2b10      	cmp	r3, #16
 8005754:	d11e      	bne.n	8005794 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2211      	movs	r2, #17
 800575c:	4252      	negs	r2, r2
 800575e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2208      	movs	r2, #8
 8005764:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	23c0      	movs	r3, #192	; 0xc0
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4013      	ands	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f7fc fa28 	bl	8001bcc <HAL_TIM_IC_CaptureCallback>
 800577c:	e007      	b.n	800578e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f000 fb39 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f000 fb3d 	bl	8005e08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2201      	movs	r2, #1
 800579c:	4013      	ands	r3, r2
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10f      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d108      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2202      	movs	r2, #2
 80057b6:	4252      	negs	r2, r2
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 fb13 	bl	8005de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d10f      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	4013      	ands	r3, r2
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d108      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2281      	movs	r2, #129	; 0x81
 80057e4:	4252      	negs	r2, r2
 80057e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f001 f87c 	bl	80068e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	401a      	ands	r2, r3
 80057fc:	2380      	movs	r3, #128	; 0x80
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	429a      	cmp	r2, r3
 8005802:	d10e      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2280      	movs	r2, #128	; 0x80
 800580c:	4013      	ands	r3, r2
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d107      	bne.n	8005822 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_TIM_IRQHandler+0x260>)
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	0018      	movs	r0, r3
 800581e:	f001 f86b 	bl	80068f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2240      	movs	r2, #64	; 0x40
 800582a:	4013      	ands	r3, r2
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d10f      	bne.n	8005850 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2240      	movs	r2, #64	; 0x40
 8005838:	4013      	ands	r3, r2
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d108      	bne.n	8005850 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2241      	movs	r2, #65	; 0x41
 8005844:	4252      	negs	r2, r2
 8005846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0018      	movs	r0, r3
 800584c:	f000 fae4 	bl	8005e18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2220      	movs	r2, #32
 8005858:	4013      	ands	r3, r2
 800585a:	2b20      	cmp	r3, #32
 800585c:	d10f      	bne.n	800587e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2220      	movs	r2, #32
 8005866:	4013      	ands	r3, r2
 8005868:	2b20      	cmp	r3, #32
 800586a:	d108      	bne.n	800587e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2221      	movs	r2, #33	; 0x21
 8005872:	4252      	negs	r2, r2
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	0018      	movs	r0, r3
 800587a:	f001 f82d 	bl	80068d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	46bd      	mov	sp, r7
 8005882:	b002      	add	sp, #8
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	fffffeff 	.word	0xfffffeff

0800588c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005898:	2317      	movs	r3, #23
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2200      	movs	r2, #0
 800589e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	223c      	movs	r2, #60	; 0x3c
 80058a4:	5c9b      	ldrb	r3, [r3, r2]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_IC_ConfigChannel+0x22>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e08c      	b.n	80059c8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	223c      	movs	r2, #60	; 0x3c
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d11b      	bne.n	80058f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f000 fdbe 	bl	800644c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	210c      	movs	r1, #12
 80058dc:	438a      	bics	r2, r1
 80058de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6999      	ldr	r1, [r3, #24]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e062      	b.n	80059ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d11c      	bne.n	8005934 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f000 fe23 	bl	8006554 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	492d      	ldr	r1, [pc, #180]	; (80059d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800591a:	400a      	ands	r2, r1
 800591c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6999      	ldr	r1, [r3, #24]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	021a      	lsls	r2, r3, #8
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	619a      	str	r2, [r3, #24]
 8005932:	e042      	b.n	80059ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b08      	cmp	r3, #8
 8005938:	d11b      	bne.n	8005972 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f000 fe77 	bl	800663c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	210c      	movs	r1, #12
 800595a:	438a      	bics	r2, r1
 800595c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69d9      	ldr	r1, [r3, #28]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
 8005970:	e023      	b.n	80059ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b0c      	cmp	r3, #12
 8005976:	d11c      	bne.n	80059b2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f000 fe98 	bl	80066bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	490e      	ldr	r1, [pc, #56]	; (80059d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005998:	400a      	ands	r2, r1
 800599a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69d9      	ldr	r1, [r3, #28]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	021a      	lsls	r2, r3, #8
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	61da      	str	r2, [r3, #28]
 80059b0:	e003      	b.n	80059ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80059b2:	2317      	movs	r3, #23
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	223c      	movs	r2, #60	; 0x3c
 80059be:	2100      	movs	r1, #0
 80059c0:	5499      	strb	r1, [r3, r2]

  return status;
 80059c2:	2317      	movs	r3, #23
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	781b      	ldrb	r3, [r3, #0]
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b006      	add	sp, #24
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	fffff3ff 	.word	0xfffff3ff

080059d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e0:	2317      	movs	r3, #23
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	223c      	movs	r2, #60	; 0x3c
 80059ec:	5c9b      	ldrb	r3, [r3, r2]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e0e5      	b.n	8005bc2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	223c      	movs	r2, #60	; 0x3c
 80059fa:	2101      	movs	r1, #1
 80059fc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b14      	cmp	r3, #20
 8005a02:	d900      	bls.n	8005a06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005a04:	e0d1      	b.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	009a      	lsls	r2, r3, #2
 8005a0a:	4b70      	ldr	r3, [pc, #448]	; (8005bcc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005a0c:	18d3      	adds	r3, r2, r3
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	0011      	movs	r1, r2
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f000 fa7a 	bl	8005f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2108      	movs	r1, #8
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	438a      	bics	r2, r1
 8005a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6999      	ldr	r1, [r3, #24]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691a      	ldr	r2, [r3, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	619a      	str	r2, [r3, #24]
      break;
 8005a52:	e0af      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	0011      	movs	r1, r2
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 fad9 	bl	8006014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699a      	ldr	r2, [r3, #24]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2180      	movs	r1, #128	; 0x80
 8005a6e:	0109      	lsls	r1, r1, #4
 8005a70:	430a      	orrs	r2, r1
 8005a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4954      	ldr	r1, [pc, #336]	; (8005bd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6999      	ldr	r1, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	021a      	lsls	r2, r3, #8
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	619a      	str	r2, [r3, #24]
      break;
 8005a98:	e08c      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0011      	movs	r1, r2
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 fb34 	bl	8006110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2108      	movs	r1, #8
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2104      	movs	r1, #4
 8005ac4:	438a      	bics	r2, r1
 8005ac6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69d9      	ldr	r1, [r3, #28]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	61da      	str	r2, [r3, #28]
      break;
 8005ada:	e06b      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	0011      	movs	r1, r2
 8005ae4:	0018      	movs	r0, r3
 8005ae6:	f000 fb95 	bl	8006214 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	0109      	lsls	r1, r1, #4
 8005af8:	430a      	orrs	r2, r1
 8005afa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4932      	ldr	r1, [pc, #200]	; (8005bd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69d9      	ldr	r1, [r3, #28]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	61da      	str	r2, [r3, #28]
      break;
 8005b20:	e048      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0011      	movs	r1, r2
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 fbd6 	bl	80062dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2108      	movs	r1, #8
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2104      	movs	r1, #4
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b62:	e027      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	0011      	movs	r1, r2
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 fc0f 	bl	8006390 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	0109      	lsls	r1, r1, #4
 8005b80:	430a      	orrs	r2, r1
 8005b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4910      	ldr	r1, [pc, #64]	; (8005bd0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005b90:	400a      	ands	r2, r1
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ba8:	e004      	b.n	8005bb4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005baa:	2317      	movs	r3, #23
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	2201      	movs	r2, #1
 8005bb0:	701a      	strb	r2, [r3, #0]
      break;
 8005bb2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	223c      	movs	r2, #60	; 0x3c
 8005bb8:	2100      	movs	r1, #0
 8005bba:	5499      	strb	r1, [r3, r2]

  return status;
 8005bbc:	2317      	movs	r3, #23
 8005bbe:	18fb      	adds	r3, r7, r3
 8005bc0:	781b      	ldrb	r3, [r3, #0]
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b006      	add	sp, #24
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	080089f8 	.word	0x080089f8
 8005bd0:	fffffbff 	.word	0xfffffbff

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	230f      	movs	r3, #15
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	223c      	movs	r2, #60	; 0x3c
 8005bea:	5c9b      	ldrb	r3, [r3, r2]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIM_ConfigClockSource+0x20>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e0bc      	b.n	8005d6e <HAL_TIM_ConfigClockSource+0x19a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	223c      	movs	r2, #60	; 0x3c
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	223d      	movs	r2, #61	; 0x3d
 8005c00:	2102      	movs	r1, #2
 8005c02:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4a5a      	ldr	r2, [pc, #360]	; (8005d78 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4a59      	ldr	r2, [pc, #356]	; (8005d7c <HAL_TIM_ConfigClockSource+0x1a8>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	0192      	lsls	r2, r2, #6
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d040      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0xde>
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	0192      	lsls	r2, r2, #6
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d900      	bls.n	8005c3a <HAL_TIM_ConfigClockSource+0x66>
 8005c38:	e088      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	0152      	lsls	r2, r2, #5
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d100      	bne.n	8005c44 <HAL_TIM_ConfigClockSource+0x70>
 8005c42:	e088      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x182>
 8005c44:	2280      	movs	r2, #128	; 0x80
 8005c46:	0152      	lsls	r2, r2, #5
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d900      	bls.n	8005c4e <HAL_TIM_ConfigClockSource+0x7a>
 8005c4c:	e07e      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c4e:	2b70      	cmp	r3, #112	; 0x70
 8005c50:	d018      	beq.n	8005c84 <HAL_TIM_ConfigClockSource+0xb0>
 8005c52:	d900      	bls.n	8005c56 <HAL_TIM_ConfigClockSource+0x82>
 8005c54:	e07a      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c56:	2b60      	cmp	r3, #96	; 0x60
 8005c58:	d04f      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x126>
 8005c5a:	d900      	bls.n	8005c5e <HAL_TIM_ConfigClockSource+0x8a>
 8005c5c:	e076      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c5e:	2b50      	cmp	r3, #80	; 0x50
 8005c60:	d03b      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x106>
 8005c62:	d900      	bls.n	8005c66 <HAL_TIM_ConfigClockSource+0x92>
 8005c64:	e072      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d057      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x146>
 8005c6a:	d900      	bls.n	8005c6e <HAL_TIM_ConfigClockSource+0x9a>
 8005c6c:	e06e      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c6e:	2b30      	cmp	r3, #48	; 0x30
 8005c70:	d063      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x166>
 8005c72:	d86b      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d060      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x166>
 8005c78:	d868      	bhi.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d05d      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x166>
 8005c7e:	2b10      	cmp	r3, #16
 8005c80:	d05b      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x166>
 8005c82:	e063      	b.n	8005d4c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	6899      	ldr	r1, [r3, #8]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f000 fd74 	bl	8006780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2277      	movs	r2, #119	; 0x77
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	609a      	str	r2, [r3, #8]
      break;
 8005cb0:	e052      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 fd5d 	bl	8006780 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	01c9      	lsls	r1, r1, #7
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
      break;
 8005cd8:	e03e      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	f000 fc06 	bl	80064f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2150      	movs	r1, #80	; 0x50
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 fd28 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e02e      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	001a      	movs	r2, r3
 8005d08:	f000 fc66 	bl	80065d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2160      	movs	r1, #96	; 0x60
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 fd18 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e01e      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	001a      	movs	r2, r3
 8005d28:	f000 fbe6 	bl	80064f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2140      	movs	r1, #64	; 0x40
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fd08 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e00e      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	0019      	movs	r1, r3
 8005d44:	0010      	movs	r0, r2
 8005d46:	f000 fcff 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e005      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005d4c:	230f      	movs	r3, #15
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
      break;
 8005d54:	e000      	b.n	8005d58 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005d56:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	223d      	movs	r2, #61	; 0x3d
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	223c      	movs	r2, #60	; 0x3c
 8005d64:	2100      	movs	r1, #0
 8005d66:	5499      	strb	r1, [r3, r2]

  return status;
 8005d68:	230f      	movs	r3, #15
 8005d6a:	18fb      	adds	r3, r7, r3
 8005d6c:	781b      	ldrb	r3, [r3, #0]
}
 8005d6e:	0018      	movs	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b004      	add	sp, #16
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	ffceff88 	.word	0xffceff88
 8005d7c:	ffff00ff 	.word	0xffff00ff

08005d80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d01e      	beq.n	8005dd2 <HAL_TIM_ReadCapturedValue+0x52>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	2b0c      	cmp	r3, #12
 8005d98:	d820      	bhi.n	8005ddc <HAL_TIM_ReadCapturedValue+0x5c>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIM_ReadCapturedValue+0x48>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d81a      	bhi.n	8005ddc <HAL_TIM_ReadCapturedValue+0x5c>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_ReadCapturedValue+0x34>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d005      	beq.n	8005dbe <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8005db2:	e013      	b.n	8005ddc <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	60fb      	str	r3, [r7, #12]
      break;
 8005dbc:	e00f      	b.n	8005dde <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	60fb      	str	r3, [r7, #12]
      break;
 8005dc6:	e00a      	b.n	8005dde <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	60fb      	str	r3, [r7, #12]
      break;
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	60fb      	str	r3, [r7, #12]
      break;
 8005dda:	e000      	b.n	8005dde <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8005ddc:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8005dde:	68fb      	ldr	r3, [r7, #12]
}
 8005de0:	0018      	movs	r0, r3
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b004      	add	sp, #16
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b002      	add	sp, #8
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e00:	46c0      	nop			; (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	b002      	add	sp, #8
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b002      	add	sp, #8
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e20:	46c0      	nop			; (mov r8, r8)
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b002      	add	sp, #8
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a30      	ldr	r2, [pc, #192]	; (8005efc <TIM_Base_SetConfig+0xd4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d008      	beq.n	8005e52 <TIM_Base_SetConfig+0x2a>
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	05db      	lsls	r3, r3, #23
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d003      	beq.n	8005e52 <TIM_Base_SetConfig+0x2a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2c      	ldr	r2, [pc, #176]	; (8005f00 <TIM_Base_SetConfig+0xd8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d108      	bne.n	8005e64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2270      	movs	r2, #112	; 0x70
 8005e56:	4393      	bics	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a25      	ldr	r2, [pc, #148]	; (8005efc <TIM_Base_SetConfig+0xd4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d014      	beq.n	8005e96 <TIM_Base_SetConfig+0x6e>
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	05db      	lsls	r3, r3, #23
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d00f      	beq.n	8005e96 <TIM_Base_SetConfig+0x6e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <TIM_Base_SetConfig+0xd8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00b      	beq.n	8005e96 <TIM_Base_SetConfig+0x6e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <TIM_Base_SetConfig+0xdc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d007      	beq.n	8005e96 <TIM_Base_SetConfig+0x6e>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <TIM_Base_SetConfig+0xe0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d003      	beq.n	8005e96 <TIM_Base_SetConfig+0x6e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <TIM_Base_SetConfig+0xe4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <TIM_Base_SetConfig+0xe8>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2280      	movs	r2, #128	; 0x80
 8005eac:	4393      	bics	r3, r2
 8005eae:	001a      	movs	r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <TIM_Base_SetConfig+0xd4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_Base_SetConfig+0xbe>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <TIM_Base_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_Base_SetConfig+0xbe>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <TIM_Base_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d103      	bne.n	8005eee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	615a      	str	r2, [r3, #20]
}
 8005ef4:	46c0      	nop			; (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40012c00 	.word	0x40012c00
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40002000 	.word	0x40002000
 8005f08:	40014400 	.word	0x40014400
 8005f0c:	40014800 	.word	0x40014800
 8005f10:	fffffcff 	.word	0xfffffcff

08005f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	2201      	movs	r2, #1
 8005f24:	4393      	bics	r3, r2
 8005f26:	001a      	movs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a2e      	ldr	r2, [pc, #184]	; (8005ffc <TIM_OC1_SetConfig+0xe8>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	4393      	bics	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a24      	ldr	r2, [pc, #144]	; (8006000 <TIM_OC1_SetConfig+0xec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d007      	beq.n	8005f82 <TIM_OC1_SetConfig+0x6e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a23      	ldr	r2, [pc, #140]	; (8006004 <TIM_OC1_SetConfig+0xf0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d003      	beq.n	8005f82 <TIM_OC1_SetConfig+0x6e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a22      	ldr	r2, [pc, #136]	; (8006008 <TIM_OC1_SetConfig+0xf4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d10c      	bne.n	8005f9c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2208      	movs	r2, #8
 8005f86:	4393      	bics	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4393      	bics	r3, r2
 8005f9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a18      	ldr	r2, [pc, #96]	; (8006000 <TIM_OC1_SetConfig+0xec>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_OC1_SetConfig+0xa0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	; (8006004 <TIM_OC1_SetConfig+0xf0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_OC1_SetConfig+0xa0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a16      	ldr	r2, [pc, #88]	; (8006008 <TIM_OC1_SetConfig+0xf4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d111      	bne.n	8005fd8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4a15      	ldr	r2, [pc, #84]	; (800600c <TIM_OC1_SetConfig+0xf8>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4a14      	ldr	r2, [pc, #80]	; (8006010 <TIM_OC1_SetConfig+0xfc>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	b006      	add	sp, #24
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	fffeff8f 	.word	0xfffeff8f
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40014400 	.word	0x40014400
 8006008:	40014800 	.word	0x40014800
 800600c:	fffffeff 	.word	0xfffffeff
 8006010:	fffffdff 	.word	0xfffffdff

08006014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	2210      	movs	r2, #16
 8006024:	4393      	bics	r3, r2
 8006026:	001a      	movs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a2c      	ldr	r2, [pc, #176]	; (80060f4 <TIM_OC2_SetConfig+0xe0>)
 8006042:	4013      	ands	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4a2b      	ldr	r2, [pc, #172]	; (80060f8 <TIM_OC2_SetConfig+0xe4>)
 800604a:	4013      	ands	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2220      	movs	r2, #32
 800605e:	4393      	bics	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a22      	ldr	r2, [pc, #136]	; (80060fc <TIM_OC2_SetConfig+0xe8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10d      	bne.n	8006092 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	4393      	bics	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2240      	movs	r2, #64	; 0x40
 800608e:	4393      	bics	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a19      	ldr	r2, [pc, #100]	; (80060fc <TIM_OC2_SetConfig+0xe8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d007      	beq.n	80060aa <TIM_OC2_SetConfig+0x96>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a18      	ldr	r2, [pc, #96]	; (8006100 <TIM_OC2_SetConfig+0xec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d003      	beq.n	80060aa <TIM_OC2_SetConfig+0x96>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <TIM_OC2_SetConfig+0xf0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d113      	bne.n	80060d2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	4a16      	ldr	r2, [pc, #88]	; (8006108 <TIM_OC2_SetConfig+0xf4>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <TIM_OC2_SetConfig+0xf8>)
 80060b6:	4013      	ands	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	46c0      	nop			; (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b006      	add	sp, #24
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	feff8fff 	.word	0xfeff8fff
 80060f8:	fffffcff 	.word	0xfffffcff
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800
 8006108:	fffffbff 	.word	0xfffffbff
 800610c:	fffff7ff 	.word	0xfffff7ff

08006110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4a33      	ldr	r2, [pc, #204]	; (80061ec <TIM_OC3_SetConfig+0xdc>)
 8006120:	401a      	ands	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <TIM_OC3_SetConfig+0xe0>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2203      	movs	r2, #3
 8006144:	4393      	bics	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4a27      	ldr	r2, [pc, #156]	; (80061f4 <TIM_OC3_SetConfig+0xe4>)
 8006156:	4013      	ands	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <TIM_OC3_SetConfig+0xe8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d10d      	bne.n	800618a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4a22      	ldr	r2, [pc, #136]	; (80061fc <TIM_OC3_SetConfig+0xec>)
 8006172:	4013      	ands	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4a1e      	ldr	r2, [pc, #120]	; (8006200 <TIM_OC3_SetConfig+0xf0>)
 8006186:	4013      	ands	r3, r2
 8006188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1a      	ldr	r2, [pc, #104]	; (80061f8 <TIM_OC3_SetConfig+0xe8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_OC3_SetConfig+0x92>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <TIM_OC3_SetConfig+0xf4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC3_SetConfig+0x92>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <TIM_OC3_SetConfig+0xf8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d113      	bne.n	80061ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4a19      	ldr	r2, [pc, #100]	; (800620c <TIM_OC3_SetConfig+0xfc>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4a18      	ldr	r2, [pc, #96]	; (8006210 <TIM_OC3_SetConfig+0x100>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b006      	add	sp, #24
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	fffffeff 	.word	0xfffffeff
 80061f0:	fffeff8f 	.word	0xfffeff8f
 80061f4:	fffffdff 	.word	0xfffffdff
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	fffff7ff 	.word	0xfffff7ff
 8006200:	fffffbff 	.word	0xfffffbff
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800
 800620c:	ffffefff 	.word	0xffffefff
 8006210:	ffffdfff 	.word	0xffffdfff

08006214 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4a26      	ldr	r2, [pc, #152]	; (80062bc <TIM_OC4_SetConfig+0xa8>)
 8006224:	401a      	ands	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <TIM_OC4_SetConfig+0xac>)
 8006240:	4013      	ands	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a1f      	ldr	r2, [pc, #124]	; (80062c4 <TIM_OC4_SetConfig+0xb0>)
 8006248:	4013      	ands	r3, r2
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	4a1b      	ldr	r2, [pc, #108]	; (80062c8 <TIM_OC4_SetConfig+0xb4>)
 800625c:	4013      	ands	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	031b      	lsls	r3, r3, #12
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <TIM_OC4_SetConfig+0xb8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_OC4_SetConfig+0x70>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a16      	ldr	r2, [pc, #88]	; (80062d0 <TIM_OC4_SetConfig+0xbc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC4_SetConfig+0x70>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a15      	ldr	r2, [pc, #84]	; (80062d4 <TIM_OC4_SetConfig+0xc0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d109      	bne.n	8006298 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <TIM_OC4_SetConfig+0xc4>)
 8006288:	4013      	ands	r3, r2
 800628a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	621a      	str	r2, [r3, #32]
}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	46bd      	mov	sp, r7
 80062b6:	b006      	add	sp, #24
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	ffffefff 	.word	0xffffefff
 80062c0:	feff8fff 	.word	0xfeff8fff
 80062c4:	fffffcff 	.word	0xfffffcff
 80062c8:	ffffdfff 	.word	0xffffdfff
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40014400 	.word	0x40014400
 80062d4:	40014800 	.word	0x40014800
 80062d8:	ffffbfff 	.word	0xffffbfff

080062dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4a23      	ldr	r2, [pc, #140]	; (8006378 <TIM_OC5_SetConfig+0x9c>)
 80062ec:	401a      	ands	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4a1d      	ldr	r2, [pc, #116]	; (800637c <TIM_OC5_SetConfig+0xa0>)
 8006308:	4013      	ands	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4a19      	ldr	r2, [pc, #100]	; (8006380 <TIM_OC5_SetConfig+0xa4>)
 800631a:	4013      	ands	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a15      	ldr	r2, [pc, #84]	; (8006384 <TIM_OC5_SetConfig+0xa8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d007      	beq.n	8006342 <TIM_OC5_SetConfig+0x66>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a14      	ldr	r2, [pc, #80]	; (8006388 <TIM_OC5_SetConfig+0xac>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC5_SetConfig+0x66>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a13      	ldr	r2, [pc, #76]	; (800638c <TIM_OC5_SetConfig+0xb0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d109      	bne.n	8006356 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <TIM_OC5_SetConfig+0x9c>)
 8006346:	4013      	ands	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b006      	add	sp, #24
 8006376:	bd80      	pop	{r7, pc}
 8006378:	fffeffff 	.word	0xfffeffff
 800637c:	fffeff8f 	.word	0xfffeff8f
 8006380:	fffdffff 	.word	0xfffdffff
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40014400 	.word	0x40014400
 800638c:	40014800 	.word	0x40014800

08006390 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	4a24      	ldr	r2, [pc, #144]	; (8006430 <TIM_OC6_SetConfig+0xa0>)
 80063a0:	401a      	ands	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a1e      	ldr	r2, [pc, #120]	; (8006434 <TIM_OC6_SetConfig+0xa4>)
 80063bc:	4013      	ands	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <TIM_OC6_SetConfig+0xa8>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	051b      	lsls	r3, r3, #20
 80063da:	693a      	ldr	r2, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <TIM_OC6_SetConfig+0xac>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d007      	beq.n	80063f8 <TIM_OC6_SetConfig+0x68>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a15      	ldr	r2, [pc, #84]	; (8006440 <TIM_OC6_SetConfig+0xb0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_OC6_SetConfig+0x68>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a14      	ldr	r2, [pc, #80]	; (8006444 <TIM_OC6_SetConfig+0xb4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d109      	bne.n	800640c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4a13      	ldr	r2, [pc, #76]	; (8006448 <TIM_OC6_SetConfig+0xb8>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	46c0      	nop			; (mov r8, r8)
 8006428:	46bd      	mov	sp, r7
 800642a:	b006      	add	sp, #24
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			; (mov r8, r8)
 8006430:	ffefffff 	.word	0xffefffff
 8006434:	feff8fff 	.word	0xfeff8fff
 8006438:	ffdfffff 	.word	0xffdfffff
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40014400 	.word	0x40014400
 8006444:	40014800 	.word	0x40014800
 8006448:	fffbffff 	.word	0xfffbffff

0800644c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	2201      	movs	r2, #1
 8006460:	4393      	bics	r3, r2
 8006462:	001a      	movs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <TIM_TI1_SetConfig+0xa4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d008      	beq.n	800648e <TIM_TI1_SetConfig+0x42>
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	05db      	lsls	r3, r3, #23
 8006482:	429a      	cmp	r2, r3
 8006484:	d003      	beq.n	800648e <TIM_TI1_SetConfig+0x42>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <TIM_TI1_SetConfig+0xa8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <TIM_TI1_SetConfig+0x46>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <TIM_TI1_SetConfig+0x48>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2203      	movs	r2, #3
 800649c:	4393      	bics	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e003      	b.n	80064b2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2201      	movs	r2, #1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	22f0      	movs	r2, #240	; 0xf0
 80064b6:	4393      	bics	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	22ff      	movs	r2, #255	; 0xff
 80064c0:	4013      	ands	r3, r2
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	220a      	movs	r2, #10
 80064cc:	4393      	bics	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	220a      	movs	r2, #10
 80064d4:	4013      	ands	r3, r2
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	621a      	str	r2, [r3, #32]
}
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b006      	add	sp, #24
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400

080064f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	2201      	movs	r2, #1
 8006510:	4393      	bics	r3, r2
 8006512:	001a      	movs	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	22f0      	movs	r2, #240	; 0xf0
 8006522:	4393      	bics	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	220a      	movs	r2, #10
 8006534:	4393      	bics	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	46c0      	nop			; (mov r8, r8)
 800654e:	46bd      	mov	sp, r7
 8006550:	b006      	add	sp, #24
 8006552:	bd80      	pop	{r7, pc}

08006554 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	2210      	movs	r2, #16
 8006568:	4393      	bics	r3, r2
 800656a:	001a      	movs	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <TIM_TI2_SetConfig+0x7c>)
 8006580:	4013      	ands	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	021b      	lsls	r3, r3, #8
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <TIM_TI2_SetConfig+0x80>)
 8006592:	4013      	ands	r3, r2
 8006594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	031b      	lsls	r3, r3, #12
 800659a:	041b      	lsls	r3, r3, #16
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	22a0      	movs	r2, #160	; 0xa0
 80065a8:	4393      	bics	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	22a0      	movs	r2, #160	; 0xa0
 80065b2:	4013      	ands	r3, r2
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b006      	add	sp, #24
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	fffffcff 	.word	0xfffffcff
 80065d4:	ffff0fff 	.word	0xffff0fff

080065d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	2210      	movs	r2, #16
 80065ea:	4393      	bics	r3, r2
 80065ec:	001a      	movs	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	4a0d      	ldr	r2, [pc, #52]	; (8006638 <TIM_TI2_ConfigInputStage+0x60>)
 8006602:	4013      	ands	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	031b      	lsls	r3, r3, #12
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	22a0      	movs	r2, #160	; 0xa0
 8006614:	4393      	bics	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	621a      	str	r2, [r3, #32]
}
 800662e:	46c0      	nop			; (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b006      	add	sp, #24
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	ffff0fff 	.word	0xffff0fff

0800663c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <TIM_TI3_SetConfig+0x78>)
 8006650:	401a      	ands	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2203      	movs	r2, #3
 8006666:	4393      	bics	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	22f0      	movs	r2, #240	; 0xf0
 8006676:	4393      	bics	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	22ff      	movs	r2, #255	; 0xff
 8006680:	4013      	ands	r3, r2
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4a0b      	ldr	r2, [pc, #44]	; (80066b8 <TIM_TI3_SetConfig+0x7c>)
 800668c:	4013      	ands	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	021a      	lsls	r2, r3, #8
 8006694:	23a0      	movs	r3, #160	; 0xa0
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	4013      	ands	r3, r2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	621a      	str	r2, [r3, #32]
}
 80066ac:	46c0      	nop			; (mov r8, r8)
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b006      	add	sp, #24
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	fffffeff 	.word	0xfffffeff
 80066b8:	fffff5ff 	.word	0xfffff5ff

080066bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4a1a      	ldr	r2, [pc, #104]	; (8006738 <TIM_TI4_SetConfig+0x7c>)
 80066d0:	401a      	ands	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <TIM_TI4_SetConfig+0x80>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	4a12      	ldr	r2, [pc, #72]	; (8006740 <TIM_TI4_SetConfig+0x84>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	031b      	lsls	r3, r3, #12
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	4a0d      	ldr	r2, [pc, #52]	; (8006744 <TIM_TI4_SetConfig+0x88>)
 800670e:	4013      	ands	r3, r2
 8006710:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	031a      	lsls	r2, r3, #12
 8006716:	23a0      	movs	r3, #160	; 0xa0
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	4013      	ands	r3, r2
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	4313      	orrs	r3, r2
 8006720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	46bd      	mov	sp, r7
 8006732:	b006      	add	sp, #24
 8006734:	bd80      	pop	{r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	ffffefff 	.word	0xffffefff
 800673c:	fffffcff 	.word	0xfffffcff
 8006740:	ffff0fff 	.word	0xffff0fff
 8006744:	ffff5fff 	.word	0xffff5fff

08006748 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4a08      	ldr	r2, [pc, #32]	; (800677c <TIM_ITRx_SetConfig+0x34>)
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	2207      	movs	r2, #7
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	609a      	str	r2, [r3, #8]
}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	46bd      	mov	sp, r7
 8006776:	b004      	add	sp, #16
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	ffcfff8f 	.word	0xffcfff8f

08006780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	4a09      	ldr	r2, [pc, #36]	; (80067bc <TIM_ETR_SetConfig+0x3c>)
 8006798:	4013      	ands	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	609a      	str	r2, [r3, #8]
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46bd      	mov	sp, r7
 80067b8:	b006      	add	sp, #24
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	ffff00ff 	.word	0xffff00ff

080067c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	221f      	movs	r2, #31
 80067d0:	4013      	ands	r3, r2
 80067d2:	2201      	movs	r2, #1
 80067d4:	409a      	lsls	r2, r3
 80067d6:	0013      	movs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	43d2      	mvns	r2, r2
 80067e2:	401a      	ands	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	211f      	movs	r1, #31
 80067f0:	400b      	ands	r3, r1
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	4099      	lsls	r1, r3
 80067f6:	000b      	movs	r3, r1
 80067f8:	431a      	orrs	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	46bd      	mov	sp, r7
 8006802:	b006      	add	sp, #24
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	223c      	movs	r2, #60	; 0x3c
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800681c:	2302      	movs	r3, #2
 800681e:	e050      	b.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	223c      	movs	r2, #60	; 0x3c
 8006824:	2101      	movs	r1, #1
 8006826:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	223d      	movs	r2, #61	; 0x3d
 800682c:	2102      	movs	r1, #2
 800682e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a21      	ldr	r2, [pc, #132]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d108      	bne.n	800685c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800684e:	4013      	ands	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2270      	movs	r2, #112	; 0x70
 8006860:	4393      	bics	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a14      	ldr	r2, [pc, #80]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00a      	beq.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	05db      	lsls	r3, r3, #23
 8006888:	429a      	cmp	r2, r3
 800688a:	d004      	beq.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a10      	ldr	r2, [pc, #64]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d10c      	bne.n	80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2280      	movs	r2, #128	; 0x80
 800689a:	4393      	bics	r3, r2
 800689c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	223d      	movs	r2, #61	; 0x3d
 80068b4:	2101      	movs	r1, #1
 80068b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	223c      	movs	r2, #60	; 0x3c
 80068bc:	2100      	movs	r1, #0
 80068be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b004      	add	sp, #16
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	40012c00 	.word	0x40012c00
 80068d0:	ff0fffff 	.word	0xff0fffff
 80068d4:	40000400 	.word	0x40000400

080068d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e0:	46c0      	nop			; (mov r8, r8)
 80068e2:	46bd      	mov	sp, r7
 80068e4:	b002      	add	sp, #8
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f0:	46c0      	nop			; (mov r8, r8)
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b002      	add	sp, #8
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006900:	46c0      	nop			; (mov r8, r8)
 8006902:	46bd      	mov	sp, r7
 8006904:	b002      	add	sp, #8
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e046      	b.n	80069a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2288      	movs	r2, #136	; 0x88
 800691e:	589b      	ldr	r3, [r3, r2]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d107      	bne.n	8006934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2284      	movs	r2, #132	; 0x84
 8006928:	2100      	movs	r1, #0
 800692a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f7fc fc00 	bl	8003134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2288      	movs	r2, #136	; 0x88
 8006938:	2124      	movs	r1, #36	; 0x24
 800693a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2101      	movs	r1, #1
 8006948:	438a      	bics	r2, r1
 800694a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0018      	movs	r0, r3
 8006950:	f000 fc08 	bl	8007164 <UART_SetConfig>
 8006954:	0003      	movs	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e024      	b.n	80069a8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	0018      	movs	r0, r3
 800696a:	f000 fe73 	bl	8007654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	490d      	ldr	r1, [pc, #52]	; (80069b0 <HAL_UART_Init+0xa8>)
 800697a:	400a      	ands	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	212a      	movs	r1, #42	; 0x2a
 800698a:	438a      	bics	r2, r1
 800698c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2101      	movs	r1, #1
 800699a:	430a      	orrs	r2, r1
 800699c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f000 ff0b 	bl	80077bc <UART_CheckIdleState>
 80069a6:	0003      	movs	r3, r0
}
 80069a8:	0018      	movs	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	b002      	add	sp, #8
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	ffffb7ff 	.word	0xffffb7ff

080069b4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e032      	b.n	8006a2c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2288      	movs	r2, #136	; 0x88
 80069ca:	2124      	movs	r1, #36	; 0x24
 80069cc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2101      	movs	r1, #1
 80069da:	438a      	bics	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7fc fca1 	bl	8003340 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2290      	movs	r2, #144	; 0x90
 8006a02:	2100      	movs	r1, #0
 8006a04:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2288      	movs	r2, #136	; 0x88
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	228c      	movs	r2, #140	; 0x8c
 8006a12:	2100      	movs	r1, #0
 8006a14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2284      	movs	r2, #132	; 0x84
 8006a26:	2100      	movs	r1, #0
 8006a28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	b002      	add	sp, #8
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b088      	sub	sp, #32
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	1dbb      	adds	r3, r7, #6
 8006a40:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	228c      	movs	r2, #140	; 0x8c
 8006a46:	589b      	ldr	r3, [r3, r2]
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d14a      	bne.n	8006ae2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_UART_Receive_IT+0x26>
 8006a52:	1dbb      	adds	r3, r7, #6
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e042      	b.n	8006ae4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	015b      	lsls	r3, r3, #5
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d109      	bne.n	8006a7e <HAL_UART_Receive_IT+0x4a>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d105      	bne.n	8006a7e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2201      	movs	r2, #1
 8006a76:	4013      	ands	r3, r2
 8006a78:	d001      	beq.n	8006a7e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e032      	b.n	8006ae4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a18      	ldr	r2, [pc, #96]	; (8006aec <HAL_UART_Receive_IT+0xb8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d020      	beq.n	8006ad0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	2380      	movs	r3, #128	; 0x80
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d019      	beq.n	8006ad0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa0:	613b      	str	r3, [r7, #16]
  return(result);
 8006aa2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f383 8810 	msr	PRIMASK, r3
}
 8006ab0:	46c0      	nop			; (mov r8, r8)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	04c9      	lsls	r1, r1, #19
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f383 8810 	msr	PRIMASK, r3
}
 8006ace:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ad0:	1dbb      	adds	r3, r7, #6
 8006ad2:	881a      	ldrh	r2, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f000 ff85 	bl	80079e8 <UART_Start_Receive_IT>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
  }
}
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b008      	add	sp, #32
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40008000 	.word	0x40008000

08006af0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006af0:	b5b0      	push	{r4, r5, r7, lr}
 8006af2:	b0aa      	sub	sp, #168	; 0xa8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	22a4      	movs	r2, #164	; 0xa4
 8006b00:	18b9      	adds	r1, r7, r2
 8006b02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	20a0      	movs	r0, #160	; 0xa0
 8006b0c:	1839      	adds	r1, r7, r0
 8006b0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	249c      	movs	r4, #156	; 0x9c
 8006b18:	1939      	adds	r1, r7, r4
 8006b1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	18bb      	adds	r3, r7, r2
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4aa2      	ldr	r2, [pc, #648]	; (8006dac <HAL_UART_IRQHandler+0x2bc>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	2298      	movs	r2, #152	; 0x98
 8006b28:	18bd      	adds	r5, r7, r2
 8006b2a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006b2c:	18bb      	adds	r3, r7, r2
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11a      	bne.n	8006b6a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b34:	187b      	adds	r3, r7, r1
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d015      	beq.n	8006b6a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b3e:	183b      	adds	r3, r7, r0
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2220      	movs	r2, #32
 8006b44:	4013      	ands	r3, r2
 8006b46:	d105      	bne.n	8006b54 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b48:	193b      	adds	r3, r7, r4
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	055b      	lsls	r3, r3, #21
 8006b50:	4013      	ands	r3, r2
 8006b52:	d00a      	beq.n	8006b6a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d100      	bne.n	8006b5e <HAL_UART_IRQHandler+0x6e>
 8006b5c:	e2dc      	b.n	8007118 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	0010      	movs	r0, r2
 8006b66:	4798      	blx	r3
      }
      return;
 8006b68:	e2d6      	b.n	8007118 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b6a:	2398      	movs	r3, #152	; 0x98
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d100      	bne.n	8006b76 <HAL_UART_IRQHandler+0x86>
 8006b74:	e122      	b.n	8006dbc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b76:	239c      	movs	r3, #156	; 0x9c
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a8c      	ldr	r2, [pc, #560]	; (8006db0 <HAL_UART_IRQHandler+0x2c0>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d106      	bne.n	8006b90 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b82:	23a0      	movs	r3, #160	; 0xa0
 8006b84:	18fb      	adds	r3, r7, r3
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a8a      	ldr	r2, [pc, #552]	; (8006db4 <HAL_UART_IRQHandler+0x2c4>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d100      	bne.n	8006b90 <HAL_UART_IRQHandler+0xa0>
 8006b8e:	e115      	b.n	8006dbc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b90:	23a4      	movs	r3, #164	; 0xa4
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2201      	movs	r2, #1
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d012      	beq.n	8006bc2 <HAL_UART_IRQHandler+0xd2>
 8006b9c:	23a0      	movs	r3, #160	; 0xa0
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	2380      	movs	r3, #128	; 0x80
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d00b      	beq.n	8006bc2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2290      	movs	r2, #144	; 0x90
 8006bb6:	589b      	ldr	r3, [r3, r2]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2190      	movs	r1, #144	; 0x90
 8006bc0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bc2:	23a4      	movs	r3, #164	; 0xa4
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d011      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x102>
 8006bce:	239c      	movs	r3, #156	; 0x9c
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2202      	movs	r2, #2
 8006be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2290      	movs	r2, #144	; 0x90
 8006be6:	589b      	ldr	r3, [r3, r2]
 8006be8:	2204      	movs	r2, #4
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2190      	movs	r1, #144	; 0x90
 8006bf0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf2:	23a4      	movs	r3, #164	; 0xa4
 8006bf4:	18fb      	adds	r3, r7, r3
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d011      	beq.n	8006c22 <HAL_UART_IRQHandler+0x132>
 8006bfe:	239c      	movs	r3, #156	; 0x9c
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2201      	movs	r2, #1
 8006c06:	4013      	ands	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2204      	movs	r2, #4
 8006c10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2290      	movs	r2, #144	; 0x90
 8006c16:	589b      	ldr	r3, [r3, r2]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2190      	movs	r1, #144	; 0x90
 8006c20:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c22:	23a4      	movs	r3, #164	; 0xa4
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d017      	beq.n	8006c5e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c2e:	23a0      	movs	r3, #160	; 0xa0
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2220      	movs	r2, #32
 8006c36:	4013      	ands	r3, r2
 8006c38:	d105      	bne.n	8006c46 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c3a:	239c      	movs	r3, #156	; 0x9c
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a5b      	ldr	r2, [pc, #364]	; (8006db0 <HAL_UART_IRQHandler+0x2c0>)
 8006c42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c44:	d00b      	beq.n	8006c5e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2290      	movs	r2, #144	; 0x90
 8006c52:	589b      	ldr	r3, [r3, r2]
 8006c54:	2208      	movs	r2, #8
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2190      	movs	r1, #144	; 0x90
 8006c5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c5e:	23a4      	movs	r3, #164	; 0xa4
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2380      	movs	r3, #128	; 0x80
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d013      	beq.n	8006c94 <HAL_UART_IRQHandler+0x1a4>
 8006c6c:	23a0      	movs	r3, #160	; 0xa0
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	2380      	movs	r3, #128	; 0x80
 8006c74:	04db      	lsls	r3, r3, #19
 8006c76:	4013      	ands	r3, r2
 8006c78:	d00c      	beq.n	8006c94 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	0112      	lsls	r2, r2, #4
 8006c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2290      	movs	r2, #144	; 0x90
 8006c88:	589b      	ldr	r3, [r3, r2]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2190      	movs	r1, #144	; 0x90
 8006c92:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2290      	movs	r2, #144	; 0x90
 8006c98:	589b      	ldr	r3, [r3, r2]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d100      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x1b0>
 8006c9e:	e23d      	b.n	800711c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ca0:	23a4      	movs	r3, #164	; 0xa4
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d015      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cac:	23a0      	movs	r3, #160	; 0xa0
 8006cae:	18fb      	adds	r3, r7, r3
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d106      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cb8:	239c      	movs	r3, #156	; 0x9c
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	2380      	movs	r3, #128	; 0x80
 8006cc0:	055b      	lsls	r3, r3, #21
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d008      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d004      	beq.n	8006cd8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	0010      	movs	r0, r2
 8006cd6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2290      	movs	r2, #144	; 0x90
 8006cdc:	589b      	ldr	r3, [r3, r2]
 8006cde:	2194      	movs	r1, #148	; 0x94
 8006ce0:	187a      	adds	r2, r7, r1
 8006ce2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2240      	movs	r2, #64	; 0x40
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d004      	beq.n	8006cfc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006cf2:	187b      	adds	r3, r7, r1
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2228      	movs	r2, #40	; 0x28
 8006cf8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cfa:	d04c      	beq.n	8006d96 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f000 ff96 	bl	8007c30 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d13c      	bne.n	8006d8c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d12:	f3ef 8310 	mrs	r3, PRIMASK
 8006d16:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d1a:	2090      	movs	r0, #144	; 0x90
 8006d1c:	183a      	adds	r2, r7, r0
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	2301      	movs	r3, #1
 8006d22:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d26:	f383 8810 	msr	PRIMASK, r3
}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689a      	ldr	r2, [r3, #8]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2140      	movs	r1, #64	; 0x40
 8006d38:	438a      	bics	r2, r1
 8006d3a:	609a      	str	r2, [r3, #8]
 8006d3c:	183b      	adds	r3, r7, r0
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d44:	f383 8810 	msr	PRIMASK, r3
}
 8006d48:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2280      	movs	r2, #128	; 0x80
 8006d4e:	589b      	ldr	r3, [r3, r2]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2280      	movs	r2, #128	; 0x80
 8006d58:	589b      	ldr	r3, [r3, r2]
 8006d5a:	4a17      	ldr	r2, [pc, #92]	; (8006db8 <HAL_UART_IRQHandler+0x2c8>)
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2280      	movs	r2, #128	; 0x80
 8006d62:	589b      	ldr	r3, [r3, r2]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7fc fef9 	bl	8003b5c <HAL_DMA_Abort_IT>
 8006d6a:	1e03      	subs	r3, r0, #0
 8006d6c:	d01c      	beq.n	8006da8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	589b      	ldr	r3, [r3, r2]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	5852      	ldr	r2, [r2, r1]
 8006d7c:	0010      	movs	r0, r2
 8006d7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	e012      	b.n	8006da8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f000 f9d9 	bl	800713c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d8a:	e00d      	b.n	8006da8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 f9d4 	bl	800713c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	e008      	b.n	8006da8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 f9cf 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2290      	movs	r2, #144	; 0x90
 8006da2:	2100      	movs	r1, #0
 8006da4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006da6:	e1b9      	b.n	800711c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da8:	46c0      	nop			; (mov r8, r8)
    return;
 8006daa:	e1b7      	b.n	800711c <HAL_UART_IRQHandler+0x62c>
 8006dac:	0000080f 	.word	0x0000080f
 8006db0:	10000001 	.word	0x10000001
 8006db4:	04000120 	.word	0x04000120
 8006db8:	08007cfd 	.word	0x08007cfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d000      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x2d6>
 8006dc4:	e13e      	b.n	8007044 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dc6:	23a4      	movs	r3, #164	; 0xa4
 8006dc8:	18fb      	adds	r3, r7, r3
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2210      	movs	r2, #16
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d100      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x2e4>
 8006dd2:	e137      	b.n	8007044 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dd4:	23a0      	movs	r3, #160	; 0xa0
 8006dd6:	18fb      	adds	r3, r7, r3
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2210      	movs	r2, #16
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d100      	bne.n	8006de2 <HAL_UART_IRQHandler+0x2f2>
 8006de0:	e130      	b.n	8007044 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2210      	movs	r2, #16
 8006de8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2240      	movs	r2, #64	; 0x40
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d000      	beq.n	8006dfa <HAL_UART_IRQHandler+0x30a>
 8006df8:	e0a4      	b.n	8006f44 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2280      	movs	r2, #128	; 0x80
 8006dfe:	589b      	ldr	r3, [r3, r2]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	217e      	movs	r1, #126	; 0x7e
 8006e06:	187b      	adds	r3, r7, r1
 8006e08:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006e0a:	187b      	adds	r3, r7, r1
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d100      	bne.n	8006e14 <HAL_UART_IRQHandler+0x324>
 8006e12:	e185      	b.n	8007120 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	225c      	movs	r2, #92	; 0x5c
 8006e18:	5a9b      	ldrh	r3, [r3, r2]
 8006e1a:	187a      	adds	r2, r7, r1
 8006e1c:	8812      	ldrh	r2, [r2, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d300      	bcc.n	8006e24 <HAL_UART_IRQHandler+0x334>
 8006e22:	e17d      	b.n	8007120 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	187a      	adds	r2, r7, r1
 8006e28:	215e      	movs	r1, #94	; 0x5e
 8006e2a:	8812      	ldrh	r2, [r2, #0]
 8006e2c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2280      	movs	r2, #128	; 0x80
 8006e32:	589b      	ldr	r3, [r3, r2]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d170      	bne.n	8006f20 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e46:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e48:	2301      	movs	r3, #1
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	f383 8810 	msr	PRIMASK, r3
}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	49b4      	ldr	r1, [pc, #720]	; (8007130 <HAL_UART_IRQHandler+0x640>)
 8006e60:	400a      	ands	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e66:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	f383 8810 	msr	PRIMASK, r3
}
 8006e6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e70:	f3ef 8310 	mrs	r3, PRIMASK
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e78:	677b      	str	r3, [r7, #116]	; 0x74
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e80:	f383 8810 	msr	PRIMASK, r3
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2101      	movs	r1, #1
 8006e92:	438a      	bics	r2, r1
 8006e94:	609a      	str	r2, [r3, #8]
 8006e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e98:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9c:	f383 8810 	msr	PRIMASK, r3
}
 8006ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8006eac:	2301      	movs	r3, #1
 8006eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb2:	f383 8810 	msr	PRIMASK, r3
}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2140      	movs	r1, #64	; 0x40
 8006ec4:	438a      	bics	r2, r1
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	228c      	movs	r2, #140	; 0x8c
 8006ed8:	2120      	movs	r1, #32
 8006eda:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eec:	2301      	movs	r3, #1
 8006eee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ef2:	f383 8810 	msr	PRIMASK, r3
}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2110      	movs	r1, #16
 8006f04:	438a      	bics	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f0e:	f383 8810 	msr	PRIMASK, r3
}
 8006f12:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2280      	movs	r2, #128	; 0x80
 8006f18:	589b      	ldr	r3, [r3, r2]
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f7fc fdbc 	bl	8003a98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	225c      	movs	r2, #92	; 0x5c
 8006f2a:	5a9a      	ldrh	r2, [r3, r2]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	215e      	movs	r1, #94	; 0x5e
 8006f30:	5a5b      	ldrh	r3, [r3, r1]
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	0011      	movs	r1, r2
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	f000 f905 	bl	800714c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f42:	e0ed      	b.n	8007120 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	225c      	movs	r2, #92	; 0x5c
 8006f48:	5a99      	ldrh	r1, [r3, r2]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	225e      	movs	r2, #94	; 0x5e
 8006f4e:	5a9b      	ldrh	r3, [r3, r2]
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	208e      	movs	r0, #142	; 0x8e
 8006f54:	183b      	adds	r3, r7, r0
 8006f56:	1a8a      	subs	r2, r1, r2
 8006f58:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	225e      	movs	r2, #94	; 0x5e
 8006f5e:	5a9b      	ldrh	r3, [r3, r2]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d100      	bne.n	8006f68 <HAL_UART_IRQHandler+0x478>
 8006f66:	e0dd      	b.n	8007124 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006f68:	183b      	adds	r3, r7, r0
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d100      	bne.n	8006f72 <HAL_UART_IRQHandler+0x482>
 8006f70:	e0d8      	b.n	8007124 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f72:	f3ef 8310 	mrs	r3, PRIMASK
 8006f76:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f78:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f7a:	2488      	movs	r4, #136	; 0x88
 8006f7c:	193a      	adds	r2, r7, r4
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	2301      	movs	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	46c0      	nop			; (mov r8, r8)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4967      	ldr	r1, [pc, #412]	; (8007134 <HAL_UART_IRQHandler+0x644>)
 8006f98:	400a      	ands	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	193b      	adds	r3, r7, r4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f383 8810 	msr	PRIMASK, r3
}
 8006fa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006faa:	f3ef 8310 	mrs	r3, PRIMASK
 8006fae:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fb0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fb2:	2484      	movs	r4, #132	; 0x84
 8006fb4:	193a      	adds	r2, r7, r4
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f383 8810 	msr	PRIMASK, r3
}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	495a      	ldr	r1, [pc, #360]	; (8007138 <HAL_UART_IRQHandler+0x648>)
 8006fd0:	400a      	ands	r2, r1
 8006fd2:	609a      	str	r2, [r3, #8]
 8006fd4:	193b      	adds	r3, r7, r4
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f383 8810 	msr	PRIMASK, r3
}
 8006fe0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	228c      	movs	r2, #140	; 0x8c
 8006fe6:	2120      	movs	r1, #32
 8006fe8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ffe:	2480      	movs	r4, #128	; 0x80
 8007000:	193a      	adds	r2, r7, r4
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	2301      	movs	r3, #1
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2110      	movs	r1, #16
 800701c:	438a      	bics	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	193b      	adds	r3, r7, r4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	f383 8810 	msr	PRIMASK, r3
}
 800702c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007034:	183b      	adds	r3, r7, r0
 8007036:	881a      	ldrh	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0011      	movs	r1, r2
 800703c:	0018      	movs	r0, r3
 800703e:	f000 f885 	bl	800714c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007042:	e06f      	b.n	8007124 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007044:	23a4      	movs	r3, #164	; 0xa4
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	2380      	movs	r3, #128	; 0x80
 800704c:	035b      	lsls	r3, r3, #13
 800704e:	4013      	ands	r3, r2
 8007050:	d010      	beq.n	8007074 <HAL_UART_IRQHandler+0x584>
 8007052:	239c      	movs	r3, #156	; 0x9c
 8007054:	18fb      	adds	r3, r7, r3
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	03db      	lsls	r3, r3, #15
 800705c:	4013      	ands	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2280      	movs	r2, #128	; 0x80
 8007066:	0352      	lsls	r2, r2, #13
 8007068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	0018      	movs	r0, r3
 800706e:	f001 fae9 	bl	8008644 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007072:	e05a      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007074:	23a4      	movs	r3, #164	; 0xa4
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2280      	movs	r2, #128	; 0x80
 800707c:	4013      	ands	r3, r2
 800707e:	d016      	beq.n	80070ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007080:	23a0      	movs	r3, #160	; 0xa0
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	4013      	ands	r3, r2
 800708a:	d106      	bne.n	800709a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800708c:	239c      	movs	r3, #156	; 0x9c
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	2380      	movs	r3, #128	; 0x80
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	4013      	ands	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d042      	beq.n	8007128 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	0010      	movs	r0, r2
 80070aa:	4798      	blx	r3
    }
    return;
 80070ac:	e03c      	b.n	8007128 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070ae:	23a4      	movs	r3, #164	; 0xa4
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2240      	movs	r2, #64	; 0x40
 80070b6:	4013      	ands	r3, r2
 80070b8:	d00a      	beq.n	80070d0 <HAL_UART_IRQHandler+0x5e0>
 80070ba:	23a0      	movs	r3, #160	; 0xa0
 80070bc:	18fb      	adds	r3, r7, r3
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2240      	movs	r2, #64	; 0x40
 80070c2:	4013      	ands	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 fe2e 	bl	8007d2a <UART_EndTransmit_IT>
    return;
 80070ce:	e02c      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070d0:	23a4      	movs	r3, #164	; 0xa4
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	4013      	ands	r3, r2
 80070dc:	d00b      	beq.n	80070f6 <HAL_UART_IRQHandler+0x606>
 80070de:	23a0      	movs	r3, #160	; 0xa0
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	2380      	movs	r3, #128	; 0x80
 80070e6:	05db      	lsls	r3, r3, #23
 80070e8:	4013      	ands	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f001 fab8 	bl	8008664 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070f4:	e019      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070f6:	23a4      	movs	r3, #164	; 0xa4
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	2380      	movs	r3, #128	; 0x80
 80070fe:	045b      	lsls	r3, r3, #17
 8007100:	4013      	ands	r3, r2
 8007102:	d012      	beq.n	800712a <HAL_UART_IRQHandler+0x63a>
 8007104:	23a0      	movs	r3, #160	; 0xa0
 8007106:	18fb      	adds	r3, r7, r3
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	da0d      	bge.n	800712a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	0018      	movs	r0, r3
 8007112:	f001 fa9f 	bl	8008654 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007116:	e008      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
      return;
 8007118:	46c0      	nop			; (mov r8, r8)
 800711a:	e006      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
    return;
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	e004      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
      return;
 8007120:	46c0      	nop			; (mov r8, r8)
 8007122:	e002      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
      return;
 8007124:	46c0      	nop			; (mov r8, r8)
 8007126:	e000      	b.n	800712a <HAL_UART_IRQHandler+0x63a>
    return;
 8007128:	46c0      	nop			; (mov r8, r8)
  }
}
 800712a:	46bd      	mov	sp, r7
 800712c:	b02a      	add	sp, #168	; 0xa8
 800712e:	bdb0      	pop	{r4, r5, r7, pc}
 8007130:	fffffeff 	.word	0xfffffeff
 8007134:	fffffedf 	.word	0xfffffedf
 8007138:	effffffe 	.word	0xeffffffe

0800713c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	46bd      	mov	sp, r7
 8007148:	b002      	add	sp, #8
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	000a      	movs	r2, r1
 8007156:	1cbb      	adds	r3, r7, #2
 8007158:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	46bd      	mov	sp, r7
 800715e:	b002      	add	sp, #8
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007164:	b5b0      	push	{r4, r5, r7, lr}
 8007166:	b090      	sub	sp, #64	; 0x40
 8007168:	af00      	add	r7, sp, #0
 800716a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800716c:	231a      	movs	r3, #26
 800716e:	2220      	movs	r2, #32
 8007170:	189b      	adds	r3, r3, r2
 8007172:	19db      	adds	r3, r3, r7
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	431a      	orrs	r2, r3
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	431a      	orrs	r2, r3
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	4313      	orrs	r3, r2
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4ac4      	ldr	r2, [pc, #784]	; (80074a8 <UART_SetConfig+0x344>)
 8007198:	4013      	ands	r3, r2
 800719a:	0019      	movs	r1, r3
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a2:	430b      	orrs	r3, r1
 80071a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4abf      	ldr	r2, [pc, #764]	; (80074ac <UART_SetConfig+0x348>)
 80071ae:	4013      	ands	r3, r2
 80071b0:	0018      	movs	r0, r3
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	68d9      	ldr	r1, [r3, #12]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	0003      	movs	r3, r0
 80071bc:	430b      	orrs	r3, r1
 80071be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4ab9      	ldr	r2, [pc, #740]	; (80074b0 <UART_SetConfig+0x34c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071d6:	4313      	orrs	r3, r2
 80071d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	4ab4      	ldr	r2, [pc, #720]	; (80074b4 <UART_SetConfig+0x350>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	0019      	movs	r1, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f6:	220f      	movs	r2, #15
 80071f8:	4393      	bics	r3, r2
 80071fa:	0018      	movs	r0, r3
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	0003      	movs	r3, r0
 8007206:	430b      	orrs	r3, r1
 8007208:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4aaa      	ldr	r2, [pc, #680]	; (80074b8 <UART_SetConfig+0x354>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d131      	bne.n	8007278 <UART_SetConfig+0x114>
 8007214:	4ba9      	ldr	r3, [pc, #676]	; (80074bc <UART_SetConfig+0x358>)
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	2203      	movs	r2, #3
 800721a:	4013      	ands	r3, r2
 800721c:	2b03      	cmp	r3, #3
 800721e:	d01d      	beq.n	800725c <UART_SetConfig+0xf8>
 8007220:	d823      	bhi.n	800726a <UART_SetConfig+0x106>
 8007222:	2b02      	cmp	r3, #2
 8007224:	d00c      	beq.n	8007240 <UART_SetConfig+0xdc>
 8007226:	d820      	bhi.n	800726a <UART_SetConfig+0x106>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <UART_SetConfig+0xce>
 800722c:	2b01      	cmp	r3, #1
 800722e:	d00e      	beq.n	800724e <UART_SetConfig+0xea>
 8007230:	e01b      	b.n	800726a <UART_SetConfig+0x106>
 8007232:	231b      	movs	r3, #27
 8007234:	2220      	movs	r2, #32
 8007236:	189b      	adds	r3, r3, r2
 8007238:	19db      	adds	r3, r3, r7
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	e071      	b.n	8007324 <UART_SetConfig+0x1c0>
 8007240:	231b      	movs	r3, #27
 8007242:	2220      	movs	r2, #32
 8007244:	189b      	adds	r3, r3, r2
 8007246:	19db      	adds	r3, r3, r7
 8007248:	2202      	movs	r2, #2
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e06a      	b.n	8007324 <UART_SetConfig+0x1c0>
 800724e:	231b      	movs	r3, #27
 8007250:	2220      	movs	r2, #32
 8007252:	189b      	adds	r3, r3, r2
 8007254:	19db      	adds	r3, r3, r7
 8007256:	2204      	movs	r2, #4
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	e063      	b.n	8007324 <UART_SetConfig+0x1c0>
 800725c:	231b      	movs	r3, #27
 800725e:	2220      	movs	r2, #32
 8007260:	189b      	adds	r3, r3, r2
 8007262:	19db      	adds	r3, r3, r7
 8007264:	2208      	movs	r2, #8
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	e05c      	b.n	8007324 <UART_SetConfig+0x1c0>
 800726a:	231b      	movs	r3, #27
 800726c:	2220      	movs	r2, #32
 800726e:	189b      	adds	r3, r3, r2
 8007270:	19db      	adds	r3, r3, r7
 8007272:	2210      	movs	r2, #16
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e055      	b.n	8007324 <UART_SetConfig+0x1c0>
 8007278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a90      	ldr	r2, [pc, #576]	; (80074c0 <UART_SetConfig+0x35c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d106      	bne.n	8007290 <UART_SetConfig+0x12c>
 8007282:	231b      	movs	r3, #27
 8007284:	2220      	movs	r2, #32
 8007286:	189b      	adds	r3, r3, r2
 8007288:	19db      	adds	r3, r3, r7
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	e049      	b.n	8007324 <UART_SetConfig+0x1c0>
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a86      	ldr	r2, [pc, #536]	; (80074b0 <UART_SetConfig+0x34c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d13e      	bne.n	8007318 <UART_SetConfig+0x1b4>
 800729a:	4b88      	ldr	r3, [pc, #544]	; (80074bc <UART_SetConfig+0x358>)
 800729c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800729e:	23c0      	movs	r3, #192	; 0xc0
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	4013      	ands	r3, r2
 80072a4:	22c0      	movs	r2, #192	; 0xc0
 80072a6:	0112      	lsls	r2, r2, #4
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d027      	beq.n	80072fc <UART_SetConfig+0x198>
 80072ac:	22c0      	movs	r2, #192	; 0xc0
 80072ae:	0112      	lsls	r2, r2, #4
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d82a      	bhi.n	800730a <UART_SetConfig+0x1a6>
 80072b4:	2280      	movs	r2, #128	; 0x80
 80072b6:	0112      	lsls	r2, r2, #4
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d011      	beq.n	80072e0 <UART_SetConfig+0x17c>
 80072bc:	2280      	movs	r2, #128	; 0x80
 80072be:	0112      	lsls	r2, r2, #4
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d822      	bhi.n	800730a <UART_SetConfig+0x1a6>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <UART_SetConfig+0x16e>
 80072c8:	2280      	movs	r2, #128	; 0x80
 80072ca:	00d2      	lsls	r2, r2, #3
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <UART_SetConfig+0x18a>
 80072d0:	e01b      	b.n	800730a <UART_SetConfig+0x1a6>
 80072d2:	231b      	movs	r3, #27
 80072d4:	2220      	movs	r2, #32
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	19db      	adds	r3, r3, r7
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	e021      	b.n	8007324 <UART_SetConfig+0x1c0>
 80072e0:	231b      	movs	r3, #27
 80072e2:	2220      	movs	r2, #32
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	19db      	adds	r3, r3, r7
 80072e8:	2202      	movs	r2, #2
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e01a      	b.n	8007324 <UART_SetConfig+0x1c0>
 80072ee:	231b      	movs	r3, #27
 80072f0:	2220      	movs	r2, #32
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	19db      	adds	r3, r3, r7
 80072f6:	2204      	movs	r2, #4
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e013      	b.n	8007324 <UART_SetConfig+0x1c0>
 80072fc:	231b      	movs	r3, #27
 80072fe:	2220      	movs	r2, #32
 8007300:	189b      	adds	r3, r3, r2
 8007302:	19db      	adds	r3, r3, r7
 8007304:	2208      	movs	r2, #8
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	e00c      	b.n	8007324 <UART_SetConfig+0x1c0>
 800730a:	231b      	movs	r3, #27
 800730c:	2220      	movs	r2, #32
 800730e:	189b      	adds	r3, r3, r2
 8007310:	19db      	adds	r3, r3, r7
 8007312:	2210      	movs	r2, #16
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e005      	b.n	8007324 <UART_SetConfig+0x1c0>
 8007318:	231b      	movs	r3, #27
 800731a:	2220      	movs	r2, #32
 800731c:	189b      	adds	r3, r3, r2
 800731e:	19db      	adds	r3, r3, r7
 8007320:	2210      	movs	r2, #16
 8007322:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a61      	ldr	r2, [pc, #388]	; (80074b0 <UART_SetConfig+0x34c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d000      	beq.n	8007330 <UART_SetConfig+0x1cc>
 800732e:	e092      	b.n	8007456 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007330:	231b      	movs	r3, #27
 8007332:	2220      	movs	r2, #32
 8007334:	189b      	adds	r3, r3, r2
 8007336:	19db      	adds	r3, r3, r7
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b08      	cmp	r3, #8
 800733c:	d015      	beq.n	800736a <UART_SetConfig+0x206>
 800733e:	dc18      	bgt.n	8007372 <UART_SetConfig+0x20e>
 8007340:	2b04      	cmp	r3, #4
 8007342:	d00d      	beq.n	8007360 <UART_SetConfig+0x1fc>
 8007344:	dc15      	bgt.n	8007372 <UART_SetConfig+0x20e>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <UART_SetConfig+0x1ec>
 800734a:	2b02      	cmp	r3, #2
 800734c:	d005      	beq.n	800735a <UART_SetConfig+0x1f6>
 800734e:	e010      	b.n	8007372 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fd fcbc 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8007354:	0003      	movs	r3, r0
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007358:	e014      	b.n	8007384 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735a:	4b5a      	ldr	r3, [pc, #360]	; (80074c4 <UART_SetConfig+0x360>)
 800735c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800735e:	e011      	b.n	8007384 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007360:	f7fd fc28 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8007364:	0003      	movs	r3, r0
 8007366:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007368:	e00c      	b.n	8007384 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	2380      	movs	r3, #128	; 0x80
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007370:	e008      	b.n	8007384 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007376:	231a      	movs	r3, #26
 8007378:	2220      	movs	r2, #32
 800737a:	189b      	adds	r3, r3, r2
 800737c:	19db      	adds	r3, r3, r7
 800737e:	2201      	movs	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
        break;
 8007382:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	2b00      	cmp	r3, #0
 8007388:	d100      	bne.n	800738c <UART_SetConfig+0x228>
 800738a:	e147      	b.n	800761c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007390:	4b4d      	ldr	r3, [pc, #308]	; (80074c8 <UART_SetConfig+0x364>)
 8007392:	0052      	lsls	r2, r2, #1
 8007394:	5ad3      	ldrh	r3, [r2, r3]
 8007396:	0019      	movs	r1, r3
 8007398:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800739a:	f7f8 feb3 	bl	8000104 <__udivsi3>
 800739e:	0003      	movs	r3, r0
 80073a0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	0013      	movs	r3, r2
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d305      	bcc.n	80073be <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d906      	bls.n	80073cc <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80073be:	231a      	movs	r3, #26
 80073c0:	2220      	movs	r2, #32
 80073c2:	189b      	adds	r3, r3, r2
 80073c4:	19db      	adds	r3, r3, r7
 80073c6:	2201      	movs	r2, #1
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e127      	b.n	800761c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073d8:	4b3b      	ldr	r3, [pc, #236]	; (80074c8 <UART_SetConfig+0x364>)
 80073da:	0052      	lsls	r2, r2, #1
 80073dc:	5ad3      	ldrh	r3, [r2, r3]
 80073de:	613b      	str	r3, [r7, #16]
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	69b8      	ldr	r0, [r7, #24]
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	f7f9 f800 	bl	80003f0 <__aeabi_uldivmod>
 80073f0:	0002      	movs	r2, r0
 80073f2:	000b      	movs	r3, r1
 80073f4:	0e11      	lsrs	r1, r2, #24
 80073f6:	021d      	lsls	r5, r3, #8
 80073f8:	430d      	orrs	r5, r1
 80073fa:	0214      	lsls	r4, r2, #8
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	68b8      	ldr	r0, [r7, #8]
 800740a:	68f9      	ldr	r1, [r7, #12]
 800740c:	1900      	adds	r0, r0, r4
 800740e:	4169      	adcs	r1, r5
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	603b      	str	r3, [r7, #0]
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f7f8 ffe7 	bl	80003f0 <__aeabi_uldivmod>
 8007422:	0002      	movs	r2, r0
 8007424:	000b      	movs	r3, r1
 8007426:	0013      	movs	r3, r2
 8007428:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800742a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800742c:	23c0      	movs	r3, #192	; 0xc0
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	429a      	cmp	r2, r3
 8007432:	d309      	bcc.n	8007448 <UART_SetConfig+0x2e4>
 8007434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007436:	2380      	movs	r3, #128	; 0x80
 8007438:	035b      	lsls	r3, r3, #13
 800743a:	429a      	cmp	r2, r3
 800743c:	d204      	bcs.n	8007448 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007444:	60da      	str	r2, [r3, #12]
 8007446:	e0e9      	b.n	800761c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8007448:	231a      	movs	r3, #26
 800744a:	2220      	movs	r2, #32
 800744c:	189b      	adds	r3, r3, r2
 800744e:	19db      	adds	r3, r3, r7
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	e0e2      	b.n	800761c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	69da      	ldr	r2, [r3, #28]
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	429a      	cmp	r2, r3
 8007460:	d000      	beq.n	8007464 <UART_SetConfig+0x300>
 8007462:	e083      	b.n	800756c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007464:	231b      	movs	r3, #27
 8007466:	2220      	movs	r2, #32
 8007468:	189b      	adds	r3, r3, r2
 800746a:	19db      	adds	r3, r3, r7
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b08      	cmp	r3, #8
 8007470:	d015      	beq.n	800749e <UART_SetConfig+0x33a>
 8007472:	dc2b      	bgt.n	80074cc <UART_SetConfig+0x368>
 8007474:	2b04      	cmp	r3, #4
 8007476:	d00d      	beq.n	8007494 <UART_SetConfig+0x330>
 8007478:	dc28      	bgt.n	80074cc <UART_SetConfig+0x368>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <UART_SetConfig+0x320>
 800747e:	2b02      	cmp	r3, #2
 8007480:	d005      	beq.n	800748e <UART_SetConfig+0x32a>
 8007482:	e023      	b.n	80074cc <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007484:	f7fd fc22 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8007488:	0003      	movs	r3, r0
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800748c:	e027      	b.n	80074de <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800748e:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <UART_SetConfig+0x360>)
 8007490:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007492:	e024      	b.n	80074de <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007494:	f7fd fb8e 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8007498:	0003      	movs	r3, r0
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800749c:	e01f      	b.n	80074de <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a4:	e01b      	b.n	80074de <UART_SetConfig+0x37a>
 80074a6:	46c0      	nop			; (mov r8, r8)
 80074a8:	cfff69f3 	.word	0xcfff69f3
 80074ac:	ffffcfff 	.word	0xffffcfff
 80074b0:	40008000 	.word	0x40008000
 80074b4:	11fff4ff 	.word	0x11fff4ff
 80074b8:	40013800 	.word	0x40013800
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40004400 	.word	0x40004400
 80074c4:	00f42400 	.word	0x00f42400
 80074c8:	08008a4c 	.word	0x08008a4c
      default:
        pclk = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80074d0:	231a      	movs	r3, #26
 80074d2:	2220      	movs	r2, #32
 80074d4:	189b      	adds	r3, r3, r2
 80074d6:	19db      	adds	r3, r3, r7
 80074d8:	2201      	movs	r2, #1
 80074da:	701a      	strb	r2, [r3, #0]
        break;
 80074dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d100      	bne.n	80074e6 <UART_SetConfig+0x382>
 80074e4:	e09a      	b.n	800761c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ea:	4b58      	ldr	r3, [pc, #352]	; (800764c <UART_SetConfig+0x4e8>)
 80074ec:	0052      	lsls	r2, r2, #1
 80074ee:	5ad3      	ldrh	r3, [r2, r3]
 80074f0:	0019      	movs	r1, r3
 80074f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80074f4:	f7f8 fe06 	bl	8000104 <__udivsi3>
 80074f8:	0003      	movs	r3, r0
 80074fa:	005a      	lsls	r2, r3, #1
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	18d2      	adds	r2, r2, r3
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	0019      	movs	r1, r3
 800750a:	0010      	movs	r0, r2
 800750c:	f7f8 fdfa 	bl	8000104 <__udivsi3>
 8007510:	0003      	movs	r3, r0
 8007512:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d921      	bls.n	800755e <UART_SetConfig+0x3fa>
 800751a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751c:	2380      	movs	r3, #128	; 0x80
 800751e:	025b      	lsls	r3, r3, #9
 8007520:	429a      	cmp	r2, r3
 8007522:	d21c      	bcs.n	800755e <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	b29a      	uxth	r2, r3
 8007528:	200e      	movs	r0, #14
 800752a:	2420      	movs	r4, #32
 800752c:	1903      	adds	r3, r0, r4
 800752e:	19db      	adds	r3, r3, r7
 8007530:	210f      	movs	r1, #15
 8007532:	438a      	bics	r2, r1
 8007534:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	b29b      	uxth	r3, r3
 800753c:	2207      	movs	r2, #7
 800753e:	4013      	ands	r3, r2
 8007540:	b299      	uxth	r1, r3
 8007542:	1903      	adds	r3, r0, r4
 8007544:	19db      	adds	r3, r3, r7
 8007546:	1902      	adds	r2, r0, r4
 8007548:	19d2      	adds	r2, r2, r7
 800754a:	8812      	ldrh	r2, [r2, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	1902      	adds	r2, r0, r4
 8007556:	19d2      	adds	r2, r2, r7
 8007558:	8812      	ldrh	r2, [r2, #0]
 800755a:	60da      	str	r2, [r3, #12]
 800755c:	e05e      	b.n	800761c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800755e:	231a      	movs	r3, #26
 8007560:	2220      	movs	r2, #32
 8007562:	189b      	adds	r3, r3, r2
 8007564:	19db      	adds	r3, r3, r7
 8007566:	2201      	movs	r2, #1
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	e057      	b.n	800761c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800756c:	231b      	movs	r3, #27
 800756e:	2220      	movs	r2, #32
 8007570:	189b      	adds	r3, r3, r2
 8007572:	19db      	adds	r3, r3, r7
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b08      	cmp	r3, #8
 8007578:	d015      	beq.n	80075a6 <UART_SetConfig+0x442>
 800757a:	dc18      	bgt.n	80075ae <UART_SetConfig+0x44a>
 800757c:	2b04      	cmp	r3, #4
 800757e:	d00d      	beq.n	800759c <UART_SetConfig+0x438>
 8007580:	dc15      	bgt.n	80075ae <UART_SetConfig+0x44a>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <UART_SetConfig+0x428>
 8007586:	2b02      	cmp	r3, #2
 8007588:	d005      	beq.n	8007596 <UART_SetConfig+0x432>
 800758a:	e010      	b.n	80075ae <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800758c:	f7fd fb9e 	bl	8004ccc <HAL_RCC_GetPCLK1Freq>
 8007590:	0003      	movs	r3, r0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007594:	e014      	b.n	80075c0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007596:	4b2e      	ldr	r3, [pc, #184]	; (8007650 <UART_SetConfig+0x4ec>)
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759a:	e011      	b.n	80075c0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759c:	f7fd fb0a 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 80075a0:	0003      	movs	r3, r0
 80075a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a4:	e00c      	b.n	80075c0 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	2380      	movs	r3, #128	; 0x80
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075ac:	e008      	b.n	80075c0 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80075b2:	231a      	movs	r3, #26
 80075b4:	2220      	movs	r2, #32
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	19db      	adds	r3, r3, r7
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
        break;
 80075be:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80075c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d02a      	beq.n	800761c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075ca:	4b20      	ldr	r3, [pc, #128]	; (800764c <UART_SetConfig+0x4e8>)
 80075cc:	0052      	lsls	r2, r2, #1
 80075ce:	5ad3      	ldrh	r3, [r2, r3]
 80075d0:	0019      	movs	r1, r3
 80075d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80075d4:	f7f8 fd96 	bl	8000104 <__udivsi3>
 80075d8:	0003      	movs	r3, r0
 80075da:	001a      	movs	r2, r3
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	085b      	lsrs	r3, r3, #1
 80075e2:	18d2      	adds	r2, r2, r3
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	0019      	movs	r1, r3
 80075ea:	0010      	movs	r0, r2
 80075ec:	f7f8 fd8a 	bl	8000104 <__udivsi3>
 80075f0:	0003      	movs	r3, r0
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2b0f      	cmp	r3, #15
 80075f8:	d90a      	bls.n	8007610 <UART_SetConfig+0x4ac>
 80075fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075fc:	2380      	movs	r3, #128	; 0x80
 80075fe:	025b      	lsls	r3, r3, #9
 8007600:	429a      	cmp	r2, r3
 8007602:	d205      	bcs.n	8007610 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	b29a      	uxth	r2, r3
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	e005      	b.n	800761c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8007610:	231a      	movs	r3, #26
 8007612:	2220      	movs	r2, #32
 8007614:	189b      	adds	r3, r3, r2
 8007616:	19db      	adds	r3, r3, r7
 8007618:	2201      	movs	r2, #1
 800761a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	226a      	movs	r2, #106	; 0x6a
 8007620:	2101      	movs	r1, #1
 8007622:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	2268      	movs	r2, #104	; 0x68
 8007628:	2101      	movs	r1, #1
 800762a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	2200      	movs	r2, #0
 8007630:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	2200      	movs	r2, #0
 8007636:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007638:	231a      	movs	r3, #26
 800763a:	2220      	movs	r2, #32
 800763c:	189b      	adds	r3, r3, r2
 800763e:	19db      	adds	r3, r3, r7
 8007640:	781b      	ldrb	r3, [r3, #0]
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b010      	add	sp, #64	; 0x40
 8007648:	bdb0      	pop	{r4, r5, r7, pc}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	08008a4c 	.word	0x08008a4c
 8007650:	00f42400 	.word	0x00f42400

08007654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	2201      	movs	r2, #1
 8007662:	4013      	ands	r3, r2
 8007664:	d00b      	beq.n	800767e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	4a4a      	ldr	r2, [pc, #296]	; (8007798 <UART_AdvFeatureConfig+0x144>)
 800766e:	4013      	ands	r3, r2
 8007670:	0019      	movs	r1, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	2202      	movs	r2, #2
 8007684:	4013      	ands	r3, r2
 8007686:	d00b      	beq.n	80076a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4a43      	ldr	r2, [pc, #268]	; (800779c <UART_AdvFeatureConfig+0x148>)
 8007690:	4013      	ands	r3, r2
 8007692:	0019      	movs	r1, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	2204      	movs	r2, #4
 80076a6:	4013      	ands	r3, r2
 80076a8:	d00b      	beq.n	80076c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	4a3b      	ldr	r2, [pc, #236]	; (80077a0 <UART_AdvFeatureConfig+0x14c>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	0019      	movs	r1, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c6:	2208      	movs	r2, #8
 80076c8:	4013      	ands	r3, r2
 80076ca:	d00b      	beq.n	80076e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	4a34      	ldr	r2, [pc, #208]	; (80077a4 <UART_AdvFeatureConfig+0x150>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	0019      	movs	r1, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	2210      	movs	r2, #16
 80076ea:	4013      	ands	r3, r2
 80076ec:	d00b      	beq.n	8007706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a2c      	ldr	r2, [pc, #176]	; (80077a8 <UART_AdvFeatureConfig+0x154>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	0019      	movs	r1, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	2220      	movs	r2, #32
 800770c:	4013      	ands	r3, r2
 800770e:	d00b      	beq.n	8007728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4a25      	ldr	r2, [pc, #148]	; (80077ac <UART_AdvFeatureConfig+0x158>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	2240      	movs	r2, #64	; 0x40
 800772e:	4013      	ands	r3, r2
 8007730:	d01d      	beq.n	800776e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <UART_AdvFeatureConfig+0x15c>)
 800773a:	4013      	ands	r3, r2
 800773c:	0019      	movs	r1, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800774e:	2380      	movs	r3, #128	; 0x80
 8007750:	035b      	lsls	r3, r3, #13
 8007752:	429a      	cmp	r2, r3
 8007754:	d10b      	bne.n	800776e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <UART_AdvFeatureConfig+0x160>)
 800775e:	4013      	ands	r3, r2
 8007760:	0019      	movs	r1, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	4013      	ands	r3, r2
 8007776:	d00b      	beq.n	8007790 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4a0e      	ldr	r2, [pc, #56]	; (80077b8 <UART_AdvFeatureConfig+0x164>)
 8007780:	4013      	ands	r3, r2
 8007782:	0019      	movs	r1, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
  }
}
 8007790:	46c0      	nop			; (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	b002      	add	sp, #8
 8007796:	bd80      	pop	{r7, pc}
 8007798:	fffdffff 	.word	0xfffdffff
 800779c:	fffeffff 	.word	0xfffeffff
 80077a0:	fffbffff 	.word	0xfffbffff
 80077a4:	ffff7fff 	.word	0xffff7fff
 80077a8:	ffffefff 	.word	0xffffefff
 80077ac:	ffffdfff 	.word	0xffffdfff
 80077b0:	ffefffff 	.word	0xffefffff
 80077b4:	ff9fffff 	.word	0xff9fffff
 80077b8:	fff7ffff 	.word	0xfff7ffff

080077bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2290      	movs	r2, #144	; 0x90
 80077c8:	2100      	movs	r1, #0
 80077ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077cc:	f7fb ff24 	bl	8003618 <HAL_GetTick>
 80077d0:	0003      	movs	r3, r0
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2208      	movs	r2, #8
 80077dc:	4013      	ands	r3, r2
 80077de:	2b08      	cmp	r3, #8
 80077e0:	d10c      	bne.n	80077fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2280      	movs	r2, #128	; 0x80
 80077e6:	0391      	lsls	r1, r2, #14
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4a1a      	ldr	r2, [pc, #104]	; (8007854 <UART_CheckIdleState+0x98>)
 80077ec:	9200      	str	r2, [sp, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f000 f832 	bl	8007858 <UART_WaitOnFlagUntilTimeout>
 80077f4:	1e03      	subs	r3, r0, #0
 80077f6:	d001      	beq.n	80077fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e026      	b.n	800784a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2204      	movs	r2, #4
 8007804:	4013      	ands	r3, r2
 8007806:	2b04      	cmp	r3, #4
 8007808:	d10c      	bne.n	8007824 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2280      	movs	r2, #128	; 0x80
 800780e:	03d1      	lsls	r1, r2, #15
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4a10      	ldr	r2, [pc, #64]	; (8007854 <UART_CheckIdleState+0x98>)
 8007814:	9200      	str	r2, [sp, #0]
 8007816:	2200      	movs	r2, #0
 8007818:	f000 f81e 	bl	8007858 <UART_WaitOnFlagUntilTimeout>
 800781c:	1e03      	subs	r3, r0, #0
 800781e:	d001      	beq.n	8007824 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e012      	b.n	800784a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2288      	movs	r2, #136	; 0x88
 8007828:	2120      	movs	r1, #32
 800782a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	228c      	movs	r2, #140	; 0x8c
 8007830:	2120      	movs	r1, #32
 8007832:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2284      	movs	r2, #132	; 0x84
 8007844:	2100      	movs	r1, #0
 8007846:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	0018      	movs	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	b004      	add	sp, #16
 8007850:	bd80      	pop	{r7, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	01ffffff 	.word	0x01ffffff

08007858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b094      	sub	sp, #80	; 0x50
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	1dfb      	adds	r3, r7, #7
 8007866:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007868:	e0a7      	b.n	80079ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800786c:	3301      	adds	r3, #1
 800786e:	d100      	bne.n	8007872 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007870:	e0a3      	b.n	80079ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007872:	f7fb fed1 	bl	8003618 <HAL_GetTick>
 8007876:	0002      	movs	r2, r0
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800787e:	429a      	cmp	r2, r3
 8007880:	d302      	bcc.n	8007888 <UART_WaitOnFlagUntilTimeout+0x30>
 8007882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007884:	2b00      	cmp	r3, #0
 8007886:	d13f      	bne.n	8007908 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007888:	f3ef 8310 	mrs	r3, PRIMASK
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800788e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007890:	647b      	str	r3, [r7, #68]	; 0x44
 8007892:	2301      	movs	r3, #1
 8007894:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	f383 8810 	msr	PRIMASK, r3
}
 800789c:	46c0      	nop			; (mov r8, r8)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	494e      	ldr	r1, [pc, #312]	; (80079e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80078aa:	400a      	ands	r2, r1
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	f383 8810 	msr	PRIMASK, r3
}
 80078b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ba:	f3ef 8310 	mrs	r3, PRIMASK
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80078c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	643b      	str	r3, [r7, #64]	; 0x40
 80078c4:	2301      	movs	r3, #1
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	f383 8810 	msr	PRIMASK, r3
}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2101      	movs	r1, #1
 80078dc:	438a      	bics	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
 80078e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e6:	f383 8810 	msr	PRIMASK, r3
}
 80078ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2288      	movs	r2, #136	; 0x88
 80078f0:	2120      	movs	r1, #32
 80078f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	228c      	movs	r2, #140	; 0x8c
 80078f8:	2120      	movs	r1, #32
 80078fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2284      	movs	r2, #132	; 0x84
 8007900:	2100      	movs	r1, #0
 8007902:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e069      	b.n	80079dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2204      	movs	r2, #4
 8007910:	4013      	ands	r3, r2
 8007912:	d052      	beq.n	80079ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69da      	ldr	r2, [r3, #28]
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	401a      	ands	r2, r3
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	429a      	cmp	r2, r3
 8007926:	d148      	bne.n	80079ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2280      	movs	r2, #128	; 0x80
 800792e:	0112      	lsls	r2, r2, #4
 8007930:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007932:	f3ef 8310 	mrs	r3, PRIMASK
 8007936:	613b      	str	r3, [r7, #16]
  return(result);
 8007938:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800793a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800793c:	2301      	movs	r3, #1
 800793e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f383 8810 	msr	PRIMASK, r3
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4924      	ldr	r1, [pc, #144]	; (80079e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007954:	400a      	ands	r2, r1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f383 8810 	msr	PRIMASK, r3
}
 8007962:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007964:	f3ef 8310 	mrs	r3, PRIMASK
 8007968:	61fb      	str	r3, [r7, #28]
  return(result);
 800796a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796c:	64bb      	str	r3, [r7, #72]	; 0x48
 800796e:	2301      	movs	r3, #1
 8007970:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	f383 8810 	msr	PRIMASK, r3
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2101      	movs	r1, #1
 8007986:	438a      	bics	r2, r1
 8007988:	609a      	str	r2, [r3, #8]
 800798a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	f383 8810 	msr	PRIMASK, r3
}
 8007994:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2288      	movs	r2, #136	; 0x88
 800799a:	2120      	movs	r1, #32
 800799c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	228c      	movs	r2, #140	; 0x8c
 80079a2:	2120      	movs	r1, #32
 80079a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2290      	movs	r2, #144	; 0x90
 80079aa:	2120      	movs	r1, #32
 80079ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2284      	movs	r2, #132	; 0x84
 80079b2:	2100      	movs	r1, #0
 80079b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e010      	b.n	80079dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	4013      	ands	r3, r2
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	425a      	negs	r2, r3
 80079ca:	4153      	adcs	r3, r2
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	001a      	movs	r2, r3
 80079d0:	1dfb      	adds	r3, r7, #7
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d100      	bne.n	80079da <UART_WaitOnFlagUntilTimeout+0x182>
 80079d8:	e747      	b.n	800786a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	0018      	movs	r0, r3
 80079de:	46bd      	mov	sp, r7
 80079e0:	b014      	add	sp, #80	; 0x50
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	fffffe5f 	.word	0xfffffe5f

080079e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b098      	sub	sp, #96	; 0x60
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	1dbb      	adds	r3, r7, #6
 80079f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	1dba      	adds	r2, r7, #6
 8007a00:	215c      	movs	r1, #92	; 0x5c
 8007a02:	8812      	ldrh	r2, [r2, #0]
 8007a04:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1dba      	adds	r2, r7, #6
 8007a0a:	215e      	movs	r1, #94	; 0x5e
 8007a0c:	8812      	ldrh	r2, [r2, #0]
 8007a0e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	2380      	movs	r3, #128	; 0x80
 8007a1c:	015b      	lsls	r3, r3, #5
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d10d      	bne.n	8007a3e <UART_Start_Receive_IT+0x56>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <UART_Start_Receive_IT+0x4c>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2260      	movs	r2, #96	; 0x60
 8007a2e:	497b      	ldr	r1, [pc, #492]	; (8007c1c <UART_Start_Receive_IT+0x234>)
 8007a30:	5299      	strh	r1, [r3, r2]
 8007a32:	e02e      	b.n	8007a92 <UART_Start_Receive_IT+0xaa>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2260      	movs	r2, #96	; 0x60
 8007a38:	21ff      	movs	r1, #255	; 0xff
 8007a3a:	5299      	strh	r1, [r3, r2]
 8007a3c:	e029      	b.n	8007a92 <UART_Start_Receive_IT+0xaa>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10d      	bne.n	8007a62 <UART_Start_Receive_IT+0x7a>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d104      	bne.n	8007a58 <UART_Start_Receive_IT+0x70>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2260      	movs	r2, #96	; 0x60
 8007a52:	21ff      	movs	r1, #255	; 0xff
 8007a54:	5299      	strh	r1, [r3, r2]
 8007a56:	e01c      	b.n	8007a92 <UART_Start_Receive_IT+0xaa>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2260      	movs	r2, #96	; 0x60
 8007a5c:	217f      	movs	r1, #127	; 0x7f
 8007a5e:	5299      	strh	r1, [r3, r2]
 8007a60:	e017      	b.n	8007a92 <UART_Start_Receive_IT+0xaa>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	2380      	movs	r3, #128	; 0x80
 8007a68:	055b      	lsls	r3, r3, #21
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d10d      	bne.n	8007a8a <UART_Start_Receive_IT+0xa2>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <UART_Start_Receive_IT+0x98>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2260      	movs	r2, #96	; 0x60
 8007a7a:	217f      	movs	r1, #127	; 0x7f
 8007a7c:	5299      	strh	r1, [r3, r2]
 8007a7e:	e008      	b.n	8007a92 <UART_Start_Receive_IT+0xaa>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2260      	movs	r2, #96	; 0x60
 8007a84:	213f      	movs	r1, #63	; 0x3f
 8007a86:	5299      	strh	r1, [r3, r2]
 8007a88:	e003      	b.n	8007a92 <UART_Start_Receive_IT+0xaa>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2260      	movs	r2, #96	; 0x60
 8007a8e:	2100      	movs	r1, #0
 8007a90:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2290      	movs	r2, #144	; 0x90
 8007a96:	2100      	movs	r1, #0
 8007a98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	228c      	movs	r2, #140	; 0x8c
 8007a9e:	2122      	movs	r1, #34	; 0x22
 8007aa0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aac:	2301      	movs	r3, #1
 8007aae:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab2:	f383 8810 	msr	PRIMASK, r3
}
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	609a      	str	r2, [r3, #8]
 8007ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aca:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ace:	f383 8810 	msr	PRIMASK, r3
}
 8007ad2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ad8:	2380      	movs	r3, #128	; 0x80
 8007ada:	059b      	lsls	r3, r3, #22
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d150      	bne.n	8007b82 <UART_Start_Receive_IT+0x19a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2268      	movs	r2, #104	; 0x68
 8007ae4:	5a9b      	ldrh	r3, [r3, r2]
 8007ae6:	1dba      	adds	r2, r7, #6
 8007ae8:	8812      	ldrh	r2, [r2, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d349      	bcc.n	8007b82 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	015b      	lsls	r3, r3, #5
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d107      	bne.n	8007b0a <UART_Start_Receive_IT+0x122>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	4a46      	ldr	r2, [pc, #280]	; (8007c20 <UART_Start_Receive_IT+0x238>)
 8007b06:	675a      	str	r2, [r3, #116]	; 0x74
 8007b08:	e002      	b.n	8007b10 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4a45      	ldr	r2, [pc, #276]	; (8007c24 <UART_Start_Receive_IT+0x23c>)
 8007b0e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d019      	beq.n	8007b4c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b18:	f3ef 8310 	mrs	r3, PRIMASK
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b20:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b22:	2301      	movs	r3, #1
 8007b24:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	f383 8810 	msr	PRIMASK, r3
}
 8007b2c:	46c0      	nop			; (mov r8, r8)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2180      	movs	r1, #128	; 0x80
 8007b3a:	0049      	lsls	r1, r1, #1
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b46:	f383 8810 	msr	PRIMASK, r3
}
 8007b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b54:	657b      	str	r3, [r7, #84]	; 0x54
 8007b56:	2301      	movs	r3, #1
 8007b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	f383 8810 	msr	PRIMASK, r3
}
 8007b60:	46c0      	nop			; (mov r8, r8)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2180      	movs	r1, #128	; 0x80
 8007b6e:	0549      	lsls	r1, r1, #21
 8007b70:	430a      	orrs	r2, r1
 8007b72:	609a      	str	r2, [r3, #8]
 8007b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b76:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	f383 8810 	msr	PRIMASK, r3
}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	e047      	b.n	8007c12 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	2380      	movs	r3, #128	; 0x80
 8007b88:	015b      	lsls	r3, r3, #5
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d107      	bne.n	8007b9e <UART_Start_Receive_IT+0x1b6>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a23      	ldr	r2, [pc, #140]	; (8007c28 <UART_Start_Receive_IT+0x240>)
 8007b9a:	675a      	str	r2, [r3, #116]	; 0x74
 8007b9c:	e002      	b.n	8007ba4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a22      	ldr	r2, [pc, #136]	; (8007c2c <UART_Start_Receive_IT+0x244>)
 8007ba2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d019      	beq.n	8007be0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bb2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	f383 8810 	msr	PRIMASK, r3
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2190      	movs	r1, #144	; 0x90
 8007bce:	0049      	lsls	r1, r1, #1
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	f383 8810 	msr	PRIMASK, r3
}
 8007bde:	e018      	b.n	8007c12 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be0:	f3ef 8310 	mrs	r3, PRIMASK
 8007be4:	613b      	str	r3, [r7, #16]
  return(result);
 8007be6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
 8007bea:	2301      	movs	r3, #1
 8007bec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f383 8810 	msr	PRIMASK, r3
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2120      	movs	r1, #32
 8007c02:	430a      	orrs	r2, r1
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	f383 8810 	msr	PRIMASK, r3
}
 8007c10:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	0018      	movs	r0, r3
 8007c16:	46bd      	mov	sp, r7
 8007c18:	b018      	add	sp, #96	; 0x60
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	000001ff 	.word	0x000001ff
 8007c20:	08008359 	.word	0x08008359
 8007c24:	0800806d 	.word	0x0800806d
 8007c28:	08007ef9 	.word	0x08007ef9
 8007c2c:	08007d85 	.word	0x08007d85

08007c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08e      	sub	sp, #56	; 0x38
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c38:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
 8007c42:	2301      	movs	r3, #1
 8007c44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f383 8810 	msr	PRIMASK, r3
}
 8007c4c:	46c0      	nop			; (mov r8, r8)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4926      	ldr	r1, [pc, #152]	; (8007cf4 <UART_EndRxTransfer+0xc4>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	f383 8810 	msr	PRIMASK, r3
}
 8007c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6e:	623b      	str	r3, [r7, #32]
  return(result);
 8007c70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c72:	633b      	str	r3, [r7, #48]	; 0x30
 8007c74:	2301      	movs	r3, #1
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	f383 8810 	msr	PRIMASK, r3
}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	491b      	ldr	r1, [pc, #108]	; (8007cf8 <UART_EndRxTransfer+0xc8>)
 8007c8c:	400a      	ands	r2, r1
 8007c8e:	609a      	str	r2, [r3, #8]
 8007c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c96:	f383 8810 	msr	PRIMASK, r3
}
 8007c9a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d118      	bne.n	8007cd6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ca8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007caa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cae:	2301      	movs	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f383 8810 	msr	PRIMASK, r3
}
 8007cb8:	46c0      	nop			; (mov r8, r8)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2110      	movs	r1, #16
 8007cc6:	438a      	bics	r2, r1
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f383 8810 	msr	PRIMASK, r3
}
 8007cd4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	228c      	movs	r2, #140	; 0x8c
 8007cda:	2120      	movs	r1, #32
 8007cdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007cea:	46c0      	nop			; (mov r8, r8)
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b00e      	add	sp, #56	; 0x38
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	fffffedf 	.word	0xfffffedf
 8007cf8:	effffffe 	.word	0xeffffffe

08007cfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	225e      	movs	r2, #94	; 0x5e
 8007d0e:	2100      	movs	r1, #0
 8007d10:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2256      	movs	r2, #86	; 0x56
 8007d16:	2100      	movs	r1, #0
 8007d18:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f7ff fa0d 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	46bd      	mov	sp, r7
 8007d26:	b004      	add	sp, #16
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b086      	sub	sp, #24
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d32:	f3ef 8310 	mrs	r3, PRIMASK
 8007d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d38:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f383 8810 	msr	PRIMASK, r3
}
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2140      	movs	r1, #64	; 0x40
 8007d54:	438a      	bics	r2, r1
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f383 8810 	msr	PRIMASK, r3
}
 8007d62:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2288      	movs	r2, #136	; 0x88
 8007d68:	2120      	movs	r1, #32
 8007d6a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7fa fa71 	bl	800225c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b006      	add	sp, #24
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b090      	sub	sp, #64	; 0x40
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d8c:	203e      	movs	r0, #62	; 0x3e
 8007d8e:	183b      	adds	r3, r7, r0
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	2160      	movs	r1, #96	; 0x60
 8007d94:	5a52      	ldrh	r2, [r2, r1]
 8007d96:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	228c      	movs	r2, #140	; 0x8c
 8007d9c:	589b      	ldr	r3, [r3, r2]
 8007d9e:	2b22      	cmp	r3, #34	; 0x22
 8007da0:	d000      	beq.n	8007da4 <UART_RxISR_8BIT+0x20>
 8007da2:	e09a      	b.n	8007eda <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007daa:	213c      	movs	r1, #60	; 0x3c
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007db0:	187b      	adds	r3, r7, r1
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	183b      	adds	r3, r7, r0
 8007db8:	881b      	ldrh	r3, [r3, #0]
 8007dba:	b2d9      	uxtb	r1, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc0:	400a      	ands	r2, r1
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	225e      	movs	r2, #94	; 0x5e
 8007dd4:	5a9b      	ldrh	r3, [r3, r2]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b299      	uxth	r1, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	225e      	movs	r2, #94	; 0x5e
 8007de0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	225e      	movs	r2, #94	; 0x5e
 8007de6:	5a9b      	ldrh	r3, [r3, r2]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d000      	beq.n	8007df0 <UART_RxISR_8BIT+0x6c>
 8007dee:	e07c      	b.n	8007eea <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007df0:	f3ef 8310 	mrs	r3, PRIMASK
 8007df4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007df6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f383 8810 	msr	PRIMASK, r3
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4938      	ldr	r1, [pc, #224]	; (8007ef4 <UART_RxISR_8BIT+0x170>)
 8007e12:	400a      	ands	r2, r1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	f383 8810 	msr	PRIMASK, r3
}
 8007e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e22:	f3ef 8310 	mrs	r3, PRIMASK
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2101      	movs	r1, #1
 8007e44:	438a      	bics	r2, r1
 8007e46:	609a      	str	r2, [r3, #8]
 8007e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	f383 8810 	msr	PRIMASK, r3
}
 8007e52:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	228c      	movs	r2, #140	; 0x8c
 8007e58:	2120      	movs	r1, #32
 8007e5a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d12f      	bne.n	8007ed0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e76:	f3ef 8310 	mrs	r3, PRIMASK
 8007e7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e7c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e80:	2301      	movs	r3, #1
 8007e82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f383 8810 	msr	PRIMASK, r3
}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2110      	movs	r1, #16
 8007e98:	438a      	bics	r2, r1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	f383 8810 	msr	PRIMASK, r3
}
 8007ea6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	2210      	movs	r2, #16
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	2b10      	cmp	r3, #16
 8007eb4:	d103      	bne.n	8007ebe <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2210      	movs	r2, #16
 8007ebc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	225c      	movs	r2, #92	; 0x5c
 8007ec2:	5a9a      	ldrh	r2, [r3, r2]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	0011      	movs	r1, r2
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f7ff f93f 	bl	800714c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ece:	e00c      	b.n	8007eea <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	f7fa f9ca 	bl	800226c <HAL_UART_RxCpltCallback>
}
 8007ed8:	e007      	b.n	8007eea <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	619a      	str	r2, [r3, #24]
}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b010      	add	sp, #64	; 0x40
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	fffffedf 	.word	0xfffffedf

08007ef8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b090      	sub	sp, #64	; 0x40
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f00:	203e      	movs	r0, #62	; 0x3e
 8007f02:	183b      	adds	r3, r7, r0
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	2160      	movs	r1, #96	; 0x60
 8007f08:	5a52      	ldrh	r2, [r2, r1]
 8007f0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	228c      	movs	r2, #140	; 0x8c
 8007f10:	589b      	ldr	r3, [r3, r2]
 8007f12:	2b22      	cmp	r3, #34	; 0x22
 8007f14:	d000      	beq.n	8007f18 <UART_RxISR_16BIT+0x20>
 8007f16:	e09a      	b.n	800804e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f1e:	213c      	movs	r1, #60	; 0x3c
 8007f20:	187b      	adds	r3, r7, r1
 8007f22:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f28:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f2a:	187b      	adds	r3, r7, r1
 8007f2c:	183a      	adds	r2, r7, r0
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	8812      	ldrh	r2, [r2, #0]
 8007f32:	4013      	ands	r3, r2
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f3e:	1c9a      	adds	r2, r3, #2
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	225e      	movs	r2, #94	; 0x5e
 8007f48:	5a9b      	ldrh	r3, [r3, r2]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b299      	uxth	r1, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	225e      	movs	r2, #94	; 0x5e
 8007f54:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	225e      	movs	r2, #94	; 0x5e
 8007f5a:	5a9b      	ldrh	r3, [r3, r2]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d000      	beq.n	8007f64 <UART_RxISR_16BIT+0x6c>
 8007f62:	e07c      	b.n	800805e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f64:	f3ef 8310 	mrs	r3, PRIMASK
 8007f68:	617b      	str	r3, [r7, #20]
  return(result);
 8007f6a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6e:	2301      	movs	r3, #1
 8007f70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f383 8810 	msr	PRIMASK, r3
}
 8007f78:	46c0      	nop			; (mov r8, r8)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4938      	ldr	r1, [pc, #224]	; (8008068 <UART_RxISR_16BIT+0x170>)
 8007f86:	400a      	ands	r2, r1
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f383 8810 	msr	PRIMASK, r3
}
 8007f94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f96:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9a:	623b      	str	r3, [r7, #32]
  return(result);
 8007f9c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	f383 8810 	msr	PRIMASK, r3
}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	438a      	bics	r2, r1
 8007fba:	609a      	str	r2, [r3, #8]
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	f383 8810 	msr	PRIMASK, r3
}
 8007fc6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	228c      	movs	r2, #140	; 0x8c
 8007fcc:	2120      	movs	r1, #32
 8007fce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d12f      	bne.n	8008044 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fea:	f3ef 8310 	mrs	r3, PRIMASK
 8007fee:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ff0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f383 8810 	msr	PRIMASK, r3
}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2110      	movs	r1, #16
 800800c:	438a      	bics	r2, r1
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f383 8810 	msr	PRIMASK, r3
}
 800801a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69db      	ldr	r3, [r3, #28]
 8008022:	2210      	movs	r2, #16
 8008024:	4013      	ands	r3, r2
 8008026:	2b10      	cmp	r3, #16
 8008028:	d103      	bne.n	8008032 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2210      	movs	r2, #16
 8008030:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	225c      	movs	r2, #92	; 0x5c
 8008036:	5a9a      	ldrh	r2, [r3, r2]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	0011      	movs	r1, r2
 800803c:	0018      	movs	r0, r3
 800803e:	f7ff f885 	bl	800714c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008042:	e00c      	b.n	800805e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	0018      	movs	r0, r3
 8008048:	f7fa f910 	bl	800226c <HAL_UART_RxCpltCallback>
}
 800804c:	e007      	b.n	800805e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	699a      	ldr	r2, [r3, #24]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2108      	movs	r1, #8
 800805a:	430a      	orrs	r2, r1
 800805c:	619a      	str	r2, [r3, #24]
}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	46bd      	mov	sp, r7
 8008062:	b010      	add	sp, #64	; 0x40
 8008064:	bd80      	pop	{r7, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	fffffedf 	.word	0xfffffedf

0800806c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b09c      	sub	sp, #112	; 0x70
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008074:	236a      	movs	r3, #106	; 0x6a
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	2160      	movs	r1, #96	; 0x60
 800807c:	5a52      	ldrh	r2, [r2, r1]
 800807e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	228c      	movs	r2, #140	; 0x8c
 800809c:	589b      	ldr	r3, [r3, r2]
 800809e:	2b22      	cmp	r3, #34	; 0x22
 80080a0:	d000      	beq.n	80080a4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80080a2:	e144      	b.n	800832e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80080a4:	235e      	movs	r3, #94	; 0x5e
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	2168      	movs	r1, #104	; 0x68
 80080ac:	5a52      	ldrh	r2, [r2, r1]
 80080ae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080b0:	e0eb      	b.n	800828a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080b8:	215c      	movs	r1, #92	; 0x5c
 80080ba:	187b      	adds	r3, r7, r1
 80080bc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080be:	187b      	adds	r3, r7, r1
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	236a      	movs	r3, #106	; 0x6a
 80080c6:	18fb      	adds	r3, r7, r3
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	b2d9      	uxtb	r1, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d0:	400a      	ands	r2, r1
 80080d2:	b2d2      	uxtb	r2, r2
 80080d4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	225e      	movs	r2, #94	; 0x5e
 80080e4:	5a9b      	ldrh	r3, [r3, r2]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b299      	uxth	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	225e      	movs	r2, #94	; 0x5e
 80080f0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69db      	ldr	r3, [r3, #28]
 80080f8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80080fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fc:	2207      	movs	r2, #7
 80080fe:	4013      	ands	r3, r2
 8008100:	d049      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008104:	2201      	movs	r2, #1
 8008106:	4013      	ands	r3, r2
 8008108:	d010      	beq.n	800812c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800810a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800810c:	2380      	movs	r3, #128	; 0x80
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	4013      	ands	r3, r2
 8008112:	d00b      	beq.n	800812c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2201      	movs	r2, #1
 800811a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2290      	movs	r2, #144	; 0x90
 8008120:	589b      	ldr	r3, [r3, r2]
 8008122:	2201      	movs	r2, #1
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2190      	movs	r1, #144	; 0x90
 800812a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800812c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812e:	2202      	movs	r2, #2
 8008130:	4013      	ands	r3, r2
 8008132:	d00f      	beq.n	8008154 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8008134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008136:	2201      	movs	r2, #1
 8008138:	4013      	ands	r3, r2
 800813a:	d00b      	beq.n	8008154 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2202      	movs	r2, #2
 8008142:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2290      	movs	r2, #144	; 0x90
 8008148:	589b      	ldr	r3, [r3, r2]
 800814a:	2204      	movs	r2, #4
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2190      	movs	r1, #144	; 0x90
 8008152:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008156:	2204      	movs	r2, #4
 8008158:	4013      	ands	r3, r2
 800815a:	d00f      	beq.n	800817c <UART_RxISR_8BIT_FIFOEN+0x110>
 800815c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800815e:	2201      	movs	r2, #1
 8008160:	4013      	ands	r3, r2
 8008162:	d00b      	beq.n	800817c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2204      	movs	r2, #4
 800816a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2290      	movs	r2, #144	; 0x90
 8008170:	589b      	ldr	r3, [r3, r2]
 8008172:	2202      	movs	r2, #2
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2190      	movs	r1, #144	; 0x90
 800817a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2290      	movs	r2, #144	; 0x90
 8008180:	589b      	ldr	r3, [r3, r2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d007      	beq.n	8008196 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0018      	movs	r0, r3
 800818a:	f7fe ffd7 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2290      	movs	r2, #144	; 0x90
 8008192:	2100      	movs	r1, #0
 8008194:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	225e      	movs	r2, #94	; 0x5e
 800819a:	5a9b      	ldrh	r3, [r3, r2]
 800819c:	b29b      	uxth	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d173      	bne.n	800828a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081a2:	f3ef 8310 	mrs	r3, PRIMASK
 80081a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ac:	2301      	movs	r3, #1
 80081ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	f383 8810 	msr	PRIMASK, r3
}
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4961      	ldr	r1, [pc, #388]	; (8008348 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80081c4:	400a      	ands	r2, r1
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	f383 8810 	msr	PRIMASK, r3
}
 80081d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d4:	f3ef 8310 	mrs	r3, PRIMASK
 80081d8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081dc:	657b      	str	r3, [r7, #84]	; 0x54
 80081de:	2301      	movs	r3, #1
 80081e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e4:	f383 8810 	msr	PRIMASK, r3
}
 80081e8:	46c0      	nop			; (mov r8, r8)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4955      	ldr	r1, [pc, #340]	; (800834c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80081f6:	400a      	ands	r2, r1
 80081f8:	609a      	str	r2, [r3, #8]
 80081fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008200:	f383 8810 	msr	PRIMASK, r3
}
 8008204:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	228c      	movs	r2, #140	; 0x8c
 800820a:	2120      	movs	r1, #32
 800820c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800821e:	2b01      	cmp	r3, #1
 8008220:	d12f      	bne.n	8008282 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008228:	f3ef 8310 	mrs	r3, PRIMASK
 800822c:	623b      	str	r3, [r7, #32]
  return(result);
 800822e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008230:	653b      	str	r3, [r7, #80]	; 0x50
 8008232:	2301      	movs	r3, #1
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	f383 8810 	msr	PRIMASK, r3
}
 800823c:	46c0      	nop			; (mov r8, r8)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2110      	movs	r1, #16
 800824a:	438a      	bics	r2, r1
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008250:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	f383 8810 	msr	PRIMASK, r3
}
 8008258:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2210      	movs	r2, #16
 8008262:	4013      	ands	r3, r2
 8008264:	2b10      	cmp	r3, #16
 8008266:	d103      	bne.n	8008270 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2210      	movs	r2, #16
 800826e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	225c      	movs	r2, #92	; 0x5c
 8008274:	5a9a      	ldrh	r2, [r3, r2]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	0011      	movs	r1, r2
 800827a:	0018      	movs	r0, r3
 800827c:	f7fe ff66 	bl	800714c <HAL_UARTEx_RxEventCallback>
 8008280:	e003      	b.n	800828a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0018      	movs	r0, r3
 8008286:	f7f9 fff1 	bl	800226c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800828a:	235e      	movs	r3, #94	; 0x5e
 800828c:	18fb      	adds	r3, r7, r3
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <UART_RxISR_8BIT_FIFOEN+0x232>
 8008294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008296:	2220      	movs	r2, #32
 8008298:	4013      	ands	r3, r2
 800829a:	d000      	beq.n	800829e <UART_RxISR_8BIT_FIFOEN+0x232>
 800829c:	e709      	b.n	80080b2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800829e:	204e      	movs	r0, #78	; 0x4e
 80082a0:	183b      	adds	r3, r7, r0
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	215e      	movs	r1, #94	; 0x5e
 80082a6:	5a52      	ldrh	r2, [r2, r1]
 80082a8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082aa:	0001      	movs	r1, r0
 80082ac:	187b      	adds	r3, r7, r1
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d044      	beq.n	800833e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2268      	movs	r2, #104	; 0x68
 80082b8:	5a9b      	ldrh	r3, [r3, r2]
 80082ba:	187a      	adds	r2, r7, r1
 80082bc:	8812      	ldrh	r2, [r2, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d23d      	bcs.n	800833e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082c2:	f3ef 8310 	mrs	r3, PRIMASK
 80082c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80082c8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80082cc:	2301      	movs	r3, #1
 80082ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f383 8810 	msr	PRIMASK, r3
}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689a      	ldr	r2, [r3, #8]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	491b      	ldr	r1, [pc, #108]	; (8008350 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80082e4:	400a      	ands	r2, r1
 80082e6:	609a      	str	r2, [r3, #8]
 80082e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f383 8810 	msr	PRIMASK, r3
}
 80082f2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a17      	ldr	r2, [pc, #92]	; (8008354 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80082f8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082fa:	f3ef 8310 	mrs	r3, PRIMASK
 80082fe:	617b      	str	r3, [r7, #20]
  return(result);
 8008300:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008302:	647b      	str	r3, [r7, #68]	; 0x44
 8008304:	2301      	movs	r3, #1
 8008306:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f383 8810 	msr	PRIMASK, r3
}
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2120      	movs	r1, #32
 800831c:	430a      	orrs	r2, r1
 800831e:	601a      	str	r2, [r3, #0]
 8008320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008322:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	f383 8810 	msr	PRIMASK, r3
}
 800832a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800832c:	e007      	b.n	800833e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	699a      	ldr	r2, [r3, #24]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2108      	movs	r1, #8
 800833a:	430a      	orrs	r2, r1
 800833c:	619a      	str	r2, [r3, #24]
}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	46bd      	mov	sp, r7
 8008342:	b01c      	add	sp, #112	; 0x70
 8008344:	bd80      	pop	{r7, pc}
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	fffffeff 	.word	0xfffffeff
 800834c:	effffffe 	.word	0xeffffffe
 8008350:	efffffff 	.word	0xefffffff
 8008354:	08007d85 	.word	0x08007d85

08008358 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b09e      	sub	sp, #120	; 0x78
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008360:	2372      	movs	r3, #114	; 0x72
 8008362:	18fb      	adds	r3, r7, r3
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	2160      	movs	r1, #96	; 0x60
 8008368:	5a52      	ldrh	r2, [r2, r1]
 800836a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	228c      	movs	r2, #140	; 0x8c
 8008388:	589b      	ldr	r3, [r3, r2]
 800838a:	2b22      	cmp	r3, #34	; 0x22
 800838c:	d000      	beq.n	8008390 <UART_RxISR_16BIT_FIFOEN+0x38>
 800838e:	e144      	b.n	800861a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008390:	2366      	movs	r3, #102	; 0x66
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	2168      	movs	r1, #104	; 0x68
 8008398:	5a52      	ldrh	r2, [r2, r1]
 800839a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800839c:	e0eb      	b.n	8008576 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083a4:	2164      	movs	r1, #100	; 0x64
 80083a6:	187b      	adds	r3, r7, r1
 80083a8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80083b0:	187b      	adds	r3, r7, r1
 80083b2:	2272      	movs	r2, #114	; 0x72
 80083b4:	18ba      	adds	r2, r7, r2
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	8812      	ldrh	r2, [r2, #0]
 80083ba:	4013      	ands	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c6:	1c9a      	adds	r2, r3, #2
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	225e      	movs	r2, #94	; 0x5e
 80083d0:	5a9b      	ldrh	r3, [r3, r2]
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b299      	uxth	r1, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	225e      	movs	r2, #94	; 0x5e
 80083dc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80083e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e8:	2207      	movs	r2, #7
 80083ea:	4013      	ands	r3, r2
 80083ec:	d049      	beq.n	8008482 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083f0:	2201      	movs	r2, #1
 80083f2:	4013      	ands	r3, r2
 80083f4:	d010      	beq.n	8008418 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80083f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083f8:	2380      	movs	r3, #128	; 0x80
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	4013      	ands	r3, r2
 80083fe:	d00b      	beq.n	8008418 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2201      	movs	r2, #1
 8008406:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2290      	movs	r2, #144	; 0x90
 800840c:	589b      	ldr	r3, [r3, r2]
 800840e:	2201      	movs	r2, #1
 8008410:	431a      	orrs	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2190      	movs	r1, #144	; 0x90
 8008416:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800841a:	2202      	movs	r2, #2
 800841c:	4013      	ands	r3, r2
 800841e:	d00f      	beq.n	8008440 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8008420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008422:	2201      	movs	r2, #1
 8008424:	4013      	ands	r3, r2
 8008426:	d00b      	beq.n	8008440 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2202      	movs	r2, #2
 800842e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2290      	movs	r2, #144	; 0x90
 8008434:	589b      	ldr	r3, [r3, r2]
 8008436:	2204      	movs	r2, #4
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2190      	movs	r1, #144	; 0x90
 800843e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008442:	2204      	movs	r2, #4
 8008444:	4013      	ands	r3, r2
 8008446:	d00f      	beq.n	8008468 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800844a:	2201      	movs	r2, #1
 800844c:	4013      	ands	r3, r2
 800844e:	d00b      	beq.n	8008468 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2204      	movs	r2, #4
 8008456:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2290      	movs	r2, #144	; 0x90
 800845c:	589b      	ldr	r3, [r3, r2]
 800845e:	2202      	movs	r2, #2
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2190      	movs	r1, #144	; 0x90
 8008466:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2290      	movs	r2, #144	; 0x90
 800846c:	589b      	ldr	r3, [r3, r2]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d007      	beq.n	8008482 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	0018      	movs	r0, r3
 8008476:	f7fe fe61 	bl	800713c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2290      	movs	r2, #144	; 0x90
 800847e:	2100      	movs	r1, #0
 8008480:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	225e      	movs	r2, #94	; 0x5e
 8008486:	5a9b      	ldrh	r3, [r3, r2]
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d173      	bne.n	8008576 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800848e:	f3ef 8310 	mrs	r3, PRIMASK
 8008492:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008496:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008498:	2301      	movs	r3, #1
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800849c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849e:	f383 8810 	msr	PRIMASK, r3
}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4961      	ldr	r1, [pc, #388]	; (8008634 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80084b0:	400a      	ands	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	f383 8810 	msr	PRIMASK, r3
}
 80084be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c0:	f3ef 8310 	mrs	r3, PRIMASK
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80084c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80084ca:	2301      	movs	r3, #1
 80084cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084d0:	f383 8810 	msr	PRIMASK, r3
}
 80084d4:	46c0      	nop			; (mov r8, r8)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4955      	ldr	r1, [pc, #340]	; (8008638 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80084e2:	400a      	ands	r2, r1
 80084e4:	609a      	str	r2, [r3, #8]
 80084e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ec:	f383 8810 	msr	PRIMASK, r3
}
 80084f0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	228c      	movs	r2, #140	; 0x8c
 80084f6:	2120      	movs	r1, #32
 80084f8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850a:	2b01      	cmp	r3, #1
 800850c:	d12f      	bne.n	800856e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008514:	f3ef 8310 	mrs	r3, PRIMASK
 8008518:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851c:	657b      	str	r3, [r7, #84]	; 0x54
 800851e:	2301      	movs	r3, #1
 8008520:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	f383 8810 	msr	PRIMASK, r3
}
 8008528:	46c0      	nop			; (mov r8, r8)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2110      	movs	r1, #16
 8008536:	438a      	bics	r2, r1
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	f383 8810 	msr	PRIMASK, r3
}
 8008544:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	2210      	movs	r2, #16
 800854e:	4013      	ands	r3, r2
 8008550:	2b10      	cmp	r3, #16
 8008552:	d103      	bne.n	800855c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2210      	movs	r2, #16
 800855a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	225c      	movs	r2, #92	; 0x5c
 8008560:	5a9a      	ldrh	r2, [r3, r2]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	0011      	movs	r1, r2
 8008566:	0018      	movs	r0, r3
 8008568:	f7fe fdf0 	bl	800714c <HAL_UARTEx_RxEventCallback>
 800856c:	e003      	b.n	8008576 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	0018      	movs	r0, r3
 8008572:	f7f9 fe7b 	bl	800226c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008576:	2366      	movs	r3, #102	; 0x66
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d004      	beq.n	800858a <UART_RxISR_16BIT_FIFOEN+0x232>
 8008580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008582:	2220      	movs	r2, #32
 8008584:	4013      	ands	r3, r2
 8008586:	d000      	beq.n	800858a <UART_RxISR_16BIT_FIFOEN+0x232>
 8008588:	e709      	b.n	800839e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800858a:	2052      	movs	r0, #82	; 0x52
 800858c:	183b      	adds	r3, r7, r0
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	215e      	movs	r1, #94	; 0x5e
 8008592:	5a52      	ldrh	r2, [r2, r1]
 8008594:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008596:	0001      	movs	r1, r0
 8008598:	187b      	adds	r3, r7, r1
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d044      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2268      	movs	r2, #104	; 0x68
 80085a4:	5a9b      	ldrh	r3, [r3, r2]
 80085a6:	187a      	adds	r2, r7, r1
 80085a8:	8812      	ldrh	r2, [r2, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d23d      	bcs.n	800862a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ae:	f3ef 8310 	mrs	r3, PRIMASK
 80085b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80085b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085b8:	2301      	movs	r3, #1
 80085ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f383 8810 	msr	PRIMASK, r3
}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	491b      	ldr	r1, [pc, #108]	; (800863c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80085d0:	400a      	ands	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f383 8810 	msr	PRIMASK, r3
}
 80085de:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80085e4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80085ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80085f0:	2301      	movs	r3, #1
 80085f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f383 8810 	msr	PRIMASK, r3
}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2120      	movs	r1, #32
 8008608:	430a      	orrs	r2, r1
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	f383 8810 	msr	PRIMASK, r3
}
 8008616:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008618:	e007      	b.n	800862a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2108      	movs	r1, #8
 8008626:	430a      	orrs	r2, r1
 8008628:	619a      	str	r2, [r3, #24]
}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	46bd      	mov	sp, r7
 800862e:	b01e      	add	sp, #120	; 0x78
 8008630:	bd80      	pop	{r7, pc}
 8008632:	46c0      	nop			; (mov r8, r8)
 8008634:	fffffeff 	.word	0xfffffeff
 8008638:	effffffe 	.word	0xeffffffe
 800863c:	efffffff 	.word	0xefffffff
 8008640:	08007ef9 	.word	0x08007ef9

08008644 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800864c:	46c0      	nop			; (mov r8, r8)
 800864e:	46bd      	mov	sp, r7
 8008650:	b002      	add	sp, #8
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800865c:	46c0      	nop			; (mov r8, r8)
 800865e:	46bd      	mov	sp, r7
 8008660:	b002      	add	sp, #8
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800866c:	46c0      	nop			; (mov r8, r8)
 800866e:	46bd      	mov	sp, r7
 8008670:	b002      	add	sp, #8
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2284      	movs	r2, #132	; 0x84
 8008680:	5c9b      	ldrb	r3, [r3, r2]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_UARTEx_DisableFifoMode+0x16>
 8008686:	2302      	movs	r3, #2
 8008688:	e027      	b.n	80086da <HAL_UARTEx_DisableFifoMode+0x66>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2284      	movs	r2, #132	; 0x84
 800868e:	2101      	movs	r1, #1
 8008690:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2288      	movs	r2, #136	; 0x88
 8008696:	2124      	movs	r1, #36	; 0x24
 8008698:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2101      	movs	r1, #1
 80086ae:	438a      	bics	r2, r1
 80086b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4a0b      	ldr	r2, [pc, #44]	; (80086e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80086b6:	4013      	ands	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2288      	movs	r2, #136	; 0x88
 80086cc:	2120      	movs	r1, #32
 80086ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2284      	movs	r2, #132	; 0x84
 80086d4:	2100      	movs	r1, #0
 80086d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	0018      	movs	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	b004      	add	sp, #16
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	dfffffff 	.word	0xdfffffff

080086e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2284      	movs	r2, #132	; 0x84
 80086f6:	5c9b      	ldrb	r3, [r3, r2]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d101      	bne.n	8008700 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e02e      	b.n	800875e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2284      	movs	r2, #132	; 0x84
 8008704:	2101      	movs	r1, #1
 8008706:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2288      	movs	r2, #136	; 0x88
 800870c:	2124      	movs	r1, #36	; 0x24
 800870e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2101      	movs	r1, #1
 8008724:	438a      	bics	r2, r1
 8008726:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	08d9      	lsrs	r1, r3, #3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	430a      	orrs	r2, r1
 800873a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	0018      	movs	r0, r3
 8008740:	f000 f854 	bl	80087ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2288      	movs	r2, #136	; 0x88
 8008750:	2120      	movs	r1, #32
 8008752:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2284      	movs	r2, #132	; 0x84
 8008758:	2100      	movs	r1, #0
 800875a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	0018      	movs	r0, r3
 8008760:	46bd      	mov	sp, r7
 8008762:	b004      	add	sp, #16
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2284      	movs	r2, #132	; 0x84
 8008776:	5c9b      	ldrb	r3, [r3, r2]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800877c:	2302      	movs	r3, #2
 800877e:	e02f      	b.n	80087e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2284      	movs	r2, #132	; 0x84
 8008784:	2101      	movs	r1, #1
 8008786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2288      	movs	r2, #136	; 0x88
 800878c:	2124      	movs	r1, #36	; 0x24
 800878e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2101      	movs	r1, #1
 80087a4:	438a      	bics	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	4a0e      	ldr	r2, [pc, #56]	; (80087e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80087b0:	4013      	ands	r3, r2
 80087b2:	0019      	movs	r1, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	0018      	movs	r0, r3
 80087c2:	f000 f813 	bl	80087ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2288      	movs	r2, #136	; 0x88
 80087d2:	2120      	movs	r1, #32
 80087d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2284      	movs	r2, #132	; 0x84
 80087da:	2100      	movs	r1, #0
 80087dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	0018      	movs	r0, r3
 80087e2:	46bd      	mov	sp, r7
 80087e4:	b004      	add	sp, #16
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	f1ffffff 	.word	0xf1ffffff

080087ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	226a      	movs	r2, #106	; 0x6a
 8008800:	2101      	movs	r1, #1
 8008802:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2268      	movs	r2, #104	; 0x68
 8008808:	2101      	movs	r1, #1
 800880a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800880c:	e043      	b.n	8008896 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800880e:	260f      	movs	r6, #15
 8008810:	19bb      	adds	r3, r7, r6
 8008812:	2208      	movs	r2, #8
 8008814:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008816:	200e      	movs	r0, #14
 8008818:	183b      	adds	r3, r7, r0
 800881a:	2208      	movs	r2, #8
 800881c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	0e5b      	lsrs	r3, r3, #25
 8008826:	b2da      	uxtb	r2, r3
 8008828:	240d      	movs	r4, #13
 800882a:	193b      	adds	r3, r7, r4
 800882c:	2107      	movs	r1, #7
 800882e:	400a      	ands	r2, r1
 8008830:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	0f5b      	lsrs	r3, r3, #29
 800883a:	b2da      	uxtb	r2, r3
 800883c:	250c      	movs	r5, #12
 800883e:	197b      	adds	r3, r7, r5
 8008840:	2107      	movs	r1, #7
 8008842:	400a      	ands	r2, r1
 8008844:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008846:	183b      	adds	r3, r7, r0
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	197a      	adds	r2, r7, r5
 800884c:	7812      	ldrb	r2, [r2, #0]
 800884e:	4914      	ldr	r1, [pc, #80]	; (80088a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008850:	5c8a      	ldrb	r2, [r1, r2]
 8008852:	435a      	muls	r2, r3
 8008854:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008856:	197b      	adds	r3, r7, r5
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	4a12      	ldr	r2, [pc, #72]	; (80088a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800885c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800885e:	0019      	movs	r1, r3
 8008860:	f7f7 fcda 	bl	8000218 <__divsi3>
 8008864:	0003      	movs	r3, r0
 8008866:	b299      	uxth	r1, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	226a      	movs	r2, #106	; 0x6a
 800886c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800886e:	19bb      	adds	r3, r7, r6
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	193a      	adds	r2, r7, r4
 8008874:	7812      	ldrb	r2, [r2, #0]
 8008876:	490a      	ldr	r1, [pc, #40]	; (80088a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8008878:	5c8a      	ldrb	r2, [r1, r2]
 800887a:	435a      	muls	r2, r3
 800887c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800887e:	193b      	adds	r3, r7, r4
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	4a08      	ldr	r2, [pc, #32]	; (80088a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8008884:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008886:	0019      	movs	r1, r3
 8008888:	f7f7 fcc6 	bl	8000218 <__divsi3>
 800888c:	0003      	movs	r3, r0
 800888e:	b299      	uxth	r1, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2268      	movs	r2, #104	; 0x68
 8008894:	5299      	strh	r1, [r3, r2]
}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	46bd      	mov	sp, r7
 800889a:	b005      	add	sp, #20
 800889c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	08008a64 	.word	0x08008a64
 80088a4:	08008a6c 	.word	0x08008a6c

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	2600      	movs	r6, #0
 80088ac:	4d0c      	ldr	r5, [pc, #48]	; (80088e0 <__libc_init_array+0x38>)
 80088ae:	4c0d      	ldr	r4, [pc, #52]	; (80088e4 <__libc_init_array+0x3c>)
 80088b0:	1b64      	subs	r4, r4, r5
 80088b2:	10a4      	asrs	r4, r4, #2
 80088b4:	42a6      	cmp	r6, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	2600      	movs	r6, #0
 80088ba:	f000 f821 	bl	8008900 <_init>
 80088be:	4d0a      	ldr	r5, [pc, #40]	; (80088e8 <__libc_init_array+0x40>)
 80088c0:	4c0a      	ldr	r4, [pc, #40]	; (80088ec <__libc_init_array+0x44>)
 80088c2:	1b64      	subs	r4, r4, r5
 80088c4:	10a4      	asrs	r4, r4, #2
 80088c6:	42a6      	cmp	r6, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	00b3      	lsls	r3, r6, #2
 80088ce:	58eb      	ldr	r3, [r5, r3]
 80088d0:	4798      	blx	r3
 80088d2:	3601      	adds	r6, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	00b3      	lsls	r3, r6, #2
 80088d8:	58eb      	ldr	r3, [r5, r3]
 80088da:	4798      	blx	r3
 80088dc:	3601      	adds	r6, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	08008a7c 	.word	0x08008a7c
 80088e4:	08008a7c 	.word	0x08008a7c
 80088e8:	08008a7c 	.word	0x08008a7c
 80088ec:	08008a80 	.word	0x08008a80

080088f0 <memset>:
 80088f0:	0003      	movs	r3, r0
 80088f2:	1882      	adds	r2, r0, r2
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d100      	bne.n	80088fa <memset+0xa>
 80088f8:	4770      	bx	lr
 80088fa:	7019      	strb	r1, [r3, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	e7f9      	b.n	80088f4 <memset+0x4>

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	46c0      	nop			; (mov r8, r8)
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	46c0      	nop			; (mov r8, r8)
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr
